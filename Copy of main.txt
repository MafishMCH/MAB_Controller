
#include <DAVE.h>
#include <math.h>
#include "variables.h"

int XMC_Init();
void XMC_Check();
void wyslij();
void interpreter_wiadomosci();

int init = 0;
int16_t iq = 400;


int main(void)
{
  DAVE_STATUS_t status;
  status = DAVE_Init();

  Init();
  delay(500);
  XMC_Check();
  XMC_Init();
  XMC_Check();

  while(1)
  {
	  txData[0] = stanowisko.adresy[0];
	  txData[1] = stanowisko.adresy[0];
	  txData[2] =iq >> 8;
	  txData[3] = iq;
	  wyslij();
	  delay(500);
	  txData[0] = stanowisko.adresy[1];
	  txData[1] = stanowisko.adresy[1];
	  txData[2] = -iq >> 8;
	  txData[3] = -iq;
	  wyslij();
	  delay(500);
	  delay(10000);
  }
}
void wyslij()
{
	UART_Transmit(&RS, txData, sizeof(txData));
	while(UART_IsTxBusy(&RS));
	UART_Receive(&RS, rxData, 10);

}
int XMC_Init()
{
	init = 1;
	txData[0] = 0x10;
	txData[1] = 0xA1;
	UART_Transmit(&RS, txData, 10);
	for(int i = 0; i < 10000;i++);
	txData[0] = 0x11;
	UART_Transmit(&RS, txData, 10);
	for(int i = 0; i < 10000;i++);
	return 0;
}
void XMC_Check()
{
	for(uint8_t i = 0; i < 8; i++)
	{
		DIGITAL_IO_SetOutputHigh(&LED1);
		txData[0] = 0x10 + i;
		txData[1] = 0xA3;
		wyslij();
		delay(300);
		DIGITAL_IO_SetOutputLow((&LED1));
	}
}
void eorx()
{
	interpreter_wiadomosci();
}
void eotx()
{

}
void interpreter_wiadomosci()
{
	for(uint8_t i = 0; i < 10;i++)
	{
		if(rxData[i] == adress && rxData[i+1] == adress)
		{
			uint8_t sender = rxData[i+2];		//TODO: Wybieranie odpowiednego silnika z odpowiedniej nogi :: przerobbic ify na funkcje do ktÃ³rych wrzucamy struct Noga, reszta moze bez zmian zostac wtedy.
			if(rxData[i+3] == 0xA3)
			{
				for(uint8_t j = 0 ; j < 2; j++)
							if(sender == stanowisko.adresy[j]  )
							{
									stanowisko.silnik_start[j] = rxData[i+4];
									stanowisko.silnik_numer[j] = rxData[i+5];
							}
			}
			for(uint8_t j = 0 ; j < 2; j++)
						if(sender == stanowisko.adresy[j]  )
						{
								stanowisko.i_net[j] =  rxData[i+3] << 8 | rxData[i+4];
								stanowisko.kat_abs_poprzedni[j] = stanowisko.kat_abs[i];
								stanowisko.kat_abs[j] = rxData[i+5] <<24 |  rxData[i+6] << 16 |  rxData[i+7] << 8 | rxData[i+8];
						}
		}
	}
}

