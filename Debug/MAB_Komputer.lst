
MAB_Komputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bf4  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08005bf4  0c005bf4  0000dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  3 .data         00000118  20000000  0c005bfc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000000b8  20000118  0c005d14  00010118  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  6 .debug_aranges 00000d40  00000000  00000000  00010118  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000113e8  00000000  00000000  00010e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002af7  00000000  00000000  00022240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005db5  00000000  00000000  00024d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003b6c  00000000  00000000  0002aaec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00008329  00000000  00000000  0002e658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006f89  00000000  00000000  00036981  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b58  00000000  00000000  0003d90a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000b79  00000000  00000000  0003e462  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 d1 32 00 08 b1 02 00 08     .........2......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 dd 21 00 08     .............!..
 80001ac:	cd 21 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .!..............
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c005bfc 	.word	0x0c005bfc
 800024c:	20000000 	.word	0x20000000
 8000250:	00000118 	.word	0x00000118
 8000254:	0c005d14 	.word	0x0c005d14
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c005bfc 	.word	0x0c005bfc
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c005bfc 	.word	0x0c005bfc
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000118 	.word	0x20000118
 800027c:	000000b8 	.word	0x000000b8
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08005721 	.word	0x08005721
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080032e9 	.word	0x080032e9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 fc1b 	bl	8002b00 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 fc83 	bl	8002bd4 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 fc62 	bl	8002bc0 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <XMC_GPIO_Init+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <XMC_GPIO_Init+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e03c      	b.n	80004a0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	409a      	lsls	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3210      	adds	r2, #16
 8000446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4619      	mov	r1, r3
 8000454:	2307      	movs	r3, #7
 8000456:	408b      	lsls	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	ea02 0103 	and.w	r1, r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f100 0210 	add.w	r2, r0, #16
 8000464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3210      	adds	r2, #16
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a1b      	ldrb	r3, [r3, #8]
 8000484:	4619      	mov	r1, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	ea42 0103 	orr.w	r1, r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f100 0210 	add.w	r2, r0, #16
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3204      	adds	r2, #4
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	ea42 0103 	orr.w	r1, r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1d02      	adds	r2, r0, #4
 80004d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48028e00 	.word	0x48028e00
 80004e4:	48028f00 	.word	0x48028f00

080004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000ffc0 	.word	0x2000ffc0

08000500 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <XMC_SCU_GetMirrorStatus+0x14>)
 8000506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	50004000 	.word	0x50004000

08000518 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000520:	f7ff fed8 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <XMC_SCU_lDelay+0x3c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <XMC_SCU_lDelay+0x40>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0c9a      	lsrs	r2, r3, #18
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e003      	b.n	8000546 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800053e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3f7      	bcc.n	800053e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000ffc0 	.word	0x2000ffc0
 8000558:	431bde83 	.word	0x431bde83

0800055c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f89b 	bl	80006a0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800056a:	f000 fa2d 	bl	80009c8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	79db      	ldrb	r3, [r3, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00a      	beq.n	800058c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000576:	f000 fa65 	bl	8000a44 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800057a:	bf00      	nop
 800057c:	f000 fa50 	bl	8000a20 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000580:	4603      	mov	r3, r0
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f7      	bne.n	800057c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a5b      	ldrb	r3, [r3, #9]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f8ff 	bl	8000794 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000596:	bf00      	nop
 8000598:	f7ff ffb2 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1fa      	bne.n	8000598 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f9e8 	bl	800097c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7c1b      	ldrb	r3, [r3, #16]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f90d 	bl	80007d0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7c5b      	ldrb	r3, [r3, #17]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f930 	bl	8000820 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7c9b      	ldrb	r3, [r3, #18]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f917 	bl	80007f8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7cdb      	ldrb	r3, [r3, #19]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f93a 	bl	8000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005dc:	f000 fa66 	bl	8000aac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e0:	bf00      	nop
 80005e2:	f000 fa8b 	bl	8000afc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005fa:	f000 faa3 	bl	8000b44 <XMC_SCU_CLOCK_DisableSystemPll>
 80005fe:	e014      	b.n	800062a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000600:	f000 fa90 	bl	8000b24 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8899      	ldrh	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000610:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000616:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4608      	mov	r0, r1
 8000620:	4611      	mov	r1, r2
 8000622:	462a      	mov	r2, r5
 8000624:	4623      	mov	r3, r4
 8000626:	f000 fa9d 	bl	8000b64 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000632:	d103      	bne.n	800063c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000638:	f000 f832 	bl	80006a0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800063c:	f7ff fe4a 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bdb0      	pop	{r4, r5, r7, pc}
 8000646:	bf00      	nop

08000648 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0f1b      	lsrs	r3, r3, #28
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800065c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	461a      	mov	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800066c:	4413      	add	r3, r2
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	50004414 	.word	0x50004414

08000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000684:	f7ff ff30 	bl	80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000688:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 800068c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	50004600 	.word	0x50004600

080006a0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	50004600 	.word	0x50004600

080006c8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4313      	orrs	r3, r2
 80006de:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	50004600 	.word	0x50004600

080006f0 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	50004600 	.word	0x50004600

08000718 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d108      	bne.n	800073a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	60d3      	str	r3, [r2, #12]
 8000738:	e007      	b.n	800074a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	60d3      	str	r3, [r2, #12]
  }
}
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	50004710 	.word	0x50004710

08000758 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000762:	bf00      	nop
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000766:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800077c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077e:	4313      	orrs	r3, r2
 8000780:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	50004000 	.word	0x50004000
 8000790:	50004300 	.word	0x50004300

08000794 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079e:	bf00      	nop
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ae:	4907      	ldr	r1, [pc, #28]	; (80007cc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ba:	4313      	orrs	r3, r2
 80007bc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	50004000 	.word	0x50004000
 80007cc:	50004300 	.word	0x50004300

080007d0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	50004600 	.word	0x50004600

080007f8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080e:	4313      	orrs	r3, r2
 8000810:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	50004600 	.word	0x50004600

08000820 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004600 	.word	0x50004600

08000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004600 	.word	0x50004600

08000870 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000886:	4313      	orrs	r3, r2
 8000888:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004600 	.word	0x50004600

08000898 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	50004600 	.word	0x50004600

080008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d6:	4313      	orrs	r3, r2
 80008d8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	6053      	str	r3, [r2, #4]
}
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800092a:	4913      	ldr	r1, [pc, #76]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3b01      	subs	r3, #1
 8000936:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000938:	4313      	orrs	r3, r2
 800093a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000946:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f023 0310 	bic.w	r3, r3, #16
 8000952:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000960:	bf00      	nop
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f9      	beq.n	8000962 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	50004710 	.word	0x50004710

0800097c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000990:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d10e      	bne.n	80009b6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009a2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009a4:	2064      	movs	r0, #100	; 0x64
 80009a6:	f7ff fdb7 	bl	8000518 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009aa:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009b4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f7ff fdae 	bl	8000518 <XMC_SCU_lDelay>
}
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	50004710 	.word	0x50004710

080009c8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d109      	bne.n	80009ec <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009de:	bf00      	nop
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f9      	beq.n	80009e0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00a      	beq.n	8000a0e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fe:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a00:	bf00      	nop
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1f9      	bne.n	8000a02 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	50004200 	.word	0x50004200
 8000a1c:	50004400 	.word	0x50004400

08000a20 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	50004300 	.word	0x50004300

08000a44 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a48:	bf00      	nop
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f8      	bne.n	8000a4a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a62:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a64:	bf00      	nop
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f8      	bne.n	8000a66 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a80:	bf00      	nop
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f8      	bne.n	8000a82 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000a96:	bf00      	nop
 8000a98:	f7ff fd32 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1fa      	bne.n	8000a98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	50004000 	.word	0x50004000
 8000aa8:	50004300 	.word	0x50004300

08000aac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aba:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000abc:	4d0d      	ldr	r5, [pc, #52]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ac6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000aca:	f002 f879 	bl	8002bc0 <OSCHP_GetFrequency>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8000ad6:	0d1b      	lsrs	r3, r3, #20
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000adc:	4323      	orrs	r3, r4
 8000ade:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aea:	6053      	str	r3, [r2, #4]
}
 8000aec:	bdb0      	pop	{r4, r5, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	50004710 	.word	0x50004710
 8000af4:	50004700 	.word	0x50004700
 8000af8:	6b5fca6b 	.word	0x6b5fca6b

08000afc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b08:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	50004710 	.word	0x50004710

08000b24 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b32:	f023 0302 	bic.w	r3, r3, #2
 8000b36:	6053      	str	r3, [r2, #4]
}
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	50004710 	.word	0x50004710

08000b44 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	6053      	str	r3, [r2, #4]
}
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	50004710 	.word	0x50004710

08000b64 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	81fb      	strh	r3, [r7, #14]
 8000b72:	460b      	mov	r3, r1
 8000b74:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdcd 	bl	8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 8084 	bne.w	8000c8e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b8c:	f002 f818 	bl	8002bc0 <OSCHP_GetFrequency>
 8000b90:	4602      	mov	r2, r0
 8000b92:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000b94:	fba3 2302 	umull	r2, r3, r3, r2
 8000b98:	0c9b      	lsrs	r3, r3, #18
 8000b9a:	059b      	lsls	r3, r3, #22
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e002      	b.n	8000ba6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000ba0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ba4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	fb02 f203 	mul.w	r2, r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4a42      	ldr	r2, [pc, #264]	; (8000cc4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	0d9b      	lsrs	r3, r3, #22
 8000bc2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bc4:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bd0:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bdc:	493a      	ldr	r1, [pc, #232]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bde:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000be4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	3a01      	subs	r2, #1
 8000bea:	0212      	lsls	r2, r2, #8
 8000bec:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bf4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c00:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c0c:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f023 0310 	bic.w	r3, r3, #16
 8000c16:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c18:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c22:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c24:	bf00      	nop
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f9      	beq.n	8000c26 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c3e:	bf00      	nop
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f9      	bne.n	8000c40 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	0d9b      	lsrs	r3, r3, #22
 8000c58:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c5a:	6a3a      	ldr	r2, [r7, #32]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d202      	bcs.n	8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c62:	6938      	ldr	r0, [r7, #16]
 8000c64:	f000 f838 	bl	8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	0d9b      	lsrs	r3, r3, #22
 8000c76:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c78:	6a3a      	ldr	r2, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d202      	bcs.n	8000c86 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c80:	6938      	ldr	r0, [r7, #16]
 8000c82:	f000 f829 	bl	8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c86:	6a38      	ldr	r0, [r7, #32]
 8000c88:	f000 f826 	bl	8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c8c:	e015      	b.n	8000cba <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cac:	bf00      	nop
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	431bde83 	.word	0x431bde83
 8000cc4:	aaaaaaab 	.word	0xaaaaaaab
 8000cc8:	50004710 	.word	0x50004710
 8000ccc:	f08080ff 	.word	0xf08080ff
 8000cd0:	88888889 	.word	0x88888889
 8000cd4:	b60b60b7 	.word	0xb60b60b7

08000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f7ff fc0f 	bl	8000518 <XMC_SCU_lDelay>
}
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	50004710 	.word	0x50004710

08000d04 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d103      	bne.n	8000d3c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff fc87 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d3a:	e016      	b.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <XMC_CCU4_lDeassertReset+0x50>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d103      	bne.n	8000d4c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d44:	2008      	movs	r0, #8
 8000d46:	f7ff fc7f 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d4a:	e00e      	b.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <XMC_CCU4_lDeassertReset+0x54>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d103      	bne.n	8000d5c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f7ff fc77 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d5a:	e006      	b.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <XMC_CCU4_lDeassertReset+0x58>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <XMC_CCU4_lDeassertReset+0x5c>)
 8000d66:	f7ff fc6f 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	4000c000 	.word	0x4000c000
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40014000 	.word	0x40014000
 8000d7c:	48004000 	.word	0x48004000
 8000d80:	10000001 	.word	0x10000001

08000d84 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000d8c:	2010      	movs	r0, #16
 8000d8e:	f7ff fdab 	bl	80008e8 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffc6 	bl	8000d24 <XMC_CCU4_lDeassertReset>
#endif
}
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop

08000da0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ffe9 	bl	8000d84 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa6 	bl	8000d04 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	039b      	lsls	r3, r3, #14
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	795b      	ldrb	r3, [r3, #5]
 8000df2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	051a      	lsls	r2, r3, #20
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	795b      	ldrb	r3, [r3, #5]
 8000e12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	795b      	ldrb	r3, [r3, #5]
 8000e22:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e60:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
 8000e90:	4613      	mov	r3, r2
 8000e92:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b09      	cmp	r3, #9
 8000ea0:	d82c      	bhi.n	8000efc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ed1 	.word	0x08000ed1
 8000eac:	08000ed1 	.word	0x08000ed1
 8000eb0:	08000edb 	.word	0x08000edb
 8000eb4:	08000edb 	.word	0x08000edb
 8000eb8:	08000efd 	.word	0x08000efd
 8000ebc:	08000efd 	.word	0x08000efd
 8000ec0:	08000efd 	.word	0x08000efd
 8000ec4:	08000efd 	.word	0x08000efd
 8000ec8:	08000ee5 	.word	0x08000ee5
 8000ecc:	08000ef1 	.word	0x08000ef1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
      break;
 8000ed8:	e016      	b.n	8000f08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000eda:	230c      	movs	r3, #12
 8000edc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
      break;
 8000ee2:	e011      	b.n	8000f08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000ee4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000eea:	2308      	movs	r3, #8
 8000eec:	617b      	str	r3, [r7, #20]
      break;
 8000eee:	e00b      	b.n	8000f08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000ef0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ef4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	617b      	str	r3, [r7, #20]
      break;
 8000efa:	e005      	b.n	8000f08 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000efc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f00:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
      break;
 8000f06:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000f12:	78ba      	ldrb	r2, [r7, #2]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8000f40:	78f8      	ldrb	r0, [r7, #3]
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4413      	add	r3, r2
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	00c3      	lsls	r3, r0, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 8000f70:	78f8      	ldrb	r0, [r7, #3]
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	00c3      	lsls	r3, r0, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	605a      	str	r2, [r3, #4]
}
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 8000fa0:	78f8      	ldrb	r0, [r7, #3]
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	00c3      	lsls	r3, r0, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	605a      	str	r2, [r3, #4]
}
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = start;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	883a      	ldrh	r2, [r7, #0]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	605a      	str	r2, [r3, #4]
}
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69da      	ldr	r2, [r3, #28]
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4619      	mov	r1, r3
 8001006:	f640 73ff 	movw	r3, #4095	; 0xfff
 800100a:	408b      	lsls	r3, r1
 800100c:	43db      	mvns	r3, r3
 800100e:	4013      	ands	r3, r2
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 8001010:	883a      	ldrh	r2, [r7, #0]
 8001012:	78f9      	ldrb	r1, [r7, #3]
 8001014:	0109      	lsls	r1, r1, #4
 8001016:	408a      	lsls	r2, r1
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	61da      	str	r2, [r3, #28]
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	460b      	mov	r3, r1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigger));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 8001036:	7af8      	ldrb	r0, [r7, #11]
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	431a      	orrs	r2, r3
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	00c3      	lsls	r3, r0, #3
 800104e:	440b      	add	r3, r1
 8001050:	609a      	str	r2, [r3, #8]
                              trigger;
}
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	460b      	mov	r3, r1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 800106a:	7af8      	ldrb	r0, [r7, #11]
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	431a      	orrs	r2, r3
 800107e:	68f9      	ldr	r1, [r7, #12]
 8001080:	00c3      	lsls	r3, r0, #3
 8001082:	440b      	add	r3, r1
 8001084:	605a      	str	r2, [r3, #4]
                             mode;
}
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <XMC_DAC_Enable+0x14>)
 800109a:	f7ff fad5 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	10000020 	.word	0x10000020

080010a8 <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	460b      	mov	r3, r1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff ffea 	bl	8001090 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6852      	ldr	r2, [r2, #4]
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d804      	bhi.n	80010e8 <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff ff26 	bl	8000f34 <XMC_DAC_CH_EnableOutput>
  }
}
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop

080010f0 <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	460b      	mov	r3, r1
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 80010fe:	f7ff fabf 	bl	8000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001102:	4602      	mov	r2, r0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	d802      	bhi.n	8001118 <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 8001112:	2304      	movs	r3, #4
 8001114:	75fb      	strb	r3, [r7, #23]
 8001116:	e016      	b.n	8001146 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800111e:	d302      	bcc.n	8001126 <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 8001120:	2303      	movs	r3, #3
 8001122:	75fb      	strb	r3, [r7, #23]
 8001124:	e00f      	b.n	8001146 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 8001126:	7af8      	ldrb	r0, [r7, #11]
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	0d1b      	lsrs	r3, r3, #20
 8001134:	051b      	lsls	r3, r3, #20
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	431a      	orrs	r2, r3
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	00c3      	lsls	r3, r0, #3
 800113e:	440b      	add	r3, r1
 8001140:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001146:	7dfb      	ldrb	r3, [r7, #23]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	460b      	mov	r3, r1
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	3304      	adds	r3, #4
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	7afa      	ldrb	r2, [r7, #11]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	40d3      	lsrs	r3, r2
 8001176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800117a:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	3301      	adds	r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	7afa      	ldrb	r2, [r7, #11]
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	f7ff ffad 	bl	80010f0 <XMC_DAC_CH_SetFrequency>
 8001196:	4603      	mov	r3, r0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011b6:	f7ff ff51 	bl	800105c <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	4619      	mov	r1, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	f7ff ff3c 	bl	800105c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	4619      	mov	r1, r3
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	f7ff ff7d 	bl	80010f0 <XMC_DAC_CH_SetFrequency>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10c      	bne.n	800121a <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	4619      	mov	r1, r3
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	f7ff ff0e 	bl	8001028 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001216:	f7ff ff21 	bl	800105c <XMC_DAC_CH_SetMode>
  }

  return status;
 800121a:	7dfb      	ldrb	r3, [r7, #23]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <XMC_DAC_CH_StartRampMode>:
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	4608      	mov	r0, r1
 800122e:	4611      	mov	r1, r2
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	72fb      	strb	r3, [r7, #11]
 8001236:	460b      	mov	r3, r1
 8001238:	813b      	strh	r3, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	4619      	mov	r1, r3
 8001248:	2200      	movs	r2, #0
 800124a:	f7ff ff07 	bl	800105c <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 800124e:	7afa      	ldrb	r2, [r7, #11]
 8001250:	893b      	ldrh	r3, [r7, #8]
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	4611      	mov	r1, r2
 8001256:	461a      	mov	r2, r3
 8001258:	f7ff feb4 	bl	8000fc4 <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 800125c:	7afa      	ldrb	r2, [r7, #11]
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	f7ff fec1 	bl	8000fec <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	4619      	mov	r1, r3
 8001270:	6a3a      	ldr	r2, [r7, #32]
 8001272:	f7ff fed9 	bl	8001028 <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	4619      	mov	r1, r3
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	f7ff ff64 	bl	8001150 <XMC_DAC_CH_SetRampFrequency>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	4619      	mov	r1, r3
 8001298:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800129c:	f7ff fede 	bl	800105c <XMC_DAC_CH_SetMode>
  }

  return status;
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop

080012ac <XMC_DAC_CH_StartPatternMode>:
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	461a      	mov	r2, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	72fb      	strb	r3, [r7, #11]
 80012bc:	4613      	mov	r3, r2
 80012be:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	4619      	mov	r1, r3
 80012ca:	2200      	movs	r2, #0
 80012cc:	f7ff fec6 	bl	800105c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	7afa      	ldrb	r2, [r7, #11]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	f7ff ff05 	bl	80010f0 <XMC_DAC_CH_SetFrequency>
 80012e6:	4603      	mov	r3, r0
 80012e8:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d120      	bne.n	8001332 <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	4619      	mov	r1, r3
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	f000 f850 	bl	800139c <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fe2c 	bl	8000f64 <XMC_DAC_CH_EnablePatternSignOutput>
 800130c:	e004      	b.n	8001318 <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 800130e:	7afb      	ldrb	r3, [r7, #11]
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fe3e 	bl	8000f94 <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	4619      	mov	r1, r3
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	f7ff fe82 	bl	8001028 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800132e:	f7ff fe95 	bl	800105c <XMC_DAC_CH_SetMode>
  }

  return status;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	460b      	mov	r3, r1
 800134a:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	4619      	mov	r1, r3
 8001356:	2200      	movs	r2, #0
 8001358:	f7ff fe80 	bl	800105c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d107      	bne.n	8001372 <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	4619      	mov	r1, r3
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	f7ff fec1 	bl	80010f0 <XMC_DAC_CH_SetFrequency>
 800136e:	4603      	mov	r3, r0
 8001370:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10c      	bne.n	8001392 <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	4619      	mov	r1, r3
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	f7ff fe52 	bl	8001028 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800138e:	f7ff fe65 	bl	800105c <XMC_DAC_CH_SetMode>
  }

  return status;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	460b      	mov	r3, r1
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e010      	b.n	80013d8 <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d9eb      	bls.n	80013b6 <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 80013de:	7afa      	ldrb	r2, [r7, #11]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3204      	adds	r2, #4
 80013e4:	6939      	ldr	r1, [r7, #16]
 80013e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3306      	adds	r3, #6
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e011      	b.n	800141c <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3306      	adds	r3, #6
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d9ea      	bls.n	80013f8 <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	3304      	adds	r3, #4
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	605a      	str	r2, [r3, #4]
}
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
 8001448:	4613      	mov	r3, r2
 800144a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4619      	mov	r1, r3
 8001456:	2303      	movs	r3, #3
 8001458:	408b      	lsls	r3, r1
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	78f9      	ldrb	r1, [r7, #3]
 800146a:	0049      	lsls	r1, r1, #1
 800146c:	408b      	lsls	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 80014c6:	2310      	movs	r3, #16
 80014c8:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f88c 	bl	80015e8 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	79db      	ldrb	r3, [r3, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	79db      	ldrb	r3, [r3, #7]
 80014dc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f000 f8ca 	bl	8001680 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	799b      	ldrb	r3, [r3, #6]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	3301      	adds	r3, #1
 80014fa:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	795b      	ldrb	r3, [r3, #5]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	795b      	ldrb	r3, [r3, #5]
 800152a:	3b01      	subs	r3, #1
 800152c:	041b      	lsls	r3, r3, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
 8001534:	e008      	b.n	8001548 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800154e:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f04f 32ff 	mov.w	r2, #4294967295
 8001556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	891b      	ldrh	r3, [r3, #8]
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800157a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d110      	bne.n	80015a4 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001582:	bf00      	nop
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff7b 	bl	8001480 <XMC_USIC_CH_GetTransmitBufferStatus>
 800158a:	4603      	mov	r3, r0
 800158c:	2b80      	cmp	r3, #128	; 0x80
 800158e:	d0f9      	beq.n	8001584 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001596:	f7ff ff83 	bl	80014a0 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015a2:	e003      	b.n	80015ac <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop

080015b4 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	81fb      	strh	r3, [r7, #14]
 80015d0:	e003      	b.n	80015da <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80015d8:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80015da:	89fb      	ldrh	r3, [r7, #14]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1a      	ldr	r2, [pc, #104]	; (800165c <XMC_USIC_CH_Enable+0x74>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d003      	beq.n	8001600 <XMC_USIC_CH_Enable+0x18>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <XMC_USIC_CH_Enable+0x78>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d103      	bne.n	8001608 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001600:	4818      	ldr	r0, [pc, #96]	; (8001664 <XMC_USIC_CH_Enable+0x7c>)
 8001602:	f000 f979 	bl	80018f8 <XMC_USIC_Enable>
 8001606:	e016      	b.n	8001636 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <XMC_USIC_CH_Enable+0x80>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d003      	beq.n	8001618 <XMC_USIC_CH_Enable+0x30>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <XMC_USIC_CH_Enable+0x84>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d103      	bne.n	8001620 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001618:	4815      	ldr	r0, [pc, #84]	; (8001670 <XMC_USIC_CH_Enable+0x88>)
 800161a:	f000 f96d 	bl	80018f8 <XMC_USIC_Enable>
 800161e:	e00a      	b.n	8001636 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <XMC_USIC_CH_Enable+0x8c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d003      	beq.n	8001630 <XMC_USIC_CH_Enable+0x48>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <XMC_USIC_CH_Enable+0x90>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d102      	bne.n	8001636 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <XMC_USIC_CH_Enable+0x94>)
 8001632:	f000 f961 	bl	80018f8 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800163c:	bf00      	nop
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f9      	beq.n	800163e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f023 020f 	bic.w	r2, r3, #15
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40030000 	.word	0x40030000
 8001660:	40030200 	.word	0x40030200
 8001664:	40030008 	.word	0x40030008
 8001668:	48020000 	.word	0x48020000
 800166c:	48020200 	.word	0x48020200
 8001670:	48020008 	.word	0x48020008
 8001674:	48024000 	.word	0x48024000
 8001678:	48024200 	.word	0x48024200
 800167c:	48024008 	.word	0x48024008

08001680 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b63      	cmp	r3, #99	; 0x63
 8001690:	d958      	bls.n	8001744 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d055      	beq.n	8001744 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001698:	f7fe fff2 	bl	8000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800169c:	4602      	mov	r2, r0
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80016a0:	fba3 2302 	umull	r2, r3, r3, r2
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80016bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80016c2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
 80016c8:	e022      	b.n	8001710 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ce:	fb02 f203 	mul.w	r2, r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	0a9b      	lsrs	r3, r3, #10
 80016e4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ec:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f4:	d209      	bcs.n	800170a <XMC_USIC_CH_SetBaudrate+0x8a>
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d205      	bcs.n	800170a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	3b01      	subs	r3, #1
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1d9      	bne.n	80016ca <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001726:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	3a01      	subs	r2, #1
 800172c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800172e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001736:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001742:	e002      	b.n	800174a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800174a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800174e:	4618      	mov	r0, r3
 8001750:	3738      	adds	r7, #56	; 0x38
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	51eb851f 	.word	0x51eb851f
 800175c:	fc0080ef 	.word	0xfc0080ef

08001760 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001776:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001788:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	0211      	lsls	r1, r2, #8
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001796:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001798:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	f8ffc0c0 	.word	0xf8ffc0c0

080017b0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80017c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80017d8:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	0211      	lsls	r1, r2, #8
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80017e6:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80017e8:	4313      	orrs	r3, r2
 80017ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	efffc0c0 	.word	0xefffc0c0

08001804 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	460b      	mov	r3, r1
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001818:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001828:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001830:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	460b      	mov	r3, r1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	2107      	movs	r1, #7
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	460b      	mov	r3, r1
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	2107      	movs	r1, #7
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80018a8:	431a      	orrs	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	460b      	mov	r3, r1
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	2107      	movs	r1, #7
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80018e4:	431a      	orrs	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <XMC_USIC_Enable+0x40>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d104      	bne.n	8001912 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001908:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800190c:	f7fe fe9c 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001910:	e00e      	b.n	8001930 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <XMC_USIC_Enable+0x44>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d103      	bne.n	8001922 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <XMC_USIC_Enable+0x48>)
 800191c:	f7fe fe94 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001920:	e006      	b.n	8001930 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <XMC_USIC_Enable+0x4c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d102      	bne.n	8001930 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <XMC_USIC_Enable+0x50>)
 800192c:	f7fe fe8c 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40030008 	.word	0x40030008
 800193c:	48020008 	.word	0x48020008
 8001940:	10000080 	.word	0x10000080
 8001944:	48024008 	.word	0x48024008
 8001948:	10000100 	.word	0x10000100

0800194c <_init>:
  }
}

/* Init */
void _init(void)
{}
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019ae:	b2db      	uxtb	r3, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019cc:	409a      	lsls	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop

08001a28 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a36:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4798      	blx	r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop

08001b48 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001b54:	2304      	movs	r3, #4
 8001b56:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d000      	beq.n	8001b66 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001b64:	e007      	b.n	8001b76 <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	f000 f824 	bl	8001bb8 <UART_StartTransmitIRQ>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]
    break;
 8001b74:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d000      	beq.n	8001b9e <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001b9c:	e007      	b.n	8001bae <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	f000 f864 	bl	8001c70 <UART_StartReceiveIRQ>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	75fb      	strb	r3, [r7, #23]
    break;
 8001bac:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d144      	bne.n	8001c64 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	7e1b      	ldrb	r3, [r3, #24]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03a      	beq.n	8001c64 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d035      	beq.n	8001c60 <UART_StartTransmitIRQ+0xa8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d032      	beq.n	8001c60 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff00 	bl	8001a28 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c32:	f7ff fed3 	bl	80019dc <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001c36:	e006      	b.n	8001c46 <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c42:	f7ff fe89 	bl	8001958 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7ff feaf 	bl	80019bc <XMC_USIC_CH_TriggerServiceRequest>
 8001c5e:	e001      	b.n	8001c64 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001c60:	2303      	movs	r3, #3
 8001c62:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop

08001c70 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d13e      	bne.n	8001d10 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	7e5b      	ldrb	r3, [r3, #25]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d034      	beq.n	8001d10 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02f      	beq.n	8001d0c <UART_StartReceiveIRQ+0x9c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02c      	beq.n	8001d0c <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff00 	bl	8001ae0 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f000 f930 	bl	8001f48 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001cf2:	f7ff fecf 	bl	8001a94 <XMC_USIC_CH_RXFIFO_EnableEvent>
 8001cf6:	e006      	b.n	8001d06 <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001d02:	f7ff fe29 	bl	8001958 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
 8001d0a:	e001      	b.n	8001d10 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop

08001d1c <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d240      	bcs.n	8001db8 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d027      	beq.n	8001d92 <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001d42:	e01a      	b.n	8001d7a <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d212      	bcs.n	8001d76 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4608      	mov	r0, r1
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7ff fbff 	bl	8001568 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	e001      	b.n	8001d7a <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8001d76:	bf00      	nop
 8001d78:	e053      	b.n	8001e22 <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe60 	bl	8001a44 <XMC_USIC_CH_TXFIFO_IsFull>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1d9      	bne.n	8001d44 <UART_lTransmitHandler+0x28>
 8001d90:	e047      	b.n	8001e22 <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4608      	mov	r0, r1
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7ff fbde 	bl	8001568 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	e034      	b.n	8001e22 <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe55 	bl	8001a6c <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d02c      	beq.n	8001e22 <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dde:	f7ff fe0f 	bl	8001a00 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001de2:	e006      	b.n	8001df2 <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dee:	f7ff fdc3 	bl	8001978 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001df2:	bf00      	nop
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fdcf 	bl	800199c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d0f7      	beq.n	8001df4 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4798      	blx	r3
      }
    }
  }
}
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d04e      	beq.n	8001ee0 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001e42:	e032      	b.n	8001eaa <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d211      	bcs.n	8001e74 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	18d4      	adds	r4, r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fba8 	bl	80015b4 <XMC_UART_CH_GetReceivedData>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d114      	bne.n	8001eaa <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e90:	f7ff fe12 	bl	8001ab8 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4798      	blx	r3
        }
        break;
 8001ea6:	e00b      	b.n	8001ec0 <UART_lReceiveHandler+0x98>
 8001ea8:	e00a      	b.n	8001ec0 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fe24 	bl	8001afc <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1c1      	bne.n	8001e44 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d23a      	bcs.n	8001f42 <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f000 f835 	bl	8001f48 <UART_lReconfigureRxFIFO>
 8001ede:	e030      	b.n	8001f42 <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d211      	bcs.n	8001f10 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	18d4      	adds	r4, r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb5a 	bl	80015b4 <XMC_UART_CH_GetReceivedData>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d112      	bne.n	8001f42 <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001f2c:	f7ff fd24 	bl	8001978 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4798      	blx	r3
      }
    }
  }
}
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}

08001f48 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	4093      	lsls	r3, r2
 8001f64:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d203      	bcs.n	8001f76 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e002      	b.n	8001f7c <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001f84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f7ff fc39 	bl	8001804 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa4:	0a1b      	lsrs	r3, r3, #8
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_EnableIRQ+0x34>)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	f002 021f 	and.w	r2, r2, #31
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	490d      	ldr	r1, [pc, #52]	; (8002038 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	4909      	ldr	r1, [pc, #36]	; (800203c <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
  }
}
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b06      	cmp	r3, #6
 800205c:	bf28      	it	cs
 800205e:	2306      	movcs	r3, #6
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3306      	adds	r3, #6
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b01      	subs	r3, #1
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2201      	movs	r2, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	401a      	ands	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	1e59      	subs	r1, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002094:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
 80020b0:	4613      	mov	r3, r2
 80020b2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80020b4:	78f8      	ldrb	r0, [r7, #3]
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	3306      	adds	r3, #6
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80020c6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80020c8:	431a      	orrs	r2, r3
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	1d83      	adds	r3, r0, #6
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	f043 0202 	orr.w	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <RS_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t RS_init()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 800210a:	2300      	movs	r3, #0
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &RS_channel_config);
 800210e:	482b      	ldr	r0, [pc, #172]	; (80021bc <RS_init+0xb8>)
 8002110:	492b      	ldr	r1, [pc, #172]	; (80021c0 <RS_init+0xbc>)
 8002112:	f7ff f9d3 	bl	80014bc <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
 8002116:	4829      	ldr	r0, [pc, #164]	; (80021bc <RS_init+0xb8>)
 8002118:	2100      	movs	r1, #0
 800211a:	2203      	movs	r2, #3
 800211c:	f7ff ffc2 	bl	80020a4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH0,
 8002120:	4826      	ldr	r0, [pc, #152]	; (80021bc <RS_init+0xb8>)
 8002122:	2110      	movs	r1, #16
 8002124:	2204      	movs	r2, #4
 8002126:	2301      	movs	r3, #1
 8002128:	f7ff fb1a 	bl	8001760 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 800212c:	4823      	ldr	r0, [pc, #140]	; (80021bc <RS_init+0xb8>)
 800212e:	2100      	movs	r1, #0
 8002130:	2204      	movs	r2, #4
 8002132:	2300      	movs	r3, #0
 8002134:	f7ff fb3c 	bl	80017b0 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8002138:	4820      	ldr	r0, [pc, #128]	; (80021bc <RS_init+0xb8>)
 800213a:	f7ff ffd1 	bl	80020e0 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &RS_tx_pin_config);
 800213e:	4821      	ldr	r0, [pc, #132]	; (80021c4 <RS_init+0xc0>)
 8002140:	210e      	movs	r1, #14
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <RS_init+0xc4>)
 8002144:	f7fe f930 	bl	80003a8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8002148:	481c      	ldr	r0, [pc, #112]	; (80021bc <RS_init+0xb8>)
 800214a:	2110      	movs	r1, #16
 800214c:	2202      	movs	r2, #2
 800214e:	f7ff fb7b 	bl	8001848 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002152:	481a      	ldr	r0, [pc, #104]	; (80021bc <RS_init+0xb8>)
 8002154:	2110      	movs	r1, #16
 8002156:	2201      	movs	r2, #1
 8002158:	f7ff fb92 	bl	8001880 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 800215c:	4817      	ldr	r0, [pc, #92]	; (80021bc <RS_init+0xb8>)
 800215e:	2110      	movs	r1, #16
 8002160:	2200      	movs	r2, #0
 8002162:	f7ff fbab 	bl	80018bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8002166:	4815      	ldr	r0, [pc, #84]	; (80021bc <RS_init+0xb8>)
 8002168:	2113      	movs	r1, #19
 800216a:	2200      	movs	r2, #0
 800216c:	f7ff fba6 	bl	80018bc <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002170:	f7ff ff12 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 8002174:	4603      	mov	r3, r0
 8002176:	4618      	mov	r0, r3
 8002178:	210a      	movs	r1, #10
 800217a:	2200      	movs	r2, #0
 800217c:	f7ff ff60 	bl	8002040 <NVIC_EncodePriority>
 8002180:	4603      	mov	r3, r0
 8002182:	205b      	movs	r0, #91	; 0x5b
 8002184:	4619      	mov	r1, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_SetPriority>
                        10U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 800218a:	205b      	movs	r0, #91	; 0x5b
 800218c:	f7ff ff12 	bl	8001fb4 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002190:	f7ff ff02 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	2109      	movs	r1, #9
 800219a:	2200      	movs	r2, #0
 800219c:	f7ff ff50 	bl	8002040 <NVIC_EncodePriority>
 80021a0:	4603      	mov	r3, r0
 80021a2:	205a      	movs	r0, #90	; 0x5a
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7ff ff21 	bl	8001fec <__NVIC_SetPriority>
                      9U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 80021aa:	205a      	movs	r0, #90	; 0x5a
 80021ac:	f7ff ff02 	bl	8001fb4 <__NVIC_EnableIRQ>
  return status;
 80021b0:	79fb      	ldrb	r3, [r7, #7]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	48020000 	.word	0x48020000
 80021c0:	08005784 	.word	0x08005784
 80021c4:	48028200 	.word	0x48028200
 80021c8:	08005790 	.word	0x08005790

080021cc <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void RS_TX_HANDLER()
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&RS);
 80021d0:	4801      	ldr	r0, [pc, #4]	; (80021d8 <USIC1_1_IRQHandler+0xc>)
 80021d2:	f7ff fda3 	bl	8001d1c <UART_lTransmitHandler>
}
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000000 	.word	0x20000000

080021dc <USIC1_0_IRQHandler>:

/*Receive ISR*/
void RS_RX_HANDLER()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&RS);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <USIC1_0_IRQHandler+0xc>)
 80021e2:	f7ff fe21 	bl	8001e28 <UART_lReceiveHandler>
}
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000

080021ec <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2101      	movs	r1, #1
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]
}
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	60da      	str	r2, [r3, #12]
}
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	611a      	str	r2, [r3, #16]
}
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002290:	887a      	ldrh	r2, [r7, #2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002326:	2b00      	cmp	r3, #0
 8002328:	d104      	bne.n	8002334 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8f8 	bl	8002520 <TIMER_CCU4_lInit>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff6b 	bl	800223c <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e001      	b.n	8002370 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop

0800237c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f81d 	bl	80023c4 <TIMER_GetTimerStatus>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d011      	beq.n	80023b4 <TIMER_Stop+0x38>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff53 	bl	8002254 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e001      	b.n	80023b8 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop

080023c4 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff18 	bl	8002214 <XMC_CCU4_SLICE_IsTimerRunning>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	0000      	movs	r0, r0
	...

080023f8 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffdc 	bl	80023c4 <TIMER_GetTimerStatus>
 800240c:	4603      	mov	r3, r0
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d079      	beq.n	800250c <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d874      	bhi.n	800250c <TIMER_SetTimeInterval+0x114>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d36f      	bcc.n	800250c <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002430:	e002      	b.n	8002438 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	3301      	adds	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	f1c2 020f 	rsb	r2, r2, #15
 8002442:	fa23 f202 	lsr.w	r2, r3, r2
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3f2      	bcc.n	8002432 <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15a      	bne.n	800250c <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	7913      	ldrb	r3, [r2, #4]
 800246e:	f361 0303 	bfi	r3, r1, #0, #4
 8002472:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f04f 0100 	mov.w	r1, #0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	fb02 fe01 	mul.w	lr, r2, r1
 8002488:	fb00 f603 	mul.w	r6, r0, r3
 800248c:	4476      	add	r6, lr
 800248e:	fba0 2302 	umull	r2, r3, r0, r2
 8002492:	18f1      	adds	r1, r6, r3
 8002494:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	69c9      	ldr	r1, [r1, #28]
 800249a:	7909      	ldrb	r1, [r1, #4]
 800249c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 80024a0:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80024a2:	f1c1 0620 	rsb	r6, r1, #32
 80024a6:	f1a1 0020 	sub.w	r0, r1, #32
 80024aa:	fa22 f401 	lsr.w	r4, r2, r1
 80024ae:	fa03 f606 	lsl.w	r6, r3, r6
 80024b2:	4334      	orrs	r4, r6
 80024b4:	fa23 f000 	lsr.w	r0, r3, r0
 80024b8:	4304      	orrs	r4, r0
 80024ba:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	a315      	add	r3, pc, #84	; (adr r3, 8002518 <TIMER_SetTimeInterval+0x120>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f002 fe58 	bl	800517c <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80024d0:	b292      	uxth	r2, r2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d905      	bls.n	80024ea <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fca3 	bl	8000e48 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f858 	bl	80025b8 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 800250c:	7dfb      	ldrb	r3, [r7, #23]
}
 800250e:	4618      	mov	r0, r3
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002516:	bf00      	nop
 8002518:	05f5e100 	.word	0x05f5e100
 800251c:	00000000 	.word	0x00000000

08002520 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f92b 	bl	8002788 <GLOBAL_CCU4_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7e1b      	ldrb	r3, [r3, #24]
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7ff fe52 	bl	80021ec <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe fc42 	bl	8000ddc <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f82d 	bl	80025b8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00f      	beq.n	8002588 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002572:	4610      	mov	r0, r2
 8002574:	2100      	movs	r1, #0
 8002576:	461a      	mov	r2, r3
 8002578:	f7fe fc84 	bl	8000e84 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4618      	mov	r0, r3
 8002582:	2100      	movs	r1, #0
 8002584:	f7ff fea8 	bl	80022d8 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe6d 	bl	800226c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe47 	bl	800223c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7ff fe5a 	bl	8002284 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4618      	mov	r0, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	f7ff fe62 	bl	80022a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7ff fe67 	bl	80022bc <XMC_CCU4_EnableShadowTransfer>
}
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002600:	0a1b      	lsrs	r3, r3, #8
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_EnableIRQ+0x34>)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	f002 021f 	and.w	r2, r2, #31
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	490d      	ldr	r1, [pc, #52]	; (8002694 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	4909      	ldr	r1, [pc, #36]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
  }
}
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	bf28      	it	cs
 80026ba:	2306      	movcs	r3, #6
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3306      	adds	r3, #6
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2201      	movs	r2, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	1e5a      	subs	r2, r3, #1
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	401a      	ands	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	1e59      	subs	r1, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80026f0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop

08002700 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b25b      	sxtb	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff7e 	bl	8002610 <__NVIC_EnableIRQ>
}
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop

0800271c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	781c      	ldrb	r4, [r3, #0]
 8002728:	f7ff ff64 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 800272c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002732:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	f7ff ffad 	bl	800269c <NVIC_EncodePriority>
 8002742:	4602      	mov	r2, r0
 8002744:	b263      	sxtb	r3, r4
 8002746:	4618      	mov	r0, r3
 8002748:	4611      	mov	r1, r2
 800274a:	f7ff ff7d 	bl	8002648 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	78db      	ldrb	r3, [r3, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffd2 	bl	8002700 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	bf00      	nop

08002768 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
}
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7b5b      	ldrb	r3, [r3, #13]
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00f      	beq.n	80027be <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7b1b      	ldrb	r3, [r3, #12]
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe faf9 	bl	8000da0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ffd8 	bl	8002768 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7c1a      	ldrb	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	f7fd fde1 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7c1a      	ldrb	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7c5b      	ldrb	r3, [r3, #17]
 80027f2:	4608      	mov	r0, r1
 80027f4:	4611      	mov	r1, r2
 80027f6:	461a      	mov	r2, r3
 80027f8:	f7fe fe20 	bl	800143c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop

08002808 <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  
  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
 8002834:	4613      	mov	r3, r2
 8002836:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = data;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	883a      	ldrh	r2, [r7, #0]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	605a      	str	r2, [r3, #4]
}
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	460b      	mov	r3, r1
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 800285e:	7af8      	ldrb	r0, [r7, #11]
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	431a      	orrs	r2, r3
 8002872:	68f9      	ldr	r1, [r7, #12]
 8002874:	00c3      	lsls	r3, r0, #3
 8002876:	440b      	add	r3, r1
 8002878:	605a      	str	r2, [r3, #4]
                             mode;
}
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 8002890:	78f8      	ldrb	r0, [r7, #3]
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	00c3      	lsls	r3, r0, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	605a      	str	r2, [r3, #4]
}
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop

080028b4 <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
 80028c0:	4613      	mov	r3, r2
 80028c2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: scale parameter not valid\n", XMC_DAC_IS_OUTPUT_SCALE_VALID(scale));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 80028c4:	78f8      	ldrb	r0, [r7, #3]
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 020f 	bic.w	r2, r3, #15
 80028d4:	78bb      	ldrb	r3, [r7, #2]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	00c3      	lsls	r3, r0, #3
 80028dc:	440b      	add	r3, r1
 80028de:	609a      	str	r2, [r3, #8]
                              scale;
}
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 80028ec:	b5b0      	push	{r4, r5, r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002900:	d115      	bne.n	800292e <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7c1c      	ldrb	r4, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	9200      	str	r2, [sp, #0]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	462a      	mov	r2, r5
 8002922:	4623      	mov	r3, r4
 8002924:	f7fe fcc2 	bl	80012ac <XMC_DAC_CH_StartPatternMode>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e085      	b.n	8002a3a <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002936:	d115      	bne.n	8002964 <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f7fe fc2b 	bl	80011a0 <XMC_DAC_CH_StartSingleValueMode>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	2200      	movs	r2, #0
 800295e:	f7ff ff63 	bl	8002828 <XMC_DAC_CH_Write>
 8002962:	e06a      	b.n	8002a3a <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296c:	d125      	bne.n	80029ba <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f7fe fc20 	bl	80011c4 <XMC_DAC_CH_StartDataMode>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f7ff ff70 	bl	8002884 <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	f7ff ff38 	bl	8002828 <XMC_DAC_CH_Write>
 80029b8:	e03f      	b.n	8002a3a <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80029c2:	d125      	bne.n	8002a10 <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8b1d      	ldrh	r5, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8b5c      	ldrh	r4, [r3, #26]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	9200      	str	r2, [sp, #0]
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	462a      	mov	r2, r5
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7fe fc1d 	bl	8001224 <XMC_DAC_CH_StartRampMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a02:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f7ff ff53 	bl	80028b4 <XMC_DAC_CH_SetOutputScale>
 8002a0e:	e014      	b.n	8002a3a <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a18:	d10d      	bne.n	8002a36 <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f7fe fc86 	bl	800133c <XMC_DAC_CH_StartNoiseMode>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e001      	b.n	8002a3a <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}

08002a44 <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4608      	mov	r0, r1
 8002a60:	4611      	mov	r1, r2
 8002a62:	461a      	mov	r2, r3
 8002a64:	f7fe fb20 	bl	80010a8 <XMC_DAC_CH_Init>
  /* ANALOG_IO initialization */
  status = (DAC_STATUS_t) ANALOG_IO_Init(HandlePtr->analog_io_config_ptr);
#endif

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff3f 	bl	80028ec <DAC_ModeConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <DAC_Init+0x4c>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f7ff fee0 	bl	8002850 <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d104      	bne.n	8002aa4 <DAC_Init+0x60>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff feb2 	bl	8002808 <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <DAC_Init+0x6a>
  {
    status = DAC_STATUS_FAILURE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7ff ffd6 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b10:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <SystemCoreSetup+0x98>)
 8002b12:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b14:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002b18:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <SystemCoreSetup+0x9c>)
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	3314      	adds	r3, #20
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f023 030f 	bic.w	r3, r3, #15
 8002b3c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f043 0303 	orr.w	r3, r3, #3
 8002b44:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <SystemCoreSetup+0x9c>)
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002b52:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f023 0310 	bic.w	r3, r3, #16
 8002b5c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f023 0308 	bic.w	r3, r3, #8
 8002b68:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b80:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <SystemCoreSetup+0x94>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	e000ed00 	.word	0xe000ed00
 8002b98:	08000000 	.word	0x08000000
 8002b9c:	58001000 	.word	0x58001000

08002ba0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]

  return (status);
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <OSCHP_GetFrequency+0x10>)
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	00b71b00 	.word	0x00b71b00

08002bd4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <SystemCoreClockSetup+0x50>)
 8002bdc:	1d3c      	adds	r4, r7, #4
 8002bde:	461d      	mov	r5, r3
 8002be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcb6 	bl	800055c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd fdb1 	bl	8000758 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fd fd66 	bl	80006c8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002bfc:	2004      	movs	r0, #4
 8002bfe:	f7fd fe37 	bl	8000870 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002c02:	2001      	movs	r0, #1
 8002c04:	2120      	movs	r1, #32
 8002c06:	f7fd fe7f 	bl	8000908 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd fd70 	bl	80006f0 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7fd fe55 	bl	80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7fd fe3e 	bl	8000898 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdb0      	pop	{r4, r5, r7, pc}
 8002c22:	bf00      	nop
 8002c24:	080057f0 	.word	0x080057f0

08002c28 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002c32:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <DAVE_Init+0x80>)
 8002c34:	f7ff ffb4 	bl	8002ba0 <CLOCK_XMC4_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance RS */
	 init_status = (DAVE_STATUS_t)UART_Init(&RS); 
 8002c42:	481a      	ldr	r0, [pc, #104]	; (8002cac <DAVE_Init+0x84>)
 8002c44:	f7fe ff6e 	bl	8001b24 <UART_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d104      	bne.n	8002c5c <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8002c52:	4817      	ldr	r0, [pc, #92]	; (8002cb0 <DAVE_Init+0x88>)
 8002c54:	f7ff fdb8 	bl	80027c8 <DIGITAL_IO_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <DAVE_Init+0x44>
  {
	 /**  Initialization of TIMER APP instance DELAY */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&DELAY); 
 8002c62:	4814      	ldr	r0, [pc, #80]	; (8002cb4 <DAVE_Init+0x8c>)
 8002c64:	f7ff fb4e 	bl	8002304 <TIMER_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance TIM_IRQ */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIM_IRQ); 
 8002c72:	4811      	ldr	r0, [pc, #68]	; (8002cb8 <DAVE_Init+0x90>)
 8002c74:	f7ff fd52 	bl	800271c <INTERRUPT_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <DAVE_Init+0x64>
  {
	 /**  Initialization of DAC APP instance IQ_zmierzone */
	 init_status = (DAVE_STATUS_t)DAC_Init(&IQ_zmierzone); 
 8002c82:	480e      	ldr	r0, [pc, #56]	; (8002cbc <DAVE_Init+0x94>)
 8002c84:	f7ff fede 	bl	8002a44 <DAC_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d104      	bne.n	8002c9c <DAVE_Init+0x74>
  {
	 /**  Initialization of DAC APP instance IQ_zadane */
	 init_status = (DAVE_STATUS_t)DAC_Init(&IQ_zadane); 
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <DAVE_Init+0x98>)
 8002c94:	f7ff fed6 	bl	8002a44 <DAC_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000014c 	.word	0x2000014c
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	080057dc 	.word	0x080057dc
 8002cb4:	2000000c 	.word	0x2000000c
 8002cb8:	080057d8 	.word	0x080057d8
 8002cbc:	20000044 	.word	0x20000044
 8002cc0:	20000070 	.word	0x20000070

08002cc4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]
}
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	605a      	str	r2, [r3, #4]
}
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <UART_IsTxBusy>:
 *  }
 * @endcode
 *
 * */
__STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return (handle->runtime->tx_busy);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	7e1b      	ldrb	r3, [r3, #24]
 8002d16:	b2db      	uxtb	r3, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7c1b      	ldrb	r3, [r3, #16]
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7ff ffc4 	bl	8002cc4 <XMC_GPIO_SetOutputHigh>
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7c1b      	ldrb	r3, [r3, #16]
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7ff ffc4 	bl	8002ce4 <XMC_GPIO_SetOutputLow>
}
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop

08002d64 <wyslij>:
	float kat_abs_rad[2];
};
struct Noga stanowisko;

void wyslij(uint8_t size )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
	UART_Transmit(&RS, txData, size);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4809      	ldr	r0, [pc, #36]	; (8002d98 <wyslij+0x34>)
 8002d72:	490a      	ldr	r1, [pc, #40]	; (8002d9c <wyslij+0x38>)
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7fe fee7 	bl	8001b48 <UART_Transmit>
	while(UART_IsTxBusy(&RS));
 8002d7a:	bf00      	nop
 8002d7c:	4806      	ldr	r0, [pc, #24]	; (8002d98 <wyslij+0x34>)
 8002d7e:	f7ff ffc3 	bl	8002d08 <UART_IsTxBusy>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f9      	bne.n	8002d7c <wyslij+0x18>
	UART_Receive(&RS, &rxByte, 1);
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <wyslij+0x34>)
 8002d8a:	4905      	ldr	r1, [pc, #20]	; (8002da0 <wyslij+0x3c>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f7fe fef7 	bl	8001b80 <UART_Receive>

}
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	200001c4 	.word	0x200001c4
 8002da0:	20000154 	.word	0x20000154

08002da4 <delay>:
void delay(uint32_t us)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	us *= 100;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2264      	movs	r2, #100	; 0x64
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	607b      	str	r3, [r7, #4]
	is_delay = 1;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <delay+0x3c>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
	TIMER_SetTimeInterval(&DELAY, us);
 8002dbc:	4809      	ldr	r0, [pc, #36]	; (8002de4 <delay+0x40>)
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	f7ff fb1a 	bl	80023f8 <TIMER_SetTimeInterval>
	TIMER_Start(&DELAY);
 8002dc4:	4807      	ldr	r0, [pc, #28]	; (8002de4 <delay+0x40>)
 8002dc6:	f7ff fabb 	bl	8002340 <TIMER_Start>
	while(is_delay);
 8002dca:	bf00      	nop
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <delay+0x3c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1fb      	bne.n	8002dcc <delay+0x28>
	TIMER_Stop(&DELAY);
 8002dd4:	4803      	ldr	r0, [pc, #12]	; (8002de4 <delay+0x40>)
 8002dd6:	f7ff fad1 	bl	800237c <TIMER_Stop>
}
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200000b1 	.word	0x200000b1
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <wyslij_noga>:
void wyslij_noga(struct Noga n)
{
 8002de8:	b084      	sub	sp, #16
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	f107 0e08 	add.w	lr, r7, #8
 8002df2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	  txData[1] = n.adresy[0];
 8002df6:	7b3a      	ldrb	r2, [r7, #12]
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <wyslij_noga+0x7c>)
 8002dfa:	705a      	strb	r2, [r3, #1]
	  txData[2] = n.poz_zad[0] >> 8;
 8002dfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	121b      	asrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <wyslij_noga+0x7c>)
 8002e0a:	709a      	strb	r2, [r3, #2]
	  txData[3] = n.poz_zad[0];
 8002e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <wyslij_noga+0x7c>)
 8002e14:	70da      	strb	r2, [r3, #3]
	  txData[4] = EOF;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <wyslij_noga+0x7c>)
 8002e18:	22dd      	movs	r2, #221	; 0xdd
 8002e1a:	711a      	strb	r2, [r3, #4]
	  wyslij(5);
 8002e1c:	2005      	movs	r0, #5
 8002e1e:	f7ff ffa1 	bl	8002d64 <wyslij>
	  delay(500);
 8002e22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e26:	f7ff ffbd 	bl	8002da4 <delay>
	  txData[1] = n.adresy[1];
 8002e2a:	7b7a      	ldrb	r2, [r7, #13]
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <wyslij_noga+0x7c>)
 8002e2e:	705a      	strb	r2, [r3, #1]
	  txData[2] = n.poz_zad[1] >> 8;
 8002e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	121b      	asrs	r3, r3, #8
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <wyslij_noga+0x7c>)
 8002e3e:	709a      	strb	r2, [r3, #2]
	  txData[3] = n.poz_zad[1];
 8002e40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <wyslij_noga+0x7c>)
 8002e48:	70da      	strb	r2, [r3, #3]
	  wyslij(5);
 8002e4a:	2005      	movs	r0, #5
 8002e4c:	f7ff ff8a 	bl	8002d64 <wyslij>
	  delay(500);
 8002e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e54:	f7ff ffa6 	bl	8002da4 <delay>
}
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e5e:	b004      	add	sp, #16
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	200001c4 	.word	0x200001c4

08002e68 <Ik>:
void Ik(struct Noga *n)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	float x = n->stopa.x;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
	float y = n->stopa.y;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	623b      	str	r3, [r7, #32]
	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 8002e7c:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <Ik+0x1d0>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	eeb0 7a00 	vmov.f32	s14, #0
 8002e86:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8002e8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e92:	4b69      	ldr	r3, [pc, #420]	; (8003038 <Ik+0x1d0>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	eef0 6a00 	vmov.f32	s13, #0
 8002e9c:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8002ea0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ea4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eac:	edd7 6a08 	vldr	s13, [r7, #32]
 8002eb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebc:	ee17 0a90 	vmov	r0, s15
 8002ec0:	f000 fc22 	bl	8003708 <sqrtf>
 8002ec4:	61f8      	str	r0, [r7, #28]
	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <Ik+0x1d0>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	eeb0 7a00 	vmov.f32	s14, #0
 8002ed0:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8002ed4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <Ik+0x1d0>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	eef0 6a00 	vmov.f32	s13, #0
 8002ee6:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8002eea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef6:	edd7 6a08 	vldr	s13, [r7, #32]
 8002efa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f06:	ee17 0a90 	vmov	r0, s15
 8002f0a:	f000 fbfd 	bl	8003708 <sqrtf>
 8002f0e:	61b8      	str	r0, [r7, #24]
	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 8002f10:	4b4a      	ldr	r3, [pc, #296]	; (800303c <Ik+0x1d4>)
 8002f12:	ed93 7a00 	vldr	s14, [r3]
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <Ik+0x1d4>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f24:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f30:	4b43      	ldr	r3, [pc, #268]	; (8003040 <Ik+0x1d8>)
 8002f32:	edd3 6a00 	vldr	s13, [r3]
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <Ik+0x1d8>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f44:	4b3d      	ldr	r3, [pc, #244]	; (800303c <Ik+0x1d4>)
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f56:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002f5a:	edc7 7a05 	vstr	s15, [r7, #20]
	fi1 = acosf(fi1);
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f000 fb2e 	bl	80035c0 <acosf>
 8002f64:	6178      	str	r0, [r7, #20]
	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 8002f66:	4b35      	ldr	r3, [pc, #212]	; (800303c <Ik+0x1d4>)
 8002f68:	ed93 7a00 	vldr	s14, [r3]
 8002f6c:	4b33      	ldr	r3, [pc, #204]	; (800303c <Ik+0x1d4>)
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f76:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <Ik+0x1d8>)
 8002f88:	edd3 6a00 	vldr	s13, [r3]
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <Ik+0x1d8>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <Ik+0x1d4>)
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fa4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fac:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002fb0:	edc7 7a04 	vstr	s15, [r7, #16]
	fi2 = acosf(fi2);
 8002fb4:	6938      	ldr	r0, [r7, #16]
 8002fb6:	f000 fb03 	bl	80035c0 <acosf>
 8002fba:	6138      	str	r0, [r7, #16]
	float psi1 = asinf(((d/2)-x)/La);
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <Ik+0x1d0>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eeb0 7a00 	vmov.f32	s14, #0
 8002fc6:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8002fca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fd6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002fda:	ee17 0a90 	vmov	r0, s15
 8002fde:	f000 fb41 	bl	8003664 <asinf>
 8002fe2:	60f8      	str	r0, [r7, #12]
	float psi2 = asinf(((d/2)+x)/Lb);
 8002fe4:	4b14      	ldr	r3, [pc, #80]	; (8003038 <Ik+0x1d0>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	eeb0 7a00 	vmov.f32	s14, #0
 8002fee:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8002ff2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ffe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003002:	ee17 0a90 	vmov	r0, s15
 8003006:	f000 fb2d 	bl	8003664 <asinf>
 800300a:	60b8      	str	r0, [r7, #8]

	n->teta[0] = fi1 - psi1;
 800300c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003010:	edd7 7a03 	vldr	s15, [r7, #12]
 8003014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	n->teta[1] = fi2 - psi2;
 800301e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003022:	edd7 7a02 	vldr	s15, [r7, #8]
 8003026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200000a8 	.word	0x200000a8
 800303c:	200000a0 	.word	0x200000a0
 8003040:	200000a4 	.word	0x200000a4

08003044 <update>:
void update()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
	stanowisko.kat_abs_poprzedni[0] = stanowisko.kat_abs_rad[0];
 8003048:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <update+0xf0>)
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	4a39      	ldr	r2, [pc, #228]	; (8003134 <update+0xf0>)
 800304e:	6153      	str	r3, [r2, #20]
	stanowisko.kat_abs_poprzedni[1] = stanowisko.kat_abs_rad[1];
 8003050:	4b38      	ldr	r3, [pc, #224]	; (8003134 <update+0xf0>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	4a37      	ldr	r2, [pc, #220]	; (8003134 <update+0xf0>)
 8003056:	6193      	str	r3, [r2, #24]
	stanowisko.kat_abs_rad[0] = (float)stanowisko.kat_abs[0] * pi / 32767.0f;;
 8003058:	4b36      	ldr	r3, [pc, #216]	; (8003134 <update+0xf0>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003064:	4b34      	ldr	r3, [pc, #208]	; (8003138 <update+0xf4>)
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800313c <update+0xf8>
 8003072:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003076:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <update+0xf0>)
 8003078:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	stanowisko.kat_abs_rad[1] = (float)stanowisko.kat_abs[1]  * pi / 32767.0f;;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <update+0xf0>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <update+0xf4>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800313c <update+0xf8>
 8003096:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <update+0xf0>)
 800309c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	stanowisko.predkosc_silnika[0] =(stanowisko.predkosc_silnika[0] * 0.4f) + ((stanowisko.kat_abs_rad[0] - stanowisko.kat_abs_poprzedni[0]) / dt * 0.6f);
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <update+0xf0>)
 80030a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80030a6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003140 <update+0xfc>
 80030aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <update+0xf0>)
 80030b0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <update+0xf0>)
 80030b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80030ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80030be:	4b21      	ldr	r3, [pc, #132]	; (8003144 <update+0x100>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80030c8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003148 <update+0x104>
 80030cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <update+0xf0>)
 80030d6:	edc3 7a07 	vstr	s15, [r3, #28]
	stanowisko.predkosc_silnika[1] =(stanowisko.predkosc_silnika[0] * 0.4f) + ((stanowisko.kat_abs_rad[1] - stanowisko.kat_abs_poprzedni[1]) / dt * 0.6f);
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <update+0xf0>)
 80030dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80030e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003140 <update+0xfc>
 80030e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <update+0xf0>)
 80030ea:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <update+0xf0>)
 80030f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80030f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <update+0x100>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8003102:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003148 <update+0x104>
 8003106:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800310a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <update+0xf0>)
 8003110:	edc3 7a08 	vstr	s15, [r3, #32]
	t+= dt;
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <update+0x108>)
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <update+0x100>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <update+0x108>)
 8003126:	edc3 7a00 	vstr	s15, [r3]
	Ik(&stanowisko);
 800312a:	4802      	ldr	r0, [pc, #8]	; (8003134 <update+0xf0>)
 800312c:	f7ff fe9c 	bl	8002e68 <Ik>
}
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000015c 	.word	0x2000015c
 8003138:	2000009c 	.word	0x2000009c
 800313c:	46fffe00 	.word	0x46fffe00
 8003140:	3ecccccd 	.word	0x3ecccccd
 8003144:	200000ac 	.word	0x200000ac
 8003148:	3f19999a 	.word	0x3f19999a
 800314c:	20000150 	.word	0x20000150

08003150 <FK_Circle>:
void FK_Circle()
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	//stanowisko.stopa.x =cosf(t) * 80;
	stanowisko.stopa.y =210 + sinf(t) * 55;
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <FK_Circle+0x2c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f9e3 	bl	8003524 <sinf>
 800315e:	ee07 0a10 	vmov	s14, r0
 8003162:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003180 <FK_Circle+0x30>
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003184 <FK_Circle+0x34>
 800316e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <FK_Circle+0x38>)
 8003174:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000150 	.word	0x20000150
 8003180:	425c0000 	.word	0x425c0000
 8003184:	43520000 	.word	0x43520000
 8003188:	2000015c 	.word	0x2000015c

0800318c <Spring>:
void Spring()
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b097      	sub	sp, #92	; 0x5c
 8003190:	af14      	add	r7, sp, #80	; 0x50
	stanowisko.poz_zad[0] = stanowisko.teta[0] * INT16_MAX / pi;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <Spring+0x78>)
 8003194:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003198:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003208 <Spring+0x7c>
 800319c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <Spring+0x80>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80031aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80031b2:	88bb      	ldrh	r3, [r7, #4]
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <Spring+0x78>)
 80031b8:	871a      	strh	r2, [r3, #56]	; 0x38
	stanowisko.poz_zad[1] = stanowisko.teta[1] * INT16_MAX / pi;
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <Spring+0x78>)
 80031bc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80031c0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003208 <Spring+0x7c>
 80031c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <Spring+0x80>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80031d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80031da:	88bb      	ldrh	r3, [r7, #4]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <Spring+0x78>)
 80031e0:	875a      	strh	r2, [r3, #58]	; 0x3a

	wyslij_noga(stanowisko);
 80031e2:	4c08      	ldr	r4, [pc, #32]	; (8003204 <Spring+0x78>)
 80031e4:	4669      	mov	r1, sp
 80031e6:	f104 0310 	add.w	r3, r4, #16
 80031ea:	224c      	movs	r2, #76	; 0x4c
 80031ec:	4608      	mov	r0, r1
 80031ee:	4619      	mov	r1, r3
 80031f0:	f002 fabc 	bl	800576c <memcpy>
 80031f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031f8:	f7ff fdf6 	bl	8002de8 <wyslij_noga>
}
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}
 8003202:	bf00      	nop
 8003204:	2000015c 	.word	0x2000015c
 8003208:	46fffe00 	.word	0x46fffe00
 800320c:	2000009c 	.word	0x2000009c

08003210 <Init>:
void Init()
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
	txData[0] = SOF;
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <Init+0xb4>)
 8003218:	22cc      	movs	r2, #204	; 0xcc
 800321a:	701a      	strb	r2, [r3, #0]
	stanowisko.adresy[0] = 0x10;
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <Init+0xb8>)
 800321e:	2210      	movs	r2, #16
 8003220:	711a      	strb	r2, [r3, #4]
	stanowisko.adresy[1] = 0x11;
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <Init+0xb8>)
 8003224:	2211      	movs	r2, #17
 8003226:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0 ; i < 2; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	71fb      	strb	r3, [r7, #7]
 800322c:	e02f      	b.n	800328e <Init+0x7e>
	{
		stanowisko.i_net[i] = 0;
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <Init+0xb8>)
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	2200      	movs	r2, #0
 8003238:	80da      	strh	r2, [r3, #6]
		stanowisko.kat_abs[i] = 0;
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <Init+0xb8>)
 800323e:	3302      	adds	r3, #2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
		stanowisko.kat_abs_poprzedni[i] = 0;
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <Init+0xb8>)
 800324c:	3304      	adds	r3, #4
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
		stanowisko.predkosc_silnika[i] = 0;
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <Init+0xb8>)
 800325c:	3306      	adds	r3, #6
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
		stanowisko.silnik_start[i]  =0;
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <Init+0xb8>)
 800326c:	4413      	add	r3, r2
 800326e:	2200      	movs	r2, #0
 8003270:	709a      	strb	r2, [r3, #2]
		stanowisko.silnik_numer[i] = 0;
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <Init+0xb8>)
 8003276:	2100      	movs	r1, #0
 8003278:	54d1      	strb	r1, [r2, r3]
		stanowisko.Iq_zadane[i] = 0;
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <Init+0xb8>)
 800327e:	3314      	adds	r3, #20
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	2200      	movs	r2, #0
 8003286:	805a      	strh	r2, [r3, #2]
void Init()
{
	txData[0] = SOF;
	stanowisko.adresy[0] = 0x10;
	stanowisko.adresy[1] = 0x11;
	for(uint8_t i = 0 ; i < 2; i++)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	3301      	adds	r3, #1
 800328c:	71fb      	strb	r3, [r7, #7]
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d9cc      	bls.n	800322e <Init+0x1e>
		stanowisko.predkosc_silnika[i] = 0;
		stanowisko.silnik_start[i]  =0;
		stanowisko.silnik_numer[i] = 0;
		stanowisko.Iq_zadane[i] = 0;
	}
	stanowisko.ks = 5050;
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <Init+0xb8>)
 8003296:	f241 32ba 	movw	r2, #5050	; 0x13ba
 800329a:	849a      	strh	r2, [r3, #36]	; 0x24
	stanowisko.kd = 8;
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <Init+0xb8>)
 800329e:	2208      	movs	r2, #8
 80032a0:	84da      	strh	r2, [r3, #38]	; 0x26
	stanowisko.dzielnik = 100;
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <Init+0xb8>)
 80032a4:	2264      	movs	r2, #100	; 0x64
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
	stanowisko.stopa.x = 0;
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <Init+0xb8>)
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c
	stanowisko.stopa.y = 200;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <Init+0xb8>)
 80032b2:	4a06      	ldr	r2, [pc, #24]	; (80032cc <Init+0xbc>)
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
	Ik(&stanowisko);
 80032b6:	4804      	ldr	r0, [pc, #16]	; (80032c8 <Init+0xb8>)
 80032b8:	f7ff fdd6 	bl	8002e68 <Ik>
}
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200001c4 	.word	0x200001c4
 80032c8:	2000015c 	.word	0x2000015c
 80032cc:	43480000 	.word	0x43480000

080032d0 <CCU43_1_IRQHandler>:
	//x = 30*cosf(t);
	//y = 130 - 30*sinf(t);
}

void TIMER_IRQ()
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
	is_delay = 0;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <CCU43_1_IRQHandler+0x14>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
}
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	200000b1 	.word	0x200000b1

080032e8 <main>:
		  stanowisko.stopa.y= 250;
	  else
		  stanowisko.stopa.y =110;
}
int main(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();
 80032ee:	f7ff fc9b 	bl	8002c28 <DAVE_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
 while(init == 0);
 80032f6:	bf00      	nop
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <main+0x48>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0fb      	beq.n	80032f8 <main+0x10>
  Init();
 8003300:	f7ff ff86 	bl	8003210 <Init>
  delay(2500);
 8003304:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003308:	f7ff fd4c 	bl	8002da4 <delay>
  XMC_Check();
 800330c:	f000 f83c 	bl	8003388 <XMC_Check>
  XMC_Init();
 8003310:	f000 f810 	bl	8003334 <XMC_Init>
  XMC_Check();
 8003314:	f000 f838 	bl	8003388 <XMC_Check>


  while(1)
  {

	  FK_Circle();
 8003318:	f7ff ff1a 	bl	8003150 <FK_Circle>
	  //skok();
	  update();
 800331c:	f7ff fe92 	bl	8003044 <update>
	  Spring();
 8003320:	f7ff ff34 	bl	800318c <Spring>
	  delay(2000);
 8003324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003328:	f7ff fd3c 	bl	8002da4 <delay>

  }
 800332c:	e7f4      	b.n	8003318 <main+0x30>
 800332e:	bf00      	nop
 8003330:	20000158 	.word	0x20000158

08003334 <XMC_Init>:
}

int XMC_Init()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
	init = 1;
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <XMC_Init+0x4c>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 8003340:	2300      	movs	r3, #0
 8003342:	71fb      	strb	r3, [r7, #7]
 8003344:	e014      	b.n	8003370 <XMC_Init+0x3c>
	{
		txData[1] = 0x10 + i;
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	3310      	adds	r3, #16
 800334a:	b2da      	uxtb	r2, r3
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <XMC_Init+0x50>)
 800334e:	705a      	strb	r2, [r3, #1]
		txData[2] = 0xA1;
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <XMC_Init+0x50>)
 8003352:	22a1      	movs	r2, #161	; 0xa1
 8003354:	709a      	strb	r2, [r3, #2]
		txData[3] = EOF;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <XMC_Init+0x50>)
 8003358:	22dd      	movs	r2, #221	; 0xdd
 800335a:	70da      	strb	r2, [r3, #3]
		wyslij(4);
 800335c:	2004      	movs	r0, #4
 800335e:	f7ff fd01 	bl	8002d64 <wyslij>
		delay(300);
 8003362:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003366:	f7ff fd1d 	bl	8002da4 <delay>
}

int XMC_Init()
{
	init = 1;
	for(uint8_t i = 0; i < 8; i++)
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	3301      	adds	r3, #1
 800336e:	71fb      	strb	r3, [r7, #7]
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	2b07      	cmp	r3, #7
 8003374:	d9e7      	bls.n	8003346 <XMC_Init+0x12>
		txData[2] = 0xA1;
		txData[3] = EOF;
		wyslij(4);
		delay(300);
	}
	return 0;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000158 	.word	0x20000158
 8003384:	200001c4 	.word	0x200001c4

08003388 <XMC_Check>:
void XMC_Check()
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 8; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	71fb      	strb	r3, [r7, #7]
 8003392:	e01a      	b.n	80033ca <XMC_Check+0x42>
	{
		DIGITAL_IO_SetOutputHigh(&LED1);
 8003394:	4810      	ldr	r0, [pc, #64]	; (80033d8 <XMC_Check+0x50>)
 8003396:	f7ff fcc5 	bl	8002d24 <DIGITAL_IO_SetOutputHigh>
		txData[1] = 0x10 + i;
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	3310      	adds	r3, #16
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <XMC_Check+0x54>)
 80033a2:	705a      	strb	r2, [r3, #1]
		txData[2] = 0xA3;
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <XMC_Check+0x54>)
 80033a6:	22a3      	movs	r2, #163	; 0xa3
 80033a8:	709a      	strb	r2, [r3, #2]
		txData[3] = EOF;
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <XMC_Check+0x54>)
 80033ac:	22dd      	movs	r2, #221	; 0xdd
 80033ae:	70da      	strb	r2, [r3, #3]
		wyslij(4);
 80033b0:	2004      	movs	r0, #4
 80033b2:	f7ff fcd7 	bl	8002d64 <wyslij>
		delay(300);
 80033b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033ba:	f7ff fcf3 	bl	8002da4 <delay>
		DIGITAL_IO_SetOutputLow((&LED1));
 80033be:	4806      	ldr	r0, [pc, #24]	; (80033d8 <XMC_Check+0x50>)
 80033c0:	f7ff fcc0 	bl	8002d44 <DIGITAL_IO_SetOutputLow>
	}
	return 0;
}
void XMC_Check()
{
	for(uint8_t i = 0; i < 8; i++)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	3301      	adds	r3, #1
 80033c8:	71fb      	strb	r3, [r7, #7]
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d9e1      	bls.n	8003394 <XMC_Check+0xc>
		txData[3] = EOF;
		wyslij(4);
		delay(300);
		DIGITAL_IO_SetOutputLow((&LED1));
	}
}
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	080057dc 	.word	0x080057dc
 80033dc:	200001c4 	.word	0x200001c4

080033e0 <eorx>:
void eorx()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0

	if(rxByte == SOF)
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <eorx+0x70>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2bcc      	cmp	r3, #204	; 0xcc
 80033ea:	d107      	bne.n	80033fc <eorx+0x1c>
	{
		rxData[0] = rxByte;
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <eorx+0x70>)
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <eorx+0x74>)
 80033f2:	701a      	strb	r2, [r3, #0]
		iterator_wiadomosci = 1;
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <eorx+0x78>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e023      	b.n	8003444 <eorx+0x64>
	}
	else if (rxByte == EOF)
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <eorx+0x70>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2bdd      	cmp	r3, #221	; 0xdd
 8003402:	d10e      	bne.n	8003422 <eorx+0x42>
	{
		rxData[iterator_wiadomosci +1] = EOF;
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <eorx+0x78>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3301      	adds	r3, #1
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <eorx+0x74>)
 800340c:	21dd      	movs	r1, #221	; 0xdd
 800340e:	54d1      	strb	r1, [r2, r3]
		iterator_wiadomosci++;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <eorx+0x78>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <eorx+0x78>)
 800341a:	701a      	strb	r2, [r3, #0]
		interpreter_wiadomosci();
 800341c:	f000 f826 	bl	800346c <interpreter_wiadomosci>
 8003420:	e010      	b.n	8003444 <eorx+0x64>
	}
	else if ( iterator_wiadomosci < 9)
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <eorx+0x78>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d80c      	bhi.n	8003444 <eorx+0x64>
	{
		rxData[iterator_wiadomosci] =rxByte;
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <eorx+0x78>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <eorx+0x70>)
 8003432:	7819      	ldrb	r1, [r3, #0]
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <eorx+0x74>)
 8003436:	5499      	strb	r1, [r3, r2]
		iterator_wiadomosci++;
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <eorx+0x78>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <eorx+0x78>)
 8003442:	701a      	strb	r2, [r3, #0]
	}
	UART_Receive(&RS, &rxByte,1);
 8003444:	4805      	ldr	r0, [pc, #20]	; (800345c <eorx+0x7c>)
 8003446:	4902      	ldr	r1, [pc, #8]	; (8003450 <eorx+0x70>)
 8003448:	2201      	movs	r2, #1
 800344a:	f7fe fb99 	bl	8001b80 <UART_Receive>
}
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000154 	.word	0x20000154
 8003454:	200001b8 	.word	0x200001b8
 8003458:	20000155 	.word	0x20000155
 800345c:	20000000 	.word	0x20000000

08003460 <eotx>:
void eotx()
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

}
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <interpreter_wiadomosci>:
void interpreter_wiadomosci()
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0

	if(rxData[0] == SOF && rxData[1] == adress)
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <interpreter_wiadomosci+0xac>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2bcc      	cmp	r3, #204	; 0xcc
 8003478:	d149      	bne.n	800350e <interpreter_wiadomosci+0xa2>
 800347a:	4b27      	ldr	r3, [pc, #156]	; (8003518 <interpreter_wiadomosci+0xac>)
 800347c:	785a      	ldrb	r2, [r3, #1]
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <interpreter_wiadomosci+0xb0>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d143      	bne.n	800350e <interpreter_wiadomosci+0xa2>
	{
		uint8_t numer_silnika;
		numer_silnika = rxData[2] - 0x10;
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <interpreter_wiadomosci+0xac>)
 8003488:	789b      	ldrb	r3, [r3, #2]
 800348a:	3b10      	subs	r3, #16
 800348c:	71fb      	strb	r3, [r7, #7]
		if(rxData[3] == INIT)
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <interpreter_wiadomosci+0xac>)
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	2ba1      	cmp	r3, #161	; 0xa1
 8003494:	d107      	bne.n	80034a6 <interpreter_wiadomosci+0x3a>
			stanowisko.silnik_start[numer_silnika] = rxData[4];
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <interpreter_wiadomosci+0xac>)
 800349a:	7911      	ldrb	r1, [r2, #4]
 800349c:	4a20      	ldr	r2, [pc, #128]	; (8003520 <interpreter_wiadomosci+0xb4>)
 800349e:	4413      	add	r3, r2
 80034a0:	460a      	mov	r2, r1
 80034a2:	709a      	strb	r2, [r3, #2]
 80034a4:	e033      	b.n	800350e <interpreter_wiadomosci+0xa2>
		else if(rxData[3] == CHECK)
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034a8:	78db      	ldrb	r3, [r3, #3]
 80034aa:	2ba3      	cmp	r3, #163	; 0xa3
 80034ac:	d10c      	bne.n	80034c8 <interpreter_wiadomosci+0x5c>
		{
			stanowisko.silnik_start[numer_silnika] = rxData[4];
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034b2:	7911      	ldrb	r1, [r2, #4]
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <interpreter_wiadomosci+0xb4>)
 80034b6:	4413      	add	r3, r2
 80034b8:	460a      	mov	r2, r1
 80034ba:	709a      	strb	r2, [r3, #2]
			stanowisko.silnik_numer[numer_silnika] = rxData[5];
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034c0:	7951      	ldrb	r1, [r2, #5]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <interpreter_wiadomosci+0xb4>)
 80034c4:	54d1      	strb	r1, [r2, r3]
 80034c6:	e022      	b.n	800350e <interpreter_wiadomosci+0xa2>
		}
		else
		{
			stanowisko.i_net[numer_silnika] =rxData[3] << 8 | rxData[4];
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034cc:	78d2      	ldrb	r2, [r2, #3]
 80034ce:	0212      	lsls	r2, r2, #8
 80034d0:	b291      	uxth	r1, r2
 80034d2:	4a11      	ldr	r2, [pc, #68]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034d4:	7912      	ldrb	r2, [r2, #4]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	430a      	orrs	r2, r1
 80034da:	b291      	uxth	r1, r2
 80034dc:	4a10      	ldr	r2, [pc, #64]	; (8003520 <interpreter_wiadomosci+0xb4>)
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	460a      	mov	r2, r1
 80034e4:	80da      	strh	r2, [r3, #6]
			stanowisko.kat_abs[numer_silnika] = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[8];
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034ea:	7952      	ldrb	r2, [r2, #5]
 80034ec:	0611      	lsls	r1, r2, #24
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034f0:	7992      	ldrb	r2, [r2, #6]
 80034f2:	0412      	lsls	r2, r2, #16
 80034f4:	4311      	orrs	r1, r2
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <interpreter_wiadomosci+0xac>)
 80034f8:	79d2      	ldrb	r2, [r2, #7]
 80034fa:	0212      	lsls	r2, r2, #8
 80034fc:	430a      	orrs	r2, r1
 80034fe:	4906      	ldr	r1, [pc, #24]	; (8003518 <interpreter_wiadomosci+0xac>)
 8003500:	7a09      	ldrb	r1, [r1, #8]
 8003502:	430a      	orrs	r2, r1
 8003504:	4906      	ldr	r1, [pc, #24]	; (8003520 <interpreter_wiadomosci+0xb4>)
 8003506:	3302      	adds	r3, #2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	605a      	str	r2, [r3, #4]
		}
	}

}
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	200001b8 	.word	0x200001b8
 800351c:	200000b0 	.word	0x200000b0
 8003520:	2000015c 	.word	0x2000015c

08003524 <sinf>:
 8003524:	b500      	push	{lr}
 8003526:	b085      	sub	sp, #20
 8003528:	4a24      	ldr	r2, [pc, #144]	; (80035bc <sinf+0x98>)
 800352a:	9001      	str	r0, [sp, #4]
 800352c:	9b01      	ldr	r3, [sp, #4]
 800352e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003532:	4293      	cmp	r3, r2
 8003534:	dd1e      	ble.n	8003574 <sinf+0x50>
 8003536:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800353a:	db08      	blt.n	800354e <sinf+0x2a>
 800353c:	eddd 7a01 	vldr	s15, [sp, #4]
 8003540:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003544:	ee17 0a90 	vmov	r0, s15
 8003548:	b005      	add	sp, #20
 800354a:	f85d fb04 	ldr.w	pc, [sp], #4
 800354e:	a902      	add	r1, sp, #8
 8003550:	f000 fb66 	bl	8003c20 <__ieee754_rem_pio2f>
 8003554:	f000 0003 	and.w	r0, r0, #3
 8003558:	2801      	cmp	r0, #1
 800355a:	d020      	beq.n	800359e <sinf+0x7a>
 800355c:	2802      	cmp	r0, #2
 800355e:	d014      	beq.n	800358a <sinf+0x66>
 8003560:	b320      	cbz	r0, 80035ac <sinf+0x88>
 8003562:	9802      	ldr	r0, [sp, #8]
 8003564:	9903      	ldr	r1, [sp, #12]
 8003566:	f000 fcfd 	bl	8003f64 <__kernel_cosf>
 800356a:	ee07 0a90 	vmov	s15, r0
 800356e:	eef1 7a67 	vneg.f32	s15, s15
 8003572:	e7e7      	b.n	8003544 <sinf+0x20>
 8003574:	2100      	movs	r1, #0
 8003576:	2200      	movs	r2, #0
 8003578:	f001 f892 	bl	80046a0 <__kernel_sinf>
 800357c:	ee07 0a90 	vmov	s15, r0
 8003580:	ee17 0a90 	vmov	r0, s15
 8003584:	b005      	add	sp, #20
 8003586:	f85d fb04 	ldr.w	pc, [sp], #4
 800358a:	9802      	ldr	r0, [sp, #8]
 800358c:	9903      	ldr	r1, [sp, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f001 f886 	bl	80046a0 <__kernel_sinf>
 8003594:	ee07 0a90 	vmov	s15, r0
 8003598:	eef1 7a67 	vneg.f32	s15, s15
 800359c:	e7d2      	b.n	8003544 <sinf+0x20>
 800359e:	9802      	ldr	r0, [sp, #8]
 80035a0:	9903      	ldr	r1, [sp, #12]
 80035a2:	f000 fcdf 	bl	8003f64 <__kernel_cosf>
 80035a6:	ee07 0a90 	vmov	s15, r0
 80035aa:	e7cb      	b.n	8003544 <sinf+0x20>
 80035ac:	9802      	ldr	r0, [sp, #8]
 80035ae:	9903      	ldr	r1, [sp, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f001 f875 	bl	80046a0 <__kernel_sinf>
 80035b6:	ee07 0a90 	vmov	s15, r0
 80035ba:	e7c3      	b.n	8003544 <sinf+0x20>
 80035bc:	3f490fd8 	.word	0x3f490fd8

080035c0 <acosf>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4d25      	ldr	r5, [pc, #148]	; (8003658 <acosf+0x98>)
 80035c4:	b08a      	sub	sp, #40	; 0x28
 80035c6:	4606      	mov	r6, r0
 80035c8:	f000 f8f6 	bl	80037b8 <__ieee754_acosf>
 80035cc:	f995 3000 	ldrsb.w	r3, [r5]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4604      	mov	r4, r0
 80035d4:	d003      	beq.n	80035de <acosf+0x1e>
 80035d6:	4630      	mov	r0, r6
 80035d8:	f001 f916 	bl	8004808 <__fpclassifyf>
 80035dc:	b910      	cbnz	r0, 80035e4 <acosf+0x24>
 80035de:	4620      	mov	r0, r4
 80035e0:	b00a      	add	sp, #40	; 0x28
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	4630      	mov	r0, r6
 80035e6:	f001 f8b1 	bl	800474c <fabsf>
 80035ea:	ee07 0a10 	vmov	s14, r0
 80035ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80035f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	ddf0      	ble.n	80035de <acosf+0x1e>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <acosf+0x9c>)
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4630      	mov	r0, r6
 8003604:	2300      	movs	r3, #0
 8003606:	9201      	str	r2, [sp, #4]
 8003608:	9308      	str	r3, [sp, #32]
 800360a:	f001 fb01 	bl	8004c10 <__aeabi_f2d>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4813      	ldr	r0, [pc, #76]	; (8003660 <acosf+0xa0>)
 8003614:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800361c:	f001 f890 	bl	8004740 <nan>
 8003620:	f995 3000 	ldrsb.w	r3, [r5]
 8003624:	2b02      	cmp	r3, #2
 8003626:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800362a:	d00b      	beq.n	8003644 <acosf+0x84>
 800362c:	4668      	mov	r0, sp
 800362e:	f001 f885 	bl	800473c <matherr>
 8003632:	b138      	cbz	r0, 8003644 <acosf+0x84>
 8003634:	9b08      	ldr	r3, [sp, #32]
 8003636:	b953      	cbnz	r3, 800364e <acosf+0x8e>
 8003638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800363c:	f001 fd4e 	bl	80050dc <__aeabi_d2f>
 8003640:	b00a      	add	sp, #40	; 0x28
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f002 f866 	bl	8005714 <__errno>
 8003648:	2321      	movs	r3, #33	; 0x21
 800364a:	6003      	str	r3, [r0, #0]
 800364c:	e7f2      	b.n	8003634 <acosf+0x74>
 800364e:	f002 f861 	bl	8005714 <__errno>
 8003652:	9b08      	ldr	r3, [sp, #32]
 8003654:	6003      	str	r3, [r0, #0]
 8003656:	e7ef      	b.n	8003638 <acosf+0x78>
 8003658:	200000b2 	.word	0x200000b2
 800365c:	08005804 	.word	0x08005804
 8003660:	0800580c 	.word	0x0800580c

08003664 <asinf>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	4d25      	ldr	r5, [pc, #148]	; (80036fc <asinf+0x98>)
 8003668:	b08a      	sub	sp, #40	; 0x28
 800366a:	4606      	mov	r6, r0
 800366c:	f000 f9ce 	bl	8003a0c <__ieee754_asinf>
 8003670:	f995 3000 	ldrsb.w	r3, [r5]
 8003674:	3301      	adds	r3, #1
 8003676:	4604      	mov	r4, r0
 8003678:	d003      	beq.n	8003682 <asinf+0x1e>
 800367a:	4630      	mov	r0, r6
 800367c:	f001 f8c4 	bl	8004808 <__fpclassifyf>
 8003680:	b910      	cbnz	r0, 8003688 <asinf+0x24>
 8003682:	4620      	mov	r0, r4
 8003684:	b00a      	add	sp, #40	; 0x28
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	4630      	mov	r0, r6
 800368a:	f001 f85f 	bl	800474c <fabsf>
 800368e:	ee07 0a10 	vmov	s14, r0
 8003692:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8003696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	ddf0      	ble.n	8003682 <asinf+0x1e>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <asinf+0x9c>)
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	4630      	mov	r0, r6
 80036a8:	2300      	movs	r3, #0
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	9308      	str	r3, [sp, #32]
 80036ae:	f001 faaf 	bl	8004c10 <__aeabi_f2d>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4813      	ldr	r0, [pc, #76]	; (8003704 <asinf+0xa0>)
 80036b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036c0:	f001 f83e 	bl	8004740 <nan>
 80036c4:	f995 3000 	ldrsb.w	r3, [r5]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80036ce:	d00b      	beq.n	80036e8 <asinf+0x84>
 80036d0:	4668      	mov	r0, sp
 80036d2:	f001 f833 	bl	800473c <matherr>
 80036d6:	b138      	cbz	r0, 80036e8 <asinf+0x84>
 80036d8:	9b08      	ldr	r3, [sp, #32]
 80036da:	b953      	cbnz	r3, 80036f2 <asinf+0x8e>
 80036dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036e0:	f001 fcfc 	bl	80050dc <__aeabi_d2f>
 80036e4:	b00a      	add	sp, #40	; 0x28
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	f002 f814 	bl	8005714 <__errno>
 80036ec:	2321      	movs	r3, #33	; 0x21
 80036ee:	6003      	str	r3, [r0, #0]
 80036f0:	e7f2      	b.n	80036d8 <asinf+0x74>
 80036f2:	f002 f80f 	bl	8005714 <__errno>
 80036f6:	9b08      	ldr	r3, [sp, #32]
 80036f8:	6003      	str	r3, [r0, #0]
 80036fa:	e7ef      	b.n	80036dc <asinf+0x78>
 80036fc:	200000b2 	.word	0x200000b2
 8003700:	08005810 	.word	0x08005810
 8003704:	0800580c 	.word	0x0800580c

08003708 <sqrtf>:
 8003708:	b530      	push	{r4, r5, lr}
 800370a:	ed2d 8b02 	vpush	{d8}
 800370e:	4d28      	ldr	r5, [pc, #160]	; (80037b0 <sqrtf+0xa8>)
 8003710:	b08b      	sub	sp, #44	; 0x2c
 8003712:	ee08 0a10 	vmov	s16, r0
 8003716:	f000 fbcf 	bl	8003eb8 <__ieee754_sqrtf>
 800371a:	f995 3000 	ldrsb.w	r3, [r5]
 800371e:	3301      	adds	r3, #1
 8003720:	4604      	mov	r4, r0
 8003722:	d009      	beq.n	8003738 <sqrtf+0x30>
 8003724:	ee18 0a10 	vmov	r0, s16
 8003728:	f001 f86e 	bl	8004808 <__fpclassifyf>
 800372c:	b120      	cbz	r0, 8003738 <sqrtf+0x30>
 800372e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	d404      	bmi.n	8003742 <sqrtf+0x3a>
 8003738:	4620      	mov	r0, r4
 800373a:	b00b      	add	sp, #44	; 0x2c
 800373c:	ecbd 8b02 	vpop	{d8}
 8003740:	bd30      	pop	{r4, r5, pc}
 8003742:	2301      	movs	r3, #1
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <sqrtf+0xac>)
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	ee18 0a10 	vmov	r0, s16
 800374c:	2300      	movs	r3, #0
 800374e:	9201      	str	r2, [sp, #4]
 8003750:	9308      	str	r3, [sp, #32]
 8003752:	f001 fa5d 	bl	8004c10 <__aeabi_f2d>
 8003756:	782c      	ldrb	r4, [r5, #0]
 8003758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800375c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003760:	b98c      	cbnz	r4, 8003786 <sqrtf+0x7e>
 8003762:	2200      	movs	r2, #0
 8003764:	2300      	movs	r3, #0
 8003766:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800376a:	4668      	mov	r0, sp
 800376c:	f000 ffe6 	bl	800473c <matherr>
 8003770:	b198      	cbz	r0, 800379a <sqrtf+0x92>
 8003772:	9b08      	ldr	r3, [sp, #32]
 8003774:	b9b3      	cbnz	r3, 80037a4 <sqrtf+0x9c>
 8003776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800377a:	f001 fcaf 	bl	80050dc <__aeabi_d2f>
 800377e:	b00b      	add	sp, #44	; 0x2c
 8003780:	ecbd 8b02 	vpop	{d8}
 8003784:	bd30      	pop	{r4, r5, pc}
 8003786:	2000      	movs	r0, #0
 8003788:	2100      	movs	r1, #0
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	f001 fbbd 	bl	8004f0c <__aeabi_ddiv>
 8003792:	2c02      	cmp	r4, #2
 8003794:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003798:	d1e7      	bne.n	800376a <sqrtf+0x62>
 800379a:	f001 ffbb 	bl	8005714 <__errno>
 800379e:	2321      	movs	r3, #33	; 0x21
 80037a0:	6003      	str	r3, [r0, #0]
 80037a2:	e7e6      	b.n	8003772 <sqrtf+0x6a>
 80037a4:	f001 ffb6 	bl	8005714 <__errno>
 80037a8:	9b08      	ldr	r3, [sp, #32]
 80037aa:	6003      	str	r3, [r0, #0]
 80037ac:	e7e3      	b.n	8003776 <sqrtf+0x6e>
 80037ae:	bf00      	nop
 80037b0:	200000b2 	.word	0x200000b2
 80037b4:	08005818 	.word	0x08005818

080037b8 <__ieee754_acosf>:
 80037b8:	b508      	push	{r3, lr}
 80037ba:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80037be:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80037c2:	ed2d 8b02 	vpush	{d8}
 80037c6:	ee07 0a90 	vmov	s15, r0
 80037ca:	d016      	beq.n	80037fa <__ieee754_acosf+0x42>
 80037cc:	dc0c      	bgt.n	80037e8 <__ieee754_acosf+0x30>
 80037ce:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80037d2:	da1f      	bge.n	8003814 <__ieee754_acosf+0x5c>
 80037d4:	f1b3 5f0c 	cmp.w	r3, #587202560	; 0x23000000
 80037d8:	dc70      	bgt.n	80038bc <__ieee754_acosf+0x104>
 80037da:	ecbd 8b02 	vpop	{d8}
 80037de:	eddf 7a7a 	vldr	s15, [pc, #488]	; 80039c8 <__ieee754_acosf+0x210>
 80037e2:	ee17 0a90 	vmov	r0, s15
 80037e6:	bd08      	pop	{r3, pc}
 80037e8:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80037ec:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 80037f0:	ecbd 8b02 	vpop	{d8}
 80037f4:	ee17 0a90 	vmov	r0, s15
 80037f8:	bd08      	pop	{r3, pc}
 80037fa:	ecbd 8b02 	vpop	{d8}
 80037fe:	eddf 7a73 	vldr	s15, [pc, #460]	; 80039cc <__ieee754_acosf+0x214>
 8003802:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80039d0 <__ieee754_acosf+0x218>
 8003806:	2800      	cmp	r0, #0
 8003808:	bfd8      	it	le
 800380a:	eef0 7a47 	vmovle.f32	s15, s14
 800380e:	ee17 0a90 	vmov	r0, s15
 8003812:	bd08      	pop	{r3, pc}
 8003814:	2800      	cmp	r0, #0
 8003816:	f2c0 808e 	blt.w	8003936 <__ieee754_acosf+0x17e>
 800381a:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
 800381e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8003822:	eeb6 8a00 	vmov.f32	s16, #96	; 0x60
 8003826:	ee27 8a88 	vmul.f32	s16, s15, s16
 800382a:	ee18 0a10 	vmov	r0, s16
 800382e:	f000 fb43 	bl	8003eb8 <__ieee754_sqrtf>
 8003832:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80039d4 <__ieee754_acosf+0x21c>
 8003836:	ed9f 3a68 	vldr	s6, [pc, #416]	; 80039d8 <__ieee754_acosf+0x220>
 800383a:	ed9f 4a68 	vldr	s8, [pc, #416]	; 80039dc <__ieee754_acosf+0x224>
 800383e:	eddf 2a68 	vldr	s5, [pc, #416]	; 80039e0 <__ieee754_acosf+0x228>
 8003842:	eddf 3a68 	vldr	s7, [pc, #416]	; 80039e4 <__ieee754_acosf+0x22c>
 8003846:	ed9f 5a68 	vldr	s10, [pc, #416]	; 80039e8 <__ieee754_acosf+0x230>
 800384a:	eddf 4a68 	vldr	s9, [pc, #416]	; 80039ec <__ieee754_acosf+0x234>
 800384e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80039f0 <__ieee754_acosf+0x238>
 8003852:	eddf 5a68 	vldr	s11, [pc, #416]	; 80039f4 <__ieee754_acosf+0x23c>
 8003856:	eddf 7a68 	vldr	s15, [pc, #416]	; 80039f8 <__ieee754_acosf+0x240>
 800385a:	eea8 3a07 	vfma.f32	s6, s16, s14
 800385e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8003862:	f023 030f 	bic.w	r3, r3, #15
 8003866:	eee8 3a22 	vfma.f32	s7, s16, s5
 800386a:	eea3 4a08 	vfma.f32	s8, s6, s16
 800386e:	eee3 4a88 	vfma.f32	s9, s7, s16
 8003872:	eea4 5a08 	vfma.f32	s10, s8, s16
 8003876:	eee4 5a88 	vfma.f32	s11, s9, s16
 800387a:	eee5 6a08 	vfma.f32	s13, s10, s16
 800387e:	ee07 3a10 	vmov	s14, r3
 8003882:	eee6 7a88 	vfma.f32	s15, s13, s16
 8003886:	eef0 6a48 	vmov.f32	s13, s16
 800388a:	ee06 0a10 	vmov	s12, r0
 800388e:	eee5 8a88 	vfma.f32	s17, s11, s16
 8003892:	eee7 6a47 	vfms.f32	s13, s14, s14
 8003896:	ee67 7a88 	vmul.f32	s15, s15, s16
 800389a:	ee76 5a07 	vadd.f32	s11, s12, s14
 800389e:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 80038a2:	eec6 7aa5 	vdiv.f32	s15, s13, s11
 80038a6:	eee8 7a06 	vfma.f32	s15, s16, s12
 80038aa:	ecbd 8b02 	vpop	{d8}
 80038ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038b6:	ee17 0a90 	vmov	r0, s15
 80038ba:	bd08      	pop	{r3, pc}
 80038bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038c0:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80039d4 <__ieee754_acosf+0x21c>
 80038c4:	eddf 2a44 	vldr	s5, [pc, #272]	; 80039d8 <__ieee754_acosf+0x220>
 80038c8:	eddf 3a44 	vldr	s7, [pc, #272]	; 80039dc <__ieee754_acosf+0x224>
 80038cc:	eddf 1a44 	vldr	s3, [pc, #272]	; 80039e0 <__ieee754_acosf+0x228>
 80038d0:	ed9f 3a44 	vldr	s6, [pc, #272]	; 80039e4 <__ieee754_acosf+0x22c>
 80038d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80039e8 <__ieee754_acosf+0x230>
 80038d8:	ed9f 4a44 	vldr	s8, [pc, #272]	; 80039ec <__ieee754_acosf+0x234>
 80038dc:	eddf 4a44 	vldr	s9, [pc, #272]	; 80039f0 <__ieee754_acosf+0x238>
 80038e0:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80039f4 <__ieee754_acosf+0x23c>
 80038e4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80039f8 <__ieee754_acosf+0x240>
 80038e8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80039fc <__ieee754_acosf+0x244>
 80038ec:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8003a00 <__ieee754_acosf+0x248>
 80038f0:	eee7 2a01 	vfma.f32	s5, s14, s2
 80038f4:	ecbd 8b02 	vpop	{d8}
 80038f8:	eee2 3a87 	vfma.f32	s7, s5, s14
 80038fc:	eea7 3a21 	vfma.f32	s6, s14, s3
 8003900:	eee3 5a87 	vfma.f32	s11, s7, s14
 8003904:	eea3 4a07 	vfma.f32	s8, s6, s14
 8003908:	eee5 4a87 	vfma.f32	s9, s11, s14
 800390c:	eea4 5a07 	vfma.f32	s10, s8, s14
 8003910:	eee4 6a87 	vfma.f32	s13, s9, s14
 8003914:	eef7 5a00 	vmov.f32	s11, #112	; 0x70
 8003918:	eee5 5a07 	vfma.f32	s11, s10, s14
 800391c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003920:	ee87 7a25 	vdiv.f32	s14, s14, s11
 8003924:	eea7 6ac7 	vfms.f32	s12, s15, s14
 8003928:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800392c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8003930:	ee17 0a90 	vmov	r0, s15
 8003934:	bd08      	pop	{r3, pc}
 8003936:	eeb7 8a00 	vmov.f32	s16, #112	; 0x70
 800393a:	ee77 7a88 	vadd.f32	s15, s15, s16
 800393e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8003942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003946:	eddf 2a23 	vldr	s5, [pc, #140]	; 80039d4 <__ieee754_acosf+0x21c>
 800394a:	eddf 3a23 	vldr	s7, [pc, #140]	; 80039d8 <__ieee754_acosf+0x220>
 800394e:	ed9f 3a24 	vldr	s6, [pc, #144]	; 80039e0 <__ieee754_acosf+0x228>
 8003952:	eddf 4a22 	vldr	s9, [pc, #136]	; 80039dc <__ieee754_acosf+0x224>
 8003956:	ed9f 4a23 	vldr	s8, [pc, #140]	; 80039e4 <__ieee754_acosf+0x22c>
 800395a:	eddf 5a23 	vldr	s11, [pc, #140]	; 80039e8 <__ieee754_acosf+0x230>
 800395e:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80039ec <__ieee754_acosf+0x234>
 8003962:	eddf 6a23 	vldr	s13, [pc, #140]	; 80039f0 <__ieee754_acosf+0x238>
 8003966:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80039f4 <__ieee754_acosf+0x23c>
 800396a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80039f8 <__ieee754_acosf+0x240>
 800396e:	eee7 3aa2 	vfma.f32	s7, s15, s5
 8003972:	eea7 4a83 	vfma.f32	s8, s15, s6
 8003976:	eee3 4aa7 	vfma.f32	s9, s7, s15
 800397a:	eea4 5a27 	vfma.f32	s10, s8, s15
 800397e:	eee4 5aa7 	vfma.f32	s11, s9, s15
 8003982:	eea5 6a27 	vfma.f32	s12, s10, s15
 8003986:	eee5 6aa7 	vfma.f32	s13, s11, s15
 800398a:	eea6 8a27 	vfma.f32	s16, s12, s15
 800398e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003992:	eef0 8a48 	vmov.f32	s17, s16
 8003996:	ee27 8a27 	vmul.f32	s16, s14, s15
 800399a:	ee17 0a90 	vmov	r0, s15
 800399e:	f000 fa8b 	bl	8003eb8 <__ieee754_sqrtf>
 80039a2:	ee88 8a28 	vdiv.f32	s16, s16, s17
 80039a6:	ee06 0a90 	vmov	s13, r0
 80039aa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003a04 <__ieee754_acosf+0x24c>
 80039ae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003a08 <__ieee754_acosf+0x250>
 80039b2:	eea8 7a26 	vfma.f32	s14, s16, s13
 80039b6:	ee06 0a10 	vmov	s12, r0
 80039ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80039be:	eef0 6a00 	vmov.f32	s13, #0
 80039c2:	eee7 7a66 	vfms.f32	s15, s14, s13
 80039c6:	e713      	b.n	80037f0 <__ieee754_acosf+0x38>
 80039c8:	3fc90fdb 	.word	0x3fc90fdb
 80039cc:	00000000 	.word	0x00000000
 80039d0:	40490fdb 	.word	0x40490fdb
 80039d4:	3811ef08 	.word	0x3811ef08
 80039d8:	3a4f7f04 	.word	0x3a4f7f04
 80039dc:	bd241146 	.word	0xbd241146
 80039e0:	3d9dc62e 	.word	0x3d9dc62e
 80039e4:	bf303361 	.word	0xbf303361
 80039e8:	3e4e0aa8 	.word	0x3e4e0aa8
 80039ec:	4001572d 	.word	0x4001572d
 80039f0:	bea6b090 	.word	0xbea6b090
 80039f4:	c019d139 	.word	0xc019d139
 80039f8:	3e2aaaab 	.word	0x3e2aaaab
 80039fc:	33a22168 	.word	0x33a22168
 8003a00:	3fc90fda 	.word	0x3fc90fda
 8003a04:	b3a22168 	.word	0xb3a22168
 8003a08:	40490fda 	.word	0x40490fda

08003a0c <__ieee754_asinf>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003a12:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8003a16:	ed2d 8b04 	vpush	{d8-d9}
 8003a1a:	ee07 0a90 	vmov	s15, r0
 8003a1e:	4605      	mov	r5, r0
 8003a20:	f000 8099 	beq.w	8003b56 <__ieee754_asinf+0x14a>
 8003a24:	dc7f      	bgt.n	8003b26 <__ieee754_asinf+0x11a>
 8003a26:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8003a2a:	da0e      	bge.n	8003a4a <__ieee754_asinf+0x3e>
 8003a2c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003a30:	f280 80a0 	bge.w	8003b74 <__ieee754_asinf+0x168>
 8003a34:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003be0 <__ieee754_asinf+0x1d4>
 8003a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 8003a40:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	dc71      	bgt.n	8003b2e <__ieee754_asinf+0x122>
 8003a4a:	ee17 0a90 	vmov	r0, s15
 8003a4e:	f000 fe7d 	bl	800474c <fabsf>
 8003a52:	ee07 0a90 	vmov	s15, r0
 8003a56:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
 8003a5a:	ee38 8ae7 	vsub.f32	s16, s17, s15
 8003a5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003a62:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003a66:	ed9f 3a5f 	vldr	s6, [pc, #380]	; 8003be4 <__ieee754_asinf+0x1d8>
 8003a6a:	ed9f 4a5f 	vldr	s8, [pc, #380]	; 8003be8 <__ieee754_asinf+0x1dc>
 8003a6e:	eddf 3a5f 	vldr	s7, [pc, #380]	; 8003bec <__ieee754_asinf+0x1e0>
 8003a72:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 8003bf0 <__ieee754_asinf+0x1e4>
 8003a76:	eddf 4a5f 	vldr	s9, [pc, #380]	; 8003bf4 <__ieee754_asinf+0x1e8>
 8003a7a:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8003bf8 <__ieee754_asinf+0x1ec>
 8003a7e:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8003bfc <__ieee754_asinf+0x1f0>
 8003a82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c00 <__ieee754_asinf+0x1f4>
 8003a86:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003c04 <__ieee754_asinf+0x1f8>
 8003a8a:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8003c08 <__ieee754_asinf+0x1fc>
 8003a8e:	eea8 4a03 	vfma.f32	s8, s16, s6
 8003a92:	eee8 4a23 	vfma.f32	s9, s16, s7
 8003a96:	eea4 5a08 	vfma.f32	s10, s8, s16
 8003a9a:	eee4 5a88 	vfma.f32	s11, s9, s16
 8003a9e:	eea5 6a08 	vfma.f32	s12, s10, s16
 8003aa2:	eea5 7a88 	vfma.f32	s14, s11, s16
 8003aa6:	eee6 6a08 	vfma.f32	s13, s12, s16
 8003aaa:	eee7 8a08 	vfma.f32	s17, s14, s16
 8003aae:	eee6 7a88 	vfma.f32	s15, s13, s16
 8003ab2:	ee18 0a10 	vmov	r0, s16
 8003ab6:	eeb0 9a68 	vmov.f32	s18, s17
 8003aba:	ee67 8a88 	vmul.f32	s17, s15, s16
 8003abe:	f000 f9fb 	bl	8003eb8 <__ieee754_sqrtf>
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <__ieee754_asinf+0x200>)
 8003ac4:	429c      	cmp	r4, r3
 8003ac6:	ee06 0a90 	vmov	s13, r0
 8003aca:	dc35      	bgt.n	8003b38 <__ieee754_asinf+0x12c>
 8003acc:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8003ad0:	f023 030f 	bic.w	r3, r3, #15
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef1 5a67 	vneg.f32	s11, s15
 8003adc:	eea5 8aa7 	vfma.f32	s16, s11, s15
 8003ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae4:	eec8 8a89 	vdiv.f32	s17, s17, s18
 8003ae8:	ee88 8a27 	vdiv.f32	s16, s16, s15
 8003aec:	eddf 7a48 	vldr	s15, [pc, #288]	; 8003c10 <__ieee754_asinf+0x204>
 8003af0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003c14 <__ieee754_asinf+0x208>
 8003af4:	eeb0 6a00 	vmov.f32	s12, #0
 8003af8:	eee8 7a46 	vfms.f32	s15, s16, s12
 8003afc:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8003b00:	eeb0 5a47 	vmov.f32	s10, s14
 8003b04:	eea5 5a86 	vfma.f32	s10, s11, s12
 8003b08:	eed6 7aa8 	vfnms.f32	s15, s13, s17
 8003b0c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b14:	ecbd 8b04 	vpop	{d8-d9}
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	bfd8      	it	le
 8003b1c:	eef1 7a67 	vnegle.f32	s15, s15
 8003b20:	ee17 0a90 	vmov	r0, s15
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
 8003b26:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003b2a:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8003b2e:	ecbd 8b04 	vpop	{d8-d9}
 8003b32:	ee17 0a90 	vmov	r0, s15
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	eec8 8a89 	vdiv.f32	s17, s17, s18
 8003b3c:	eddf 7a36 	vldr	s15, [pc, #216]	; 8003c18 <__ieee754_asinf+0x20c>
 8003b40:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003c1c <__ieee754_asinf+0x210>
 8003b44:	eee6 6aa8 	vfma.f32	s13, s13, s17
 8003b48:	eeb0 6a00 	vmov.f32	s12, #0
 8003b4c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8003b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b54:	e7de      	b.n	8003b14 <__ieee754_asinf+0x108>
 8003b56:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003c10 <__ieee754_asinf+0x204>
 8003b5a:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003c1c <__ieee754_asinf+0x210>
 8003b5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b62:	ecbd 8b04 	vpop	{d8-d9}
 8003b66:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003b6a:	eef0 7a47 	vmov.f32	s15, s14
 8003b6e:	ee17 0a90 	vmov	r0, s15
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003b78:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8003be4 <__ieee754_asinf+0x1d8>
 8003b7c:	ed9f 3a1a 	vldr	s6, [pc, #104]	; 8003be8 <__ieee754_asinf+0x1dc>
 8003b80:	ed9f 4a1b 	vldr	s8, [pc, #108]	; 8003bf0 <__ieee754_asinf+0x1e4>
 8003b84:	eddf 2a19 	vldr	s5, [pc, #100]	; 8003bec <__ieee754_asinf+0x1e0>
 8003b88:	eddf 3a1a 	vldr	s7, [pc, #104]	; 8003bf4 <__ieee754_asinf+0x1e8>
 8003b8c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003bf8 <__ieee754_asinf+0x1ec>
 8003b90:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8003bfc <__ieee754_asinf+0x1f0>
 8003b94:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 8003c00 <__ieee754_asinf+0x1f4>
 8003b98:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003c04 <__ieee754_asinf+0x1f8>
 8003b9c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003c08 <__ieee754_asinf+0x1fc>
 8003ba0:	eea7 3a02 	vfma.f32	s6, s14, s4
 8003ba4:	ecbd 8b04 	vpop	{d8-d9}
 8003ba8:	eea3 4a07 	vfma.f32	s8, s6, s14
 8003bac:	eee7 3a22 	vfma.f32	s7, s14, s5
 8003bb0:	eea4 6a07 	vfma.f32	s12, s8, s14
 8003bb4:	eee3 4a87 	vfma.f32	s9, s7, s14
 8003bb8:	eea6 5a07 	vfma.f32	s10, s12, s14
 8003bbc:	eee4 5a87 	vfma.f32	s11, s9, s14
 8003bc0:	eee5 6a07 	vfma.f32	s13, s10, s14
 8003bc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x70
 8003bc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8003bcc:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003bd0:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8003bd4:	eee7 7a87 	vfma.f32	s15, s15, s14
 8003bd8:	ee17 0a90 	vmov	r0, s15
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	7149f2ca 	.word	0x7149f2ca
 8003be4:	3811ef08 	.word	0x3811ef08
 8003be8:	3a4f7f04 	.word	0x3a4f7f04
 8003bec:	3d9dc62e 	.word	0x3d9dc62e
 8003bf0:	bd241146 	.word	0xbd241146
 8003bf4:	bf303361 	.word	0xbf303361
 8003bf8:	3e4e0aa8 	.word	0x3e4e0aa8
 8003bfc:	4001572d 	.word	0x4001572d
 8003c00:	bea6b090 	.word	0xbea6b090
 8003c04:	c019d139 	.word	0xc019d139
 8003c08:	3e2aaaab 	.word	0x3e2aaaab
 8003c0c:	3f799999 	.word	0x3f799999
 8003c10:	b33bbd2e 	.word	0xb33bbd2e
 8003c14:	3f490fdb 	.word	0x3f490fdb
 8003c18:	333bbd2e 	.word	0x333bbd2e
 8003c1c:	3fc90fdb 	.word	0x3fc90fdb

08003c20 <__ieee754_rem_pio2f>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4a97      	ldr	r2, [pc, #604]	; (8003e80 <__ieee754_rem_pio2f+0x260>)
 8003c24:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003c28:	4294      	cmp	r4, r2
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	460d      	mov	r5, r1
 8003c30:	dd68      	ble.n	8003d04 <__ieee754_rem_pio2f+0xe4>
 8003c32:	4a94      	ldr	r2, [pc, #592]	; (8003e84 <__ieee754_rem_pio2f+0x264>)
 8003c34:	4294      	cmp	r4, r2
 8003c36:	dc1c      	bgt.n	8003c72 <__ieee754_rem_pio2f+0x52>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	eddf 7a93 	vldr	s15, [pc, #588]	; 8003e88 <__ieee754_rem_pio2f+0x268>
 8003c3e:	4a93      	ldr	r2, [pc, #588]	; (8003e8c <__ieee754_rem_pio2f+0x26c>)
 8003c40:	f024 040f 	bic.w	r4, r4, #15
 8003c44:	ee07 0a10 	vmov	s14, r0
 8003c48:	f340 80e2 	ble.w	8003e10 <__ieee754_rem_pio2f+0x1f0>
 8003c4c:	4294      	cmp	r4, r2
 8003c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c52:	d067      	beq.n	8003d24 <__ieee754_rem_pio2f+0x104>
 8003c54:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003e90 <__ieee754_rem_pio2f+0x270>
 8003c58:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c62:	edc1 6a00 	vstr	s13, [r1]
 8003c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c6a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003c6e:	b006      	add	sp, #24
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
 8003c72:	4a88      	ldr	r2, [pc, #544]	; (8003e94 <__ieee754_rem_pio2f+0x274>)
 8003c74:	4294      	cmp	r4, r2
 8003c76:	dd67      	ble.n	8003d48 <__ieee754_rem_pio2f+0x128>
 8003c78:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003c7c:	da48      	bge.n	8003d10 <__ieee754_rem_pio2f+0xf0>
 8003c7e:	15e2      	asrs	r2, r4, #23
 8003c80:	3a86      	subs	r2, #134	; 0x86
 8003c82:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003c86:	ee07 3a10 	vmov	s14, r3
 8003c8a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003c8e:	eddf 7a82 	vldr	s15, [pc, #520]	; 8003e98 <__ieee754_rem_pio2f+0x278>
 8003c92:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003c96:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003c9a:	edcd 6a03 	vstr	s13, [sp, #12]
 8003c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca2:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8003ca6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003caa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003cae:	edcd 6a04 	vstr	s13, [sp, #16]
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbe:	edcd 7a05 	vstr	s15, [sp, #20]
 8003cc2:	f040 80b8 	bne.w	8003e36 <__ieee754_rem_pio2f+0x216>
 8003cc6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	bf14      	ite	ne
 8003cd0:	2302      	movne	r3, #2
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	4971      	ldr	r1, [pc, #452]	; (8003e9c <__ieee754_rem_pio2f+0x27c>)
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003cdc:	a803      	add	r0, sp, #12
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f000 f9ca 	bl	8004078 <__kernel_rem_pio2f>
 8003ce4:	2e00      	cmp	r6, #0
 8003ce6:	da11      	bge.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003ce8:	ed95 7a00 	vldr	s14, [r5]
 8003cec:	edd5 7a01 	vldr	s15, [r5, #4]
 8003cf0:	eeb1 7a47 	vneg.f32	s14, s14
 8003cf4:	eef1 7a67 	vneg.f32	s15, s15
 8003cf8:	4240      	negs	r0, r0
 8003cfa:	ed85 7a00 	vstr	s14, [r5]
 8003cfe:	edc5 7a01 	vstr	s15, [r5, #4]
 8003d02:	e003      	b.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003d04:	2200      	movs	r2, #0
 8003d06:	6028      	str	r0, [r5, #0]
 8003d08:	604a      	str	r2, [r1, #4]
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	b006      	add	sp, #24
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	ee07 0a90 	vmov	s15, r0
 8003d14:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003d18:	2000      	movs	r0, #0
 8003d1a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003d1e:	edc1 7a00 	vstr	s15, [r1]
 8003d22:	e7f3      	b.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003d24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003ea0 <__ieee754_rem_pio2f+0x280>
 8003d28:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ea4 <__ieee754_rem_pio2f+0x284>
 8003d2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d30:	2001      	movs	r0, #1
 8003d32:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003d36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d3a:	edc1 6a00 	vstr	s13, [r1]
 8003d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d42:	edc1 7a01 	vstr	s15, [r1, #4]
 8003d46:	e7e1      	b.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003d48:	f000 fd00 	bl	800474c <fabsf>
 8003d4c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8003ea8 <__ieee754_rem_pio2f+0x288>
 8003d50:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 8003e88 <__ieee754_rem_pio2f+0x268>
 8003d54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003e90 <__ieee754_rem_pio2f+0x270>
 8003d58:	ee07 0a10 	vmov	s14, r0
 8003d5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003d60:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d68:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003d6c:	ee17 0a90 	vmov	r0, s15
 8003d70:	eef1 5a46 	vneg.f32	s11, s12
 8003d74:	eef0 7a47 	vmov.f32	s15, s14
 8003d78:	281f      	cmp	r0, #31
 8003d7a:	eee5 7a85 	vfma.f32	s15, s11, s10
 8003d7e:	ee26 7a26 	vmul.f32	s14, s12, s13
 8003d82:	dc1d      	bgt.n	8003dc0 <__ieee754_rem_pio2f+0x1a0>
 8003d84:	4a49      	ldr	r2, [pc, #292]	; (8003eac <__ieee754_rem_pio2f+0x28c>)
 8003d86:	1e41      	subs	r1, r0, #1
 8003d88:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8003d8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d015      	beq.n	8003dc0 <__ieee754_rem_pio2f+0x1a0>
 8003d94:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003d98:	edc5 6a00 	vstr	s13, [r5]
 8003d9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003da0:	2e00      	cmp	r6, #0
 8003da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003da6:	edc5 7a01 	vstr	s15, [r5, #4]
 8003daa:	daaf      	bge.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003dac:	eef1 6a66 	vneg.f32	s13, s13
 8003db0:	eef1 7a67 	vneg.f32	s15, s15
 8003db4:	edc5 6a00 	vstr	s13, [r5]
 8003db8:	edc5 7a01 	vstr	s15, [r5, #4]
 8003dbc:	4240      	negs	r0, r0
 8003dbe:	e7a5      	b.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003dc0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003dc4:	15e4      	asrs	r4, r4, #23
 8003dc6:	ee16 3a90 	vmov	r3, s13
 8003dca:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003dce:	1ae3      	subs	r3, r4, r3
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	dde1      	ble.n	8003d98 <__ieee754_rem_pio2f+0x178>
 8003dd4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003ea0 <__ieee754_rem_pio2f+0x280>
 8003dd8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003ea4 <__ieee754_rem_pio2f+0x284>
 8003ddc:	eeb0 5a67 	vmov.f32	s10, s15
 8003de0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8003de4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003de8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003dec:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8003df0:	ee75 6a67 	vsub.f32	s13, s10, s15
 8003df4:	eeb0 7a67 	vmov.f32	s14, s15
 8003df8:	ee16 3a90 	vmov	r3, s13
 8003dfc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003e00:	1ae4      	subs	r4, r4, r3
 8003e02:	2c19      	cmp	r4, #25
 8003e04:	dc2c      	bgt.n	8003e60 <__ieee754_rem_pio2f+0x240>
 8003e06:	edc5 6a00 	vstr	s13, [r5]
 8003e0a:	eef0 7a45 	vmov.f32	s15, s10
 8003e0e:	e7c5      	b.n	8003d9c <__ieee754_rem_pio2f+0x17c>
 8003e10:	4294      	cmp	r4, r2
 8003e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e16:	d010      	beq.n	8003e3a <__ieee754_rem_pio2f+0x21a>
 8003e18:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003e90 <__ieee754_rem_pio2f+0x270>
 8003e1c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e28:	edc1 6a00 	vstr	s13, [r1]
 8003e2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e30:	edc1 7a01 	vstr	s15, [r1, #4]
 8003e34:	e76a      	b.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003e36:	2303      	movs	r3, #3
 8003e38:	e74c      	b.n	8003cd4 <__ieee754_rem_pio2f+0xb4>
 8003e3a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003ea0 <__ieee754_rem_pio2f+0x280>
 8003e3e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003ea4 <__ieee754_rem_pio2f+0x284>
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e46:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003e4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e52:	edc1 6a00 	vstr	s13, [r1]
 8003e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e5a:	edc1 7a01 	vstr	s15, [r1, #4]
 8003e5e:	e755      	b.n	8003d0c <__ieee754_rem_pio2f+0xec>
 8003e60:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003eb0 <__ieee754_rem_pio2f+0x290>
 8003e64:	eddf 4a13 	vldr	s9, [pc, #76]	; 8003eb4 <__ieee754_rem_pio2f+0x294>
 8003e68:	eef0 7a45 	vmov.f32	s15, s10
 8003e6c:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8003e70:	ee35 7a67 	vsub.f32	s14, s10, s15
 8003e74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003e78:	ee96 7a24 	vfnms.f32	s14, s12, s9
 8003e7c:	e78a      	b.n	8003d94 <__ieee754_rem_pio2f+0x174>
 8003e7e:	bf00      	nop
 8003e80:	3f490fd8 	.word	0x3f490fd8
 8003e84:	4016cbe3 	.word	0x4016cbe3
 8003e88:	3fc90f80 	.word	0x3fc90f80
 8003e8c:	3fc90fd0 	.word	0x3fc90fd0
 8003e90:	37354443 	.word	0x37354443
 8003e94:	43490f80 	.word	0x43490f80
 8003e98:	43800000 	.word	0x43800000
 8003e9c:	080058a0 	.word	0x080058a0
 8003ea0:	37354400 	.word	0x37354400
 8003ea4:	2e85a308 	.word	0x2e85a308
 8003ea8:	3f22f984 	.word	0x3f22f984
 8003eac:	08005820 	.word	0x08005820
 8003eb0:	2e85a300 	.word	0x2e85a300
 8003eb4:	248d3132 	.word	0x248d3132

08003eb8 <__ieee754_sqrtf>:
 8003eb8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8003ebc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003ec0:	b470      	push	{r4, r5, r6}
 8003ec2:	ee07 0a90 	vmov	s15, r0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	d232      	bcs.n	8003f30 <__ieee754_sqrtf+0x78>
 8003eca:	b36a      	cbz	r2, 8003f28 <__ieee754_sqrtf+0x70>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	db41      	blt.n	8003f54 <__ieee754_sqrtf+0x9c>
 8003ed0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003ed4:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8003ed8:	d330      	bcc.n	8003f3c <__ieee754_sqrtf+0x84>
 8003eda:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8003ede:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003ee2:	07d1      	lsls	r1, r2, #31
 8003ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ee8:	bf48      	it	mi
 8003eea:	005b      	lslmi	r3, r3, #1
 8003eec:	2400      	movs	r4, #0
 8003eee:	1056      	asrs	r6, r2, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4625      	mov	r5, r4
 8003ef4:	2119      	movs	r1, #25
 8003ef6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003efa:	18a8      	adds	r0, r5, r2
 8003efc:	4298      	cmp	r0, r3
 8003efe:	dc02      	bgt.n	8003f06 <__ieee754_sqrtf+0x4e>
 8003f00:	1a1b      	subs	r3, r3, r0
 8003f02:	1885      	adds	r5, r0, r2
 8003f04:	4414      	add	r4, r2
 8003f06:	3901      	subs	r1, #1
 8003f08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f0c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003f10:	d1f3      	bne.n	8003efa <__ieee754_sqrtf+0x42>
 8003f12:	b113      	cbz	r3, 8003f1a <__ieee754_sqrtf+0x62>
 8003f14:	f004 0301 	and.w	r3, r4, #1
 8003f18:	441c      	add	r4, r3
 8003f1a:	1064      	asrs	r4, r4, #1
 8003f1c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8003f20:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8003f24:	ee07 3a90 	vmov	s15, r3
 8003f28:	ee17 0a90 	vmov	r0, s15
 8003f2c:	bc70      	pop	{r4, r5, r6}
 8003f2e:	4770      	bx	lr
 8003f30:	eee7 7aa7 	vfma.f32	s15, s15, s15
 8003f34:	bc70      	pop	{r4, r5, r6}
 8003f36:	ee17 0a90 	vmov	r0, s15
 8003f3a:	4770      	bx	lr
 8003f3c:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8003f40:	d10d      	bne.n	8003f5e <__ieee754_sqrtf+0xa6>
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	0218      	lsls	r0, r3, #8
 8003f46:	f102 0201 	add.w	r2, r2, #1
 8003f4a:	d5fa      	bpl.n	8003f42 <__ieee754_sqrtf+0x8a>
 8003f4c:	f1c2 0201 	rsb	r2, r2, #1
 8003f50:	4411      	add	r1, r2
 8003f52:	e7c2      	b.n	8003eda <__ieee754_sqrtf+0x22>
 8003f54:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8003f58:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8003f5c:	e7e4      	b.n	8003f28 <__ieee754_sqrtf+0x70>
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4411      	add	r1, r2
 8003f62:	e7ba      	b.n	8003eda <__ieee754_sqrtf+0x22>

08003f64 <__kernel_cosf>:
 8003f64:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003f68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003f6c:	ee06 0a10 	vmov	s12, r0
 8003f70:	ee06 1a90 	vmov	s13, r1
 8003f74:	da2e      	bge.n	8003fd4 <__kernel_cosf+0x70>
 8003f76:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8003f7a:	ee17 3a90 	vmov	r3, s15
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d064      	beq.n	800404c <__kernel_cosf+0xe8>
 8003f82:	ee26 7a06 	vmul.f32	s14, s12, s12
 8003f86:	eddf 3a34 	vldr	s7, [pc, #208]	; 8004058 <__kernel_cosf+0xf4>
 8003f8a:	ed9f 4a34 	vldr	s8, [pc, #208]	; 800405c <__kernel_cosf+0xf8>
 8003f8e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8004060 <__kernel_cosf+0xfc>
 8003f92:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8004064 <__kernel_cosf+0x100>
 8003f96:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004068 <__kernel_cosf+0x104>
 8003f9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800406c <__kernel_cosf+0x108>
 8003f9e:	eea7 4a23 	vfma.f32	s8, s14, s7
 8003fa2:	eee4 4a07 	vfma.f32	s9, s8, s14
 8003fa6:	eea4 5a87 	vfma.f32	s10, s9, s14
 8003faa:	eee5 7a07 	vfma.f32	s15, s10, s14
 8003fae:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003fb2:	ee65 5a87 	vmul.f32	s11, s11, s14
 8003fb6:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8003fba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8003fbe:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003fc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8003fc6:	eed7 6a06 	vfnms.f32	s13, s14, s12
 8003fca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003fce:	ee17 0a90 	vmov	r0, s15
 8003fd2:	4770      	bx	lr
 8003fd4:	ee26 7a06 	vmul.f32	s14, s12, s12
 8003fd8:	eddf 3a1f 	vldr	s7, [pc, #124]	; 8004058 <__kernel_cosf+0xf4>
 8003fdc:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 800405c <__kernel_cosf+0xf8>
 8003fe0:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8004060 <__kernel_cosf+0xfc>
 8003fe4:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004064 <__kernel_cosf+0x100>
 8003fe8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004068 <__kernel_cosf+0x104>
 8003fec:	eddf 5a1f 	vldr	s11, [pc, #124]	; 800406c <__kernel_cosf+0x108>
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <__kernel_cosf+0x10c>)
 8003ff2:	eea7 4a23 	vfma.f32	s8, s14, s7
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	eee4 4a07 	vfma.f32	s9, s8, s14
 8003ffc:	eea4 5a87 	vfma.f32	s10, s9, s14
 8004000:	eee5 7a07 	vfma.f32	s15, s10, s14
 8004004:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004008:	ee65 5a87 	vmul.f32	s11, s11, s14
 800400c:	ddd3      	ble.n	8003fb6 <__kernel_cosf+0x52>
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <__kernel_cosf+0x110>)
 8004010:	4293      	cmp	r3, r2
 8004012:	dc16      	bgt.n	8004042 <__kernel_cosf+0xde>
 8004014:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8004020:	ee35 5a67 	vsub.f32	s10, s10, s15
 8004024:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8004028:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 800402c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004030:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8004034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004038:	ee75 7a67 	vsub.f32	s15, s10, s15
 800403c:	ee17 0a90 	vmov	r0, s15
 8004040:	4770      	bx	lr
 8004042:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 8004046:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 800404a:	e7eb      	b.n	8004024 <__kernel_cosf+0xc0>
 800404c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004050:	ee17 0a90 	vmov	r0, s15
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	ad47d74e 	.word	0xad47d74e
 800405c:	310f74f6 	.word	0x310f74f6
 8004060:	b493f27c 	.word	0xb493f27c
 8004064:	37d00d01 	.word	0x37d00d01
 8004068:	bab60b61 	.word	0xbab60b61
 800406c:	3d2aaaab 	.word	0x3d2aaaab
 8004070:	3e999999 	.word	0x3e999999
 8004074:	3f480000 	.word	0x3f480000

08004078 <__kernel_rem_pio2f>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	ed2d 8b04 	vpush	{d8-d9}
 8004080:	b0d7      	sub	sp, #348	; 0x15c
 8004082:	1e5e      	subs	r6, r3, #1
 8004084:	4ca5      	ldr	r4, [pc, #660]	; (800431c <__kernel_rem_pio2f+0x2a4>)
 8004086:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8004088:	9302      	str	r3, [sp, #8]
 800408a:	1ed3      	subs	r3, r2, #3
 800408c:	bf48      	it	mi
 800408e:	1d13      	addmi	r3, r2, #4
 8004090:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8004094:	9101      	str	r1, [sp, #4]
 8004096:	10db      	asrs	r3, r3, #3
 8004098:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800409c:	ea6f 0a03 	mvn.w	sl, r3
 80040a0:	1971      	adds	r1, r6, r5
 80040a2:	9303      	str	r3, [sp, #12]
 80040a4:	4681      	mov	r9, r0
 80040a6:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 80040aa:	eba3 0306 	sub.w	r3, r3, r6
 80040ae:	d414      	bmi.n	80040da <__kernel_rem_pio2f+0x62>
 80040b0:	4419      	add	r1, r3
 80040b2:	9865      	ldr	r0, [sp, #404]	; 0x194
 80040b4:	3101      	adds	r1, #1
 80040b6:	aa1a      	add	r2, sp, #104	; 0x68
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bfaa      	itet	ge
 80040bc:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 80040c0:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8004320 <__kernel_rem_pio2f+0x2a8>
 80040c4:	ee07 4a90 	vmovge	s15, r4
 80040c8:	f103 0301 	add.w	r3, r3, #1
 80040cc:	bfa8      	it	ge
 80040ce:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80040d2:	428b      	cmp	r3, r1
 80040d4:	ece2 7a01 	vstmia	r2!, {s15}
 80040d8:	d1ee      	bne.n	80040b8 <__kernel_rem_pio2f+0x40>
 80040da:	2d00      	cmp	r5, #0
 80040dc:	db1a      	blt.n	8004114 <__kernel_rem_pio2f+0x9c>
 80040de:	9b02      	ldr	r3, [sp, #8]
 80040e0:	a91a      	add	r1, sp, #104	; 0x68
 80040e2:	1c6c      	adds	r4, r5, #1
 80040e4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80040e8:	a842      	add	r0, sp, #264	; 0x108
 80040ea:	009f      	lsls	r7, r3, #2
 80040ec:	2e00      	cmp	r6, #0
 80040ee:	f2c0 81ce 	blt.w	800448e <__kernel_rem_pio2f+0x416>
 80040f2:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8004320 <__kernel_rem_pio2f+0x2a8>
 80040f6:	464a      	mov	r2, r9
 80040f8:	19cb      	adds	r3, r1, r7
 80040fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80040fe:	ecf2 6a01 	vldmia	r2!, {s13}
 8004102:	4299      	cmp	r1, r3
 8004104:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004108:	d1f7      	bne.n	80040fa <__kernel_rem_pio2f+0x82>
 800410a:	3104      	adds	r1, #4
 800410c:	42a1      	cmp	r1, r4
 800410e:	ece0 7a01 	vstmia	r0!, {s15}
 8004112:	d1eb      	bne.n	80040ec <__kernel_rem_pio2f+0x74>
 8004114:	9a02      	ldr	r2, [sp, #8]
 8004116:	eddf 8a84 	vldr	s17, [pc, #528]	; 8004328 <__kernel_rem_pio2f+0x2b0>
 800411a:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8004324 <__kernel_rem_pio2f+0x2ac>
 800411e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8004122:	3b01      	subs	r3, #1
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 800412a:	aa06      	add	r2, sp, #24
 800412c:	1d1f      	adds	r7, r3, #4
 800412e:	4413      	add	r3, r2
 8004130:	4417      	add	r7, r2
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004138:	462c      	mov	r4, r5
 800413a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800413e:	ab56      	add	r3, sp, #344	; 0x158
 8004140:	445b      	add	r3, fp
 8004142:	2c00      	cmp	r4, #0
 8004144:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 8004148:	dd19      	ble.n	800417e <__kernel_rem_pio2f+0x106>
 800414a:	a942      	add	r1, sp, #264	; 0x108
 800414c:	eb01 030b 	add.w	r3, r1, fp
 8004150:	aa05      	add	r2, sp, #20
 8004152:	ee66 7aa8 	vmul.f32	s15, s13, s17
 8004156:	eeb0 7a66 	vmov.f32	s14, s13
 800415a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800415e:	ed33 6a01 	vldmdb	r3!, {s12}
 8004162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004166:	428b      	cmp	r3, r1
 8004168:	eea7 7ac8 	vfms.f32	s14, s15, s16
 800416c:	ee77 6a86 	vadd.f32	s13, s15, s12
 8004170:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004174:	ee17 0a10 	vmov	r0, s14
 8004178:	f842 0f04 	str.w	r0, [r2, #4]!
 800417c:	d1e9      	bne.n	8004152 <__kernel_rem_pio2f+0xda>
 800417e:	ee16 0a90 	vmov	r0, s13
 8004182:	4651      	mov	r1, sl
 8004184:	f000 fb5a 	bl	800483c <scalbnf>
 8004188:	ee09 0a10 	vmov	s18, r0
 800418c:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 8004190:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004194:	ee17 0a90 	vmov	r0, s15
 8004198:	f000 fadc 	bl	8004754 <floorf>
 800419c:	ee07 0a10 	vmov	s14, r0
 80041a0:	eef2 7a00 	vmov.f32	s15, #32
 80041a4:	eea7 9a67 	vfms.f32	s18, s14, s15
 80041a8:	f1ba 0f00 	cmp.w	sl, #0
 80041ac:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 80041b0:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80041b4:	ee39 9a67 	vsub.f32	s18, s18, s15
 80041b8:	f340 814d 	ble.w	8004456 <__kernel_rem_pio2f+0x3de>
 80041bc:	1e61      	subs	r1, r4, #1
 80041be:	aa06      	add	r2, sp, #24
 80041c0:	f1ca 0308 	rsb	r3, sl, #8
 80041c4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80041c8:	fa40 f203 	asr.w	r2, r0, r3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	f10d 0e18 	add.w	lr, sp, #24
 80041d4:	1ac3      	subs	r3, r0, r3
 80041d6:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 80041da:	ee19 1a90 	vmov	r1, s19
 80041de:	4411      	add	r1, r2
 80041e0:	f1ca 0007 	rsb	r0, sl, #7
 80041e4:	ee09 1a90 	vmov	s19, r1
 80041e8:	fa43 fc00 	asr.w	ip, r3, r0
 80041ec:	f1bc 0f00 	cmp.w	ip, #0
 80041f0:	dd37      	ble.n	8004262 <__kernel_rem_pio2f+0x1ea>
 80041f2:	ee19 3a90 	vmov	r3, s19
 80041f6:	2c00      	cmp	r4, #0
 80041f8:	f103 0301 	add.w	r3, r3, #1
 80041fc:	ee09 3a90 	vmov	s19, r3
 8004200:	f340 81de 	ble.w	80045c0 <__kernel_rem_pio2f+0x548>
 8004204:	2200      	movs	r2, #0
 8004206:	4610      	mov	r0, r2
 8004208:	a905      	add	r1, sp, #20
 800420a:	e008      	b.n	800421e <__kernel_rem_pio2f+0x1a6>
 800420c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8004210:	b113      	cbz	r3, 8004218 <__kernel_rem_pio2f+0x1a0>
 8004212:	f8c1 e000 	str.w	lr, [r1]
 8004216:	2001      	movs	r0, #1
 8004218:	3201      	adds	r2, #1
 800421a:	4294      	cmp	r4, r2
 800421c:	dd0b      	ble.n	8004236 <__kernel_rem_pio2f+0x1be>
 800421e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8004222:	2800      	cmp	r0, #0
 8004224:	d0f2      	beq.n	800420c <__kernel_rem_pio2f+0x194>
 8004226:	3201      	adds	r2, #1
 8004228:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800422c:	4294      	cmp	r4, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	f04f 0001 	mov.w	r0, #1
 8004234:	dcf3      	bgt.n	800421e <__kernel_rem_pio2f+0x1a6>
 8004236:	f1ba 0f00 	cmp.w	sl, #0
 800423a:	dd0f      	ble.n	800425c <__kernel_rem_pio2f+0x1e4>
 800423c:	f1ba 0f01 	cmp.w	sl, #1
 8004240:	f000 8111 	beq.w	8004466 <__kernel_rem_pio2f+0x3ee>
 8004244:	f1ba 0f02 	cmp.w	sl, #2
 8004248:	d108      	bne.n	800425c <__kernel_rem_pio2f+0x1e4>
 800424a:	1e62      	subs	r2, r4, #1
 800424c:	ab06      	add	r3, sp, #24
 800424e:	a906      	add	r1, sp, #24
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800425c:	f1bc 0f02 	cmp.w	ip, #2
 8004260:	d064      	beq.n	800432c <__kernel_rem_pio2f+0x2b4>
 8004262:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426a:	d177      	bne.n	800435c <__kernel_rem_pio2f+0x2e4>
 800426c:	1e63      	subs	r3, r4, #1
 800426e:	429d      	cmp	r5, r3
 8004270:	dc0b      	bgt.n	800428a <__kernel_rem_pio2f+0x212>
 8004272:	aa06      	add	r2, sp, #24
 8004274:	4493      	add	fp, r2
 8004276:	2200      	movs	r2, #0
 8004278:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800427c:	45bb      	cmp	fp, r7
 800427e:	ea42 0201 	orr.w	r2, r2, r1
 8004282:	d1f9      	bne.n	8004278 <__kernel_rem_pio2f+0x200>
 8004284:	2a00      	cmp	r2, #0
 8004286:	f040 8185 	bne.w	8004594 <__kernel_rem_pio2f+0x51c>
 800428a:	1e6b      	subs	r3, r5, #1
 800428c:	aa06      	add	r2, sp, #24
 800428e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 8191 	bne.w	80045ba <__kernel_rem_pio2f+0x542>
 8004298:	9b04      	ldr	r3, [sp, #16]
 800429a:	f04f 0c01 	mov.w	ip, #1
 800429e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80042a2:	f10c 0c01 	add.w	ip, ip, #1
 80042a6:	2a00      	cmp	r2, #0
 80042a8:	d0f9      	beq.n	800429e <__kernel_rem_pio2f+0x226>
 80042aa:	44a4      	add	ip, r4
 80042ac:	1c63      	adds	r3, r4, #1
 80042ae:	4563      	cmp	r3, ip
 80042b0:	dc31      	bgt.n	8004316 <__kernel_rem_pio2f+0x29e>
 80042b2:	9a03      	ldr	r2, [sp, #12]
 80042b4:	eb03 0e02 	add.w	lr, r3, r2
 80042b8:	9a02      	ldr	r2, [sp, #8]
 80042ba:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80042be:	18a0      	adds	r0, r4, r2
 80042c0:	eb0c 0b02 	add.w	fp, ip, r2
 80042c4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80042c6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80042ca:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80042ce:	aa1a      	add	r2, sp, #104	; 0x68
 80042d0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80042d4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80042d8:	aa42      	add	r2, sp, #264	; 0x108
 80042da:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80042de:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	ece0 7a01 	vstmia	r0!, {s15}
 80042f0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004320 <__kernel_rem_pio2f+0x2a8>
 80042f4:	db0b      	blt.n	800430e <__kernel_rem_pio2f+0x296>
 80042f6:	464a      	mov	r2, r9
 80042f8:	eb00 0108 	add.w	r1, r0, r8
 80042fc:	4603      	mov	r3, r0
 80042fe:	ed33 7a01 	vldmdb	r3!, {s14}
 8004302:	ecf2 6a01 	vldmia	r2!, {s13}
 8004306:	428b      	cmp	r3, r1
 8004308:	eee6 7a87 	vfma.f32	s15, s13, s14
 800430c:	d1f7      	bne.n	80042fe <__kernel_rem_pio2f+0x286>
 800430e:	4558      	cmp	r0, fp
 8004310:	ece4 7a01 	vstmia	r4!, {s15}
 8004314:	d1e3      	bne.n	80042de <__kernel_rem_pio2f+0x266>
 8004316:	4664      	mov	r4, ip
 8004318:	e70f      	b.n	800413a <__kernel_rem_pio2f+0xc2>
 800431a:	bf00      	nop
 800431c:	08005bb8 	.word	0x08005bb8
 8004320:	00000000 	.word	0x00000000
 8004324:	43800000 	.word	0x43800000
 8004328:	3b800000 	.word	0x3b800000
 800432c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004330:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8004334:	2800      	cmp	r0, #0
 8004336:	d094      	beq.n	8004262 <__kernel_rem_pio2f+0x1ea>
 8004338:	ee17 0a90 	vmov	r0, s15
 800433c:	4651      	mov	r1, sl
 800433e:	f8cd c014 	str.w	ip, [sp, #20]
 8004342:	f000 fa7b 	bl	800483c <scalbnf>
 8004346:	ee07 0a90 	vmov	s15, r0
 800434a:	ee39 9a67 	vsub.f32	s18, s18, s15
 800434e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004352:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435a:	d087      	beq.n	800426c <__kernel_rem_pio2f+0x1f4>
 800435c:	ee19 0a10 	vmov	r0, s18
 8004360:	f1ca 0100 	rsb	r1, sl, #0
 8004364:	f8cd c008 	str.w	ip, [sp, #8]
 8004368:	f000 fa68 	bl	800483c <scalbnf>
 800436c:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8004324 <__kernel_rem_pio2f+0x2ac>
 8004370:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004374:	ee07 0a10 	vmov	s14, r0
 8004378:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	f2c0 8181 	blt.w	8004686 <__kernel_rem_pio2f+0x60e>
 8004384:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 8004328 <__kernel_rem_pio2f+0x2b0>
 8004388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438c:	a906      	add	r1, sp, #24
 800438e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004392:	1c63      	adds	r3, r4, #1
 8004394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004398:	f10a 0a08 	add.w	sl, sl, #8
 800439c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80043a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043a4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80043a8:	ee17 2a10 	vmov	r2, s14
 80043ac:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80043b0:	ee17 2a90 	vmov	r2, s15
 80043b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043b8:	4651      	mov	r1, sl
 80043ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80043be:	9303      	str	r3, [sp, #12]
 80043c0:	f8cd c008 	str.w	ip, [sp, #8]
 80043c4:	f000 fa3a 	bl	800483c <scalbnf>
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	f8dd c008 	ldr.w	ip, [sp, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	ee07 0a10 	vmov	s14, r0
 80043d4:	f2c0 80c2 	blt.w	800455c <__kernel_rem_pio2f+0x4e4>
 80043d8:	1c5f      	adds	r7, r3, #1
 80043da:	00ba      	lsls	r2, r7, #2
 80043dc:	a842      	add	r0, sp, #264	; 0x108
 80043de:	a906      	add	r1, sp, #24
 80043e0:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 8004328 <__kernel_rem_pio2f+0x2b0>
 80043e4:	4411      	add	r1, r2
 80043e6:	1886      	adds	r6, r0, r2
 80043e8:	ed71 7a01 	vldmdb	r1!, {s15}
 80043ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80043f8:	ed66 7a01 	vstmdb	r6!, {s15}
 80043fc:	4286      	cmp	r6, r0
 80043fe:	d1f3      	bne.n	80043e8 <__kernel_rem_pio2f+0x370>
 8004400:	3a04      	subs	r2, #4
 8004402:	4416      	add	r6, r2
 8004404:	2400      	movs	r4, #0
 8004406:	2d00      	cmp	r5, #0
 8004408:	f2c0 80a5 	blt.w	8004556 <__kernel_rem_pio2f+0x4de>
 800440c:	2c00      	cmp	r4, #0
 800440e:	f2c0 80a2 	blt.w	8004556 <__kernel_rem_pio2f+0x4de>
 8004412:	48a1      	ldr	r0, [pc, #644]	; (8004698 <__kernel_rem_pio2f+0x620>)
 8004414:	eddf 7aa1 	vldr	s15, [pc, #644]	; 800469c <__kernel_rem_pio2f+0x624>
 8004418:	4631      	mov	r1, r6
 800441a:	2200      	movs	r2, #0
 800441c:	e001      	b.n	8004422 <__kernel_rem_pio2f+0x3aa>
 800441e:	42a2      	cmp	r2, r4
 8004420:	dc08      	bgt.n	8004434 <__kernel_rem_pio2f+0x3bc>
 8004422:	ecf0 6a01 	vldmia	r0!, {s13}
 8004426:	ecb1 7a01 	vldmia	r1!, {s14}
 800442a:	3201      	adds	r2, #1
 800442c:	4295      	cmp	r5, r2
 800442e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004432:	daf4      	bge.n	800441e <__kernel_rem_pio2f+0x3a6>
 8004434:	aa56      	add	r2, sp, #344	; 0x158
 8004436:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800443a:	3401      	adds	r4, #1
 800443c:	42bc      	cmp	r4, r7
 800443e:	f1a6 0604 	sub.w	r6, r6, #4
 8004442:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8004446:	d1de      	bne.n	8004406 <__kernel_rem_pio2f+0x38e>
 8004448:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800444a:	2a03      	cmp	r2, #3
 800444c:	d865      	bhi.n	800451a <__kernel_rem_pio2f+0x4a2>
 800444e:	e8df f002 	tbb	[pc, r2]
 8004452:	3a6d      	.short	0x3a6d
 8004454:	b93a      	.short	0xb93a
 8004456:	d110      	bne.n	800447a <__kernel_rem_pio2f+0x402>
 8004458:	1e63      	subs	r3, r4, #1
 800445a:	aa06      	add	r2, sp, #24
 800445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004460:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8004464:	e6c2      	b.n	80041ec <__kernel_rem_pio2f+0x174>
 8004466:	1e62      	subs	r2, r4, #1
 8004468:	ab06      	add	r3, sp, #24
 800446a:	a906      	add	r1, sp, #24
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004474:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004478:	e6f0      	b.n	800425c <__kernel_rem_pio2f+0x1e4>
 800447a:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800447e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8004482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004486:	da0b      	bge.n	80044a0 <__kernel_rem_pio2f+0x428>
 8004488:	f04f 0c00 	mov.w	ip, #0
 800448c:	e6e9      	b.n	8004262 <__kernel_rem_pio2f+0x1ea>
 800448e:	eddf 7a83 	vldr	s15, [pc, #524]	; 800469c <__kernel_rem_pio2f+0x624>
 8004492:	3104      	adds	r1, #4
 8004494:	42a1      	cmp	r1, r4
 8004496:	ece0 7a01 	vstmia	r0!, {s15}
 800449a:	f47f ae27 	bne.w	80040ec <__kernel_rem_pio2f+0x74>
 800449e:	e639      	b.n	8004114 <__kernel_rem_pio2f+0x9c>
 80044a0:	ee19 3a90 	vmov	r3, s19
 80044a4:	2c00      	cmp	r4, #0
 80044a6:	f103 0301 	add.w	r3, r3, #1
 80044aa:	ee09 3a90 	vmov	s19, r3
 80044ae:	bfc8      	it	gt
 80044b0:	f04f 0c02 	movgt.w	ip, #2
 80044b4:	f73f aea6 	bgt.w	8004204 <__kernel_rem_pio2f+0x18c>
 80044b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80044bc:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80044c0:	f04f 0c02 	mov.w	ip, #2
 80044c4:	e6cd      	b.n	8004262 <__kernel_rem_pio2f+0x1ea>
 80044c6:	aa2e      	add	r2, sp, #184	; 0xb8
 80044c8:	eddf 7a74 	vldr	s15, [pc, #464]	; 800469c <__kernel_rem_pio2f+0x624>
 80044cc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80044d0:	ed37 7a01 	vldmdb	r7!, {s14}
 80044d4:	4297      	cmp	r7, r2
 80044d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044da:	d1f9      	bne.n	80044d0 <__kernel_rem_pio2f+0x458>
 80044dc:	f1bc 0f00 	cmp.w	ip, #0
 80044e0:	d048      	beq.n	8004574 <__kernel_rem_pio2f+0x4fc>
 80044e2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80044e6:	9a01      	ldr	r2, [sp, #4]
 80044e8:	eeb1 7a67 	vneg.f32	s14, s15
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044f2:	ed82 7a00 	vstr	s14, [r2]
 80044f6:	dd0b      	ble.n	8004510 <__kernel_rem_pio2f+0x498>
 80044f8:	a92f      	add	r1, sp, #188	; 0xbc
 80044fa:	2201      	movs	r2, #1
 80044fc:	ecb1 7a01 	vldmia	r1!, {s14}
 8004500:	3201      	adds	r2, #1
 8004502:	4293      	cmp	r3, r2
 8004504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004508:	daf8      	bge.n	80044fc <__kernel_rem_pio2f+0x484>
 800450a:	f1bc 0f00 	cmp.w	ip, #0
 800450e:	d001      	beq.n	8004514 <__kernel_rem_pio2f+0x49c>
 8004510:	eef1 7a67 	vneg.f32	s15, s15
 8004514:	9b01      	ldr	r3, [sp, #4]
 8004516:	edc3 7a01 	vstr	s15, [r3, #4]
 800451a:	ee19 3a90 	vmov	r3, s19
 800451e:	f003 0007 	and.w	r0, r3, #7
 8004522:	b057      	add	sp, #348	; 0x15c
 8004524:	ecbd 8b04 	vpop	{d8-d9}
 8004528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452c:	aa2e      	add	r2, sp, #184	; 0xb8
 800452e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800469c <__kernel_rem_pio2f+0x624>
 8004532:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004536:	ed37 7a01 	vldmdb	r7!, {s14}
 800453a:	3b01      	subs	r3, #1
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004542:	d1f8      	bne.n	8004536 <__kernel_rem_pio2f+0x4be>
 8004544:	f1bc 0f00 	cmp.w	ip, #0
 8004548:	d001      	beq.n	800454e <__kernel_rem_pio2f+0x4d6>
 800454a:	eef1 7a67 	vneg.f32	s15, s15
 800454e:	9b01      	ldr	r3, [sp, #4]
 8004550:	edc3 7a00 	vstr	s15, [r3]
 8004554:	e7e1      	b.n	800451a <__kernel_rem_pio2f+0x4a2>
 8004556:	eddf 7a51 	vldr	s15, [pc, #324]	; 800469c <__kernel_rem_pio2f+0x624>
 800455a:	e76b      	b.n	8004434 <__kernel_rem_pio2f+0x3bc>
 800455c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800455e:	2a03      	cmp	r2, #3
 8004560:	d8db      	bhi.n	800451a <__kernel_rem_pio2f+0x4a2>
 8004562:	e8df f002 	tbb	[pc, r2]
 8004566:	0214      	.short	0x0214
 8004568:	8302      	.short	0x8302
 800456a:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800469c <__kernel_rem_pio2f+0x624>
 800456e:	f1bc 0f00 	cmp.w	ip, #0
 8004572:	d1b6      	bne.n	80044e2 <__kernel_rem_pio2f+0x46a>
 8004574:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8004578:	9a01      	ldr	r2, [sp, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	edc2 7a00 	vstr	s15, [r2]
 8004580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004584:	dcb8      	bgt.n	80044f8 <__kernel_rem_pio2f+0x480>
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	edc3 7a01 	vstr	s15, [r3, #4]
 800458c:	e7c5      	b.n	800451a <__kernel_rem_pio2f+0x4a2>
 800458e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800469c <__kernel_rem_pio2f+0x624>
 8004592:	e7d7      	b.n	8004544 <__kernel_rem_pio2f+0x4cc>
 8004594:	aa06      	add	r2, sp, #24
 8004596:	f1aa 0a08 	sub.w	sl, sl, #8
 800459a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800459e:	2a00      	cmp	r2, #0
 80045a0:	f47f af0a 	bne.w	80043b8 <__kernel_rem_pio2f+0x340>
 80045a4:	aa06      	add	r2, sp, #24
 80045a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80045aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f1aa 0a08 	sub.w	sl, sl, #8
 80045b4:	2900      	cmp	r1, #0
 80045b6:	d0f8      	beq.n	80045aa <__kernel_rem_pio2f+0x532>
 80045b8:	e6fe      	b.n	80043b8 <__kernel_rem_pio2f+0x340>
 80045ba:	f04f 0c01 	mov.w	ip, #1
 80045be:	e674      	b.n	80042aa <__kernel_rem_pio2f+0x232>
 80045c0:	2000      	movs	r0, #0
 80045c2:	e638      	b.n	8004236 <__kernel_rem_pio2f+0x1be>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	dd51      	ble.n	800466c <__kernel_rem_pio2f+0x5f4>
 80045c8:	009a      	lsls	r2, r3, #2
 80045ca:	a956      	add	r1, sp, #344	; 0x158
 80045cc:	4411      	add	r1, r2
 80045ce:	ac2e      	add	r4, sp, #184	; 0xb8
 80045d0:	1d10      	adds	r0, r2, #4
 80045d2:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 80045d6:	4420      	add	r0, r4
 80045d8:	18a1      	adds	r1, r4, r2
 80045da:	ed71 7a01 	vldmdb	r1!, {s15}
 80045de:	ee77 6a27 	vadd.f32	s13, s14, s15
 80045e2:	42a1      	cmp	r1, r4
 80045e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ec:	eeb0 7a66 	vmov.f32	s14, s13
 80045f0:	ed60 7a01 	vstmdb	r0!, {s15}
 80045f4:	edc1 6a00 	vstr	s13, [r1]
 80045f8:	d1ef      	bne.n	80045da <__kernel_rem_pio2f+0x562>
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	dd36      	ble.n	800466c <__kernel_rem_pio2f+0x5f4>
 80045fe:	1d13      	adds	r3, r2, #4
 8004600:	a856      	add	r0, sp, #344	; 0x158
 8004602:	4410      	add	r0, r2
 8004604:	440b      	add	r3, r1
 8004606:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 800460a:	440a      	add	r2, r1
 800460c:	a82f      	add	r0, sp, #188	; 0xbc
 800460e:	4619      	mov	r1, r3
 8004610:	ed72 7a01 	vldmdb	r2!, {s15}
 8004614:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004618:	4282      	cmp	r2, r0
 800461a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800461e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004622:	eeb0 7a66 	vmov.f32	s14, s13
 8004626:	ed61 7a01 	vstmdb	r1!, {s15}
 800462a:	edc2 6a00 	vstr	s13, [r2]
 800462e:	d1ef      	bne.n	8004610 <__kernel_rem_pio2f+0x598>
 8004630:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800469c <__kernel_rem_pio2f+0x624>
 8004634:	aa30      	add	r2, sp, #192	; 0xc0
 8004636:	ed33 7a01 	vldmdb	r3!, {s14}
 800463a:	4293      	cmp	r3, r2
 800463c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004640:	d1f9      	bne.n	8004636 <__kernel_rem_pio2f+0x5be>
 8004642:	f1bc 0f00 	cmp.w	ip, #0
 8004646:	d016      	beq.n	8004676 <__kernel_rem_pio2f+0x5fe>
 8004648:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800464c:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	eef1 7a67 	vneg.f32	s15, s15
 8004656:	eef1 6a66 	vneg.f32	s13, s13
 800465a:	eeb1 7a47 	vneg.f32	s14, s14
 800465e:	edc2 7a02 	vstr	s15, [r2, #8]
 8004662:	edc2 6a00 	vstr	s13, [r2]
 8004666:	ed82 7a01 	vstr	s14, [r2, #4]
 800466a:	e756      	b.n	800451a <__kernel_rem_pio2f+0x4a2>
 800466c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800469c <__kernel_rem_pio2f+0x624>
 8004670:	f1bc 0f00 	cmp.w	ip, #0
 8004674:	d1e8      	bne.n	8004648 <__kernel_rem_pio2f+0x5d0>
 8004676:	9801      	ldr	r0, [sp, #4]
 8004678:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800467a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800467c:	edc0 7a02 	vstr	s15, [r0, #8]
 8004680:	6002      	str	r2, [r0, #0]
 8004682:	6043      	str	r3, [r0, #4]
 8004684:	e749      	b.n	800451a <__kernel_rem_pio2f+0x4a2>
 8004686:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800468a:	a906      	add	r1, sp, #24
 800468c:	ee17 2a10 	vmov	r2, s14
 8004690:	4623      	mov	r3, r4
 8004692:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004696:	e68f      	b.n	80043b8 <__kernel_rem_pio2f+0x340>
 8004698:	08005bc4 	.word	0x08005bc4
 800469c:	00000000 	.word	0x00000000

080046a0 <__kernel_sinf>:
 80046a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80046a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80046a8:	ee07 0a90 	vmov	s15, r0
 80046ac:	ee06 1a10 	vmov	s12, r1
 80046b0:	da04      	bge.n	80046bc <__kernel_sinf+0x1c>
 80046b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80046b6:	ee17 3a10 	vmov	r3, s14
 80046ba:	b323      	cbz	r3, 8004706 <__kernel_sinf+0x66>
 80046bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80046c0:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8004720 <__kernel_sinf+0x80>
 80046c4:	eddf 4a17 	vldr	s9, [pc, #92]	; 8004724 <__kernel_sinf+0x84>
 80046c8:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8004728 <__kernel_sinf+0x88>
 80046cc:	eddf 5a17 	vldr	s11, [pc, #92]	; 800472c <__kernel_sinf+0x8c>
 80046d0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004730 <__kernel_sinf+0x90>
 80046d4:	eee7 4a04 	vfma.f32	s9, s14, s8
 80046d8:	ee27 4a27 	vmul.f32	s8, s14, s15
 80046dc:	eea4 5a87 	vfma.f32	s10, s9, s14
 80046e0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80046e4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80046e8:	b182      	cbz	r2, 800470c <__kernel_sinf+0x6c>
 80046ea:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 80046ee:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 80046f2:	eee6 6a25 	vfma.f32	s13, s12, s11
 80046f6:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8004734 <__kernel_sinf+0x94>
 80046fa:	ee96 6a87 	vfnms.f32	s12, s13, s14
 80046fe:	eea4 6a25 	vfma.f32	s12, s8, s11
 8004702:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004706:	ee17 0a90 	vmov	r0, s15
 800470a:	4770      	bx	lr
 800470c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004738 <__kernel_sinf+0x98>
 8004710:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004714:	eee6 7a04 	vfma.f32	s15, s12, s8
 8004718:	ee17 0a90 	vmov	r0, s15
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2f2ec9d3 	.word	0x2f2ec9d3
 8004724:	b2d72f34 	.word	0xb2d72f34
 8004728:	3638ef1b 	.word	0x3638ef1b
 800472c:	b9500d01 	.word	0xb9500d01
 8004730:	3c088889 	.word	0x3c088889
 8004734:	3e2aaaab 	.word	0x3e2aaaab
 8004738:	be2aaaab 	.word	0xbe2aaaab

0800473c <matherr>:
 800473c:	2000      	movs	r0, #0
 800473e:	4770      	bx	lr

08004740 <nan>:
 8004740:	2000      	movs	r0, #0
 8004742:	4901      	ldr	r1, [pc, #4]	; (8004748 <nan+0x8>)
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	7ff80000 	.word	0x7ff80000

0800474c <fabsf>:
 800474c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop

08004754 <floorf>:
 8004754:	b410      	push	{r4}
 8004756:	b083      	sub	sp, #12
 8004758:	9001      	str	r0, [sp, #4]
 800475a:	9a01      	ldr	r2, [sp, #4]
 800475c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004760:	0dcb      	lsrs	r3, r1, #23
 8004762:	3b7f      	subs	r3, #127	; 0x7f
 8004764:	2b16      	cmp	r3, #22
 8004766:	dc19      	bgt.n	800479c <floorf+0x48>
 8004768:	2b00      	cmp	r3, #0
 800476a:	4614      	mov	r4, r2
 800476c:	db28      	blt.n	80047c0 <floorf+0x6c>
 800476e:	4824      	ldr	r0, [pc, #144]	; (8004800 <floorf+0xac>)
 8004770:	4118      	asrs	r0, r3
 8004772:	4210      	tst	r0, r2
 8004774:	d015      	beq.n	80047a2 <floorf+0x4e>
 8004776:	eddf 7a23 	vldr	s15, [pc, #140]	; 8004804 <floorf+0xb0>
 800477a:	ed9d 7a01 	vldr	s14, [sp, #4]
 800477e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	dd28      	ble.n	80047de <floorf+0x8a>
 800478c:	2a00      	cmp	r2, #0
 800478e:	db29      	blt.n	80047e4 <floorf+0x90>
 8004790:	ea24 0000 	bic.w	r0, r4, r0
 8004794:	b003      	add	sp, #12
 8004796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80047a0:	d204      	bcs.n	80047ac <floorf+0x58>
 80047a2:	9801      	ldr	r0, [sp, #4]
 80047a4:	b003      	add	sp, #12
 80047a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80047b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047b4:	ee17 0a90 	vmov	r0, s15
 80047b8:	b003      	add	sp, #12
 80047ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004804 <floorf+0xb0>
 80047c4:	ee07 0a10 	vmov	s14, r0
 80047c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	dde5      	ble.n	80047a2 <floorf+0x4e>
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	db0a      	blt.n	80047f0 <floorf+0x9c>
 80047da:	2000      	movs	r0, #0
 80047dc:	e7e2      	b.n	80047a4 <floorf+0x50>
 80047de:	ee17 0a10 	vmov	r0, s14
 80047e2:	e7df      	b.n	80047a4 <floorf+0x50>
 80047e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047e8:	fa42 f303 	asr.w	r3, r2, r3
 80047ec:	441c      	add	r4, r3
 80047ee:	e7cf      	b.n	8004790 <floorf+0x3c>
 80047f0:	2900      	cmp	r1, #0
 80047f2:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 80047f6:	bf18      	it	ne
 80047f8:	ee17 0a90 	vmovne	r0, s15
 80047fc:	e7d2      	b.n	80047a4 <floorf+0x50>
 80047fe:	bf00      	nop
 8004800:	007fffff 	.word	0x007fffff
 8004804:	7149f2ca 	.word	0x7149f2ca

08004808 <__fpclassifyf>:
 8004808:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 800480c:	d101      	bne.n	8004812 <__fpclassifyf+0xa>
 800480e:	2002      	movs	r0, #2
 8004810:	4770      	bx	lr
 8004812:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8004816:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800481a:	d201      	bcs.n	8004820 <__fpclassifyf+0x18>
 800481c:	2004      	movs	r0, #4
 800481e:	4770      	bx	lr
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <__fpclassifyf+0x30>)
 8004822:	1e42      	subs	r2, r0, #1
 8004824:	429a      	cmp	r2, r3
 8004826:	d801      	bhi.n	800482c <__fpclassifyf+0x24>
 8004828:	2003      	movs	r0, #3
 800482a:	4770      	bx	lr
 800482c:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 8004830:	fab0 f080 	clz	r0, r0
 8004834:	0940      	lsrs	r0, r0, #5
 8004836:	4770      	bx	lr
 8004838:	007ffffe 	.word	0x007ffffe

0800483c <scalbnf>:
 800483c:	b500      	push	{lr}
 800483e:	ed2d 8b02 	vpush	{d8}
 8004842:	b083      	sub	sp, #12
 8004844:	9001      	str	r0, [sp, #4]
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800484c:	d023      	beq.n	8004896 <scalbnf+0x5a>
 800484e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004852:	d215      	bcs.n	8004880 <scalbnf+0x44>
 8004854:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004858:	d326      	bcc.n	80048a8 <scalbnf+0x6c>
 800485a:	0dd2      	lsrs	r2, r2, #23
 800485c:	440a      	add	r2, r1
 800485e:	2afe      	cmp	r2, #254	; 0xfe
 8004860:	dc3c      	bgt.n	80048dc <scalbnf+0xa0>
 8004862:	2a00      	cmp	r2, #0
 8004864:	dd30      	ble.n	80048c8 <scalbnf+0x8c>
 8004866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800486a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	ee17 0a90 	vmov	r0, s15
 8004876:	b003      	add	sp, #12
 8004878:	ecbd 8b02 	vpop	{d8}
 800487c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004880:	ee07 0a90 	vmov	s15, r0
 8004884:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004888:	ee17 0a90 	vmov	r0, s15
 800488c:	b003      	add	sp, #12
 800488e:	ecbd 8b02 	vpop	{d8}
 8004892:	f85d fb04 	ldr.w	pc, [sp], #4
 8004896:	eddd 7a01 	vldr	s15, [sp, #4]
 800489a:	ee17 0a90 	vmov	r0, s15
 800489e:	b003      	add	sp, #12
 80048a0:	ecbd 8b02 	vpop	{d8}
 80048a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a8:	ed9d 7a01 	vldr	s14, [sp, #4]
 80048ac:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004928 <scalbnf+0xec>
 80048b0:	4b1e      	ldr	r3, [pc, #120]	; (800492c <scalbnf+0xf0>)
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	4299      	cmp	r1, r3
 80048b8:	edcd 7a01 	vstr	s15, [sp, #4]
 80048bc:	db20      	blt.n	8004900 <scalbnf+0xc4>
 80048be:	9b01      	ldr	r3, [sp, #4]
 80048c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80048c4:	3a19      	subs	r2, #25
 80048c6:	e7c9      	b.n	800485c <scalbnf+0x20>
 80048c8:	f112 0f16 	cmn.w	r2, #22
 80048cc:	da1f      	bge.n	800490e <scalbnf+0xd2>
 80048ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80048d2:	4299      	cmp	r1, r3
 80048d4:	dc02      	bgt.n	80048dc <scalbnf+0xa0>
 80048d6:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8004930 <scalbnf+0xf4>
 80048da:	e001      	b.n	80048e0 <scalbnf+0xa4>
 80048dc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004934 <scalbnf+0xf8>
 80048e0:	9901      	ldr	r1, [sp, #4]
 80048e2:	ee18 0a10 	vmov	r0, s16
 80048e6:	f000 f829 	bl	800493c <copysignf>
 80048ea:	ee07 0a90 	vmov	s15, r0
 80048ee:	ee67 7a88 	vmul.f32	s15, s15, s16
 80048f2:	ee17 0a90 	vmov	r0, s15
 80048f6:	b003      	add	sp, #12
 80048f8:	ecbd 8b02 	vpop	{d8}
 80048fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004900:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004930 <scalbnf+0xf4>
 8004904:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490c:	e7bc      	b.n	8004888 <scalbnf+0x4c>
 800490e:	3219      	adds	r2, #25
 8004910:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004914:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004918:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004938 <scalbnf+0xfc>
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004924:	e7b0      	b.n	8004888 <scalbnf+0x4c>
 8004926:	bf00      	nop
 8004928:	4c000000 	.word	0x4c000000
 800492c:	ffff3cb0 	.word	0xffff3cb0
 8004930:	0da24260 	.word	0x0da24260
 8004934:	7149f2ca 	.word	0x7149f2ca
 8004938:	33000000 	.word	0x33000000

0800493c <copysignf>:
 800493c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004940:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004944:	4308      	orrs	r0, r1
 8004946:	4770      	bx	lr

08004948 <__aeabi_drsub>:
 8004948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800494c:	e002      	b.n	8004954 <__adddf3>
 800494e:	bf00      	nop

08004950 <__aeabi_dsub>:
 8004950:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004954 <__adddf3>:
 8004954:	b530      	push	{r4, r5, lr}
 8004956:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800495a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800495e:	ea94 0f05 	teq	r4, r5
 8004962:	bf08      	it	eq
 8004964:	ea90 0f02 	teqeq	r0, r2
 8004968:	bf1f      	itttt	ne
 800496a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800496e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004972:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004976:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800497a:	f000 80e2 	beq.w	8004b42 <__adddf3+0x1ee>
 800497e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004982:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004986:	bfb8      	it	lt
 8004988:	426d      	neglt	r5, r5
 800498a:	dd0c      	ble.n	80049a6 <__adddf3+0x52>
 800498c:	442c      	add	r4, r5
 800498e:	ea80 0202 	eor.w	r2, r0, r2
 8004992:	ea81 0303 	eor.w	r3, r1, r3
 8004996:	ea82 0000 	eor.w	r0, r2, r0
 800499a:	ea83 0101 	eor.w	r1, r3, r1
 800499e:	ea80 0202 	eor.w	r2, r0, r2
 80049a2:	ea81 0303 	eor.w	r3, r1, r3
 80049a6:	2d36      	cmp	r5, #54	; 0x36
 80049a8:	bf88      	it	hi
 80049aa:	bd30      	pophi	{r4, r5, pc}
 80049ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80049b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80049b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80049b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80049bc:	d002      	beq.n	80049c4 <__adddf3+0x70>
 80049be:	4240      	negs	r0, r0
 80049c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80049c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80049c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80049cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80049d0:	d002      	beq.n	80049d8 <__adddf3+0x84>
 80049d2:	4252      	negs	r2, r2
 80049d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80049d8:	ea94 0f05 	teq	r4, r5
 80049dc:	f000 80a7 	beq.w	8004b2e <__adddf3+0x1da>
 80049e0:	f1a4 0401 	sub.w	r4, r4, #1
 80049e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80049e8:	db0d      	blt.n	8004a06 <__adddf3+0xb2>
 80049ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80049ee:	fa22 f205 	lsr.w	r2, r2, r5
 80049f2:	1880      	adds	r0, r0, r2
 80049f4:	f141 0100 	adc.w	r1, r1, #0
 80049f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80049fc:	1880      	adds	r0, r0, r2
 80049fe:	fa43 f305 	asr.w	r3, r3, r5
 8004a02:	4159      	adcs	r1, r3
 8004a04:	e00e      	b.n	8004a24 <__adddf3+0xd0>
 8004a06:	f1a5 0520 	sub.w	r5, r5, #32
 8004a0a:	f10e 0e20 	add.w	lr, lr, #32
 8004a0e:	2a01      	cmp	r2, #1
 8004a10:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004a14:	bf28      	it	cs
 8004a16:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004a1a:	fa43 f305 	asr.w	r3, r3, r5
 8004a1e:	18c0      	adds	r0, r0, r3
 8004a20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004a28:	d507      	bpl.n	8004a3a <__adddf3+0xe6>
 8004a2a:	f04f 0e00 	mov.w	lr, #0
 8004a2e:	f1dc 0c00 	rsbs	ip, ip, #0
 8004a32:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004a36:	eb6e 0101 	sbc.w	r1, lr, r1
 8004a3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004a3e:	d31b      	bcc.n	8004a78 <__adddf3+0x124>
 8004a40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004a44:	d30c      	bcc.n	8004a60 <__adddf3+0x10c>
 8004a46:	0849      	lsrs	r1, r1, #1
 8004a48:	ea5f 0030 	movs.w	r0, r0, rrx
 8004a4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004a50:	f104 0401 	add.w	r4, r4, #1
 8004a54:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004a58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004a5c:	f080 809a 	bcs.w	8004b94 <__adddf3+0x240>
 8004a60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004a64:	bf08      	it	eq
 8004a66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004a6a:	f150 0000 	adcs.w	r0, r0, #0
 8004a6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004a72:	ea41 0105 	orr.w	r1, r1, r5
 8004a76:	bd30      	pop	{r4, r5, pc}
 8004a78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004a7c:	4140      	adcs	r0, r0
 8004a7e:	eb41 0101 	adc.w	r1, r1, r1
 8004a82:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a86:	f1a4 0401 	sub.w	r4, r4, #1
 8004a8a:	d1e9      	bne.n	8004a60 <__adddf3+0x10c>
 8004a8c:	f091 0f00 	teq	r1, #0
 8004a90:	bf04      	itt	eq
 8004a92:	4601      	moveq	r1, r0
 8004a94:	2000      	moveq	r0, #0
 8004a96:	fab1 f381 	clz	r3, r1
 8004a9a:	bf08      	it	eq
 8004a9c:	3320      	addeq	r3, #32
 8004a9e:	f1a3 030b 	sub.w	r3, r3, #11
 8004aa2:	f1b3 0220 	subs.w	r2, r3, #32
 8004aa6:	da0c      	bge.n	8004ac2 <__adddf3+0x16e>
 8004aa8:	320c      	adds	r2, #12
 8004aaa:	dd08      	ble.n	8004abe <__adddf3+0x16a>
 8004aac:	f102 0c14 	add.w	ip, r2, #20
 8004ab0:	f1c2 020c 	rsb	r2, r2, #12
 8004ab4:	fa01 f00c 	lsl.w	r0, r1, ip
 8004ab8:	fa21 f102 	lsr.w	r1, r1, r2
 8004abc:	e00c      	b.n	8004ad8 <__adddf3+0x184>
 8004abe:	f102 0214 	add.w	r2, r2, #20
 8004ac2:	bfd8      	it	le
 8004ac4:	f1c2 0c20 	rsble	ip, r2, #32
 8004ac8:	fa01 f102 	lsl.w	r1, r1, r2
 8004acc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004ad0:	bfdc      	itt	le
 8004ad2:	ea41 010c 	orrle.w	r1, r1, ip
 8004ad6:	4090      	lslle	r0, r2
 8004ad8:	1ae4      	subs	r4, r4, r3
 8004ada:	bfa2      	ittt	ge
 8004adc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004ae0:	4329      	orrge	r1, r5
 8004ae2:	bd30      	popge	{r4, r5, pc}
 8004ae4:	ea6f 0404 	mvn.w	r4, r4
 8004ae8:	3c1f      	subs	r4, #31
 8004aea:	da1c      	bge.n	8004b26 <__adddf3+0x1d2>
 8004aec:	340c      	adds	r4, #12
 8004aee:	dc0e      	bgt.n	8004b0e <__adddf3+0x1ba>
 8004af0:	f104 0414 	add.w	r4, r4, #20
 8004af4:	f1c4 0220 	rsb	r2, r4, #32
 8004af8:	fa20 f004 	lsr.w	r0, r0, r4
 8004afc:	fa01 f302 	lsl.w	r3, r1, r2
 8004b00:	ea40 0003 	orr.w	r0, r0, r3
 8004b04:	fa21 f304 	lsr.w	r3, r1, r4
 8004b08:	ea45 0103 	orr.w	r1, r5, r3
 8004b0c:	bd30      	pop	{r4, r5, pc}
 8004b0e:	f1c4 040c 	rsb	r4, r4, #12
 8004b12:	f1c4 0220 	rsb	r2, r4, #32
 8004b16:	fa20 f002 	lsr.w	r0, r0, r2
 8004b1a:	fa01 f304 	lsl.w	r3, r1, r4
 8004b1e:	ea40 0003 	orr.w	r0, r0, r3
 8004b22:	4629      	mov	r1, r5
 8004b24:	bd30      	pop	{r4, r5, pc}
 8004b26:	fa21 f004 	lsr.w	r0, r1, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	bd30      	pop	{r4, r5, pc}
 8004b2e:	f094 0f00 	teq	r4, #0
 8004b32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004b36:	bf06      	itte	eq
 8004b38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004b3c:	3401      	addeq	r4, #1
 8004b3e:	3d01      	subne	r5, #1
 8004b40:	e74e      	b.n	80049e0 <__adddf3+0x8c>
 8004b42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004b46:	bf18      	it	ne
 8004b48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004b4c:	d029      	beq.n	8004ba2 <__adddf3+0x24e>
 8004b4e:	ea94 0f05 	teq	r4, r5
 8004b52:	bf08      	it	eq
 8004b54:	ea90 0f02 	teqeq	r0, r2
 8004b58:	d005      	beq.n	8004b66 <__adddf3+0x212>
 8004b5a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004b5e:	bf04      	itt	eq
 8004b60:	4619      	moveq	r1, r3
 8004b62:	4610      	moveq	r0, r2
 8004b64:	bd30      	pop	{r4, r5, pc}
 8004b66:	ea91 0f03 	teq	r1, r3
 8004b6a:	bf1e      	ittt	ne
 8004b6c:	2100      	movne	r1, #0
 8004b6e:	2000      	movne	r0, #0
 8004b70:	bd30      	popne	{r4, r5, pc}
 8004b72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004b76:	d105      	bne.n	8004b84 <__adddf3+0x230>
 8004b78:	0040      	lsls	r0, r0, #1
 8004b7a:	4149      	adcs	r1, r1
 8004b7c:	bf28      	it	cs
 8004b7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004b82:	bd30      	pop	{r4, r5, pc}
 8004b84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004b88:	bf3c      	itt	cc
 8004b8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004b8e:	bd30      	popcc	{r4, r5, pc}
 8004b90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004b94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004b98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	bd30      	pop	{r4, r5, pc}
 8004ba2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004ba6:	bf1a      	itte	ne
 8004ba8:	4619      	movne	r1, r3
 8004baa:	4610      	movne	r0, r2
 8004bac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004bb0:	bf1c      	itt	ne
 8004bb2:	460b      	movne	r3, r1
 8004bb4:	4602      	movne	r2, r0
 8004bb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004bba:	bf06      	itte	eq
 8004bbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004bc0:	ea91 0f03 	teqeq	r1, r3
 8004bc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004bc8:	bd30      	pop	{r4, r5, pc}
 8004bca:	bf00      	nop

08004bcc <__aeabi_ui2d>:
 8004bcc:	f090 0f00 	teq	r0, #0
 8004bd0:	bf04      	itt	eq
 8004bd2:	2100      	moveq	r1, #0
 8004bd4:	4770      	bxeq	lr
 8004bd6:	b530      	push	{r4, r5, lr}
 8004bd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004bdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004be0:	f04f 0500 	mov.w	r5, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	e750      	b.n	8004a8c <__adddf3+0x138>
 8004bea:	bf00      	nop

08004bec <__aeabi_i2d>:
 8004bec:	f090 0f00 	teq	r0, #0
 8004bf0:	bf04      	itt	eq
 8004bf2:	2100      	moveq	r1, #0
 8004bf4:	4770      	bxeq	lr
 8004bf6:	b530      	push	{r4, r5, lr}
 8004bf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004bfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004c00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004c04:	bf48      	it	mi
 8004c06:	4240      	negmi	r0, r0
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	e73e      	b.n	8004a8c <__adddf3+0x138>
 8004c0e:	bf00      	nop

08004c10 <__aeabi_f2d>:
 8004c10:	0042      	lsls	r2, r0, #1
 8004c12:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8004c1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004c1e:	bf1f      	itttt	ne
 8004c20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004c24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004c28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004c2c:	4770      	bxne	lr
 8004c2e:	f092 0f00 	teq	r2, #0
 8004c32:	bf14      	ite	ne
 8004c34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004c38:	4770      	bxeq	lr
 8004c3a:	b530      	push	{r4, r5, lr}
 8004c3c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004c40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004c44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004c48:	e720      	b.n	8004a8c <__adddf3+0x138>
 8004c4a:	bf00      	nop

08004c4c <__aeabi_ul2d>:
 8004c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8004c50:	bf08      	it	eq
 8004c52:	4770      	bxeq	lr
 8004c54:	b530      	push	{r4, r5, lr}
 8004c56:	f04f 0500 	mov.w	r5, #0
 8004c5a:	e00a      	b.n	8004c72 <__aeabi_l2d+0x16>

08004c5c <__aeabi_l2d>:
 8004c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8004c60:	bf08      	it	eq
 8004c62:	4770      	bxeq	lr
 8004c64:	b530      	push	{r4, r5, lr}
 8004c66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004c6a:	d502      	bpl.n	8004c72 <__aeabi_l2d+0x16>
 8004c6c:	4240      	negs	r0, r0
 8004c6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004c72:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004c76:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004c7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004c7e:	f43f aedc 	beq.w	8004a3a <__adddf3+0xe6>
 8004c82:	f04f 0203 	mov.w	r2, #3
 8004c86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004c8a:	bf18      	it	ne
 8004c8c:	3203      	addne	r2, #3
 8004c8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004c92:	bf18      	it	ne
 8004c94:	3203      	addne	r2, #3
 8004c96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004c9a:	f1c2 0320 	rsb	r3, r2, #32
 8004c9e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8004ca6:	fa01 fe03 	lsl.w	lr, r1, r3
 8004caa:	ea40 000e 	orr.w	r0, r0, lr
 8004cae:	fa21 f102 	lsr.w	r1, r1, r2
 8004cb2:	4414      	add	r4, r2
 8004cb4:	e6c1      	b.n	8004a3a <__adddf3+0xe6>
 8004cb6:	bf00      	nop

08004cb8 <__aeabi_dmul>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004cbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004cc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004cc6:	bf1d      	ittte	ne
 8004cc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004ccc:	ea94 0f0c 	teqne	r4, ip
 8004cd0:	ea95 0f0c 	teqne	r5, ip
 8004cd4:	f000 f8de 	bleq	8004e94 <__aeabi_dmul+0x1dc>
 8004cd8:	442c      	add	r4, r5
 8004cda:	ea81 0603 	eor.w	r6, r1, r3
 8004cde:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004ce2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004ce6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004cea:	bf18      	it	ne
 8004cec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004cf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf8:	d038      	beq.n	8004d6c <__aeabi_dmul+0xb4>
 8004cfa:	fba0 ce02 	umull	ip, lr, r0, r2
 8004cfe:	f04f 0500 	mov.w	r5, #0
 8004d02:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004d06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004d0a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004d0e:	f04f 0600 	mov.w	r6, #0
 8004d12:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004d16:	f09c 0f00 	teq	ip, #0
 8004d1a:	bf18      	it	ne
 8004d1c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004d20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004d24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004d28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004d2c:	d204      	bcs.n	8004d38 <__aeabi_dmul+0x80>
 8004d2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004d32:	416d      	adcs	r5, r5
 8004d34:	eb46 0606 	adc.w	r6, r6, r6
 8004d38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004d3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004d40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004d44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004d48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004d4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004d50:	bf88      	it	hi
 8004d52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004d56:	d81e      	bhi.n	8004d96 <__aeabi_dmul+0xde>
 8004d58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004d5c:	bf08      	it	eq
 8004d5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004d62:	f150 0000 	adcs.w	r0, r0, #0
 8004d66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004d70:	ea46 0101 	orr.w	r1, r6, r1
 8004d74:	ea40 0002 	orr.w	r0, r0, r2
 8004d78:	ea81 0103 	eor.w	r1, r1, r3
 8004d7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004d80:	bfc2      	ittt	gt
 8004d82:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004d86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004d8a:	bd70      	popgt	{r4, r5, r6, pc}
 8004d8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004d90:	f04f 0e00 	mov.w	lr, #0
 8004d94:	3c01      	subs	r4, #1
 8004d96:	f300 80ab 	bgt.w	8004ef0 <__aeabi_dmul+0x238>
 8004d9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004d9e:	bfde      	ittt	le
 8004da0:	2000      	movle	r0, #0
 8004da2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004da6:	bd70      	pople	{r4, r5, r6, pc}
 8004da8:	f1c4 0400 	rsb	r4, r4, #0
 8004dac:	3c20      	subs	r4, #32
 8004dae:	da35      	bge.n	8004e1c <__aeabi_dmul+0x164>
 8004db0:	340c      	adds	r4, #12
 8004db2:	dc1b      	bgt.n	8004dec <__aeabi_dmul+0x134>
 8004db4:	f104 0414 	add.w	r4, r4, #20
 8004db8:	f1c4 0520 	rsb	r5, r4, #32
 8004dbc:	fa00 f305 	lsl.w	r3, r0, r5
 8004dc0:	fa20 f004 	lsr.w	r0, r0, r4
 8004dc4:	fa01 f205 	lsl.w	r2, r1, r5
 8004dc8:	ea40 0002 	orr.w	r0, r0, r2
 8004dcc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004dd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004dd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004dd8:	fa21 f604 	lsr.w	r6, r1, r4
 8004ddc:	eb42 0106 	adc.w	r1, r2, r6
 8004de0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004de4:	bf08      	it	eq
 8004de6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	f1c4 040c 	rsb	r4, r4, #12
 8004df0:	f1c4 0520 	rsb	r5, r4, #32
 8004df4:	fa00 f304 	lsl.w	r3, r0, r4
 8004df8:	fa20 f005 	lsr.w	r0, r0, r5
 8004dfc:	fa01 f204 	lsl.w	r2, r1, r4
 8004e00:	ea40 0002 	orr.w	r0, r0, r2
 8004e04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004e08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004e0c:	f141 0100 	adc.w	r1, r1, #0
 8004e10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004e14:	bf08      	it	eq
 8004e16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	f1c4 0520 	rsb	r5, r4, #32
 8004e20:	fa00 f205 	lsl.w	r2, r0, r5
 8004e24:	ea4e 0e02 	orr.w	lr, lr, r2
 8004e28:	fa20 f304 	lsr.w	r3, r0, r4
 8004e2c:	fa01 f205 	lsl.w	r2, r1, r5
 8004e30:	ea43 0302 	orr.w	r3, r3, r2
 8004e34:	fa21 f004 	lsr.w	r0, r1, r4
 8004e38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004e3c:	fa21 f204 	lsr.w	r2, r1, r4
 8004e40:	ea20 0002 	bic.w	r0, r0, r2
 8004e44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004e48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004e4c:	bf08      	it	eq
 8004e4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	f094 0f00 	teq	r4, #0
 8004e58:	d10f      	bne.n	8004e7a <__aeabi_dmul+0x1c2>
 8004e5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004e5e:	0040      	lsls	r0, r0, #1
 8004e60:	eb41 0101 	adc.w	r1, r1, r1
 8004e64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004e68:	bf08      	it	eq
 8004e6a:	3c01      	subeq	r4, #1
 8004e6c:	d0f7      	beq.n	8004e5e <__aeabi_dmul+0x1a6>
 8004e6e:	ea41 0106 	orr.w	r1, r1, r6
 8004e72:	f095 0f00 	teq	r5, #0
 8004e76:	bf18      	it	ne
 8004e78:	4770      	bxne	lr
 8004e7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004e7e:	0052      	lsls	r2, r2, #1
 8004e80:	eb43 0303 	adc.w	r3, r3, r3
 8004e84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004e88:	bf08      	it	eq
 8004e8a:	3d01      	subeq	r5, #1
 8004e8c:	d0f7      	beq.n	8004e7e <__aeabi_dmul+0x1c6>
 8004e8e:	ea43 0306 	orr.w	r3, r3, r6
 8004e92:	4770      	bx	lr
 8004e94:	ea94 0f0c 	teq	r4, ip
 8004e98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004e9c:	bf18      	it	ne
 8004e9e:	ea95 0f0c 	teqne	r5, ip
 8004ea2:	d00c      	beq.n	8004ebe <__aeabi_dmul+0x206>
 8004ea4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004ea8:	bf18      	it	ne
 8004eaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004eae:	d1d1      	bne.n	8004e54 <__aeabi_dmul+0x19c>
 8004eb0:	ea81 0103 	eor.w	r1, r1, r3
 8004eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004eb8:	f04f 0000 	mov.w	r0, #0
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004ec2:	bf06      	itte	eq
 8004ec4:	4610      	moveq	r0, r2
 8004ec6:	4619      	moveq	r1, r3
 8004ec8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004ecc:	d019      	beq.n	8004f02 <__aeabi_dmul+0x24a>
 8004ece:	ea94 0f0c 	teq	r4, ip
 8004ed2:	d102      	bne.n	8004eda <__aeabi_dmul+0x222>
 8004ed4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004ed8:	d113      	bne.n	8004f02 <__aeabi_dmul+0x24a>
 8004eda:	ea95 0f0c 	teq	r5, ip
 8004ede:	d105      	bne.n	8004eec <__aeabi_dmul+0x234>
 8004ee0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004ee4:	bf1c      	itt	ne
 8004ee6:	4610      	movne	r0, r2
 8004ee8:	4619      	movne	r1, r3
 8004eea:	d10a      	bne.n	8004f02 <__aeabi_dmul+0x24a>
 8004eec:	ea81 0103 	eor.w	r1, r1, r3
 8004ef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004ef4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004ef8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004efc:	f04f 0000 	mov.w	r0, #0
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
 8004f02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004f06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}

08004f0c <__aeabi_ddiv>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004f12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004f16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004f1a:	bf1d      	ittte	ne
 8004f1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004f20:	ea94 0f0c 	teqne	r4, ip
 8004f24:	ea95 0f0c 	teqne	r5, ip
 8004f28:	f000 f8a7 	bleq	800507a <__aeabi_ddiv+0x16e>
 8004f2c:	eba4 0405 	sub.w	r4, r4, r5
 8004f30:	ea81 0e03 	eor.w	lr, r1, r3
 8004f34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004f38:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004f3c:	f000 8088 	beq.w	8005050 <__aeabi_ddiv+0x144>
 8004f40:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004f44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004f48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004f4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004f50:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004f54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004f58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004f5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004f60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004f64:	429d      	cmp	r5, r3
 8004f66:	bf08      	it	eq
 8004f68:	4296      	cmpeq	r6, r2
 8004f6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004f6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004f72:	d202      	bcs.n	8004f7a <__aeabi_ddiv+0x6e>
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	ea4f 0232 	mov.w	r2, r2, rrx
 8004f7a:	1ab6      	subs	r6, r6, r2
 8004f7c:	eb65 0503 	sbc.w	r5, r5, r3
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	ea4f 0232 	mov.w	r2, r2, rrx
 8004f86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004f8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004f96:	bf22      	ittt	cs
 8004f98:	1ab6      	subcs	r6, r6, r2
 8004f9a:	4675      	movcs	r5, lr
 8004f9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	ea4f 0232 	mov.w	r2, r2, rrx
 8004fa6:	ebb6 0e02 	subs.w	lr, r6, r2
 8004faa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004fae:	bf22      	ittt	cs
 8004fb0:	1ab6      	subcs	r6, r6, r2
 8004fb2:	4675      	movcs	r5, lr
 8004fb4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	ea4f 0232 	mov.w	r2, r2, rrx
 8004fbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8004fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004fc6:	bf22      	ittt	cs
 8004fc8:	1ab6      	subcs	r6, r6, r2
 8004fca:	4675      	movcs	r5, lr
 8004fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8004fd6:	ebb6 0e02 	subs.w	lr, r6, r2
 8004fda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004fde:	bf22      	ittt	cs
 8004fe0:	1ab6      	subcs	r6, r6, r2
 8004fe2:	4675      	movcs	r5, lr
 8004fe4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004fe8:	ea55 0e06 	orrs.w	lr, r5, r6
 8004fec:	d018      	beq.n	8005020 <__aeabi_ddiv+0x114>
 8004fee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004ff2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004ff6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004ffa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004ffe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005002:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005006:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800500a:	d1c0      	bne.n	8004f8e <__aeabi_ddiv+0x82>
 800500c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005010:	d10b      	bne.n	800502a <__aeabi_ddiv+0x11e>
 8005012:	ea41 0100 	orr.w	r1, r1, r0
 8005016:	f04f 0000 	mov.w	r0, #0
 800501a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800501e:	e7b6      	b.n	8004f8e <__aeabi_ddiv+0x82>
 8005020:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005024:	bf04      	itt	eq
 8005026:	4301      	orreq	r1, r0
 8005028:	2000      	moveq	r0, #0
 800502a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800502e:	bf88      	it	hi
 8005030:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005034:	f63f aeaf 	bhi.w	8004d96 <__aeabi_dmul+0xde>
 8005038:	ebb5 0c03 	subs.w	ip, r5, r3
 800503c:	bf04      	itt	eq
 800503e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005042:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005046:	f150 0000 	adcs.w	r0, r0, #0
 800504a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005054:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005058:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800505c:	bfc2      	ittt	gt
 800505e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005062:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005066:	bd70      	popgt	{r4, r5, r6, pc}
 8005068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800506c:	f04f 0e00 	mov.w	lr, #0
 8005070:	3c01      	subs	r4, #1
 8005072:	e690      	b.n	8004d96 <__aeabi_dmul+0xde>
 8005074:	ea45 0e06 	orr.w	lr, r5, r6
 8005078:	e68d      	b.n	8004d96 <__aeabi_dmul+0xde>
 800507a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800507e:	ea94 0f0c 	teq	r4, ip
 8005082:	bf08      	it	eq
 8005084:	ea95 0f0c 	teqeq	r5, ip
 8005088:	f43f af3b 	beq.w	8004f02 <__aeabi_dmul+0x24a>
 800508c:	ea94 0f0c 	teq	r4, ip
 8005090:	d10a      	bne.n	80050a8 <__aeabi_ddiv+0x19c>
 8005092:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005096:	f47f af34 	bne.w	8004f02 <__aeabi_dmul+0x24a>
 800509a:	ea95 0f0c 	teq	r5, ip
 800509e:	f47f af25 	bne.w	8004eec <__aeabi_dmul+0x234>
 80050a2:	4610      	mov	r0, r2
 80050a4:	4619      	mov	r1, r3
 80050a6:	e72c      	b.n	8004f02 <__aeabi_dmul+0x24a>
 80050a8:	ea95 0f0c 	teq	r5, ip
 80050ac:	d106      	bne.n	80050bc <__aeabi_ddiv+0x1b0>
 80050ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80050b2:	f43f aefd 	beq.w	8004eb0 <__aeabi_dmul+0x1f8>
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	e722      	b.n	8004f02 <__aeabi_dmul+0x24a>
 80050bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80050c0:	bf18      	it	ne
 80050c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80050c6:	f47f aec5 	bne.w	8004e54 <__aeabi_dmul+0x19c>
 80050ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80050ce:	f47f af0d 	bne.w	8004eec <__aeabi_dmul+0x234>
 80050d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80050d6:	f47f aeeb 	bne.w	8004eb0 <__aeabi_dmul+0x1f8>
 80050da:	e712      	b.n	8004f02 <__aeabi_dmul+0x24a>

080050dc <__aeabi_d2f>:
 80050dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80050e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80050e4:	bf24      	itt	cs
 80050e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80050ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80050ee:	d90d      	bls.n	800510c <__aeabi_d2f+0x30>
 80050f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80050f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80050f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80050fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005100:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005104:	bf08      	it	eq
 8005106:	f020 0001 	biceq.w	r0, r0, #1
 800510a:	4770      	bx	lr
 800510c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005110:	d121      	bne.n	8005156 <__aeabi_d2f+0x7a>
 8005112:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005116:	bfbc      	itt	lt
 8005118:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800511c:	4770      	bxlt	lr
 800511e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005122:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005126:	f1c2 0218 	rsb	r2, r2, #24
 800512a:	f1c2 0c20 	rsb	ip, r2, #32
 800512e:	fa10 f30c 	lsls.w	r3, r0, ip
 8005132:	fa20 f002 	lsr.w	r0, r0, r2
 8005136:	bf18      	it	ne
 8005138:	f040 0001 	orrne.w	r0, r0, #1
 800513c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005140:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005144:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005148:	ea40 000c 	orr.w	r0, r0, ip
 800514c:	fa23 f302 	lsr.w	r3, r3, r2
 8005150:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005154:	e7cc      	b.n	80050f0 <__aeabi_d2f+0x14>
 8005156:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800515a:	d107      	bne.n	800516c <__aeabi_d2f+0x90>
 800515c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005160:	bf1e      	ittt	ne
 8005162:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005166:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800516a:	4770      	bxne	lr
 800516c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005170:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005174:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop

0800517c <__aeabi_uldivmod>:
 800517c:	b94b      	cbnz	r3, 8005192 <__aeabi_uldivmod+0x16>
 800517e:	b942      	cbnz	r2, 8005192 <__aeabi_uldivmod+0x16>
 8005180:	2900      	cmp	r1, #0
 8005182:	bf08      	it	eq
 8005184:	2800      	cmpeq	r0, #0
 8005186:	d002      	beq.n	800518e <__aeabi_uldivmod+0x12>
 8005188:	f04f 31ff 	mov.w	r1, #4294967295
 800518c:	4608      	mov	r0, r1
 800518e:	f000 b83b 	b.w	8005208 <__aeabi_idiv0>
 8005192:	b082      	sub	sp, #8
 8005194:	46ec      	mov	ip, sp
 8005196:	e92d 5000 	stmdb	sp!, {ip, lr}
 800519a:	f000 f81d 	bl	80051d8 <__gnu_uldivmod_helper>
 800519e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80051a2:	b002      	add	sp, #8
 80051a4:	bc0c      	pop	{r2, r3}
 80051a6:	4770      	bx	lr

080051a8 <__gnu_ldivmod_helper>:
 80051a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ac:	9c06      	ldr	r4, [sp, #24]
 80051ae:	4615      	mov	r5, r2
 80051b0:	4606      	mov	r6, r0
 80051b2:	460f      	mov	r7, r1
 80051b4:	4698      	mov	r8, r3
 80051b6:	f000 f829 	bl	800520c <__divdi3>
 80051ba:	fb05 f301 	mul.w	r3, r5, r1
 80051be:	fb00 3808 	mla	r8, r0, r8, r3
 80051c2:	fba5 2300 	umull	r2, r3, r5, r0
 80051c6:	1ab2      	subs	r2, r6, r2
 80051c8:	4443      	add	r3, r8
 80051ca:	eb67 0303 	sbc.w	r3, r7, r3
 80051ce:	e9c4 2300 	strd	r2, r3, [r4]
 80051d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d6:	bf00      	nop

080051d8 <__gnu_uldivmod_helper>:
 80051d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051dc:	9c06      	ldr	r4, [sp, #24]
 80051de:	4690      	mov	r8, r2
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	461d      	mov	r5, r3
 80051e6:	f000 f95f 	bl	80054a8 <__udivdi3>
 80051ea:	fb00 f505 	mul.w	r5, r0, r5
 80051ee:	fba0 2308 	umull	r2, r3, r0, r8
 80051f2:	fb08 5501 	mla	r5, r8, r1, r5
 80051f6:	1ab2      	subs	r2, r6, r2
 80051f8:	442b      	add	r3, r5
 80051fa:	eb67 0303 	sbc.w	r3, r7, r3
 80051fe:	e9c4 2300 	strd	r2, r3, [r4]
 8005202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005206:	bf00      	nop

08005208 <__aeabi_idiv0>:
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop

0800520c <__divdi3>:
 800520c:	2900      	cmp	r1, #0
 800520e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005212:	f2c0 80a6 	blt.w	8005362 <__divdi3+0x156>
 8005216:	2600      	movs	r6, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f2c0 809c 	blt.w	8005356 <__divdi3+0x14a>
 800521e:	4688      	mov	r8, r1
 8005220:	4694      	mov	ip, r2
 8005222:	469e      	mov	lr, r3
 8005224:	4615      	mov	r5, r2
 8005226:	4604      	mov	r4, r0
 8005228:	460f      	mov	r7, r1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d13d      	bne.n	80052aa <__divdi3+0x9e>
 800522e:	428a      	cmp	r2, r1
 8005230:	d959      	bls.n	80052e6 <__divdi3+0xda>
 8005232:	fab2 f382 	clz	r3, r2
 8005236:	b13b      	cbz	r3, 8005248 <__divdi3+0x3c>
 8005238:	f1c3 0220 	rsb	r2, r3, #32
 800523c:	409f      	lsls	r7, r3
 800523e:	fa20 f202 	lsr.w	r2, r0, r2
 8005242:	409d      	lsls	r5, r3
 8005244:	4317      	orrs	r7, r2
 8005246:	409c      	lsls	r4, r3
 8005248:	0c29      	lsrs	r1, r5, #16
 800524a:	0c22      	lsrs	r2, r4, #16
 800524c:	fbb7 fef1 	udiv	lr, r7, r1
 8005250:	b2a8      	uxth	r0, r5
 8005252:	fb01 771e 	mls	r7, r1, lr, r7
 8005256:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800525a:	fb00 f30e 	mul.w	r3, r0, lr
 800525e:	42bb      	cmp	r3, r7
 8005260:	d90a      	bls.n	8005278 <__divdi3+0x6c>
 8005262:	197f      	adds	r7, r7, r5
 8005264:	f10e 32ff 	add.w	r2, lr, #4294967295
 8005268:	f080 8105 	bcs.w	8005476 <__divdi3+0x26a>
 800526c:	42bb      	cmp	r3, r7
 800526e:	f240 8102 	bls.w	8005476 <__divdi3+0x26a>
 8005272:	f1ae 0e02 	sub.w	lr, lr, #2
 8005276:	442f      	add	r7, r5
 8005278:	1aff      	subs	r7, r7, r3
 800527a:	b2a4      	uxth	r4, r4
 800527c:	fbb7 f3f1 	udiv	r3, r7, r1
 8005280:	fb01 7713 	mls	r7, r1, r3, r7
 8005284:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005288:	fb00 f003 	mul.w	r0, r0, r3
 800528c:	42b8      	cmp	r0, r7
 800528e:	d908      	bls.n	80052a2 <__divdi3+0x96>
 8005290:	197f      	adds	r7, r7, r5
 8005292:	f103 32ff 	add.w	r2, r3, #4294967295
 8005296:	f080 80f0 	bcs.w	800547a <__divdi3+0x26e>
 800529a:	42b8      	cmp	r0, r7
 800529c:	f240 80ed 	bls.w	800547a <__divdi3+0x26e>
 80052a0:	3b02      	subs	r3, #2
 80052a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80052a6:	2200      	movs	r2, #0
 80052a8:	e003      	b.n	80052b2 <__divdi3+0xa6>
 80052aa:	428b      	cmp	r3, r1
 80052ac:	d90f      	bls.n	80052ce <__divdi3+0xc2>
 80052ae:	2200      	movs	r2, #0
 80052b0:	4613      	mov	r3, r2
 80052b2:	1c34      	adds	r4, r6, #0
 80052b4:	bf18      	it	ne
 80052b6:	2401      	movne	r4, #1
 80052b8:	4260      	negs	r0, r4
 80052ba:	f04f 0500 	mov.w	r5, #0
 80052be:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80052c2:	4058      	eors	r0, r3
 80052c4:	4051      	eors	r1, r2
 80052c6:	1900      	adds	r0, r0, r4
 80052c8:	4169      	adcs	r1, r5
 80052ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ce:	fab3 f283 	clz	r2, r3
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	f040 8086 	bne.w	80053e4 <__divdi3+0x1d8>
 80052d8:	428b      	cmp	r3, r1
 80052da:	d302      	bcc.n	80052e2 <__divdi3+0xd6>
 80052dc:	4584      	cmp	ip, r0
 80052de:	f200 80db 	bhi.w	8005498 <__divdi3+0x28c>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7e5      	b.n	80052b2 <__divdi3+0xa6>
 80052e6:	b912      	cbnz	r2, 80052ee <__divdi3+0xe2>
 80052e8:	2301      	movs	r3, #1
 80052ea:	fbb3 f5f2 	udiv	r5, r3, r2
 80052ee:	fab5 f085 	clz	r0, r5
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d13b      	bne.n	800536e <__divdi3+0x162>
 80052f6:	1b78      	subs	r0, r7, r5
 80052f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80052fc:	fa1f fc85 	uxth.w	ip, r5
 8005300:	2201      	movs	r2, #1
 8005302:	fbb0 f8fe 	udiv	r8, r0, lr
 8005306:	0c21      	lsrs	r1, r4, #16
 8005308:	fb0e 0718 	mls	r7, lr, r8, r0
 800530c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8005310:	fb0c f308 	mul.w	r3, ip, r8
 8005314:	42bb      	cmp	r3, r7
 8005316:	d907      	bls.n	8005328 <__divdi3+0x11c>
 8005318:	197f      	adds	r7, r7, r5
 800531a:	f108 31ff 	add.w	r1, r8, #4294967295
 800531e:	d202      	bcs.n	8005326 <__divdi3+0x11a>
 8005320:	42bb      	cmp	r3, r7
 8005322:	f200 80bd 	bhi.w	80054a0 <__divdi3+0x294>
 8005326:	4688      	mov	r8, r1
 8005328:	1aff      	subs	r7, r7, r3
 800532a:	b2a4      	uxth	r4, r4
 800532c:	fbb7 f3fe 	udiv	r3, r7, lr
 8005330:	fb0e 7713 	mls	r7, lr, r3, r7
 8005334:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005338:	fb0c fc03 	mul.w	ip, ip, r3
 800533c:	45bc      	cmp	ip, r7
 800533e:	d907      	bls.n	8005350 <__divdi3+0x144>
 8005340:	197f      	adds	r7, r7, r5
 8005342:	f103 31ff 	add.w	r1, r3, #4294967295
 8005346:	d202      	bcs.n	800534e <__divdi3+0x142>
 8005348:	45bc      	cmp	ip, r7
 800534a:	f200 80a7 	bhi.w	800549c <__divdi3+0x290>
 800534e:	460b      	mov	r3, r1
 8005350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005354:	e7ad      	b.n	80052b2 <__divdi3+0xa6>
 8005356:	4252      	negs	r2, r2
 8005358:	ea6f 0606 	mvn.w	r6, r6
 800535c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005360:	e75d      	b.n	800521e <__divdi3+0x12>
 8005362:	4240      	negs	r0, r0
 8005364:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005368:	f04f 36ff 	mov.w	r6, #4294967295
 800536c:	e754      	b.n	8005218 <__divdi3+0xc>
 800536e:	f1c0 0220 	rsb	r2, r0, #32
 8005372:	fa24 f102 	lsr.w	r1, r4, r2
 8005376:	fa07 f300 	lsl.w	r3, r7, r0
 800537a:	4085      	lsls	r5, r0
 800537c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005380:	40d7      	lsrs	r7, r2
 8005382:	4319      	orrs	r1, r3
 8005384:	fbb7 f2fe 	udiv	r2, r7, lr
 8005388:	0c0b      	lsrs	r3, r1, #16
 800538a:	fb0e 7712 	mls	r7, lr, r2, r7
 800538e:	fa1f fc85 	uxth.w	ip, r5
 8005392:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005396:	fb0c f702 	mul.w	r7, ip, r2
 800539a:	429f      	cmp	r7, r3
 800539c:	fa04 f400 	lsl.w	r4, r4, r0
 80053a0:	d907      	bls.n	80053b2 <__divdi3+0x1a6>
 80053a2:	195b      	adds	r3, r3, r5
 80053a4:	f102 30ff 	add.w	r0, r2, #4294967295
 80053a8:	d274      	bcs.n	8005494 <__divdi3+0x288>
 80053aa:	429f      	cmp	r7, r3
 80053ac:	d972      	bls.n	8005494 <__divdi3+0x288>
 80053ae:	3a02      	subs	r2, #2
 80053b0:	442b      	add	r3, r5
 80053b2:	1bdf      	subs	r7, r3, r7
 80053b4:	b289      	uxth	r1, r1
 80053b6:	fbb7 f8fe 	udiv	r8, r7, lr
 80053ba:	fb0e 7318 	mls	r3, lr, r8, r7
 80053be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80053c2:	fb0c f708 	mul.w	r7, ip, r8
 80053c6:	429f      	cmp	r7, r3
 80053c8:	d908      	bls.n	80053dc <__divdi3+0x1d0>
 80053ca:	195b      	adds	r3, r3, r5
 80053cc:	f108 31ff 	add.w	r1, r8, #4294967295
 80053d0:	d25c      	bcs.n	800548c <__divdi3+0x280>
 80053d2:	429f      	cmp	r7, r3
 80053d4:	d95a      	bls.n	800548c <__divdi3+0x280>
 80053d6:	f1a8 0802 	sub.w	r8, r8, #2
 80053da:	442b      	add	r3, r5
 80053dc:	1bd8      	subs	r0, r3, r7
 80053de:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80053e2:	e78e      	b.n	8005302 <__divdi3+0xf6>
 80053e4:	f1c2 0320 	rsb	r3, r2, #32
 80053e8:	fa2c f103 	lsr.w	r1, ip, r3
 80053ec:	fa0e fe02 	lsl.w	lr, lr, r2
 80053f0:	fa20 f703 	lsr.w	r7, r0, r3
 80053f4:	ea41 0e0e 	orr.w	lr, r1, lr
 80053f8:	fa08 f002 	lsl.w	r0, r8, r2
 80053fc:	fa28 f103 	lsr.w	r1, r8, r3
 8005400:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8005404:	4338      	orrs	r0, r7
 8005406:	fbb1 f8f5 	udiv	r8, r1, r5
 800540a:	0c03      	lsrs	r3, r0, #16
 800540c:	fb05 1118 	mls	r1, r5, r8, r1
 8005410:	fa1f f78e 	uxth.w	r7, lr
 8005414:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005418:	fb07 f308 	mul.w	r3, r7, r8
 800541c:	428b      	cmp	r3, r1
 800541e:	fa0c fc02 	lsl.w	ip, ip, r2
 8005422:	d909      	bls.n	8005438 <__divdi3+0x22c>
 8005424:	eb11 010e 	adds.w	r1, r1, lr
 8005428:	f108 39ff 	add.w	r9, r8, #4294967295
 800542c:	d230      	bcs.n	8005490 <__divdi3+0x284>
 800542e:	428b      	cmp	r3, r1
 8005430:	d92e      	bls.n	8005490 <__divdi3+0x284>
 8005432:	f1a8 0802 	sub.w	r8, r8, #2
 8005436:	4471      	add	r1, lr
 8005438:	1ac9      	subs	r1, r1, r3
 800543a:	b280      	uxth	r0, r0
 800543c:	fbb1 f3f5 	udiv	r3, r1, r5
 8005440:	fb05 1113 	mls	r1, r5, r3, r1
 8005444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8005448:	fb07 f703 	mul.w	r7, r7, r3
 800544c:	428f      	cmp	r7, r1
 800544e:	d908      	bls.n	8005462 <__divdi3+0x256>
 8005450:	eb11 010e 	adds.w	r1, r1, lr
 8005454:	f103 30ff 	add.w	r0, r3, #4294967295
 8005458:	d216      	bcs.n	8005488 <__divdi3+0x27c>
 800545a:	428f      	cmp	r7, r1
 800545c:	d914      	bls.n	8005488 <__divdi3+0x27c>
 800545e:	3b02      	subs	r3, #2
 8005460:	4471      	add	r1, lr
 8005462:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005466:	1bc9      	subs	r1, r1, r7
 8005468:	fba3 890c 	umull	r8, r9, r3, ip
 800546c:	4549      	cmp	r1, r9
 800546e:	d309      	bcc.n	8005484 <__divdi3+0x278>
 8005470:	d005      	beq.n	800547e <__divdi3+0x272>
 8005472:	2200      	movs	r2, #0
 8005474:	e71d      	b.n	80052b2 <__divdi3+0xa6>
 8005476:	4696      	mov	lr, r2
 8005478:	e6fe      	b.n	8005278 <__divdi3+0x6c>
 800547a:	4613      	mov	r3, r2
 800547c:	e711      	b.n	80052a2 <__divdi3+0x96>
 800547e:	4094      	lsls	r4, r2
 8005480:	4544      	cmp	r4, r8
 8005482:	d2f6      	bcs.n	8005472 <__divdi3+0x266>
 8005484:	3b01      	subs	r3, #1
 8005486:	e7f4      	b.n	8005472 <__divdi3+0x266>
 8005488:	4603      	mov	r3, r0
 800548a:	e7ea      	b.n	8005462 <__divdi3+0x256>
 800548c:	4688      	mov	r8, r1
 800548e:	e7a5      	b.n	80053dc <__divdi3+0x1d0>
 8005490:	46c8      	mov	r8, r9
 8005492:	e7d1      	b.n	8005438 <__divdi3+0x22c>
 8005494:	4602      	mov	r2, r0
 8005496:	e78c      	b.n	80053b2 <__divdi3+0x1a6>
 8005498:	4613      	mov	r3, r2
 800549a:	e70a      	b.n	80052b2 <__divdi3+0xa6>
 800549c:	3b02      	subs	r3, #2
 800549e:	e757      	b.n	8005350 <__divdi3+0x144>
 80054a0:	f1a8 0802 	sub.w	r8, r8, #2
 80054a4:	442f      	add	r7, r5
 80054a6:	e73f      	b.n	8005328 <__divdi3+0x11c>

080054a8 <__udivdi3>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d144      	bne.n	800553a <__udivdi3+0x92>
 80054b0:	428a      	cmp	r2, r1
 80054b2:	4615      	mov	r5, r2
 80054b4:	4604      	mov	r4, r0
 80054b6:	d94f      	bls.n	8005558 <__udivdi3+0xb0>
 80054b8:	fab2 f782 	clz	r7, r2
 80054bc:	460e      	mov	r6, r1
 80054be:	b14f      	cbz	r7, 80054d4 <__udivdi3+0x2c>
 80054c0:	f1c7 0320 	rsb	r3, r7, #32
 80054c4:	40b9      	lsls	r1, r7
 80054c6:	fa20 f603 	lsr.w	r6, r0, r3
 80054ca:	fa02 f507 	lsl.w	r5, r2, r7
 80054ce:	430e      	orrs	r6, r1
 80054d0:	fa00 f407 	lsl.w	r4, r0, r7
 80054d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80054d8:	0c23      	lsrs	r3, r4, #16
 80054da:	fbb6 f0fe 	udiv	r0, r6, lr
 80054de:	b2af      	uxth	r7, r5
 80054e0:	fb0e 6110 	mls	r1, lr, r0, r6
 80054e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80054e8:	fb07 f100 	mul.w	r1, r7, r0
 80054ec:	4299      	cmp	r1, r3
 80054ee:	d909      	bls.n	8005504 <__udivdi3+0x5c>
 80054f0:	195b      	adds	r3, r3, r5
 80054f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80054f6:	f080 80ec 	bcs.w	80056d2 <__udivdi3+0x22a>
 80054fa:	4299      	cmp	r1, r3
 80054fc:	f240 80e9 	bls.w	80056d2 <__udivdi3+0x22a>
 8005500:	3802      	subs	r0, #2
 8005502:	442b      	add	r3, r5
 8005504:	1a5a      	subs	r2, r3, r1
 8005506:	b2a4      	uxth	r4, r4
 8005508:	fbb2 f3fe 	udiv	r3, r2, lr
 800550c:	fb0e 2213 	mls	r2, lr, r3, r2
 8005510:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8005514:	fb07 f703 	mul.w	r7, r7, r3
 8005518:	4297      	cmp	r7, r2
 800551a:	d908      	bls.n	800552e <__udivdi3+0x86>
 800551c:	1952      	adds	r2, r2, r5
 800551e:	f103 31ff 	add.w	r1, r3, #4294967295
 8005522:	f080 80d8 	bcs.w	80056d6 <__udivdi3+0x22e>
 8005526:	4297      	cmp	r7, r2
 8005528:	f240 80d5 	bls.w	80056d6 <__udivdi3+0x22e>
 800552c:	3b02      	subs	r3, #2
 800552e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005532:	2600      	movs	r6, #0
 8005534:	4631      	mov	r1, r6
 8005536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553a:	428b      	cmp	r3, r1
 800553c:	d847      	bhi.n	80055ce <__udivdi3+0x126>
 800553e:	fab3 f683 	clz	r6, r3
 8005542:	2e00      	cmp	r6, #0
 8005544:	d148      	bne.n	80055d8 <__udivdi3+0x130>
 8005546:	428b      	cmp	r3, r1
 8005548:	d302      	bcc.n	8005550 <__udivdi3+0xa8>
 800554a:	4282      	cmp	r2, r0
 800554c:	f200 80cd 	bhi.w	80056ea <__udivdi3+0x242>
 8005550:	2001      	movs	r0, #1
 8005552:	4631      	mov	r1, r6
 8005554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005558:	b912      	cbnz	r2, 8005560 <__udivdi3+0xb8>
 800555a:	2501      	movs	r5, #1
 800555c:	fbb5 f5f2 	udiv	r5, r5, r2
 8005560:	fab5 f885 	clz	r8, r5
 8005564:	f1b8 0f00 	cmp.w	r8, #0
 8005568:	d177      	bne.n	800565a <__udivdi3+0x1b2>
 800556a:	1b4a      	subs	r2, r1, r5
 800556c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005570:	b2af      	uxth	r7, r5
 8005572:	2601      	movs	r6, #1
 8005574:	fbb2 f0fe 	udiv	r0, r2, lr
 8005578:	0c23      	lsrs	r3, r4, #16
 800557a:	fb0e 2110 	mls	r1, lr, r0, r2
 800557e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005582:	fb07 f300 	mul.w	r3, r7, r0
 8005586:	428b      	cmp	r3, r1
 8005588:	d907      	bls.n	800559a <__udivdi3+0xf2>
 800558a:	1949      	adds	r1, r1, r5
 800558c:	f100 32ff 	add.w	r2, r0, #4294967295
 8005590:	d202      	bcs.n	8005598 <__udivdi3+0xf0>
 8005592:	428b      	cmp	r3, r1
 8005594:	f200 80ba 	bhi.w	800570c <__udivdi3+0x264>
 8005598:	4610      	mov	r0, r2
 800559a:	1ac9      	subs	r1, r1, r3
 800559c:	b2a4      	uxth	r4, r4
 800559e:	fbb1 f3fe 	udiv	r3, r1, lr
 80055a2:	fb0e 1113 	mls	r1, lr, r3, r1
 80055a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80055aa:	fb07 f703 	mul.w	r7, r7, r3
 80055ae:	42a7      	cmp	r7, r4
 80055b0:	d908      	bls.n	80055c4 <__udivdi3+0x11c>
 80055b2:	1964      	adds	r4, r4, r5
 80055b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80055b8:	f080 808f 	bcs.w	80056da <__udivdi3+0x232>
 80055bc:	42a7      	cmp	r7, r4
 80055be:	f240 808c 	bls.w	80056da <__udivdi3+0x232>
 80055c2:	3b02      	subs	r3, #2
 80055c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80055c8:	4631      	mov	r1, r6
 80055ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ce:	2600      	movs	r6, #0
 80055d0:	4630      	mov	r0, r6
 80055d2:	4631      	mov	r1, r6
 80055d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d8:	f1c6 0420 	rsb	r4, r6, #32
 80055dc:	fa22 f504 	lsr.w	r5, r2, r4
 80055e0:	40b3      	lsls	r3, r6
 80055e2:	432b      	orrs	r3, r5
 80055e4:	fa20 fc04 	lsr.w	ip, r0, r4
 80055e8:	fa01 f706 	lsl.w	r7, r1, r6
 80055ec:	fa21 f504 	lsr.w	r5, r1, r4
 80055f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055f4:	ea4c 0707 	orr.w	r7, ip, r7
 80055f8:	fbb5 f8fe 	udiv	r8, r5, lr
 80055fc:	0c39      	lsrs	r1, r7, #16
 80055fe:	fb0e 5518 	mls	r5, lr, r8, r5
 8005602:	fa1f fc83 	uxth.w	ip, r3
 8005606:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800560a:	fb0c f108 	mul.w	r1, ip, r8
 800560e:	42a9      	cmp	r1, r5
 8005610:	fa02 f206 	lsl.w	r2, r2, r6
 8005614:	d904      	bls.n	8005620 <__udivdi3+0x178>
 8005616:	18ed      	adds	r5, r5, r3
 8005618:	f108 34ff 	add.w	r4, r8, #4294967295
 800561c:	d367      	bcc.n	80056ee <__udivdi3+0x246>
 800561e:	46a0      	mov	r8, r4
 8005620:	1a6d      	subs	r5, r5, r1
 8005622:	b2bf      	uxth	r7, r7
 8005624:	fbb5 f4fe 	udiv	r4, r5, lr
 8005628:	fb0e 5514 	mls	r5, lr, r4, r5
 800562c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8005630:	fb0c fc04 	mul.w	ip, ip, r4
 8005634:	458c      	cmp	ip, r1
 8005636:	d904      	bls.n	8005642 <__udivdi3+0x19a>
 8005638:	18c9      	adds	r1, r1, r3
 800563a:	f104 35ff 	add.w	r5, r4, #4294967295
 800563e:	d35c      	bcc.n	80056fa <__udivdi3+0x252>
 8005640:	462c      	mov	r4, r5
 8005642:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8005646:	ebcc 0101 	rsb	r1, ip, r1
 800564a:	fba4 2302 	umull	r2, r3, r4, r2
 800564e:	4299      	cmp	r1, r3
 8005650:	d348      	bcc.n	80056e4 <__udivdi3+0x23c>
 8005652:	d044      	beq.n	80056de <__udivdi3+0x236>
 8005654:	4620      	mov	r0, r4
 8005656:	2600      	movs	r6, #0
 8005658:	e76c      	b.n	8005534 <__udivdi3+0x8c>
 800565a:	f1c8 0420 	rsb	r4, r8, #32
 800565e:	fa01 f308 	lsl.w	r3, r1, r8
 8005662:	fa05 f508 	lsl.w	r5, r5, r8
 8005666:	fa20 f704 	lsr.w	r7, r0, r4
 800566a:	40e1      	lsrs	r1, r4
 800566c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005670:	431f      	orrs	r7, r3
 8005672:	fbb1 f6fe 	udiv	r6, r1, lr
 8005676:	0c3a      	lsrs	r2, r7, #16
 8005678:	fb0e 1116 	mls	r1, lr, r6, r1
 800567c:	fa1f fc85 	uxth.w	ip, r5
 8005680:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8005684:	fb0c f206 	mul.w	r2, ip, r6
 8005688:	429a      	cmp	r2, r3
 800568a:	fa00 f408 	lsl.w	r4, r0, r8
 800568e:	d907      	bls.n	80056a0 <__udivdi3+0x1f8>
 8005690:	195b      	adds	r3, r3, r5
 8005692:	f106 31ff 	add.w	r1, r6, #4294967295
 8005696:	d237      	bcs.n	8005708 <__udivdi3+0x260>
 8005698:	429a      	cmp	r2, r3
 800569a:	d935      	bls.n	8005708 <__udivdi3+0x260>
 800569c:	3e02      	subs	r6, #2
 800569e:	442b      	add	r3, r5
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	b2bf      	uxth	r7, r7
 80056a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80056a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80056ac:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80056b0:	fb0c f100 	mul.w	r1, ip, r0
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d907      	bls.n	80056c8 <__udivdi3+0x220>
 80056b8:	195b      	adds	r3, r3, r5
 80056ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80056be:	d221      	bcs.n	8005704 <__udivdi3+0x25c>
 80056c0:	4299      	cmp	r1, r3
 80056c2:	d91f      	bls.n	8005704 <__udivdi3+0x25c>
 80056c4:	3802      	subs	r0, #2
 80056c6:	442b      	add	r3, r5
 80056c8:	1a5a      	subs	r2, r3, r1
 80056ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80056ce:	4667      	mov	r7, ip
 80056d0:	e750      	b.n	8005574 <__udivdi3+0xcc>
 80056d2:	4610      	mov	r0, r2
 80056d4:	e716      	b.n	8005504 <__udivdi3+0x5c>
 80056d6:	460b      	mov	r3, r1
 80056d8:	e729      	b.n	800552e <__udivdi3+0x86>
 80056da:	4613      	mov	r3, r2
 80056dc:	e772      	b.n	80055c4 <__udivdi3+0x11c>
 80056de:	40b0      	lsls	r0, r6
 80056e0:	4290      	cmp	r0, r2
 80056e2:	d2b7      	bcs.n	8005654 <__udivdi3+0x1ac>
 80056e4:	1e60      	subs	r0, r4, #1
 80056e6:	2600      	movs	r6, #0
 80056e8:	e724      	b.n	8005534 <__udivdi3+0x8c>
 80056ea:	4630      	mov	r0, r6
 80056ec:	e722      	b.n	8005534 <__udivdi3+0x8c>
 80056ee:	42a9      	cmp	r1, r5
 80056f0:	d995      	bls.n	800561e <__udivdi3+0x176>
 80056f2:	f1a8 0802 	sub.w	r8, r8, #2
 80056f6:	441d      	add	r5, r3
 80056f8:	e792      	b.n	8005620 <__udivdi3+0x178>
 80056fa:	458c      	cmp	ip, r1
 80056fc:	d9a0      	bls.n	8005640 <__udivdi3+0x198>
 80056fe:	3c02      	subs	r4, #2
 8005700:	4419      	add	r1, r3
 8005702:	e79e      	b.n	8005642 <__udivdi3+0x19a>
 8005704:	4610      	mov	r0, r2
 8005706:	e7df      	b.n	80056c8 <__udivdi3+0x220>
 8005708:	460e      	mov	r6, r1
 800570a:	e7c9      	b.n	80056a0 <__udivdi3+0x1f8>
 800570c:	3802      	subs	r0, #2
 800570e:	4429      	add	r1, r5
 8005710:	e743      	b.n	800559a <__udivdi3+0xf2>
 8005712:	bf00      	nop

08005714 <__errno>:
 8005714:	4b01      	ldr	r3, [pc, #4]	; (800571c <__errno+0x8>)
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000114 	.word	0x20000114

08005720 <__libc_init_array>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4b0e      	ldr	r3, [pc, #56]	; (800575c <__libc_init_array+0x3c>)
 8005724:	4c0e      	ldr	r4, [pc, #56]	; (8005760 <__libc_init_array+0x40>)
 8005726:	1ae4      	subs	r4, r4, r3
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	2500      	movs	r5, #0
 800572c:	461e      	mov	r6, r3
 800572e:	42a5      	cmp	r5, r4
 8005730:	d004      	beq.n	800573c <__libc_init_array+0x1c>
 8005732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005736:	4798      	blx	r3
 8005738:	3501      	adds	r5, #1
 800573a:	e7f8      	b.n	800572e <__libc_init_array+0xe>
 800573c:	f7fc f906 	bl	800194c <_init>
 8005740:	4c08      	ldr	r4, [pc, #32]	; (8005764 <__libc_init_array+0x44>)
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <__libc_init_array+0x48>)
 8005744:	1ae4      	subs	r4, r4, r3
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2500      	movs	r5, #0
 800574a:	461e      	mov	r6, r3
 800574c:	42a5      	cmp	r5, r4
 800574e:	d004      	beq.n	800575a <__libc_init_array+0x3a>
 8005750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005754:	4798      	blx	r3
 8005756:	3501      	adds	r5, #1
 8005758:	e7f8      	b.n	800574c <__libc_init_array+0x2c>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	20000118 	.word	0x20000118
 8005760:	20000118 	.word	0x20000118
 8005764:	20000118 	.word	0x20000118
 8005768:	20000118 	.word	0x20000118

0800576c <memcpy>:
 800576c:	b510      	push	{r4, lr}
 800576e:	1e43      	subs	r3, r0, #1
 8005770:	440a      	add	r2, r1
 8005772:	4291      	cmp	r1, r2
 8005774:	d004      	beq.n	8005780 <memcpy+0x14>
 8005776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800577e:	e7f8      	b.n	8005772 <memcpy+0x6>
 8005780:	bd10      	pop	{r4, pc}
	...

08005784 <RS_channel_config>:
 8005784:	4240 000f 0808 1001 0000 0000               @B..........

08005790 <RS_tx_pin_config>:
 8005790:	00d0 0000 0001 0000 0004 0000               ............

0800579c <RS_tx_pin>:
 800579c:	8200 4802 000e 0000 5790 0800               ...H.....W..

080057a8 <RS_config>:
 80057a8:	5784 0800 2105 0800 3461 0800 33e1 0800     .W...!..a4...3..
	...
 80057cc:	579c 0800 0001 0400 0104 0000               .W..........

080057d8 <TIM_IRQ>:
 80057d8:	0339 0100                                   9...

080057dc <LED1>:
 80057dc:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 80057ec:	0007 0000 0250 0104 0000 0001 0000 0000     ....P...........
 80057fc:	0000 0001 0101 0101 6361 736f 0066 0000     ........acosf...
 800580c:	0000 0000 7361 6e69 0066 0000 7173 7472     ....asinf...sqrt
 800581c:	0066 0000                                   f...

08005820 <npio2_hw>:
 8005820:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 8005830:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 8005840:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 8005850:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 8005860:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 8005870:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 8005880:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 8005890:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

080058a0 <two_over_pi>:
 80058a0:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 80058b0:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 80058c0:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 80058d0:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 80058e0:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 80058f0:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 8005900:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 8005910:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 8005920:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 8005930:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 8005940:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 8005950:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 8005960:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 8005970:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 8005980:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 8005990:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 80059a0:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 80059b0:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 80059c0:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 80059d0:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 80059e0:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 80059f0:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 8005a00:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 8005a10:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 8005a20:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 8005a30:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 8005a40:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 8005a50:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 8005a60:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 8005a70:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 8005a80:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 8005a90:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 8005aa0:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 8005ab0:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 8005ac0:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 8005ad0:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 8005ae0:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 8005af0:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 8005b00:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 8005b10:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 8005b20:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 8005b30:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 8005b40:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 8005b50:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 8005b60:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 8005b70:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 8005b80:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 8005b90:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 8005ba0:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 8005bb0:	008c 0000 006b 0000                         ....k...

08005bb8 <init_jk>:
 8005bb8:	0004 0000 0007 0000 0009 0000               ............

08005bc4 <PIo2>:
 8005bc4:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 8005bd4:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 8005be4:	0000 1fc4 0000 1bc6 0000 1744 0043 0000     ..........D.C...
