
MAB_Komputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006848  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08006848  0c006848  0000e848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  3 .data         00000100  20000000  0c006850  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000308  20000100  0c006950  00010100  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  6 .debug_aranges 00000ca0  00000000  00000000  00010100  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001269f  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002943  00000000  00000000  0002343f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005de1  00000000  00000000  00025d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000038b0  00000000  00000000  0002bb64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007e22  00000000  00000000  0002f414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006a2c  00000000  00000000  00037236  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ac8  00000000  00000000  0003dc62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000b42  00000000  00000000  0003e72a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 25 32 00 08     ............%2..
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 4d 21 00 08     ............M!..
 80001ac:	3d 21 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     =!..............
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006850 	.word	0x0c006850
 800024c:	20000000 	.word	0x20000000
 8000250:	00000100 	.word	0x00000100
 8000254:	0c006950 	.word	0x0c006950
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006850 	.word	0x0c006850
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006850 	.word	0x0c006850
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000100 	.word	0x20000100
 800027c:	00000308 	.word	0x00000308
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800631d 	.word	0x0800631d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003f9d 	.word	0x08003f9d

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 fd83 	bl	8002dd0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 fdeb 	bl	8002ea4 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 fdca 	bl	8002e90 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <XMC_GPIO_Init+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <XMC_GPIO_Init+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e03c      	b.n	80004a0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	409a      	lsls	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3210      	adds	r2, #16
 8000446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4619      	mov	r1, r3
 8000454:	2307      	movs	r3, #7
 8000456:	408b      	lsls	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	ea02 0103 	and.w	r1, r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f100 0210 	add.w	r2, r0, #16
 8000464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3210      	adds	r2, #16
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a1b      	ldrb	r3, [r3, #8]
 8000484:	4619      	mov	r1, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	ea42 0103 	orr.w	r1, r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f100 0210 	add.w	r2, r0, #16
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3204      	adds	r2, #4
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	ea42 0103 	orr.w	r1, r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1d02      	adds	r2, r0, #4
 80004d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48028e00 	.word	0x48028e00
 80004e4:	48028f00 	.word	0x48028f00

080004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000ffc0 	.word	0x2000ffc0

08000500 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <XMC_SCU_GetMirrorStatus+0x14>)
 8000506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	50004000 	.word	0x50004000

08000518 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000520:	f7ff fed8 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <XMC_SCU_lDelay+0x3c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <XMC_SCU_lDelay+0x40>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0c9a      	lsrs	r2, r3, #18
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e003      	b.n	8000546 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800053e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3f7      	bcc.n	800053e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000ffc0 	.word	0x2000ffc0
 8000558:	431bde83 	.word	0x431bde83

0800055c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f89b 	bl	80006a0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800056a:	f000 fa2d 	bl	80009c8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	79db      	ldrb	r3, [r3, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00a      	beq.n	800058c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000576:	f000 fa65 	bl	8000a44 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800057a:	bf00      	nop
 800057c:	f000 fa50 	bl	8000a20 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000580:	4603      	mov	r3, r0
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f7      	bne.n	800057c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a5b      	ldrb	r3, [r3, #9]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f8ff 	bl	8000794 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000596:	bf00      	nop
 8000598:	f7ff ffb2 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1fa      	bne.n	8000598 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f9e8 	bl	800097c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7c1b      	ldrb	r3, [r3, #16]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f90d 	bl	80007d0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7c5b      	ldrb	r3, [r3, #17]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f930 	bl	8000820 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7c9b      	ldrb	r3, [r3, #18]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f917 	bl	80007f8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7cdb      	ldrb	r3, [r3, #19]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f93a 	bl	8000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005dc:	f000 fa66 	bl	8000aac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e0:	bf00      	nop
 80005e2:	f000 fa8b 	bl	8000afc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005fa:	f000 faa3 	bl	8000b44 <XMC_SCU_CLOCK_DisableSystemPll>
 80005fe:	e014      	b.n	800062a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000600:	f000 fa90 	bl	8000b24 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8899      	ldrh	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000610:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000616:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4608      	mov	r0, r1
 8000620:	4611      	mov	r1, r2
 8000622:	462a      	mov	r2, r5
 8000624:	4623      	mov	r3, r4
 8000626:	f000 fa9d 	bl	8000b64 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000632:	d103      	bne.n	800063c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000638:	f000 f832 	bl	80006a0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800063c:	f7ff fe4a 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bdb0      	pop	{r4, r5, r7, pc}
 8000646:	bf00      	nop

08000648 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0f1b      	lsrs	r3, r3, #28
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800065c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	461a      	mov	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800066c:	4413      	add	r3, r2
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	50004414 	.word	0x50004414

08000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000684:	f7ff ff30 	bl	80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000688:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 800068c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	50004600 	.word	0x50004600

080006a0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	50004600 	.word	0x50004600

080006c8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4313      	orrs	r3, r2
 80006de:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	50004600 	.word	0x50004600

080006f0 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	50004600 	.word	0x50004600

08000718 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d108      	bne.n	800073a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	60d3      	str	r3, [r2, #12]
 8000738:	e007      	b.n	800074a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	60d3      	str	r3, [r2, #12]
  }
}
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	50004710 	.word	0x50004710

08000758 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000762:	bf00      	nop
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000766:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800077c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077e:	4313      	orrs	r3, r2
 8000780:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	50004000 	.word	0x50004000
 8000790:	50004300 	.word	0x50004300

08000794 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079e:	bf00      	nop
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ae:	4907      	ldr	r1, [pc, #28]	; (80007cc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ba:	4313      	orrs	r3, r2
 80007bc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	50004000 	.word	0x50004000
 80007cc:	50004300 	.word	0x50004300

080007d0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	50004600 	.word	0x50004600

080007f8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080e:	4313      	orrs	r3, r2
 8000810:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	50004600 	.word	0x50004600

08000820 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004600 	.word	0x50004600

08000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004600 	.word	0x50004600

08000870 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000886:	4313      	orrs	r3, r2
 8000888:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004600 	.word	0x50004600

08000898 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	50004600 	.word	0x50004600

080008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d6:	4313      	orrs	r3, r2
 80008d8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	6053      	str	r3, [r2, #4]
}
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800092a:	4913      	ldr	r1, [pc, #76]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3b01      	subs	r3, #1
 8000936:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000938:	4313      	orrs	r3, r2
 800093a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000946:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f023 0310 	bic.w	r3, r3, #16
 8000952:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000960:	bf00      	nop
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f9      	beq.n	8000962 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	50004710 	.word	0x50004710

0800097c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000990:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d10e      	bne.n	80009b6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009a2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009a4:	2064      	movs	r0, #100	; 0x64
 80009a6:	f7ff fdb7 	bl	8000518 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009aa:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009b4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f7ff fdae 	bl	8000518 <XMC_SCU_lDelay>
}
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	50004710 	.word	0x50004710

080009c8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d109      	bne.n	80009ec <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009de:	bf00      	nop
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f9      	beq.n	80009e0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00a      	beq.n	8000a0e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fe:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a00:	bf00      	nop
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1f9      	bne.n	8000a02 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	50004200 	.word	0x50004200
 8000a1c:	50004400 	.word	0x50004400

08000a20 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	50004300 	.word	0x50004300

08000a44 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a48:	bf00      	nop
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f8      	bne.n	8000a4a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a62:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a64:	bf00      	nop
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f8      	bne.n	8000a66 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a80:	bf00      	nop
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f8      	bne.n	8000a82 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000a96:	bf00      	nop
 8000a98:	f7ff fd32 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1fa      	bne.n	8000a98 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	50004000 	.word	0x50004000
 8000aa8:	50004300 	.word	0x50004300

08000aac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aba:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000abc:	4d0d      	ldr	r5, [pc, #52]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ac6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000aca:	f002 f9e1 	bl	8002e90 <OSCHP_GetFrequency>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8000ad6:	0d1b      	lsrs	r3, r3, #20
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000adc:	4323      	orrs	r3, r4
 8000ade:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aea:	6053      	str	r3, [r2, #4]
}
 8000aec:	bdb0      	pop	{r4, r5, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	50004710 	.word	0x50004710
 8000af4:	50004700 	.word	0x50004700
 8000af8:	6b5fca6b 	.word	0x6b5fca6b

08000afc <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b08:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	50004710 	.word	0x50004710

08000b24 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b32:	f023 0302 	bic.w	r3, r3, #2
 8000b36:	6053      	str	r3, [r2, #4]
}
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	50004710 	.word	0x50004710

08000b44 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	6053      	str	r3, [r2, #4]
}
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	50004710 	.word	0x50004710

08000b64 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	81fb      	strh	r3, [r7, #14]
 8000b72:	460b      	mov	r3, r1
 8000b74:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdcd 	bl	8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 8084 	bne.w	8000c8e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b8c:	f002 f980 	bl	8002e90 <OSCHP_GetFrequency>
 8000b90:	4602      	mov	r2, r0
 8000b92:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000b94:	fba3 2302 	umull	r2, r3, r3, r2
 8000b98:	0c9b      	lsrs	r3, r3, #18
 8000b9a:	059b      	lsls	r3, r3, #22
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e002      	b.n	8000ba6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000ba0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ba4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	fb02 f203 	mul.w	r2, r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4a42      	ldr	r2, [pc, #264]	; (8000cc4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	0d9b      	lsrs	r3, r3, #22
 8000bc2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bc4:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bd0:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bdc:	493a      	ldr	r1, [pc, #232]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bde:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000be4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	3a01      	subs	r2, #1
 8000bea:	0212      	lsls	r2, r2, #8
 8000bec:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bf4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c00:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c0c:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f023 0310 	bic.w	r3, r3, #16
 8000c16:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c18:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c22:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c24:	bf00      	nop
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f9      	beq.n	8000c26 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c3e:	bf00      	nop
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f9      	bne.n	8000c40 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	0d9b      	lsrs	r3, r3, #22
 8000c58:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c5a:	6a3a      	ldr	r2, [r7, #32]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d202      	bcs.n	8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c62:	6938      	ldr	r0, [r7, #16]
 8000c64:	f000 f838 	bl	8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	0d9b      	lsrs	r3, r3, #22
 8000c76:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c78:	6a3a      	ldr	r2, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d202      	bcs.n	8000c86 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c80:	6938      	ldr	r0, [r7, #16]
 8000c82:	f000 f829 	bl	8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c86:	6a38      	ldr	r0, [r7, #32]
 8000c88:	f000 f826 	bl	8000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c8c:	e015      	b.n	8000cba <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cac:	bf00      	nop
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	431bde83 	.word	0x431bde83
 8000cc4:	aaaaaaab 	.word	0xaaaaaaab
 8000cc8:	50004710 	.word	0x50004710
 8000ccc:	f08080ff 	.word	0xf08080ff
 8000cd0:	88888889 	.word	0x88888889
 8000cd4:	b60b60b7 	.word	0xb60b60b7

08000cd8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f7ff fc0f 	bl	8000518 <XMC_SCU_lDelay>
}
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	50004710 	.word	0x50004710

08000d04 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d103      	bne.n	8000d3c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff fc87 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d3a:	e016      	b.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <XMC_CCU4_lDeassertReset+0x50>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d103      	bne.n	8000d4c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d44:	2008      	movs	r0, #8
 8000d46:	f7ff fc7f 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d4a:	e00e      	b.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <XMC_CCU4_lDeassertReset+0x54>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d103      	bne.n	8000d5c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f7ff fc77 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d5a:	e006      	b.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <XMC_CCU4_lDeassertReset+0x58>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <XMC_CCU4_lDeassertReset+0x5c>)
 8000d66:	f7ff fc6f 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	4000c000 	.word	0x4000c000
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40014000 	.word	0x40014000
 8000d7c:	48004000 	.word	0x48004000
 8000d80:	10000001 	.word	0x10000001

08000d84 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000d8c:	2010      	movs	r0, #16
 8000d8e:	f7ff fdab 	bl	80008e8 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffc6 	bl	8000d24 <XMC_CCU4_lDeassertReset>
#endif
}
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop

08000da0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ffe9 	bl	8000d84 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa6 	bl	8000d04 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	039b      	lsls	r3, r3, #14
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	43db      	mvns	r3, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	795b      	ldrb	r3, [r3, #5]
 8000e2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	051a      	lsls	r2, r3, #20
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	795b      	ldrb	r3, [r3, #5]
 8000e4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	f023 0303 	bic.w	r3, r3, #3
 8000e9c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d104      	bne.n	8000ec2 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e003      	b.n	8000eca <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ec8:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	615a      	str	r2, [r3, #20]
}
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f023 030c 	bic.w	r3, r3, #12
 8000ef8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f16:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	615a      	str	r2, [r3, #20]
}
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	031b      	lsls	r3, r3, #12
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	605a      	str	r2, [r3, #4]
}
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4603      	mov	r3, r0
 8000f78:	70fb      	strb	r3, [r7, #3]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	70bb      	strb	r3, [r7, #2]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f94:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	049b      	lsls	r3, r3, #18
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000fa6:	78bb      	ldrb	r3, [r7, #2]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d104      	bne.n	8000fb6 <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e003      	b.n	8000fbe <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8000fbe:	787b      	ldrb	r3, [r7, #1]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e003      	b.n	8000fd6 <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fd4:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	615a      	str	r2, [r3, #20]
}
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	039b      	lsls	r3, r3, #14
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	605a      	str	r2, [r3, #4]
}
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001034:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001068:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	029b      	lsls	r3, r3, #10
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	605a      	str	r2, [r3, #4]
}
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001098:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	605a      	str	r2, [r3, #4]
}
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
 80010c0:	4613      	mov	r3, r2
 80010c2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e003      	b.n	80010fe <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010fc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d104      	bne.n	800110e <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e003      	b.n	8001116 <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001114:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	615a      	str	r2, [r3, #20]
}
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001140:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	049b      	lsls	r3, r3, #18
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001154:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	051b      	lsls	r3, r3, #20
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001168:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	789b      	ldrb	r3, [r3, #2]
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800117c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	061b      	lsls	r3, r3, #24
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4313      	orrs	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8001190:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	78db      	ldrb	r3, [r3, #3]
 8001196:	06db      	lsls	r3, r3, #27
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4313      	orrs	r3, r2
 800119c:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80011a4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	78db      	ldrb	r3, [r3, #3]
 80011aa:	075b      	lsls	r3, r3, #29
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011b8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011cc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	601a      	str	r2, [r3, #0]
#endif
}
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	460b      	mov	r3, r1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	3310      	adds	r3, #16
 800120e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	785b      	ldrb	r3, [r3, #1]
 8001224:	461a      	mov	r2, r3
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	3316      	adds	r3, #22
 8001236:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2201      	movs	r2, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	789b      	ldrb	r3, [r3, #2]
 800124c:	461a      	mov	r2, r3
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800125a:	7ffb      	ldrb	r3, [r7, #31]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	3319      	adds	r3, #25
 8001262:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	78db      	ldrb	r3, [r3, #3]
 8001278:	461a      	mov	r2, r3
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]
#endif
}
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012d8:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
 8001308:	4613      	mov	r3, r2
 800130a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001312:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b09      	cmp	r3, #9
 8001318:	d82c      	bhi.n	8001374 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	08001349 	.word	0x08001349
 8001324:	08001349 	.word	0x08001349
 8001328:	08001353 	.word	0x08001353
 800132c:	08001353 	.word	0x08001353
 8001330:	08001375 	.word	0x08001375
 8001334:	08001375 	.word	0x08001375
 8001338:	08001375 	.word	0x08001375
 800133c:	08001375 	.word	0x08001375
 8001340:	0800135d 	.word	0x0800135d
 8001344:	08001369 	.word	0x08001369
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001348:	2303      	movs	r3, #3
 800134a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
      break;
 8001350:	e016      	b.n	8001380 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001352:	230c      	movs	r3, #12
 8001354:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001356:	2302      	movs	r3, #2
 8001358:	617b      	str	r3, [r7, #20]
      break;
 800135a:	e011      	b.n	8001380 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800135c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001360:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001362:	2308      	movs	r3, #8
 8001364:	617b      	str	r3, [r7, #20]
      break;
 8001366:	e00b      	b.n	8001380 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001368:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800136c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800136e:	230a      	movs	r3, #10
 8001370:	617b      	str	r3, [r7, #20]
      break;
 8001372:	e005      	b.n	8001380 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001374:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001378:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800137a:	230c      	movs	r3, #12
 800137c:	617b      	str	r3, [r7, #20]
      break;
 800137e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4013      	ands	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800138a:	78ba      	ldrb	r2, [r7, #2]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	2303      	movs	r3, #3
 80013c8:	408b      	lsls	r3, r1
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	78f9      	ldrb	r1, [r7, #3]
 80013da:	0049      	lsls	r1, r1, #1
 80013dc:	408b      	lsls	r3, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001402:	b2db      	uxtb	r3, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001436:	2310      	movs	r3, #16
 8001438:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f88c 	bl	8001558 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	79db      	ldrb	r3, [r3, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	79db      	ldrb	r3, [r3, #7]
 800144c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4619      	mov	r1, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	f000 f8ca 	bl	80015f0 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	799b      	ldrb	r3, [r3, #6]
 8001460:	3b01      	subs	r3, #1
 8001462:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	3301      	adds	r3, #1
 800146a:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800146c:	4313      	orrs	r3, r2
 800146e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	791b      	ldrb	r3, [r3, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	795b      	ldrb	r3, [r3, #5]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	795b      	ldrb	r3, [r3, #5]
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
 80014a4:	e008      	b.n	80014b8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80014be:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
 80014c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	891b      	ldrh	r3, [r3, #8]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d110      	bne.n	8001514 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80014f2:	bf00      	nop
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff7b 	bl	80013f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b80      	cmp	r3, #128	; 0x80
 80014fe:	d0f9      	beq.n	80014f4 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	f7ff ff83 	bl	8001410 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001512:	e003      	b.n	800151c <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001514:	887a      	ldrh	r2, [r7, #2]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop

08001524 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001532:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	81fb      	strh	r3, [r7, #14]
 8001540:	e003      	b.n	800154a <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001548:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800154a:	89fb      	ldrh	r3, [r7, #14]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <XMC_USIC_CH_Enable+0x74>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d003      	beq.n	8001570 <XMC_USIC_CH_Enable+0x18>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <XMC_USIC_CH_Enable+0x78>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d103      	bne.n	8001578 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <XMC_USIC_CH_Enable+0x7c>)
 8001572:	f000 f979 	bl	8001868 <XMC_USIC_Enable>
 8001576:	e016      	b.n	80015a6 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <XMC_USIC_CH_Enable+0x80>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d003      	beq.n	8001588 <XMC_USIC_CH_Enable+0x30>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <XMC_USIC_CH_Enable+0x84>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d103      	bne.n	8001590 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <XMC_USIC_CH_Enable+0x88>)
 800158a:	f000 f96d 	bl	8001868 <XMC_USIC_Enable>
 800158e:	e00a      	b.n	80015a6 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <XMC_USIC_CH_Enable+0x8c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d003      	beq.n	80015a0 <XMC_USIC_CH_Enable+0x48>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <XMC_USIC_CH_Enable+0x90>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d102      	bne.n	80015a6 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <XMC_USIC_CH_Enable+0x94>)
 80015a2:	f000 f961 	bl	8001868 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80015ac:	bf00      	nop
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f9      	beq.n	80015ae <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f023 020f 	bic.w	r2, r3, #15
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40030000 	.word	0x40030000
 80015d0:	40030200 	.word	0x40030200
 80015d4:	40030008 	.word	0x40030008
 80015d8:	48020000 	.word	0x48020000
 80015dc:	48020200 	.word	0x48020200
 80015e0:	48020008 	.word	0x48020008
 80015e4:	48024000 	.word	0x48024000
 80015e8:	48024200 	.word	0x48024200
 80015ec:	48024008 	.word	0x48024008

080015f0 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b63      	cmp	r3, #99	; 0x63
 8001600:	d958      	bls.n	80016b4 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d055      	beq.n	80016b4 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001608:	f7ff f83a 	bl	8000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800160c:	4602      	mov	r2, r0
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001610:	fba3 2302 	umull	r2, r3, r3, r2
 8001614:	095b      	lsrs	r3, r3, #5
 8001616:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4a2b      	ldr	r2, [pc, #172]	; (80016c8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001624:	2301      	movs	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800162c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001630:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001632:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
 8001638:	e022      	b.n	8001680 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800163e:	fb02 f203 	mul.w	r2, r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	0a9b      	lsrs	r3, r3, #10
 8001654:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800165c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001664:	d209      	bcs.n	800167a <XMC_USIC_CH_SetBaudrate+0x8a>
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	429a      	cmp	r2, r3
 800166c:	d205      	bcs.n	800167a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	3b01      	subs	r3, #1
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1d9      	bne.n	800163a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001696:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	3a01      	subs	r2, #1
 800169c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800169e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80016a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80016a6:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016b2:	e002      	b.n	80016ba <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80016ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3738      	adds	r7, #56	; 0x38
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	51eb851f 	.word	0x51eb851f
 80016cc:	fc0080ef 	.word	0xfc0080ef

080016d0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80016f8:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	0211      	lsls	r1, r2, #8
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001702:	79fa      	ldrb	r2, [r7, #7]
 8001704:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001706:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001708:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	f8ffc0c0 	.word	0xf8ffc0c0

08001720 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001736:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001748:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	0211      	lsls	r1, r2, #8
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001756:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001758:	4313      	orrs	r3, r2
 800175a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	efffc0c0 	.word	0xefffc0c0

08001774 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	460b      	mov	r3, r1
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001788:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001798:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80017a0:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	460b      	mov	r3, r1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	2107      	movs	r1, #7
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	460b      	mov	r3, r1
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	2107      	movs	r1, #7
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001818:	431a      	orrs	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	460b      	mov	r3, r1
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	2107      	movs	r1, #7
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <XMC_USIC_Enable+0x40>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d104      	bne.n	8001882 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001878:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800187c:	f7fe fee4 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001880:	e00e      	b.n	80018a0 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a09      	ldr	r2, [pc, #36]	; (80018ac <XMC_USIC_Enable+0x44>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d103      	bne.n	8001892 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <XMC_USIC_Enable+0x48>)
 800188c:	f7fe fedc 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001890:	e006      	b.n	80018a0 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <XMC_USIC_Enable+0x4c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d102      	bne.n	80018a0 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <XMC_USIC_Enable+0x50>)
 800189c:	f7fe fed4 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40030008 	.word	0x40030008
 80018ac:	48020008 	.word	0x48020008
 80018b0:	10000080 	.word	0x10000080
 80018b4:	48024008 	.word	0x48024008
 80018b8:	10000100 	.word	0x10000100

080018bc <_init>:
  }
}

/* Init */
void _init(void)
{}
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800191e:	b2db      	uxtb	r3, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800193c:	409a      	lsls	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	43db      	mvns	r3, r3
 8001984:	401a      	ands	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80019c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80019ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4798      	blx	r3
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop

08001ab8 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d000      	beq.n	8001ad6 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001ad4:	e007      	b.n	8001ae6 <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	f000 f824 	bl	8001b28 <UART_StartTransmitIRQ>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	75fb      	strb	r3, [r7, #23]
    break;
 8001ae4:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001afc:	2304      	movs	r3, #4
 8001afe:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d000      	beq.n	8001b0e <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001b0c:	e007      	b.n	8001b1e <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	f000 f864 	bl	8001be0 <UART_StartReceiveIRQ>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	75fb      	strb	r3, [r7, #23]
    break;
 8001b1c:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001b34:	2304      	movs	r3, #4
 8001b36:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d144      	bne.n	8001bd4 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	7e1b      	ldrb	r3, [r3, #24]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f083 0301 	eor.w	r3, r3, #1
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03a      	beq.n	8001bd4 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d035      	beq.n	8001bd0 <UART_StartTransmitIRQ+0xa8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d032      	beq.n	8001bd0 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff00 	bl	8001998 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ba2:	f7ff fed3 	bl	800194c <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001ba6:	e006      	b.n	8001bb6 <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb2:	f7ff fe89 	bl	80018c8 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7ff feaf 	bl	800192c <XMC_USIC_CH_TriggerServiceRequest>
 8001bce:	e001      	b.n	8001bd4 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop

08001be0 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001bec:	2304      	movs	r3, #4
 8001bee:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d13e      	bne.n	8001c80 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	7e5b      	ldrb	r3, [r3, #25]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f083 0301 	eor.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d034      	beq.n	8001c80 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d02f      	beq.n	8001c7c <UART_StartReceiveIRQ+0x9c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02c      	beq.n	8001c7c <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2201      	movs	r2, #1
 8001c32:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff00 	bl	8001a50 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f000 f930 	bl	8001eb8 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001c62:	f7ff fecf 	bl	8001a04 <XMC_USIC_CH_RXFIFO_EnableEvent>
 8001c66:	e006      	b.n	8001c76 <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001c72:	f7ff fe29 	bl	80018c8 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
 8001c7a:	e001      	b.n	8001c80 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d240      	bcs.n	8001d28 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d027      	beq.n	8001d02 <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001cb2:	e01a      	b.n	8001cea <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d212      	bcs.n	8001ce6 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7ff fbff 	bl	80014d8 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	e001      	b.n	8001cea <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8001ce6:	bf00      	nop
 8001ce8:	e053      	b.n	8001d92 <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe60 	bl	80019b4 <XMC_USIC_CH_TXFIFO_IsFull>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1d9      	bne.n	8001cb4 <UART_lTransmitHandler+0x28>
 8001d00:	e047      	b.n	8001d92 <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4608      	mov	r0, r1
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7ff fbde 	bl	80014d8 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	e034      	b.n	8001d92 <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fe55 	bl	80019dc <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02c      	beq.n	8001d92 <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d4e:	f7ff fe0f 	bl	8001970 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001d52:	e006      	b.n	8001d62 <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5e:	f7ff fdc3 	bl	80018e8 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001d62:	bf00      	nop
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fdcf 	bl	800190c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b80      	cmp	r3, #128	; 0x80
 8001d72:	d0f7      	beq.n	8001d64 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4798      	blx	r3
      }
    }
  }
}
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d04e      	beq.n	8001e50 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001db2:	e032      	b.n	8001e1a <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d211      	bcs.n	8001de4 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	18d4      	adds	r4, r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fba8 	bl	8001524 <XMC_UART_CH_GetReceivedData>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d114      	bne.n	8001e1a <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e00:	f7ff fe12 	bl	8001a28 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4798      	blx	r3
        }
        break;
 8001e16:	e00b      	b.n	8001e30 <UART_lReceiveHandler+0x98>
 8001e18:	e00a      	b.n	8001e30 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe24 	bl	8001a6c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1c1      	bne.n	8001db4 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d23a      	bcs.n	8001eb2 <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f000 f835 	bl	8001eb8 <UART_lReconfigureRxFIFO>
 8001e4e:	e030      	b.n	8001eb2 <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d211      	bcs.n	8001e80 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	18d4      	adds	r4, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb5a 	bl	8001524 <XMC_UART_CH_GetReceivedData>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d112      	bne.n	8001eb2 <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001e9c:	f7ff fd24 	bl	80018e8 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4798      	blx	r3
      }
    }
  }
}
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d203      	bcs.n	8001ee6 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e002      	b.n	8001eec <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	f7ff fc39 	bl	8001774 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f14:	0a1b      	lsrs	r3, r3, #8
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_EnableIRQ+0x34>)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	490d      	ldr	r1, [pc, #52]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	4909      	ldr	r1, [pc, #36]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
  }
}
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	bf28      	it	cs
 8001fce:	2306      	movcs	r3, #6
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	1e5a      	subs	r2, r3, #1
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	1e59      	subs	r1, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002004:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop

08002014 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
 8002020:	4613      	mov	r3, r2
 8002022:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002024:	78f8      	ldrb	r0, [r7, #3]
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	3306      	adds	r3, #6
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002036:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002038:	431a      	orrs	r2, r3
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	1d83      	adds	r3, r0, #6
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop

08002050 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f023 030f 	bic.w	r3, r3, #15
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <RS_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t RS_init()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 800207a:	2300      	movs	r3, #0
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &RS_channel_config);
 800207e:	482b      	ldr	r0, [pc, #172]	; (800212c <RS_init+0xb8>)
 8002080:	492b      	ldr	r1, [pc, #172]	; (8002130 <RS_init+0xbc>)
 8002082:	f7ff f9d3 	bl	800142c <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
 8002086:	4829      	ldr	r0, [pc, #164]	; (800212c <RS_init+0xb8>)
 8002088:	2100      	movs	r1, #0
 800208a:	2203      	movs	r2, #3
 800208c:	f7ff ffc2 	bl	8002014 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH0,
 8002090:	4826      	ldr	r0, [pc, #152]	; (800212c <RS_init+0xb8>)
 8002092:	2110      	movs	r1, #16
 8002094:	2204      	movs	r2, #4
 8002096:	2301      	movs	r3, #1
 8002098:	f7ff fb1a 	bl	80016d0 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <RS_init+0xb8>)
 800209e:	2100      	movs	r1, #0
 80020a0:	2204      	movs	r2, #4
 80020a2:	2300      	movs	r3, #0
 80020a4:	f7ff fb3c 	bl	8001720 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 80020a8:	4820      	ldr	r0, [pc, #128]	; (800212c <RS_init+0xb8>)
 80020aa:	f7ff ffd1 	bl	8002050 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &RS_tx_pin_config);
 80020ae:	4821      	ldr	r0, [pc, #132]	; (8002134 <RS_init+0xc0>)
 80020b0:	210e      	movs	r1, #14
 80020b2:	4a21      	ldr	r2, [pc, #132]	; (8002138 <RS_init+0xc4>)
 80020b4:	f7fe f978 	bl	80003a8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80020b8:	481c      	ldr	r0, [pc, #112]	; (800212c <RS_init+0xb8>)
 80020ba:	2110      	movs	r1, #16
 80020bc:	2202      	movs	r2, #2
 80020be:	f7ff fb7b 	bl	80017b8 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80020c2:	481a      	ldr	r0, [pc, #104]	; (800212c <RS_init+0xb8>)
 80020c4:	2110      	movs	r1, #16
 80020c6:	2201      	movs	r2, #1
 80020c8:	f7ff fb92 	bl	80017f0 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <RS_init+0xb8>)
 80020ce:	2110      	movs	r1, #16
 80020d0:	2200      	movs	r2, #0
 80020d2:	f7ff fbab 	bl	800182c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <RS_init+0xb8>)
 80020d8:	2113      	movs	r1, #19
 80020da:	2200      	movs	r2, #0
 80020dc:	f7ff fba6 	bl	800182c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80020e0:	f7ff ff12 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4618      	mov	r0, r3
 80020e8:	210a      	movs	r1, #10
 80020ea:	2200      	movs	r2, #0
 80020ec:	f7ff ff60 	bl	8001fb0 <NVIC_EncodePriority>
 80020f0:	4603      	mov	r3, r0
 80020f2:	205b      	movs	r0, #91	; 0x5b
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_SetPriority>
                        10U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 80020fa:	205b      	movs	r0, #91	; 0x5b
 80020fc:	f7ff ff12 	bl	8001f24 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002100:	f7ff ff02 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002104:	4603      	mov	r3, r0
 8002106:	4618      	mov	r0, r3
 8002108:	2109      	movs	r1, #9
 800210a:	2200      	movs	r2, #0
 800210c:	f7ff ff50 	bl	8001fb0 <NVIC_EncodePriority>
 8002110:	4603      	mov	r3, r0
 8002112:	205a      	movs	r0, #90	; 0x5a
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff ff21 	bl	8001f5c <__NVIC_SetPriority>
                      9U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 800211a:	205a      	movs	r0, #90	; 0x5a
 800211c:	f7ff ff02 	bl	8001f24 <__NVIC_EnableIRQ>
  return status;
 8002120:	79fb      	ldrb	r3, [r7, #7]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	48020000 	.word	0x48020000
 8002130:	08006368 	.word	0x08006368
 8002134:	48028200 	.word	0x48028200
 8002138:	08006374 	.word	0x08006374

0800213c <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void RS_TX_HANDLER()
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&RS);
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <USIC1_1_IRQHandler+0xc>)
 8002142:	f7ff fda3 	bl	8001c8c <UART_lTransmitHandler>
}
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000

0800214c <USIC1_0_IRQHandler>:

/*Receive ISR*/
void RS_RX_HANDLER()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&RS);
 8002150:	4801      	ldr	r0, [pc, #4]	; (8002158 <USIC1_0_IRQHandler+0xc>)
 8002152:	f7ff fe21 	bl	8001d98 <UART_lReceiveHandler>
}
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000000 	.word	0x20000000

0800215c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60da      	str	r2, [r3, #12]
}
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	60da      	str	r2, [r3, #12]
}
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
}
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	611a      	str	r2, [r3, #16]
}
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 800221c:	887a      	ldrh	r2, [r7, #2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	611a      	str	r2, [r3, #16]
}
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop

08002248 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	2101      	movs	r1, #1
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8f8 	bl	8002490 <TIMER_CCU4_lInit>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop

080022b0 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff6b 	bl	80021ac <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e001      	b.n	80022e0 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop

080022ec <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f81d 	bl	8002334 <TIMER_GetTimerStatus>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d011      	beq.n	8002324 <TIMER_Stop+0x38>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff53 	bl	80021c4 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e001      	b.n	8002328 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop

08002334 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff18 	bl	8002184 <XMC_CCU4_SLICE_IsTimerRunning>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	0000      	movs	r0, r0
	...

08002368 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffdc 	bl	8002334 <TIMER_GetTimerStatus>
 800237c:	4603      	mov	r3, r0
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d079      	beq.n	800247c <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d874      	bhi.n	800247c <TIMER_SetTimeInterval+0x114>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d36f      	bcc.n	800247c <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80023a0:	e002      	b.n	80023a8 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	3301      	adds	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	f1c2 020f 	rsb	r2, r2, #15
 80023b2:	fa23 f202 	lsr.w	r2, r3, r2
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3f2      	bcc.n	80023a2 <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15a      	bne.n	800247c <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	b2d9      	uxtb	r1, r3
 80023dc:	7913      	ldrb	r3, [r2, #4]
 80023de:	f361 0303 	bfi	r3, r1, #0, #4
 80023e2:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f04f 0100 	mov.w	r1, #0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	fb02 fe01 	mul.w	lr, r2, r1
 80023f8:	fb00 f603 	mul.w	r6, r0, r3
 80023fc:	4476      	add	r6, lr
 80023fe:	fba0 2302 	umull	r2, r3, r0, r2
 8002402:	18f1      	adds	r1, r6, r3
 8002404:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	69c9      	ldr	r1, [r1, #28]
 800240a:	7909      	ldrb	r1, [r1, #4]
 800240c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8002410:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002412:	f1c1 0620 	rsb	r6, r1, #32
 8002416:	f1a1 0020 	sub.w	r0, r1, #32
 800241a:	fa22 f401 	lsr.w	r4, r2, r1
 800241e:	fa03 f606 	lsl.w	r6, r3, r6
 8002422:	4334      	orrs	r4, r6
 8002424:	fa23 f000 	lsr.w	r0, r3, r0
 8002428:	4304      	orrs	r4, r0
 800242a:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	a315      	add	r3, pc, #84	; (adr r3, 8002488 <TIMER_SetTimeInterval+0x120>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f003 fc9e 	bl	8005d78 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002440:	b292      	uxth	r2, r2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800244a:	2b01      	cmp	r3, #1
 800244c:	d905      	bls.n	800245a <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7fe ff27 	bl	80012c0 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f858 	bl	8002528 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 800247c:	7dfb      	ldrb	r3, [r7, #23]
}
 800247e:	4618      	mov	r0, r3
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002486:	bf00      	nop
 8002488:	05f5e100 	.word	0x05f5e100
 800248c:	00000000 	.word	0x00000000

08002490 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fc33 	bl	8002d08 <GLOBAL_CCU4_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7e1b      	ldrb	r3, [r3, #24]
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7ff fe52 	bl	800215c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fca6 	bl	8000e14 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f82d 	bl	8002528 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00f      	beq.n	80024f8 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e2:	4610      	mov	r0, r2
 80024e4:	2100      	movs	r1, #0
 80024e6:	461a      	mov	r2, r3
 80024e8:	f7fe ff08 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4618      	mov	r0, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	f7ff fea8 	bl	8002248 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fe6d 	bl	80021dc <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fe47 	bl	80021ac <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7ff fe5a 	bl	80021f4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	4618      	mov	r0, r3
 8002546:	2100      	movs	r1, #0
 8002548:	f7ff fe62 	bl	8002210 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7ff fe67 	bl	800222c <XMC_CCU4_EnableShadowTransfer>
}
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60da      	str	r2, [r3, #12]
}
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	615a      	str	r2, [r3, #20]
}
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	60da      	str	r2, [r3, #12]
}
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <XMC_CCU4_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return((uint16_t)slice->PR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	b29b      	uxth	r3, r3
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	611a      	str	r2, [r3, #16]
}
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop

08002634 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
 8002668:	2301      	movs	r3, #1
 800266a:	75fb      	strb	r3, [r7, #23]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
 800266c:	2301      	movs	r3, #1
 800266e:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7f1b      	ldrb	r3, [r3, #28]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 808c 	bne.w	8002792 <PWM_CCU4_Init+0x132>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fb41 	bl	8002d08 <GLOBAL_CCU4_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
 800268a:	7dbb      	ldrb	r3, [r7, #22]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d17c      	bne.n	800278a <PWM_CCU4_Init+0x12a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe fbb9 	bl	8000e14 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	885b      	ldrh	r3, [r3, #2]
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7ff ff88 	bl	80025c4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	889b      	ldrh	r3, [r3, #4]
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7ff ff9b 	bl	80025fc <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <PWM_CCU4_Init+0x8a>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fb79 	bl	8000ddc <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7ff ff8f 	bl	8002618 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7ff ff87 	bl	8002618 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8e2 	bl	80028d4 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f845 	bl	80027a0 <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00e      	beq.n	8002740 <PWM_CCU4_Init+0xe0>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	4608      	mov	r0, r1
 8002738:	4611      	mov	r1, r2
 800273a:	461a      	mov	r2, r3
 800273c:	f7fd fe34 	bl	80003a8 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	791b      	ldrb	r3, [r3, #4]
 8002752:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002756:	b2db      	uxtb	r3, r3
 8002758:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
 8002770:	2300      	movs	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <PWM_CCU4_Init+0x136>
      {
        status = PWM_CCU4_Start(handle_ptr);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f98c 	bl	8002a9c <PWM_CCU4_Start>
 8002784:	4603      	mov	r3, r0
 8002786:	75fb      	strb	r3, [r7, #23]
 8002788:	e005      	b.n	8002796 <PWM_CCU4_Init+0x136>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
 8002790:	e001      	b.n	8002796 <PWM_CCU4_Init+0x136>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
 8002792:	2302      	movs	r3, #2
 8002794:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8002796:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_Init() api */
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	799b      	ldrb	r3, [r3, #6]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00f      	beq.n	80027d2 <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80027ba:	7b5b      	ldrb	r3, [r3, #13]
 80027bc:	4610      	mov	r0, r2
 80027be:	2100      	movs	r1, #0
 80027c0:	461a      	mov	r2, r3
 80027c2:	f7fe fd9b 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	2100      	movs	r1, #0
 80027ce:	f7ff ff31 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	79db      	ldrb	r3, [r3, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00f      	beq.n	80027fc <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 80027e4:	7b9b      	ldrb	r3, [r3, #14]
 80027e6:	4610      	mov	r0, r2
 80027e8:	2102      	movs	r1, #2
 80027ea:	461a      	mov	r2, r3
 80027ec:	f7fe fd86 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4618      	mov	r0, r3
 80027f6:	2102      	movs	r1, #2
 80027f8:	f7ff ff1c 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	7a1b      	ldrb	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00f      	beq.n	8002826 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 800280e:	7bdb      	ldrb	r3, [r3, #15]
 8002810:	4610      	mov	r0, r2
 8002812:	2103      	movs	r1, #3
 8002814:	461a      	mov	r2, r3
 8002816:	f7fe fd71 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	2103      	movs	r1, #3
 8002822:	f7ff ff07 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	7a5b      	ldrb	r3, [r3, #9]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 8002838:	7c1b      	ldrb	r3, [r3, #16]
 800283a:	4610      	mov	r0, r2
 800283c:	2101      	movs	r1, #1
 800283e:	461a      	mov	r2, r3
 8002840:	f7fe fd5c 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	2101      	movs	r1, #1
 800284c:	f7ff fef2 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	7a9b      	ldrb	r3, [r3, #10]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00f      	beq.n	800287a <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 8002862:	7c5b      	ldrb	r3, [r3, #17]
 8002864:	4610      	mov	r0, r2
 8002866:	2108      	movs	r1, #8
 8002868:	461a      	mov	r2, r3
 800286a:	f7fe fd47 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4618      	mov	r0, r3
 8002874:	2108      	movs	r1, #8
 8002876:	f7ff fedd 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	7adb      	ldrb	r3, [r3, #11]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 800288c:	7c9b      	ldrb	r3, [r3, #18]
 800288e:	4610      	mov	r0, r2
 8002890:	2109      	movs	r1, #9
 8002892:	461a      	mov	r2, r3
 8002894:	f7fe fd32 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	2109      	movs	r1, #9
 80028a0:	f7ff fec8 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	7b1b      	ldrb	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00f      	beq.n	80028ce <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 80028b6:	7cdb      	ldrb	r3, [r3, #19]
 80028b8:	4610      	mov	r0, r2
 80028ba:	210a      	movs	r1, #10
 80028bc:	461a      	mov	r2, r3
 80028be:	f7fe fd1d 	bl	80012fc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4618      	mov	r0, r3
 80028c8:	210a      	movs	r1, #10
 80028ca:	f7ff feb3 	bl	8002634 <XMC_CCU4_SLICE_EnableEvent>
  }
}
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4610      	mov	r0, r2
 80028e8:	2101      	movs	r1, #1
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7fe fc7e 	bl	80011ec <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	4610      	mov	r0, r2
 80028fc:	2102      	movs	r1, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	f7fe fc74 	bl	80011ec <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4610      	mov	r0, r2
 8002910:	2103      	movs	r1, #3
 8002912:	461a      	mov	r2, r3
 8002914:	f7fe fc6a 	bl	80011ec <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <PWM_CCU4_lConfigure_Events+0x6e>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6899      	ldr	r1, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f893 2020 	ldrb.w	r2, [r3, #32]
                               handle_ptr->config_ptr->ext_start_mode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8002934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	f7fe fa9f 	bl	8000e80 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00e      	beq.n	800296c <PWM_CCU4_lConfigure_Events+0x98>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                              handle_ptr->config_ptr->ext_stop_mode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 800295e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002962:	4608      	mov	r0, r1
 8002964:	4611      	mov	r1, r2
 8002966:	461a      	mov	r2, r3
 8002968:	f7fe fab8 	bl	8000edc <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <PWM_CCU4_lConfigure_Events+0xb8>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe fb62 	bl	8001050 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <PWM_CCU4_lConfigure_Events+0xd8>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe fb38 	bl	800101c <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <PWM_CCU4_lConfigure_Events+0xf8>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe fb0e 	bl	8000fe8 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <PWM_CCU4_lConfigure_Events+0x118>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe faa4 	bl	8000f34 <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00f      	beq.n	8002a18 <PWM_CCU4_lConfigure_Events+0x144>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8002a08:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8002a10:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002a14:	f7fe faa8 	bl	8000f68 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d119      	bne.n	8002a58 <PWM_CCU4_lConfigure_Events+0x184>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                              handle_ptr->config_ptr->ext_trap_sync);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8002a34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f7fe fb39 	bl	80010b4 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <PWM_CCU4_lConfigure_Events+0x184>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fd9a 	bl	800258c <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d117      	bne.n	8002a94 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d111      	bne.n	8002a94 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8002a78:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	f7fe fb4f 	bl	8001128 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe faf8 	bl	8001084 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop

08002a9c <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d003      	beq.n	8002ab8 <PWM_CCU4_Start+0x1c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7f1b      	ldrb	r3, [r3, #28]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d117      	bne.n	8002ae8 <PWM_CCU4_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7b5b      	ldrb	r3, [r3, #13]
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7ff fd4e 	bl	8002564 <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <PWM_CCU4_Start+0x42>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fd67 	bl	80025ac <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU4_Start() api */
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop

08002af4 <PWM_CCU4_SetDutyCycle>:

/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_SetDutyCycle(PWM_CCU4_t* handle_ptr, uint32_t duty_cycle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  PWM_CCU4_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU4_STATUS_FAILURE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("PWM_CCU4_SetDutyCycle:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7f1b      	ldrb	r3, [r3, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d02d      	beq.n	8002b66 <PWM_CCU4_SetDutyCycle+0x72>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU4_SYM_DUTY_MAX))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d828      	bhi.n	8002b66 <PWM_CCU4_SetDutyCycle+0x72>
    {
      XMC_DEBUG("PWM_CCU4_SetDutyCycle:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU4_SLICE_GetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr) + 1U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fd61 	bl	80025e0 <XMC_CCU4_SLICE_GetTimerPeriodMatch>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	3301      	adds	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_CCU4_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU4_DUTY_FULL_SCALE);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <PWM_CCU4_SetDutyCycle+0x7c>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	0b5b      	lsrs	r3, r3, #13
 8002b3a:	60fb      	str	r3, [r7, #12]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) compare);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7ff fd58 	bl	80025fc <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7ff fd5e 	bl	8002618 <XMC_CCU4_EnableShadowTransfer>

      handle_ptr->sym_duty = duty_cycle;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

      XMC_DEBUG("PWM_CCU4_SetDutyCycle:dutycycle set");
      status = PWM_CCU4_STATUS_SUCCESS;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]
    }
  }
  return (status);
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_SetDutyCycle() api */
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	d1b71759 	.word	0xd1b71759

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b80:	0a1b      	lsrs	r3, r3, #8
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_EnableIRQ+0x34>)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	490d      	ldr	r1, [pc, #52]	; (8002c14 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	4909      	ldr	r1, [pc, #36]	; (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
  }
}
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	bf28      	it	cs
 8002c3a:	2306      	movcs	r3, #6
 8002c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3306      	adds	r3, #6
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d902      	bls.n	8002c4c <NVIC_EncodePriority+0x30>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <NVIC_EncodePriority+0x32>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2201      	movs	r2, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	1e59      	subs	r1, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002c70:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff7e 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop

08002c9c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	781c      	ldrb	r4, [r3, #0]
 8002ca8:	f7ff ff64 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cac:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002cb2:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f7ff ffad 	bl	8002c1c <NVIC_EncodePriority>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	b263      	sxtb	r3, r4
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4611      	mov	r1, r2
 8002cca:	f7ff ff7d 	bl	8002bc8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	78db      	ldrb	r3, [r3, #3]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ffd2 	bl	8002c80 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	bf00      	nop

08002ce8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
}
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7b5b      	ldrb	r3, [r3, #13]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00f      	beq.n	8002d3e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7b1b      	ldrb	r3, [r3, #12]
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fe f839 	bl	8000da0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ffd8 	bl	8002ce8 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7c1a      	ldrb	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	f7fd fb21 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7c1a      	ldrb	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7c5b      	ldrb	r3, [r3, #17]
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7fe fb18 	bl	80013ac <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7ff ffd6 	bl	8002d88 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ddc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <SystemCoreSetup+0x94>)
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <SystemCoreSetup+0x98>)
 8002de2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002de4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002de8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <SystemCoreSetup+0x94>)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <SystemCoreSetup+0x94>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <SystemCoreSetup+0x9c>)
 8002dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e00:	3314      	adds	r3, #20
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f023 030f 	bic.w	r3, r3, #15
 8002e0c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f043 0303 	orr.w	r3, r3, #3
 8002e14:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <SystemCoreSetup+0x9c>)
 8002e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1c:	3314      	adds	r3, #20
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f023 0310 	bic.w	r3, r3, #16
 8002e2c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f023 0308 	bic.w	r3, r3, #8
 8002e38:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002e46:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e50:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <SystemCoreSetup+0x94>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	08000000 	.word	0x08000000
 8002e6c:	58001000 	.word	0x58001000

08002e70 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]

  return (status);
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <OSCHP_GetFrequency+0x10>)
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	00b71b00 	.word	0x00b71b00

08002ea4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002ea4:	b5b0      	push	{r4, r5, r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <SystemCoreClockSetup+0x50>)
 8002eac:	1d3c      	adds	r4, r7, #4
 8002eae:	461d      	mov	r5, r3
 8002eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb4e 	bl	800055c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fd fc49 	bl	8000758 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fd fbfe 	bl	80006c8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002ecc:	2004      	movs	r0, #4
 8002ece:	f7fd fccf 	bl	8000870 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	f7fd fd17 	bl	8000908 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fc08 	bl	80006f0 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7fd fced 	bl	80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f7fd fcd6 	bl	8000898 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08006444 	.word	0x08006444

08002ef8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002efe:	2300      	movs	r3, #0
 8002f00:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002f02:	4819      	ldr	r0, [pc, #100]	; (8002f68 <DAVE_Init+0x70>)
 8002f04:	f7ff ffb4 	bl	8002e70 <CLOCK_XMC4_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d104      	bne.n	8002f1c <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance RS */
	 init_status = (DAVE_STATUS_t)UART_Init(&RS); 
 8002f12:	4816      	ldr	r0, [pc, #88]	; (8002f6c <DAVE_Init+0x74>)
 8002f14:	f7fe fdbe 	bl	8001a94 <UART_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8002f22:	4813      	ldr	r0, [pc, #76]	; (8002f70 <DAVE_Init+0x78>)
 8002f24:	f7ff ff10 	bl	8002d48 <DIGITAL_IO_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <DAVE_Init+0x44>
  {
	 /**  Initialization of TIMER APP instance DELAY */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&DELAY); 
 8002f32:	4810      	ldr	r0, [pc, #64]	; (8002f74 <DAVE_Init+0x7c>)
 8002f34:	f7ff f99e 	bl	8002274 <TIMER_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance TIM_IRQ */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIM_IRQ); 
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <DAVE_Init+0x80>)
 8002f44:	f7ff feaa 	bl	8002c9c <INTERRUPT_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <DAVE_Init+0x64>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_CCU4_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_CCU4_0); 
 8002f52:	480a      	ldr	r0, [pc, #40]	; (8002f7c <DAVE_Init+0x84>)
 8002f54:	f7ff fb84 	bl	8002660 <PWM_CCU4_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000124 	.word	0x20000124
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	08006430 	.word	0x08006430
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	0800642c 	.word	0x0800642c
 8002f7c:	20000034 	.word	0x20000034

08002f80 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002f92:	409a      	lsls	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	605a      	str	r2, [r3, #4]
}
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop

08002fa4 <UART_IsTxBusy>:
 *  }
 * @endcode
 *
 * */
__STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return (handle->runtime->tx_busy);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	7e1b      	ldrb	r3, [r3, #24]
 8002fb2:	b2db      	uxtb	r3, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7c1b      	ldrb	r3, [r3, #16]
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7ff ffd4 	bl	8002f80 <XMC_GPIO_ToggleOutput>
}
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop

08002fe0 <delay>:
};
struct Leg Legs[4];


void delay(uint32_t us)					//active delay
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	us *= 100;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2264      	movs	r2, #100	; 0x64
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	607b      	str	r3, [r7, #4]
	is_delay = 1;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <delay+0x3c>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
	TIMER_SetTimeInterval(&DELAY, us);
 8002ff8:	4809      	ldr	r0, [pc, #36]	; (8003020 <delay+0x40>)
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f7ff f9b4 	bl	8002368 <TIMER_SetTimeInterval>
	TIMER_Start(&DELAY);
 8003000:	4807      	ldr	r0, [pc, #28]	; (8003020 <delay+0x40>)
 8003002:	f7ff f955 	bl	80022b0 <TIMER_Start>
	while(is_delay);
 8003006:	bf00      	nop
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <delay+0x3c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1fb      	bne.n	8003008 <delay+0x28>
	TIMER_Stop(&DELAY);
 8003010:	4803      	ldr	r0, [pc, #12]	; (8003020 <delay+0x40>)
 8003012:	f7ff f96b 	bl	80022ec <TIMER_Stop>
}
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000098 	.word	0x20000098
 8003020:	2000000c 	.word	0x2000000c

08003024 <Init>:

void Init()			//initialization function for test stand
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++ )
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e04b      	b.n	80030c8 <Init+0xa4>
	{
			motors[i].i_net = 0;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	4a78      	ldr	r2, [pc, #480]	; (8003214 <Init+0x1f0>)
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	2200      	movs	r2, #0
 800303e:	809a      	strh	r2, [r3, #4]
			motors[i].ang_abs = 0;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	4a74      	ldr	r2, [pc, #464]	; (8003214 <Init+0x1f0>)
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3308      	adds	r3, #8
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
			motors[i].ang_abs_poprzedni = 0;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	4a6f      	ldr	r2, [pc, #444]	; (8003214 <Init+0x1f0>)
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3308      	adds	r3, #8
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
			motors[i].predkosc_silnika = 0;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <Init+0x1f0>)
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3310      	adds	r3, #16
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
			motors[i].is_go  =0;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	4a65      	ldr	r2, [pc, #404]	; (8003214 <Init+0x1f0>)
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	2200      	movs	r2, #0
 8003088:	705a      	strb	r2, [r3, #1]
			motors[i].motor_n = 0;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	4a61      	ldr	r2, [pc, #388]	; (8003214 <Init+0x1f0>)
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
			motors[i].ks = 3100;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <Init+0x1f0>)
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3318      	adds	r3, #24
 80030a8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80030ac:	805a      	strh	r2, [r3, #2]
			motors[i].kd = 10500;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <Init+0x1f0>)
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3318      	adds	r3, #24
 80030bc:	f642 1204 	movw	r2, #10500	; 0x2904
 80030c0:	809a      	strh	r2, [r3, #4]
	TIMER_Stop(&DELAY);
}

void Init()			//initialization function for test stand
{
	for(uint8_t i = 0; i < 4; i++ )
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	3301      	adds	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d9b0      	bls.n	8003030 <Init+0xc>
			motors[i].is_go  =0;
			motors[i].motor_n = 0;
			motors[i].ks = 3100;
			motors[i].kd = 10500;
	}
	struct vec2 zero;	zero.x = 0;	zero.y = 0;
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]

	for(uint8_t i = 0; i < 8; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	73bb      	strb	r3, [r7, #14]
 80030de:	e00d      	b.n	80030fc <Init+0xd8>
		motors[i].adress = 0x10 + i;
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	7bba      	ldrb	r2, [r7, #14]
 80030e4:	3210      	adds	r2, #16
 80030e6:	b2d0      	uxtb	r0, r2
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <Init+0x1f0>)
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	4602      	mov	r2, r0
 80030f4:	709a      	strb	r2, [r3, #2]
			motors[i].ks = 3100;
			motors[i].kd = 10500;
	}
	struct vec2 zero;	zero.x = 0;	zero.y = 0;

	for(uint8_t i = 0; i < 8; i++)
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73bb      	strb	r3, [r7, #14]
 80030fc:	7bbb      	ldrb	r3, [r7, #14]
 80030fe:	2b07      	cmp	r3, #7
 8003100:	d9ee      	bls.n	80030e0 <Init+0xbc>
		motors[i].adress = 0x10 + i;

	uint8_t iterator = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < 4; i++ )
 8003106:	2300      	movs	r3, #0
 8003108:	733b      	strb	r3, [r7, #12]
 800310a:	e078      	b.n	80031fe <Init+0x1da>
	{
		Legs[i].motor_L = iterator;
 800310c:	7b3b      	ldrb	r3, [r7, #12]
 800310e:	4a42      	ldr	r2, [pc, #264]	; (8003218 <Init+0x1f4>)
 8003110:	2158      	movs	r1, #88	; 0x58
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	7b7a      	ldrb	r2, [r7, #13]
 800311a:	701a      	strb	r2, [r3, #0]
		iterator++;
 800311c:	7b7b      	ldrb	r3, [r7, #13]
 800311e:	3301      	adds	r3, #1
 8003120:	737b      	strb	r3, [r7, #13]
		Legs[i].motor_R = iterator;
 8003122:	7b3b      	ldrb	r3, [r7, #12]
 8003124:	4a3c      	ldr	r2, [pc, #240]	; (8003218 <Init+0x1f4>)
 8003126:	2158      	movs	r1, #88	; 0x58
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	7b7a      	ldrb	r2, [r7, #13]
 8003130:	705a      	strb	r2, [r3, #1]
		iterator++;
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	3301      	adds	r3, #1
 8003136:	737b      	strb	r3, [r7, #13]
		Legs[i].eF = zero;
 8003138:	7b3b      	ldrb	r3, [r7, #12]
 800313a:	4a37      	ldr	r2, [pc, #220]	; (8003218 <Init+0x1f4>)
 800313c:	2158      	movs	r1, #88	; 0x58
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3318      	adds	r3, #24
 8003146:	3304      	adds	r3, #4
 8003148:	1d3a      	adds	r2, r7, #4
 800314a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800314e:	e883 0003 	stmia.w	r3, {r0, r1}
		Legs[i].kdr = 0;
 8003152:	7b3b      	ldrb	r3, [r7, #12]
 8003154:	4a30      	ldr	r2, [pc, #192]	; (8003218 <Init+0x1f4>)
 8003156:	2158      	movs	r1, #88	; 0x58
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3340      	adds	r3, #64	; 0x40
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	605a      	str	r2, [r3, #4]
		Legs[i].ksr = 0;
 8003166:	7b3b      	ldrb	r3, [r7, #12]
 8003168:	4a2b      	ldr	r2, [pc, #172]	; (8003218 <Init+0x1f4>)
 800316a:	2158      	movs	r1, #88	; 0x58
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	3340      	adds	r3, #64	; 0x40
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
		Legs[i].r0 = 0;
 800317a:	7b3b      	ldrb	r3, [r7, #12]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <Init+0x1f4>)
 800317e:	2158      	movs	r1, #88	; 0x58
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	3338      	adds	r3, #56	; 0x38
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
		Legs[i].r0_angle = 0;
 800318e:	7b3b      	ldrb	r3, [r7, #12]
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <Init+0x1f4>)
 8003192:	2158      	movs	r1, #88	; 0x58
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
		Legs[i].real_foot = zero;
 80031a2:	7b3b      	ldrb	r3, [r7, #12]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <Init+0x1f4>)
 80031a6:	2158      	movs	r1, #88	; 0x58
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	3308      	adds	r3, #8
 80031b0:	3304      	adds	r3, #4
 80031b2:	1d3a      	adds	r2, r7, #4
 80031b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031b8:	e883 0003 	stmia.w	r3, {r0, r1}
		Legs[i].foot.y = 150;
 80031bc:	7b3b      	ldrb	r3, [r7, #12]
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <Init+0x1f4>)
 80031c0:	2158      	movs	r1, #88	; 0x58
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <Init+0x1f8>)
 80031ca:	609a      	str	r2, [r3, #8]
		Legs[i].foot.x = 0;
 80031cc:	7b3b      	ldrb	r3, [r7, #12]
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <Init+0x1f4>)
 80031d0:	2158      	movs	r1, #88	; 0x58
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
		Legs[i].real_speed = zero;
 80031de:	7b3b      	ldrb	r3, [r7, #12]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <Init+0x1f4>)
 80031e2:	2158      	movs	r1, #88	; 0x58
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3310      	adds	r3, #16
 80031ec:	3304      	adds	r3, #4
 80031ee:	1d3a      	adds	r2, r7, #4
 80031f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f4:	e883 0003 	stmia.w	r3, {r0, r1}

	for(uint8_t i = 0; i < 8; i++)
		motors[i].adress = 0x10 + i;

	uint8_t iterator = 0;
	for(uint8_t i = 0; i < 4; i++ )
 80031f8:	7b3b      	ldrb	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	733b      	strb	r3, [r7, #12]
 80031fe:	7b3b      	ldrb	r3, [r7, #12]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d983      	bls.n	800310c <Init+0xe8>
		Legs[i].real_foot = zero;
		Legs[i].foot.y = 150;
		Legs[i].foot.x = 0;
		Legs[i].real_speed = zero;
	}
	txData[0] = 0xCC;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <Init+0x1fc>)
 8003206:	22cc      	movs	r2, #204	; 0xcc
 8003208:	701a      	strb	r2, [r3, #0]
}
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	20000148 	.word	0x20000148
 8003218:	200002a8 	.word	0x200002a8
 800321c:	43160000 	.word	0x43160000
 8003220:	2000013c 	.word	0x2000013c

08003224 <CCU40_2_IRQHandler>:
void TIMER_IRQ()				//delay interrupt
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
	is_delay = 0;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <CCU40_2_IRQHandler+0x14>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
}
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000098 	.word	0x20000098

0800323c <XMC_Init>:
void Send(uint8_t);						// Send (n) bytes of data via half-duplex uart
void Send_Leg(struct Leg *n);	//Send regular command string to both of legs drivers
uint8_t motors_go();			//go no go sequence for all motor drivers

uint8_t  XMC_Init(uint8_t n)	//initialize driver (n). n=10 for all drivers
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
	if(n == 10)							//if n = 10 then init all drivers
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b0a      	cmp	r3, #10
 800324a:	d11c      	bne.n	8003286 <XMC_Init+0x4a>
		for(uint8_t i = 0; i < 8; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e015      	b.n	800327e <XMC_Init+0x42>
		{
			txData[1] = 0x10 + i;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	3310      	adds	r3, #16
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <XMC_Init+0x7c>)
 800325a:	705a      	strb	r2, [r3, #1]
			txData[2] = 0xA1;
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <XMC_Init+0x7c>)
 800325e:	22a1      	movs	r2, #161	; 0xa1
 8003260:	709a      	strb	r2, [r3, #2]
			txData[3] = EOF;
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <XMC_Init+0x7c>)
 8003264:	22dd      	movs	r2, #221	; 0xdd
 8003266:	70da      	strb	r2, [r3, #3]
			Send(4);
 8003268:	2004      	movs	r0, #4
 800326a:	f000 fa0b 	bl	8003684 <Send>
			delay(response_delay);
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <XMC_Init+0x80>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff feb4 	bl	8002fe0 <delay>
uint8_t motors_go();			//go no go sequence for all motor drivers

uint8_t  XMC_Init(uint8_t n)	//initialize driver (n). n=10 for all drivers
{
	if(n == 10)							//if n = 10 then init all drivers
		for(uint8_t i = 0; i < 8; i++)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	3301      	adds	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b07      	cmp	r3, #7
 8003282:	d9e6      	bls.n	8003252 <XMC_Init+0x16>
 8003284:	e004      	b.n	8003290 <XMC_Init+0x54>
			txData[3] = EOF;
			Send(4);
			delay(response_delay);
		}
	else										//init single driver (n)
		txData[1] = 0x10 + n;
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	3310      	adds	r3, #16
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <XMC_Init+0x7c>)
 800328e:	705a      	strb	r2, [r3, #1]
		txData[2] = 0xA1;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <XMC_Init+0x7c>)
 8003292:	22a1      	movs	r2, #161	; 0xa1
 8003294:	709a      	strb	r2, [r3, #2]
		txData[3] = EOF;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <XMC_Init+0x7c>)
 8003298:	22dd      	movs	r2, #221	; 0xdd
 800329a:	70da      	strb	r2, [r3, #3]
		Send(4);
 800329c:	2004      	movs	r0, #4
 800329e:	f000 f9f1 	bl	8003684 <Send>
		delay(response_delay);
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <XMC_Init+0x80>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe9a 	bl	8002fe0 <delay>

	return 0;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000013c 	.word	0x2000013c
 80032bc:	20000096 	.word	0x20000096

080032c0 <eorx>:
		delay(response_delay);
		DIGITAL_IO_SetOutputLow((&LED1));
	}
}
void eorx()		//end of receive interrupt
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
	if(rxByte == SOF)
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <eorx+0x70>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2bcc      	cmp	r3, #204	; 0xcc
 80032ca:	d107      	bne.n	80032dc <eorx+0x1c>
	{
		rxData[0] = rxByte;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <eorx+0x70>)
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <eorx+0x74>)
 80032d2:	701a      	strb	r2, [r3, #0]
		iterator_wiadomosci = 1;
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <eorx+0x78>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e023      	b.n	8003324 <eorx+0x64>
	}
	else if (rxByte == EOF)
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <eorx+0x70>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2bdd      	cmp	r3, #221	; 0xdd
 80032e2:	d10e      	bne.n	8003302 <eorx+0x42>
	{
		rxData[iterator_wiadomosci +1] = EOF;
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <eorx+0x78>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <eorx+0x74>)
 80032ec:	21dd      	movs	r1, #221	; 0xdd
 80032ee:	54d1      	strb	r1, [r2, r3]
		iterator_wiadomosci++;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <eorx+0x78>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <eorx+0x78>)
 80032fa:	701a      	strb	r2, [r3, #0]
		Message_interpreter();
 80032fc:	f000 f826 	bl	800334c <Message_interpreter>
 8003300:	e010      	b.n	8003324 <eorx+0x64>
	}
	else if ( iterator_wiadomosci < 9)
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <eorx+0x78>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b08      	cmp	r3, #8
 8003308:	d80c      	bhi.n	8003324 <eorx+0x64>
	{
		rxData[iterator_wiadomosci] =rxByte;
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <eorx+0x78>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <eorx+0x70>)
 8003312:	7819      	ldrb	r1, [r3, #0]
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <eorx+0x74>)
 8003316:	5499      	strb	r1, [r3, r2]
		iterator_wiadomosci++;
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <eorx+0x78>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <eorx+0x78>)
 8003322:	701a      	strb	r2, [r3, #0]
	}
	UART_Receive(&RS, &rxByte,1);
 8003324:	4805      	ldr	r0, [pc, #20]	; (800333c <eorx+0x7c>)
 8003326:	4902      	ldr	r1, [pc, #8]	; (8003330 <eorx+0x70>)
 8003328:	2201      	movs	r2, #1
 800332a:	f7fe fbe1 	bl	8001af0 <UART_Receive>
}
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2000012c 	.word	0x2000012c
 8003334:	20000130 	.word	0x20000130
 8003338:	2000012d 	.word	0x2000012d
 800333c:	20000000 	.word	0x20000000

08003340 <eotx>:
void eotx()
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0

}
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <Message_interpreter>:
void Message_interpreter()		//read last message
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0

	if(rxData[0] == SOF && rxData[1] == adress)
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <Message_interpreter+0xcc>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2bcc      	cmp	r3, #204	; 0xcc
 8003358:	d158      	bne.n	800340c <Message_interpreter+0xc0>
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <Message_interpreter+0xcc>)
 800335c:	785a      	ldrb	r2, [r3, #1]
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <Message_interpreter+0xd0>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d152      	bne.n	800340c <Message_interpreter+0xc0>
	{
		uint8_t numer_silnika;
		numer_silnika = rxData[2] - 0x10;
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <Message_interpreter+0xcc>)
 8003368:	789b      	ldrb	r3, [r3, #2]
 800336a:	3b10      	subs	r3, #16
 800336c:	71fb      	strb	r3, [r7, #7]
		if(rxData[3] == INIT)
 800336e:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <Message_interpreter+0xcc>)
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	2ba1      	cmp	r3, #161	; 0xa1
 8003374:	d10a      	bne.n	800338c <Message_interpreter+0x40>
			motors[numer_silnika].is_go = rxData[4];
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <Message_interpreter+0xcc>)
 800337a:	7910      	ldrb	r0, [r2, #4]
 800337c:	4a28      	ldr	r2, [pc, #160]	; (8003420 <Message_interpreter+0xd4>)
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	4602      	mov	r2, r0
 8003388:	705a      	strb	r2, [r3, #1]
 800338a:	e03f      	b.n	800340c <Message_interpreter+0xc0>
		else if(rxData[3] == CHECK)
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <Message_interpreter+0xcc>)
 800338e:	78db      	ldrb	r3, [r3, #3]
 8003390:	2ba3      	cmp	r3, #163	; 0xa3
 8003392:	d114      	bne.n	80033be <Message_interpreter+0x72>
		{
			motors[numer_silnika].is_go = rxData[4];
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <Message_interpreter+0xcc>)
 8003398:	7910      	ldrb	r0, [r2, #4]
 800339a:	4a21      	ldr	r2, [pc, #132]	; (8003420 <Message_interpreter+0xd4>)
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	4602      	mov	r2, r0
 80033a6:	705a      	strb	r2, [r3, #1]
			motors[numer_silnika].motor_n = rxData[5];
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <Message_interpreter+0xcc>)
 80033ac:	7950      	ldrb	r0, [r2, #5]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <Message_interpreter+0xd4>)
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	4602      	mov	r2, r0
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e026      	b.n	800340c <Message_interpreter+0xc0>
		}
		else
		{
			motors[numer_silnika].i_net =rxData[3] << 8 | rxData[4];
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <Message_interpreter+0xcc>)
 80033c2:	78d2      	ldrb	r2, [r2, #3]
 80033c4:	0212      	lsls	r2, r2, #8
 80033c6:	b291      	uxth	r1, r2
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <Message_interpreter+0xcc>)
 80033ca:	7912      	ldrb	r2, [r2, #4]
 80033cc:	b292      	uxth	r2, r2
 80033ce:	430a      	orrs	r2, r1
 80033d0:	b290      	uxth	r0, r2
 80033d2:	4a13      	ldr	r2, [pc, #76]	; (8003420 <Message_interpreter+0xd4>)
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	4602      	mov	r2, r0
 80033de:	809a      	strh	r2, [r3, #4]
			motors[numer_silnika].ang_abs = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[8];
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <Message_interpreter+0xcc>)
 80033e4:	7952      	ldrb	r2, [r2, #5]
 80033e6:	0611      	lsls	r1, r2, #24
 80033e8:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <Message_interpreter+0xcc>)
 80033ea:	7992      	ldrb	r2, [r2, #6]
 80033ec:	0412      	lsls	r2, r2, #16
 80033ee:	4311      	orrs	r1, r2
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <Message_interpreter+0xcc>)
 80033f2:	79d2      	ldrb	r2, [r2, #7]
 80033f4:	0212      	lsls	r2, r2, #8
 80033f6:	430a      	orrs	r2, r1
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <Message_interpreter+0xcc>)
 80033fa:	7a09      	ldrb	r1, [r1, #8]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <Message_interpreter+0xd4>)
 8003400:	202c      	movs	r0, #44	; 0x2c
 8003402:	fb00 f303 	mul.w	r3, r0, r3
 8003406:	440b      	add	r3, r1
 8003408:	3308      	adds	r3, #8
 800340a:	601a      	str	r2, [r3, #0]
		}
	}

}
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000130 	.word	0x20000130
 800341c:	20000094 	.word	0x20000094
 8003420:	20000148 	.word	0x20000148

08003424 <Send_Leg>:
void Send_Leg(struct Leg *n)	//Send regular command string to both of legs drivers
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	motors[n->motor_L].poz_zad = motors[n->motor_L].teta * INT16_MAX / pi;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4a8d      	ldr	r2, [pc, #564]	; (8003670 <Send_Leg+0x24c>)
 800343a:	232c      	movs	r3, #44	; 0x2c
 800343c:	fb03 f301 	mul.w	r3, r3, r1
 8003440:	4413      	add	r3, r2
 8003442:	3328      	adds	r3, #40	; 0x28
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003674 <Send_Leg+0x250>
 800344c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <Send_Leg+0x254>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800345a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345e:	edc7 7a00 	vstr	s15, [r7]
 8003462:	883b      	ldrh	r3, [r7, #0]
 8003464:	b299      	uxth	r1, r3
 8003466:	4a82      	ldr	r2, [pc, #520]	; (8003670 <Send_Leg+0x24c>)
 8003468:	232c      	movs	r3, #44	; 0x2c
 800346a:	fb03 f300 	mul.w	r3, r3, r0
 800346e:	4413      	add	r3, r2
 8003470:	3318      	adds	r3, #24
 8003472:	460a      	mov	r2, r1
 8003474:	801a      	strh	r2, [r3, #0]
	motors[n->motor_R].poz_zad = motors[n->motor_R].teta * INT16_MAX / pi;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	4618      	mov	r0, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	4619      	mov	r1, r3
 8003482:	4a7b      	ldr	r2, [pc, #492]	; (8003670 <Send_Leg+0x24c>)
 8003484:	232c      	movs	r3, #44	; 0x2c
 8003486:	fb03 f301 	mul.w	r3, r3, r1
 800348a:	4413      	add	r3, r2
 800348c:	3328      	adds	r3, #40	; 0x28
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003674 <Send_Leg+0x250>
 8003496:	ee27 7a87 	vmul.f32	s14, s15, s14
 800349a:	4b77      	ldr	r3, [pc, #476]	; (8003678 <Send_Leg+0x254>)
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80034a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a8:	edc7 7a00 	vstr	s15, [r7]
 80034ac:	883b      	ldrh	r3, [r7, #0]
 80034ae:	b299      	uxth	r1, r3
 80034b0:	4a6f      	ldr	r2, [pc, #444]	; (8003670 <Send_Leg+0x24c>)
 80034b2:	232c      	movs	r3, #44	; 0x2c
 80034b4:	fb03 f300 	mul.w	r3, r3, r0
 80034b8:	4413      	add	r3, r2
 80034ba:	3318      	adds	r3, #24
 80034bc:	460a      	mov	r2, r1
 80034be:	801a      	strh	r2, [r3, #0]
	 txData[1] = motors[n->motor_L].adress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <Send_Leg+0x24c>)
 80034c8:	232c      	movs	r3, #44	; 0x2c
 80034ca:	fb03 f301 	mul.w	r3, r3, r1
 80034ce:	4413      	add	r3, r2
 80034d0:	789a      	ldrb	r2, [r3, #2]
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <Send_Leg+0x258>)
 80034d4:	705a      	strb	r2, [r3, #1]
	 txData[2] = motors[n->motor_L].poz_zad >> 8;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	4a64      	ldr	r2, [pc, #400]	; (8003670 <Send_Leg+0x24c>)
 80034de:	232c      	movs	r3, #44	; 0x2c
 80034e0:	fb03 f301 	mul.w	r3, r3, r1
 80034e4:	4413      	add	r3, r2
 80034e6:	3318      	adds	r3, #24
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	4b62      	ldr	r3, [pc, #392]	; (800367c <Send_Leg+0x258>)
 80034f2:	709a      	strb	r2, [r3, #2]
	 txData[3] = motors[n->motor_L].poz_zad;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <Send_Leg+0x24c>)
 80034fc:	232c      	movs	r3, #44	; 0x2c
 80034fe:	fb03 f301 	mul.w	r3, r3, r1
 8003502:	4413      	add	r3, r2
 8003504:	3318      	adds	r3, #24
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b5c      	ldr	r3, [pc, #368]	; (800367c <Send_Leg+0x258>)
 800350c:	70da      	strb	r2, [r3, #3]
	 txData[4] = motors[n->motor_L].ks >> 8;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	4a56      	ldr	r2, [pc, #344]	; (8003670 <Send_Leg+0x24c>)
 8003516:	232c      	movs	r3, #44	; 0x2c
 8003518:	fb03 f301 	mul.w	r3, r3, r1
 800351c:	4413      	add	r3, r2
 800351e:	3318      	adds	r3, #24
 8003520:	885b      	ldrh	r3, [r3, #2]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	b29b      	uxth	r3, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b54      	ldr	r3, [pc, #336]	; (800367c <Send_Leg+0x258>)
 800352a:	711a      	strb	r2, [r3, #4]
	 txData[5] = motors[n->motor_L].ks;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	4a4f      	ldr	r2, [pc, #316]	; (8003670 <Send_Leg+0x24c>)
 8003534:	232c      	movs	r3, #44	; 0x2c
 8003536:	fb03 f301 	mul.w	r3, r3, r1
 800353a:	4413      	add	r3, r2
 800353c:	3318      	adds	r3, #24
 800353e:	885b      	ldrh	r3, [r3, #2]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b4e      	ldr	r3, [pc, #312]	; (800367c <Send_Leg+0x258>)
 8003544:	715a      	strb	r2, [r3, #5]
	 txData[6] = motors[n->motor_L].kd >>8;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	4a48      	ldr	r2, [pc, #288]	; (8003670 <Send_Leg+0x24c>)
 800354e:	232c      	movs	r3, #44	; 0x2c
 8003550:	fb03 f301 	mul.w	r3, r3, r1
 8003554:	4413      	add	r3, r2
 8003556:	3318      	adds	r3, #24
 8003558:	889b      	ldrh	r3, [r3, #4]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b29b      	uxth	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <Send_Leg+0x258>)
 8003562:	719a      	strb	r2, [r3, #6]
	 txData[7] = motors[n->motor_L].kd;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	4a41      	ldr	r2, [pc, #260]	; (8003670 <Send_Leg+0x24c>)
 800356c:	232c      	movs	r3, #44	; 0x2c
 800356e:	fb03 f301 	mul.w	r3, r3, r1
 8003572:	4413      	add	r3, r2
 8003574:	3318      	adds	r3, #24
 8003576:	889b      	ldrh	r3, [r3, #4]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <Send_Leg+0x258>)
 800357c:	71da      	strb	r2, [r3, #7]
	 txData[8] = EOF;
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <Send_Leg+0x258>)
 8003580:	22dd      	movs	r2, #221	; 0xdd
 8003582:	721a      	strb	r2, [r3, #8]
	 Send(9);
 8003584:	2009      	movs	r0, #9
 8003586:	f000 f87d 	bl	8003684 <Send>
	 delay(response_delay);
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <Send_Leg+0x25c>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fd26 	bl	8002fe0 <delay>
	 txData[1] = motors[n->motor_R].adress;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	4619      	mov	r1, r3
 800359a:	4a35      	ldr	r2, [pc, #212]	; (8003670 <Send_Leg+0x24c>)
 800359c:	232c      	movs	r3, #44	; 0x2c
 800359e:	fb03 f301 	mul.w	r3, r3, r1
 80035a2:	4413      	add	r3, r2
 80035a4:	789a      	ldrb	r2, [r3, #2]
 80035a6:	4b35      	ldr	r3, [pc, #212]	; (800367c <Send_Leg+0x258>)
 80035a8:	705a      	strb	r2, [r3, #1]
	 txData[2] = motors[n->motor_R].poz_zad >> 8;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	4619      	mov	r1, r3
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <Send_Leg+0x24c>)
 80035b2:	232c      	movs	r3, #44	; 0x2c
 80035b4:	fb03 f301 	mul.w	r3, r3, r1
 80035b8:	4413      	add	r3, r2
 80035ba:	3318      	adds	r3, #24
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <Send_Leg+0x258>)
 80035c6:	709a      	strb	r2, [r3, #2]
	 txData[3] = motors[n->motor_R].poz_zad;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	4619      	mov	r1, r3
 80035ce:	4a28      	ldr	r2, [pc, #160]	; (8003670 <Send_Leg+0x24c>)
 80035d0:	232c      	movs	r3, #44	; 0x2c
 80035d2:	fb03 f301 	mul.w	r3, r3, r1
 80035d6:	4413      	add	r3, r2
 80035d8:	3318      	adds	r3, #24
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b27      	ldr	r3, [pc, #156]	; (800367c <Send_Leg+0x258>)
 80035e0:	70da      	strb	r2, [r3, #3]
	 txData[4] = motors[n->motor_R].ks >> 8;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <Send_Leg+0x24c>)
 80035ea:	232c      	movs	r3, #44	; 0x2c
 80035ec:	fb03 f301 	mul.w	r3, r3, r1
 80035f0:	4413      	add	r3, r2
 80035f2:	3318      	adds	r3, #24
 80035f4:	885b      	ldrh	r3, [r3, #2]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <Send_Leg+0x258>)
 80035fe:	711a      	strb	r2, [r3, #4]
	 txData[5] = motors[n->motor_R].ks;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	4619      	mov	r1, r3
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <Send_Leg+0x24c>)
 8003608:	232c      	movs	r3, #44	; 0x2c
 800360a:	fb03 f301 	mul.w	r3, r3, r1
 800360e:	4413      	add	r3, r2
 8003610:	3318      	adds	r3, #24
 8003612:	885b      	ldrh	r3, [r3, #2]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b19      	ldr	r3, [pc, #100]	; (800367c <Send_Leg+0x258>)
 8003618:	715a      	strb	r2, [r3, #5]
	 txData[6] = motors[n->motor_R].kd >>8;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	4619      	mov	r1, r3
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <Send_Leg+0x24c>)
 8003622:	232c      	movs	r3, #44	; 0x2c
 8003624:	fb03 f301 	mul.w	r3, r3, r1
 8003628:	4413      	add	r3, r2
 800362a:	3318      	adds	r3, #24
 800362c:	889b      	ldrh	r3, [r3, #4]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <Send_Leg+0x258>)
 8003636:	719a      	strb	r2, [r3, #6]
	 txData[7] = motors[n->motor_R].kd;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	4619      	mov	r1, r3
 800363e:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <Send_Leg+0x24c>)
 8003640:	232c      	movs	r3, #44	; 0x2c
 8003642:	fb03 f301 	mul.w	r3, r3, r1
 8003646:	4413      	add	r3, r2
 8003648:	3318      	adds	r3, #24
 800364a:	889b      	ldrh	r3, [r3, #4]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <Send_Leg+0x258>)
 8003650:	71da      	strb	r2, [r3, #7]
	 txData[8] = EOF;
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <Send_Leg+0x258>)
 8003654:	22dd      	movs	r2, #221	; 0xdd
 8003656:	721a      	strb	r2, [r3, #8]
	 Send(9);
 8003658:	2009      	movs	r0, #9
 800365a:	f000 f813 	bl	8003684 <Send>
	 delay(response_delay);
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <Send_Leg+0x25c>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fcbc 	bl	8002fe0 <delay>
}
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000148 	.word	0x20000148
 8003674:	46fffe00 	.word	0x46fffe00
 8003678:	2000006c 	.word	0x2000006c
 800367c:	2000013c 	.word	0x2000013c
 8003680:	20000096 	.word	0x20000096

08003684 <Send>:
void Send(uint8_t size )	// Send (n) bytes of data via half-duplex uart
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]

	UART_Transmit(&RS, txData, size);
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	4809      	ldr	r0, [pc, #36]	; (80036b8 <Send+0x34>)
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <Send+0x38>)
 8003694:	461a      	mov	r2, r3
 8003696:	f7fe fa0f 	bl	8001ab8 <UART_Transmit>
	while(UART_IsTxBusy(&RS));
 800369a:	bf00      	nop
 800369c:	4806      	ldr	r0, [pc, #24]	; (80036b8 <Send+0x34>)
 800369e:	f7ff fc81 	bl	8002fa4 <UART_IsTxBusy>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f9      	bne.n	800369c <Send+0x18>
	UART_Receive(&RS, &rxByte, 1);
 80036a8:	4803      	ldr	r0, [pc, #12]	; (80036b8 <Send+0x34>)
 80036aa:	4905      	ldr	r1, [pc, #20]	; (80036c0 <Send+0x3c>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	f7fe fa1f 	bl	8001af0 <UART_Receive>
}
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000000 	.word	0x20000000
 80036bc:	2000013c 	.word	0x2000013c
 80036c0:	2000012c 	.word	0x2000012c

080036c4 <Ik>:
void Fk(struct Leg *n);	//Forward kinematics
void Update(struct Leg *n);	//Update floating numbers from raw data from motor drivers
void Trajectory(struct Leg *n);		//calculate trajectory for selected leg

void Ik(struct Leg *n)		//Inverse kinematics for (Leg)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	float x = n->foot.x;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
	float y = n->foot.y;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	623b      	str	r3, [r7, #32]
	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 80036d8:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <Ik+0x1f0>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eeb0 7a00 	vmov.f32	s14, #0
 80036e2:	ee87 7a87 	vdiv.f32	s14, s15, s14
 80036e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ee:	4b71      	ldr	r3, [pc, #452]	; (80038b4 <Ik+0x1f0>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eef0 6a00 	vmov.f32	s13, #0
 80036f8:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80036fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003700:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003708:	edd7 6a08 	vldr	s13, [r7, #32]
 800370c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003718:	ee17 0a90 	vmov	r0, s15
 800371c:	f000 fdf2 	bl	8004304 <sqrtf>
 8003720:	61f8      	str	r0, [r7, #28]
	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 8003722:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <Ik+0x1f0>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eeb0 7a00 	vmov.f32	s14, #0
 800372c:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8003730:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003738:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <Ik+0x1f0>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eef0 6a00 	vmov.f32	s13, #0
 8003742:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8003746:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003752:	edd7 6a08 	vldr	s13, [r7, #32]
 8003756:	edd7 7a08 	vldr	s15, [r7, #32]
 800375a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003762:	ee17 0a90 	vmov	r0, s15
 8003766:	f000 fdcd 	bl	8004304 <sqrtf>
 800376a:	61b8      	str	r0, [r7, #24]
	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 800376c:	4b52      	ldr	r3, [pc, #328]	; (80038b8 <Ik+0x1f4>)
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <Ik+0x1f4>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800377c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003780:	edd7 7a07 	vldr	s15, [r7, #28]
 8003784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800378c:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <Ik+0x1f8>)
 800378e:	edd3 6a00 	vldr	s13, [r3]
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <Ik+0x1f8>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800379c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037a0:	4b45      	ldr	r3, [pc, #276]	; (80038b8 <Ik+0x1f4>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80037aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80037b6:	edc7 7a05 	vstr	s15, [r7, #20]
	fi1 = acosf(fi1);
 80037ba:	6978      	ldr	r0, [r7, #20]
 80037bc:	f000 fcfe 	bl	80041bc <acosf>
 80037c0:	6178      	str	r0, [r7, #20]
	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <Ik+0x1f4>)
 80037c4:	ed93 7a00 	vldr	s14, [r3]
 80037c8:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <Ik+0x1f4>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d2:	edd7 6a06 	vldr	s13, [r7, #24]
 80037d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80037da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e2:	4b36      	ldr	r3, [pc, #216]	; (80038bc <Ik+0x1f8>)
 80037e4:	edd3 6a00 	vldr	s13, [r3]
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <Ik+0x1f8>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037f6:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <Ik+0x1f4>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003800:	edd7 7a06 	vldr	s15, [r7, #24]
 8003804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003808:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800380c:	edc7 7a04 	vstr	s15, [r7, #16]
	fi2 = acosf(fi2);
 8003810:	6938      	ldr	r0, [r7, #16]
 8003812:	f000 fcd3 	bl	80041bc <acosf>
 8003816:	6138      	str	r0, [r7, #16]
	float psi1 = asinf(((d/2)-x)/La);
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <Ik+0x1f0>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	eeb0 7a00 	vmov.f32	s14, #0
 8003822:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8003826:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800382a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800382e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003832:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8003836:	ee17 0a90 	vmov	r0, s15
 800383a:	f000 fd11 	bl	8004260 <asinf>
 800383e:	60f8      	str	r0, [r7, #12]
	float psi2 = asinf(((d/2)+x)/Lb);
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <Ik+0x1f0>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	eeb0 7a00 	vmov.f32	s14, #0
 800384a:	ee87 7a87 	vdiv.f32	s14, s15, s14
 800384e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003856:	edd7 7a06 	vldr	s15, [r7, #24]
 800385a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800385e:	ee17 0a90 	vmov	r0, s15
 8003862:	f000 fcfd 	bl	8004260 <asinf>
 8003866:	60b8      	str	r0, [r7, #8]

	motors[n->motor_L].teta = fi1 - psi1;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003872:	edd7 7a03 	vldr	s15, [r7, #12]
 8003876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <Ik+0x1fc>)
 800387c:	232c      	movs	r3, #44	; 0x2c
 800387e:	fb03 f301 	mul.w	r3, r3, r1
 8003882:	4413      	add	r3, r2
 8003884:	3328      	adds	r3, #40	; 0x28
 8003886:	edc3 7a00 	vstr	s15, [r3]
	motors[n->motor_R].teta = fi2 - psi2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	4619      	mov	r1, r3
 8003890:	ed97 7a04 	vldr	s14, [r7, #16]
 8003894:	edd7 7a02 	vldr	s15, [r7, #8]
 8003898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <Ik+0x1fc>)
 800389e:	232c      	movs	r3, #44	; 0x2c
 80038a0:	fb03 f301 	mul.w	r3, r3, r1
 80038a4:	4413      	add	r3, r2
 80038a6:	3328      	adds	r3, #40	; 0x28
 80038a8:	edc3 7a00 	vstr	s15, [r3]
}
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000078 	.word	0x20000078
 80038b8:	20000070 	.word	0x20000070
 80038bc:	20000074 	.word	0x20000074
 80038c0:	20000148 	.word	0x20000148

080038c4 <CPG>:
		distance = sqrtf(direction.x*direction.x + direction.y * direction.y);
	}
	return 0;
}
void CPG()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	ed2d 8b02 	vpush	{d8}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
	float dx = (dt*lkroku)/3; //jednostkowe przemieszczenie po x
 80038ce:	4bc5      	ldr	r3, [pc, #788]	; (8003be4 <CPG+0x320>)
 80038d0:	ed93 7a00 	vldr	s14, [r3]
 80038d4:	4bc4      	ldr	r3, [pc, #784]	; (8003be8 <CPG+0x324>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	eeb0 7a08 	vmov.f32	s14, #8
 80038e2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80038e6:	edc7 7a03 	vstr	s15, [r7, #12]
	float predkosc = dx/czas_petli; //[mm/s], tylko do podgl¹du wartosci
 80038ea:	4bc0      	ldr	r3, [pc, #768]	; (8003bec <CPG+0x328>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80038f4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80038f8:	edc7 7a02 	vstr	s15, [r7, #8]
	//inicjalizacja poczatkowych pozycji nog
	//noga 1
	Legs[0].foot.x = lkroku/6;
 80038fc:	4bba      	ldr	r3, [pc, #744]	; (8003be8 <CPG+0x324>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	eeb1 7a08 	vmov.f32	s14, #24
 8003906:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800390a:	4bb9      	ldr	r3, [pc, #740]	; (8003bf0 <CPG+0x32c>)
 800390c:	edc3 7a01 	vstr	s15, [r3, #4]
	Legs[0].foot.y = h_korpus;
 8003910:	4bb8      	ldr	r3, [pc, #736]	; (8003bf4 <CPG+0x330>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4ab6      	ldr	r2, [pc, #728]	; (8003bf0 <CPG+0x32c>)
 8003916:	6093      	str	r3, [r2, #8]
	//noga 2
	Legs[1].foot.x = -lkroku/2;
 8003918:	4bb3      	ldr	r3, [pc, #716]	; (8003be8 <CPG+0x324>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	eef1 7a67 	vneg.f32	s15, s15
 8003922:	eeb0 7a00 	vmov.f32	s14, #0
 8003926:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800392a:	4bb1      	ldr	r3, [pc, #708]	; (8003bf0 <CPG+0x32c>)
 800392c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	Legs[1].foot.y = h_korpus;
 8003930:	4bb0      	ldr	r3, [pc, #704]	; (8003bf4 <CPG+0x330>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4aae      	ldr	r2, [pc, #696]	; (8003bf0 <CPG+0x32c>)
 8003936:	6613      	str	r3, [r2, #96]	; 0x60
	//noga 3
	Legs[2].foot.x = lkroku/6;
 8003938:	4bab      	ldr	r3, [pc, #684]	; (8003be8 <CPG+0x324>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	eeb1 7a08 	vmov.f32	s14, #24
 8003942:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003946:	4baa      	ldr	r3, [pc, #680]	; (8003bf0 <CPG+0x32c>)
 8003948:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	Legs[2].foot.y = h_korpus;
 800394c:	4ba9      	ldr	r3, [pc, #676]	; (8003bf4 <CPG+0x330>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4aa7      	ldr	r2, [pc, #668]	; (8003bf0 <CPG+0x32c>)
 8003952:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	//noga 4
	Legs[3].foot.x= -lkroku/2;
 8003956:	4ba4      	ldr	r3, [pc, #656]	; (8003be8 <CPG+0x324>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	eef1 7a67 	vneg.f32	s15, s15
 8003960:	eeb0 7a00 	vmov.f32	s14, #0
 8003964:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8003968:	4ba1      	ldr	r3, [pc, #644]	; (8003bf0 <CPG+0x32c>)
 800396a:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
	Legs[3].foot.y = h_korpus;
 800396e:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <CPG+0x330>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a9f      	ldr	r2, [pc, #636]	; (8003bf0 <CPG+0x32c>)
 8003974:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
	uint32_t czas = 5000;
 8003978:	f241 3388 	movw	r3, #5000	; 0x1388
 800397c:	607b      	str	r3, [r7, #4]
	float ugiecie = hkroku / 4;
 800397e:	4b9e      	ldr	r3, [pc, #632]	; (8003bf8 <CPG+0x334>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	eeb1 7a00 	vmov.f32	s14, #16
 8003988:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800398c:	edc7 7a00 	vstr	s15, [r7]
	while(1)
	{
	if (faza == 1)
 8003990:	4b9a      	ldr	r3, [pc, #616]	; (8003bfc <CPG+0x338>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 80b1 	bne.w	8003afc <CPG+0x238>
		  				{
		  					Legs[0].foot.x -= dx;
 800399a:	4b95      	ldr	r3, [pc, #596]	; (8003bf0 <CPG+0x32c>)
 800399c:	ed93 7a01 	vldr	s14, [r3, #4]
 80039a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a8:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <CPG+0x32c>)
 80039aa:	edc3 7a01 	vstr	s15, [r3, #4]
		  					Legs[0].foot.y = h_korpus;
 80039ae:	4b91      	ldr	r3, [pc, #580]	; (8003bf4 <CPG+0x330>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a8f      	ldr	r2, [pc, #572]	; (8003bf0 <CPG+0x32c>)
 80039b4:	6093      	str	r3, [r2, #8]
		  					Legs[1].foot.x = lkroku * sinf(t - (pi/2));
 80039b6:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <CPG+0x33c>)
 80039b8:	ed93 7a00 	vldr	s14, [r3]
 80039bc:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <CPG+0x340>)
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	eef0 6a00 	vmov.f32	s13, #0
 80039c6:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80039ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ce:	ee17 0a90 	vmov	r0, s15
 80039d2:	f000 fba5 	bl	8004120 <sinf>
 80039d6:	ee07 0a10 	vmov	s14, r0
 80039da:	4b83      	ldr	r3, [pc, #524]	; (8003be8 <CPG+0x324>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e4:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <CPG+0x32c>)
 80039e6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		  					Legs[1].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
 80039ea:	4b85      	ldr	r3, [pc, #532]	; (8003c00 <CPG+0x33c>)
 80039ec:	ed93 7a00 	vldr	s14, [r3]
 80039f0:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <CPG+0x340>)
 80039f2:	edd3 7a00 	vldr	s15, [r3]
 80039f6:	eef0 6a00 	vmov.f32	s13, #0
 80039fa:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80039fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a02:	ee17 0a90 	vmov	r0, s15
 8003a06:	f000 fb45 	bl	8004094 <cosf>
 8003a0a:	ee07 0a10 	vmov	s14, r0
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <CPG+0x334>)
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a18:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <CPG+0x330>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <CPG+0x32c>)
 8003a24:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		  					Legs[2].foot.x += dx;
 8003a28:	4b71      	ldr	r3, [pc, #452]	; (8003bf0 <CPG+0x32c>)
 8003a2a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a36:	4b6e      	ldr	r3, [pc, #440]	; (8003bf0 <CPG+0x32c>)
 8003a38:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		  					Legs[2].foot.y = h_korpus - ugiecie;
 8003a3c:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <CPG+0x330>)
 8003a3e:	ed93 7a00 	vldr	s14, [r3]
 8003a42:	edd7 7a00 	vldr	s15, [r7]
 8003a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4a:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <CPG+0x32c>)
 8003a4c:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		  					Legs[3].foot.x += dx;
 8003a50:	4b67      	ldr	r3, [pc, #412]	; (8003bf0 <CPG+0x32c>)
 8003a52:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8003a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <CPG+0x32c>)
 8003a60:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
		  					Legs[3].foot.y = h_korpus;
 8003a64:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <CPG+0x330>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a61      	ldr	r2, [pc, #388]	; (8003bf0 <CPG+0x32c>)
 8003a6a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110

		  					for(uint8_t i = 0; i < 4;i++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
 8003a72:	e00b      	b.n	8003a8c <CPG+0x1c8>
		  						Ik(&Legs[i]);
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2258      	movs	r2, #88	; 0x58
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	; (8003bf0 <CPG+0x32c>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fe1f 	bl	80036c4 <Ik>
		  					Legs[2].foot.x += dx;
		  					Legs[2].foot.y = h_korpus - ugiecie;
		  					Legs[3].foot.x += dx;
		  					Legs[3].foot.y = h_korpus;

		  					for(uint8_t i = 0; i < 4;i++)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d9f0      	bls.n	8003a74 <CPG+0x1b0>
		  						Ik(&Legs[i]);
		  					for(uint8_t i = 0; i < 4;i++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	75bb      	strb	r3, [r7, #22]
 8003a96:	e00b      	b.n	8003ab0 <CPG+0x1ec>
		  						Send_Leg(&Legs[i]);
 8003a98:	7dbb      	ldrb	r3, [r7, #22]
 8003a9a:	2258      	movs	r2, #88	; 0x58
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	4a53      	ldr	r2, [pc, #332]	; (8003bf0 <CPG+0x32c>)
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fcbd 	bl	8003424 <Send_Leg>
		  					Legs[3].foot.x += dx;
		  					Legs[3].foot.y = h_korpus;

		  					for(uint8_t i = 0; i < 4;i++)
		  						Ik(&Legs[i]);
		  					for(uint8_t i = 0; i < 4;i++)
 8003aaa:	7dbb      	ldrb	r3, [r7, #22]
 8003aac:	3301      	adds	r3, #1
 8003aae:	75bb      	strb	r3, [r7, #22]
 8003ab0:	7dbb      	ldrb	r3, [r7, #22]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d9f0      	bls.n	8003a98 <CPG+0x1d4>
		  						Send_Leg(&Legs[i]);
		  					t += dt; //iteracja zmiennej w sin/cos
 8003ab6:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <CPG+0x33c>)
 8003ab8:	ed93 7a00 	vldr	s14, [r3]
 8003abc:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <CPG+0x320>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac6:	4b4e      	ldr	r3, [pc, #312]	; (8003c00 <CPG+0x33c>)
 8003ac8:	edc3 7a00 	vstr	s15, [r3]

		  					delay(czas);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fa87 	bl	8002fe0 <delay>
		  					if(t>=pi)
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <CPG+0x33c>)
 8003ad4:	ed93 7a00 	vldr	s14, [r3]
 8003ad8:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <CPG+0x340>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	db09      	blt.n	8003afc <CPG+0x238>
		  					{
		  						faza += 1; //iteracja fazy
 8003ae8:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <CPG+0x338>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <CPG+0x338>)
 8003af2:	701a      	strb	r2, [r3, #0]
		  						t = 0; //zerowanie iteratora
 8003af4:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <CPG+0x33c>)
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
		  					}
		  			}
		  		if (faza == 2)
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <CPG+0x338>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	f040 80c5 	bne.w	8003c90 <CPG+0x3cc>
		  		  		{

		  		  			Legs[0].foot.x -= dx;
 8003b06:	4b3a      	ldr	r3, [pc, #232]	; (8003bf0 <CPG+0x32c>)
 8003b08:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b14:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <CPG+0x32c>)
 8003b16:	edc3 7a01 	vstr	s15, [r3, #4]
		  		  			Legs[0].foot.y = h_korpus;
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <CPG+0x330>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a34      	ldr	r2, [pc, #208]	; (8003bf0 <CPG+0x32c>)
 8003b20:	6093      	str	r3, [r2, #8]
		  		  			Legs[1].foot.x -= dx;
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <CPG+0x32c>)
 8003b24:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b30:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <CPG+0x32c>)
 8003b32:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		  		  			Legs[1].foot.y = h_korpus - ugiecie;
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <CPG+0x330>)
 8003b38:	ed93 7a00 	vldr	s14, [r3]
 8003b3c:	edd7 7a00 	vldr	s15, [r7]
 8003b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <CPG+0x32c>)
 8003b46:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		  		  			Legs[2].foot.x = -lkroku * sinf(t - (pi/2));
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <CPG+0x324>)
 8003b4c:	edd3 7a00 	vldr	s15, [r3]
 8003b50:	eeb1 8a67 	vneg.f32	s16, s15
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <CPG+0x33c>)
 8003b56:	ed93 7a00 	vldr	s14, [r3]
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <CPG+0x340>)
 8003b5c:	edd3 7a00 	vldr	s15, [r3]
 8003b60:	eef0 6a00 	vmov.f32	s13, #0
 8003b64:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8003b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6c:	ee17 0a90 	vmov	r0, s15
 8003b70:	f000 fad6 	bl	8004120 <sinf>
 8003b74:	ee07 0a90 	vmov	s15, r0
 8003b78:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <CPG+0x32c>)
 8003b7e:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		  		  			Legs[2].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
 8003b82:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <CPG+0x33c>)
 8003b84:	ed93 7a00 	vldr	s14, [r3]
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <CPG+0x340>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	eef0 6a00 	vmov.f32	s13, #0
 8003b92:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8003b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9a:	ee17 0a90 	vmov	r0, s15
 8003b9e:	f000 fa79 	bl	8004094 <cosf>
 8003ba2:	ee07 0a10 	vmov	s14, r0
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <CPG+0x334>)
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <CPG+0x330>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <CPG+0x32c>)
 8003bbc:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		  		  			Legs[3].foot.x += dx;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <CPG+0x32c>)
 8003bc2:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8003bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <CPG+0x32c>)
 8003bd0:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
		  		  			Legs[3].foot.y = h_korpus;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <CPG+0x330>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <CPG+0x32c>)
 8003bda:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110

		  					for(uint8_t i = 0; i < 4;i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	757b      	strb	r3, [r7, #21]
 8003be2:	e01d      	b.n	8003c20 <CPG+0x35c>
 8003be4:	2000007c 	.word	0x2000007c
 8003be8:	20000080 	.word	0x20000080
 8003bec:	20000090 	.word	0x20000090
 8003bf0:	200002a8 	.word	0x200002a8
 8003bf4:	20000088 	.word	0x20000088
 8003bf8:	20000084 	.word	0x20000084
 8003bfc:	2000008c 	.word	0x2000008c
 8003c00:	20000128 	.word	0x20000128
 8003c04:	2000006c 	.word	0x2000006c
		  						Ik(&Legs[i]);
 8003c08:	7d7b      	ldrb	r3, [r7, #21]
 8003c0a:	2258      	movs	r2, #88	; 0x58
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	4abd      	ldr	r2, [pc, #756]	; (8003f08 <CPG+0x644>)
 8003c12:	4413      	add	r3, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fd55 	bl	80036c4 <Ik>
		  		  			Legs[2].foot.x = -lkroku * sinf(t - (pi/2));
		  		  			Legs[2].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
		  		  			Legs[3].foot.x += dx;
		  		  			Legs[3].foot.y = h_korpus;

		  					for(uint8_t i = 0; i < 4;i++)
 8003c1a:	7d7b      	ldrb	r3, [r7, #21]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	757b      	strb	r3, [r7, #21]
 8003c20:	7d7b      	ldrb	r3, [r7, #21]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d9f0      	bls.n	8003c08 <CPG+0x344>
		  						Ik(&Legs[i]);
		  					for(uint8_t i = 0; i < 4;i++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	753b      	strb	r3, [r7, #20]
 8003c2a:	e00b      	b.n	8003c44 <CPG+0x380>
		  						Send_Leg(&Legs[i]);
 8003c2c:	7d3b      	ldrb	r3, [r7, #20]
 8003c2e:	2258      	movs	r2, #88	; 0x58
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	4ab4      	ldr	r2, [pc, #720]	; (8003f08 <CPG+0x644>)
 8003c36:	4413      	add	r3, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fbf3 	bl	8003424 <Send_Leg>
		  		  			Legs[3].foot.x += dx;
		  		  			Legs[3].foot.y = h_korpus;

		  					for(uint8_t i = 0; i < 4;i++)
		  						Ik(&Legs[i]);
		  					for(uint8_t i = 0; i < 4;i++)
 8003c3e:	7d3b      	ldrb	r3, [r7, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	753b      	strb	r3, [r7, #20]
 8003c44:	7d3b      	ldrb	r3, [r7, #20]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d9f0      	bls.n	8003c2c <CPG+0x368>
		  						Send_Leg(&Legs[i]);
		  					t += dt; //iteracja zmiennej w sin/cos
 8003c4a:	4bb0      	ldr	r3, [pc, #704]	; (8003f0c <CPG+0x648>)
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	4baf      	ldr	r3, [pc, #700]	; (8003f10 <CPG+0x64c>)
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c5a:	4bac      	ldr	r3, [pc, #688]	; (8003f0c <CPG+0x648>)
 8003c5c:	edc3 7a00 	vstr	s15, [r3]

		  					delay(czas);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff f9bd 	bl	8002fe0 <delay>
		  		  			if(t>=pi)
 8003c66:	4ba9      	ldr	r3, [pc, #676]	; (8003f0c <CPG+0x648>)
 8003c68:	ed93 7a00 	vldr	s14, [r3]
 8003c6c:	4ba9      	ldr	r3, [pc, #676]	; (8003f14 <CPG+0x650>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	db09      	blt.n	8003c90 <CPG+0x3cc>
		  		  			{
		  		  				faza += 1; //iteracja fazy
 8003c7c:	4ba6      	ldr	r3, [pc, #664]	; (8003f18 <CPG+0x654>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4ba4      	ldr	r3, [pc, #656]	; (8003f18 <CPG+0x654>)
 8003c86:	701a      	strb	r2, [r3, #0]
		  		  			  	t = 0; //zerowanie iteratora
 8003c88:	4ba0      	ldr	r3, [pc, #640]	; (8003f0c <CPG+0x648>)
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
		  		  			}

		  		  		}
		  		if (faza == 3)
 8003c90:	4ba1      	ldr	r3, [pc, #644]	; (8003f18 <CPG+0x654>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	f040 80b1 	bne.w	8003dfc <CPG+0x538>
		  			  	{

		  			  		 Legs[0].foot.x = +lkroku * sinf(t - (pi/2));;
 8003c9a:	4b9c      	ldr	r3, [pc, #624]	; (8003f0c <CPG+0x648>)
 8003c9c:	ed93 7a00 	vldr	s14, [r3]
 8003ca0:	4b9c      	ldr	r3, [pc, #624]	; (8003f14 <CPG+0x650>)
 8003ca2:	edd3 7a00 	vldr	s15, [r3]
 8003ca6:	eef0 6a00 	vmov.f32	s13, #0
 8003caa:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8003cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb2:	ee17 0a90 	vmov	r0, s15
 8003cb6:	f000 fa33 	bl	8004120 <sinf>
 8003cba:	ee07 0a10 	vmov	s14, r0
 8003cbe:	4b97      	ldr	r3, [pc, #604]	; (8003f1c <CPG+0x658>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc8:	4b8f      	ldr	r3, [pc, #572]	; (8003f08 <CPG+0x644>)
 8003cca:	edc3 7a01 	vstr	s15, [r3, #4]
		  			  		 Legs[0].foot.y =  h_korpus + hkroku * cosf(t - (pi/2));
 8003cce:	4b8f      	ldr	r3, [pc, #572]	; (8003f0c <CPG+0x648>)
 8003cd0:	ed93 7a00 	vldr	s14, [r3]
 8003cd4:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <CPG+0x650>)
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	eef0 6a00 	vmov.f32	s13, #0
 8003cde:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8003ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce6:	ee17 0a90 	vmov	r0, s15
 8003cea:	f000 f9d3 	bl	8004094 <cosf>
 8003cee:	ee07 0a10 	vmov	s14, r0
 8003cf2:	4b8b      	ldr	r3, [pc, #556]	; (8003f20 <CPG+0x65c>)
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cfc:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <CPG+0x660>)
 8003cfe:	edd3 7a00 	vldr	s15, [r3]
 8003d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d06:	4b80      	ldr	r3, [pc, #512]	; (8003f08 <CPG+0x644>)
 8003d08:	edc3 7a02 	vstr	s15, [r3, #8]
		  			  		 Legs[1].foot.x -= dx;
 8003d0c:	4b7e      	ldr	r3, [pc, #504]	; (8003f08 <CPG+0x644>)
 8003d0e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1a:	4b7b      	ldr	r3, [pc, #492]	; (8003f08 <CPG+0x644>)
 8003d1c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		  			  		 Legs[1].foot.y = h_korpus;
 8003d20:	4b80      	ldr	r3, [pc, #512]	; (8003f24 <CPG+0x660>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a78      	ldr	r2, [pc, #480]	; (8003f08 <CPG+0x644>)
 8003d26:	6613      	str	r3, [r2, #96]	; 0x60
		  			  		 Legs[2].foot.x += dx;
 8003d28:	4b77      	ldr	r3, [pc, #476]	; (8003f08 <CPG+0x644>)
 8003d2a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d36:	4b74      	ldr	r3, [pc, #464]	; (8003f08 <CPG+0x644>)
 8003d38:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		  			  		 Legs[2].foot.y = h_korpus;
 8003d3c:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <CPG+0x660>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a71      	ldr	r2, [pc, #452]	; (8003f08 <CPG+0x644>)
 8003d42:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		  			  		 Legs[3].foot.x += dx;
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <CPG+0x644>)
 8003d48:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8003d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d54:	4b6c      	ldr	r3, [pc, #432]	; (8003f08 <CPG+0x644>)
 8003d56:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
		  			  		 Legs[3].foot.y = h_korpus - ugiecie;
 8003d5a:	4b72      	ldr	r3, [pc, #456]	; (8003f24 <CPG+0x660>)
 8003d5c:	ed93 7a00 	vldr	s14, [r3]
 8003d60:	edd7 7a00 	vldr	s15, [r7]
 8003d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d68:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <CPG+0x644>)
 8003d6a:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110

			  					for(uint8_t i = 0; i < 4;i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	74fb      	strb	r3, [r7, #19]
 8003d72:	e00b      	b.n	8003d8c <CPG+0x4c8>
			  						Ik(&Legs[i]);
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2258      	movs	r2, #88	; 0x58
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	4a62      	ldr	r2, [pc, #392]	; (8003f08 <CPG+0x644>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fc9f 	bl	80036c4 <Ik>
		  			  		 Legs[2].foot.x += dx;
		  			  		 Legs[2].foot.y = h_korpus;
		  			  		 Legs[3].foot.x += dx;
		  			  		 Legs[3].foot.y = h_korpus - ugiecie;

			  					for(uint8_t i = 0; i < 4;i++)
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	74fb      	strb	r3, [r7, #19]
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d9f0      	bls.n	8003d74 <CPG+0x4b0>
			  						Ik(&Legs[i]);
			  					for(uint8_t i = 0; i < 4;i++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	74bb      	strb	r3, [r7, #18]
 8003d96:	e00b      	b.n	8003db0 <CPG+0x4ec>
			  						Send_Leg(&Legs[i]);
 8003d98:	7cbb      	ldrb	r3, [r7, #18]
 8003d9a:	2258      	movs	r2, #88	; 0x58
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	4a59      	ldr	r2, [pc, #356]	; (8003f08 <CPG+0x644>)
 8003da2:	4413      	add	r3, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fb3d 	bl	8003424 <Send_Leg>
		  			  		 Legs[3].foot.x += dx;
		  			  		 Legs[3].foot.y = h_korpus - ugiecie;

			  					for(uint8_t i = 0; i < 4;i++)
			  						Ik(&Legs[i]);
			  					for(uint8_t i = 0; i < 4;i++)
 8003daa:	7cbb      	ldrb	r3, [r7, #18]
 8003dac:	3301      	adds	r3, #1
 8003dae:	74bb      	strb	r3, [r7, #18]
 8003db0:	7cbb      	ldrb	r3, [r7, #18]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d9f0      	bls.n	8003d98 <CPG+0x4d4>
			  						Send_Leg(&Legs[i]);
			  					t += dt; //iteracja zmiennej w sin/cos
 8003db6:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <CPG+0x648>)
 8003db8:	ed93 7a00 	vldr	s14, [r3]
 8003dbc:	4b54      	ldr	r3, [pc, #336]	; (8003f10 <CPG+0x64c>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc6:	4b51      	ldr	r3, [pc, #324]	; (8003f0c <CPG+0x648>)
 8003dc8:	edc3 7a00 	vstr	s15, [r3]

			  					delay(czas);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff f907 	bl	8002fe0 <delay>
		  			  		 if(t>=pi)
 8003dd2:	4b4e      	ldr	r3, [pc, #312]	; (8003f0c <CPG+0x648>)
 8003dd4:	ed93 7a00 	vldr	s14, [r3]
 8003dd8:	4b4e      	ldr	r3, [pc, #312]	; (8003f14 <CPG+0x650>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	db09      	blt.n	8003dfc <CPG+0x538>
		  			  		 {
		  			  			 faza += 1; //iteracja fazy
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <CPG+0x654>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <CPG+0x654>)
 8003df2:	701a      	strb	r2, [r3, #0]
		  			  			 t = 0; //zerowanie iteratora
 8003df4:	4b45      	ldr	r3, [pc, #276]	; (8003f0c <CPG+0x648>)
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
		  			  		 }

		  			  	}
		  		if (faza == 4)
 8003dfc:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <CPG+0x654>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	f040 80c0 	bne.w	8003f86 <CPG+0x6c2>
		  			  	 {

		  					 Legs[0].foot.x -= dx;
 8003e06:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <CPG+0x644>)
 8003e08:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e14:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <CPG+0x644>)
 8003e16:	edc3 7a01 	vstr	s15, [r3, #4]
		  			  		 Legs[0].foot.y = h_korpus - ugiecie;
 8003e1a:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <CPG+0x660>)
 8003e1c:	ed93 7a00 	vldr	s14, [r3]
 8003e20:	edd7 7a00 	vldr	s15, [r7]
 8003e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e28:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <CPG+0x644>)
 8003e2a:	edc3 7a02 	vstr	s15, [r3, #8]
		  			  		 Legs[1].foot.x -= dx;
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <CPG+0x644>)
 8003e30:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3c:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <CPG+0x644>)
 8003e3e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		  			  		 Legs[1].foot.y = h_korpus;
 8003e42:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <CPG+0x660>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <CPG+0x644>)
 8003e48:	6613      	str	r3, [r2, #96]	; 0x60
		  			  		 Legs[2].foot.x += dx;
 8003e4a:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <CPG+0x644>)
 8003e4c:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <CPG+0x644>)
 8003e5a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		  			  		 Legs[2].foot.y = h_korpus;
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <CPG+0x660>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <CPG+0x644>)
 8003e64:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		  			  		 Legs[3].foot.x = -lkroku * sinf(t - (pi/2));
 8003e68:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <CPG+0x658>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	eeb1 8a67 	vneg.f32	s16, s15
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <CPG+0x648>)
 8003e74:	ed93 7a00 	vldr	s14, [r3]
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <CPG+0x650>)
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	eef0 6a00 	vmov.f32	s13, #0
 8003e82:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8003e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e8a:	ee17 0a90 	vmov	r0, s15
 8003e8e:	f000 f947 	bl	8004120 <sinf>
 8003e92:	ee07 0a90 	vmov	s15, r0
 8003e96:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <CPG+0x644>)
 8003e9c:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
		  			  		 Legs[3].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <CPG+0x648>)
 8003ea2:	ed93 7a00 	vldr	s14, [r3]
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <CPG+0x650>)
 8003ea8:	edd3 7a00 	vldr	s15, [r3]
 8003eac:	eef0 6a00 	vmov.f32	s13, #0
 8003eb0:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8003eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb8:	ee17 0a90 	vmov	r0, s15
 8003ebc:	f000 f8ea 	bl	8004094 <cosf>
 8003ec0:	ee07 0a10 	vmov	s14, r0
 8003ec4:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <CPG+0x65c>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <CPG+0x660>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <CPG+0x644>)
 8003eda:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110

			  					for(uint8_t i = 0; i < 4;i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	747b      	strb	r3, [r7, #17]
 8003ee2:	e00b      	b.n	8003efc <CPG+0x638>
			  						Ik(&Legs[i]);
 8003ee4:	7c7b      	ldrb	r3, [r7, #17]
 8003ee6:	2258      	movs	r2, #88	; 0x58
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	4a06      	ldr	r2, [pc, #24]	; (8003f08 <CPG+0x644>)
 8003eee:	4413      	add	r3, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fbe7 	bl	80036c4 <Ik>
		  			  		 Legs[2].foot.x += dx;
		  			  		 Legs[2].foot.y = h_korpus;
		  			  		 Legs[3].foot.x = -lkroku * sinf(t - (pi/2));
		  			  		 Legs[3].foot.y = h_korpus + hkroku * cosf(t - (pi/2));

			  					for(uint8_t i = 0; i < 4;i++)
 8003ef6:	7c7b      	ldrb	r3, [r7, #17]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	747b      	strb	r3, [r7, #17]
 8003efc:	7c7b      	ldrb	r3, [r7, #17]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d9f0      	bls.n	8003ee4 <CPG+0x620>
			  						Ik(&Legs[i]);
			  					for(uint8_t i = 0; i < 4;i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	743b      	strb	r3, [r7, #16]
 8003f06:	e01b      	b.n	8003f40 <CPG+0x67c>
 8003f08:	200002a8 	.word	0x200002a8
 8003f0c:	20000128 	.word	0x20000128
 8003f10:	2000007c 	.word	0x2000007c
 8003f14:	2000006c 	.word	0x2000006c
 8003f18:	2000008c 	.word	0x2000008c
 8003f1c:	20000080 	.word	0x20000080
 8003f20:	20000084 	.word	0x20000084
 8003f24:	20000088 	.word	0x20000088
			  						Send_Leg(&Legs[i]);
 8003f28:	7c3b      	ldrb	r3, [r7, #16]
 8003f2a:	2258      	movs	r2, #88	; 0x58
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <CPG+0x6c4>)
 8003f32:	4413      	add	r3, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fa75 	bl	8003424 <Send_Leg>
		  			  		 Legs[3].foot.x = -lkroku * sinf(t - (pi/2));
		  			  		 Legs[3].foot.y = h_korpus + hkroku * cosf(t - (pi/2));

			  					for(uint8_t i = 0; i < 4;i++)
			  						Ik(&Legs[i]);
			  					for(uint8_t i = 0; i < 4;i++)
 8003f3a:	7c3b      	ldrb	r3, [r7, #16]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	743b      	strb	r3, [r7, #16]
 8003f40:	7c3b      	ldrb	r3, [r7, #16]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d9f0      	bls.n	8003f28 <CPG+0x664>
			  						Send_Leg(&Legs[i]);
			  					t += dt; //iteracja zmiennej w sin/cos
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <CPG+0x6c8>)
 8003f48:	ed93 7a00 	vldr	s14, [r3]
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <CPG+0x6cc>)
 8003f4e:	edd3 7a00 	vldr	s15, [r3]
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <CPG+0x6c8>)
 8003f58:	edc3 7a00 	vstr	s15, [r3]

			  					delay(czas);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff f83f 	bl	8002fe0 <delay>
		  			  		 if(t>=pi)
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <CPG+0x6c8>)
 8003f64:	ed93 7a00 	vldr	s14, [r3]
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <CPG+0x6d0>)
 8003f6a:	edd3 7a00 	vldr	s15, [r3]
 8003f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f76:	db06      	blt.n	8003f86 <CPG+0x6c2>
		  			  		 {
		  			  			 faza = 1; //iteracja fazy
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <CPG+0x6d4>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
		  			  			 t = 0; //zerowanie iteratora
 8003f7e:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <CPG+0x6c8>)
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
		  			  		 }

		  			  	 }
	}
 8003f86:	e503      	b.n	8003990 <CPG+0xcc>
 8003f88:	200002a8 	.word	0x200002a8
 8003f8c:	20000128 	.word	0x20000128
 8003f90:	2000007c 	.word	0x2000007c
 8003f94:	2000006c 	.word	0x2000006c
 8003f98:	2000008c 	.word	0x2000008c

08003f9c <main>:
#include "kinematics.h"

//#include "dynamics.h"

int main(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();
 8003fa2:	f7fe ffa9 	bl	8002ef8 <DAVE_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	717b      	strb	r3, [r7, #5]
  while(status == DAVE_STATUS_FAILURE )
 8003faa:	e006      	b.n	8003fba <main+0x1e>
  {
	  delay(50000);
 8003fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fb0:	f7ff f816 	bl	8002fe0 <delay>
	   DIGITAL_IO_ToggleOutput(&LED1);
 8003fb4:	482f      	ldr	r0, [pc, #188]	; (8004074 <main+0xd8>)
 8003fb6:	f7ff f803 	bl	8002fc0 <DIGITAL_IO_ToggleOutput>

int main(void)
{
  DAVE_STATUS_t status;
  status = DAVE_Init();
  while(status == DAVE_STATUS_FAILURE )
 8003fba:	797b      	ldrb	r3, [r7, #5]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d0f5      	beq.n	8003fac <main+0x10>
	  delay(50000);
	   DIGITAL_IO_ToggleOutput(&LED1);
  }

  //#####################
  PWM_CCU4_Init(&PWM_CCU4_0);
 8003fc0:	482d      	ldr	r0, [pc, #180]	; (8004078 <main+0xdc>)
 8003fc2:	f7fe fb4d 	bl	8002660 <PWM_CCU4_Init>
  PWM_CCU4_Start(&PWM_CCU4_0);
 8003fc6:	482c      	ldr	r0, [pc, #176]	; (8004078 <main+0xdc>)
 8003fc8:	f7fe fd68 	bl	8002a9c <PWM_CCU4_Start>
  PWM_CCU4_SetDutyCycle(&PWM_CCU4_0, 1500);
 8003fcc:	482a      	ldr	r0, [pc, #168]	; (8004078 <main+0xdc>)
 8003fce:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003fd2:	f7fe fd8f 	bl	8002af4 <PWM_CCU4_SetDutyCycle>

  delay(250000);
 8003fd6:	4829      	ldr	r0, [pc, #164]	; (800407c <main+0xe0>)
 8003fd8:	f7ff f802 	bl	8002fe0 <delay>
  Init();
 8003fdc:	f7ff f822 	bl	8003024 <Init>


  while(init == 0)							//wait for input from PC
 8003fe0:	e005      	b.n	8003fee <main+0x52>
  {
	  delay(500000);
 8003fe2:	4827      	ldr	r0, [pc, #156]	; (8004080 <main+0xe4>)
 8003fe4:	f7fe fffc 	bl	8002fe0 <delay>
	   DIGITAL_IO_ToggleOutput(&LED1);
 8003fe8:	4822      	ldr	r0, [pc, #136]	; (8004074 <main+0xd8>)
 8003fea:	f7fe ffe9 	bl	8002fc0 <DIGITAL_IO_ToggleOutput>

  delay(250000);
  Init();


  while(init == 0)							//wait for input from PC
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <main+0xe8>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f5      	beq.n	8003fe2 <main+0x46>
  {
	  delay(500000);
	   DIGITAL_IO_ToggleOutput(&LED1);
  }

  XMC_Init(10);
 8003ff6:	200a      	movs	r0, #10
 8003ff8:	f7ff f920 	bl	800323c <XMC_Init>

  //motors_go();

  while(1)
  {
	  DIGITAL_IO_ToggleOutput(&LED1);
 8003ffc:	481d      	ldr	r0, [pc, #116]	; (8004074 <main+0xd8>)
 8003ffe:	f7fe ffdf 	bl	8002fc0 <DIGITAL_IO_ToggleOutput>
	  for(uint8_t i = 1; i < 8;i++)
 8004002:	2301      	movs	r3, #1
 8004004:	71fb      	strb	r3, [r7, #7]
 8004006:	e018      	b.n	800403a <main+0x9e>
	  {
		  motors[i].ks = motors[0].ks;
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <main+0xec>)
 800400c:	8b50      	ldrh	r0, [r2, #26]
 800400e:	4a1e      	ldr	r2, [pc, #120]	; (8004088 <main+0xec>)
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3318      	adds	r3, #24
 800401a:	4602      	mov	r2, r0
 800401c:	805a      	strh	r2, [r3, #2]
		  motors[i].kd = motors[0].kd;
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <main+0xec>)
 8004022:	8b90      	ldrh	r0, [r2, #28]
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <main+0xec>)
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3318      	adds	r3, #24
 8004030:	4602      	mov	r2, r0
 8004032:	809a      	strh	r2, [r3, #4]
  //motors_go();

  while(1)
  {
	  DIGITAL_IO_ToggleOutput(&LED1);
	  for(uint8_t i = 1; i < 8;i++)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	3301      	adds	r3, #1
 8004038:	71fb      	strb	r3, [r7, #7]
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	2b07      	cmp	r3, #7
 800403e:	d9e3      	bls.n	8004008 <main+0x6c>
	  {
		  motors[i].ks = motors[0].ks;
		  motors[i].kd = motors[0].kd;
	  }
	  CPG();
 8004040:	f7ff fc40 	bl	80038c4 <CPG>
	  for(uint8_t i =0; i < 4; i++)
 8004044:	2300      	movs	r3, #0
 8004046:	71bb      	strb	r3, [r7, #6]
 8004048:	e002      	b.n	8004050 <main+0xb4>
 800404a:	79bb      	ldrb	r3, [r7, #6]
 800404c:	3301      	adds	r3, #1
 800404e:	71bb      	strb	r3, [r7, #6]
 8004050:	79bb      	ldrb	r3, [r7, #6]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d9f9      	bls.n	800404a <main+0xae>
	// stanowisko.torque[0] = TorqueFromInet(stanowisko.i_net[0]);
	// stanowisko.torque[1] = TorqueFromInet(stanowisko.i_net[1]);
	// t = Z_score_filter(stanowisko.eFY_buffer) * 25;
	 //Reibert_Hopper(&stanowisko);
	 //Fk(&stanowisko);
	  t+= dt;
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <main+0xf0>)
 8004058:	ed93 7a00 	vldr	s14, [r3]
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <main+0xf4>)
 800405e:	edd3 7a00 	vldr	s15, [r3]
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <main+0xf0>)
 8004068:	edc3 7a00 	vstr	s15, [r3]

	  DIGITAL_IO_ToggleOutput(&LED1);
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <main+0xd8>)
 800406e:	f7fe ffa7 	bl	8002fc0 <DIGITAL_IO_ToggleOutput>

  }
 8004072:	e7c3      	b.n	8003ffc <main+0x60>
 8004074:	08006430 	.word	0x08006430
 8004078:	20000034 	.word	0x20000034
 800407c:	0003d090 	.word	0x0003d090
 8004080:	0007a120 	.word	0x0007a120
 8004084:	2000012e 	.word	0x2000012e
 8004088:	20000148 	.word	0x20000148
 800408c:	20000128 	.word	0x20000128
 8004090:	2000007c 	.word	0x2000007c

08004094 <cosf>:
 8004094:	b500      	push	{lr}
 8004096:	b085      	sub	sp, #20
 8004098:	4a20      	ldr	r2, [pc, #128]	; (800411c <cosf+0x88>)
 800409a:	9001      	str	r0, [sp, #4]
 800409c:	9b01      	ldr	r3, [sp, #4]
 800409e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	4293      	cmp	r3, r2
 80040a4:	dd1d      	ble.n	80040e2 <cosf+0x4e>
 80040a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80040aa:	db08      	blt.n	80040be <cosf+0x2a>
 80040ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80040b0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80040b4:	ee17 0a90 	vmov	r0, s15
 80040b8:	b005      	add	sp, #20
 80040ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80040be:	a902      	add	r1, sp, #8
 80040c0:	f000 fbac 	bl	800481c <__ieee754_rem_pio2f>
 80040c4:	f000 0203 	and.w	r2, r0, #3
 80040c8:	2a01      	cmp	r2, #1
 80040ca:	9802      	ldr	r0, [sp, #8]
 80040cc:	9903      	ldr	r1, [sp, #12]
 80040ce:	d019      	beq.n	8004104 <cosf+0x70>
 80040d0:	2a02      	cmp	r2, #2
 80040d2:	d010      	beq.n	80040f6 <cosf+0x62>
 80040d4:	b1ea      	cbz	r2, 8004112 <cosf+0x7e>
 80040d6:	2201      	movs	r2, #1
 80040d8:	f001 f8e0 	bl	800529c <__kernel_sinf>
 80040dc:	ee07 0a90 	vmov	s15, r0
 80040e0:	e7e8      	b.n	80040b4 <cosf+0x20>
 80040e2:	2100      	movs	r1, #0
 80040e4:	f000 fd3c 	bl	8004b60 <__kernel_cosf>
 80040e8:	ee07 0a90 	vmov	s15, r0
 80040ec:	ee17 0a90 	vmov	r0, s15
 80040f0:	b005      	add	sp, #20
 80040f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040f6:	f000 fd33 	bl	8004b60 <__kernel_cosf>
 80040fa:	ee07 0a90 	vmov	s15, r0
 80040fe:	eef1 7a67 	vneg.f32	s15, s15
 8004102:	e7d7      	b.n	80040b4 <cosf+0x20>
 8004104:	f001 f8ca 	bl	800529c <__kernel_sinf>
 8004108:	ee07 0a90 	vmov	s15, r0
 800410c:	eef1 7a67 	vneg.f32	s15, s15
 8004110:	e7d0      	b.n	80040b4 <cosf+0x20>
 8004112:	f000 fd25 	bl	8004b60 <__kernel_cosf>
 8004116:	ee07 0a90 	vmov	s15, r0
 800411a:	e7cb      	b.n	80040b4 <cosf+0x20>
 800411c:	3f490fd8 	.word	0x3f490fd8

08004120 <sinf>:
 8004120:	b500      	push	{lr}
 8004122:	b085      	sub	sp, #20
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <sinf+0x98>)
 8004126:	9001      	str	r0, [sp, #4]
 8004128:	9b01      	ldr	r3, [sp, #4]
 800412a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800412e:	4293      	cmp	r3, r2
 8004130:	dd1e      	ble.n	8004170 <sinf+0x50>
 8004132:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004136:	db08      	blt.n	800414a <sinf+0x2a>
 8004138:	eddd 7a01 	vldr	s15, [sp, #4]
 800413c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004140:	ee17 0a90 	vmov	r0, s15
 8004144:	b005      	add	sp, #20
 8004146:	f85d fb04 	ldr.w	pc, [sp], #4
 800414a:	a902      	add	r1, sp, #8
 800414c:	f000 fb66 	bl	800481c <__ieee754_rem_pio2f>
 8004150:	f000 0003 	and.w	r0, r0, #3
 8004154:	2801      	cmp	r0, #1
 8004156:	d020      	beq.n	800419a <sinf+0x7a>
 8004158:	2802      	cmp	r0, #2
 800415a:	d014      	beq.n	8004186 <sinf+0x66>
 800415c:	b320      	cbz	r0, 80041a8 <sinf+0x88>
 800415e:	9802      	ldr	r0, [sp, #8]
 8004160:	9903      	ldr	r1, [sp, #12]
 8004162:	f000 fcfd 	bl	8004b60 <__kernel_cosf>
 8004166:	ee07 0a90 	vmov	s15, r0
 800416a:	eef1 7a67 	vneg.f32	s15, s15
 800416e:	e7e7      	b.n	8004140 <sinf+0x20>
 8004170:	2100      	movs	r1, #0
 8004172:	2200      	movs	r2, #0
 8004174:	f001 f892 	bl	800529c <__kernel_sinf>
 8004178:	ee07 0a90 	vmov	s15, r0
 800417c:	ee17 0a90 	vmov	r0, s15
 8004180:	b005      	add	sp, #20
 8004182:	f85d fb04 	ldr.w	pc, [sp], #4
 8004186:	9802      	ldr	r0, [sp, #8]
 8004188:	9903      	ldr	r1, [sp, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f001 f886 	bl	800529c <__kernel_sinf>
 8004190:	ee07 0a90 	vmov	s15, r0
 8004194:	eef1 7a67 	vneg.f32	s15, s15
 8004198:	e7d2      	b.n	8004140 <sinf+0x20>
 800419a:	9802      	ldr	r0, [sp, #8]
 800419c:	9903      	ldr	r1, [sp, #12]
 800419e:	f000 fcdf 	bl	8004b60 <__kernel_cosf>
 80041a2:	ee07 0a90 	vmov	s15, r0
 80041a6:	e7cb      	b.n	8004140 <sinf+0x20>
 80041a8:	9802      	ldr	r0, [sp, #8]
 80041aa:	9903      	ldr	r1, [sp, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f001 f875 	bl	800529c <__kernel_sinf>
 80041b2:	ee07 0a90 	vmov	s15, r0
 80041b6:	e7c3      	b.n	8004140 <sinf+0x20>
 80041b8:	3f490fd8 	.word	0x3f490fd8

080041bc <acosf>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	4d25      	ldr	r5, [pc, #148]	; (8004254 <acosf+0x98>)
 80041c0:	b08a      	sub	sp, #40	; 0x28
 80041c2:	4606      	mov	r6, r0
 80041c4:	f000 f8f6 	bl	80043b4 <__ieee754_acosf>
 80041c8:	f995 3000 	ldrsb.w	r3, [r5]
 80041cc:	3301      	adds	r3, #1
 80041ce:	4604      	mov	r4, r0
 80041d0:	d003      	beq.n	80041da <acosf+0x1e>
 80041d2:	4630      	mov	r0, r6
 80041d4:	f001 f916 	bl	8005404 <__fpclassifyf>
 80041d8:	b910      	cbnz	r0, 80041e0 <acosf+0x24>
 80041da:	4620      	mov	r0, r4
 80041dc:	b00a      	add	sp, #40	; 0x28
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	4630      	mov	r0, r6
 80041e2:	f001 f8b1 	bl	8005348 <fabsf>
 80041e6:	ee07 0a10 	vmov	s14, r0
 80041ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80041ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f6:	ddf0      	ble.n	80041da <acosf+0x1e>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <acosf+0x9c>)
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4630      	mov	r0, r6
 8004200:	2300      	movs	r3, #0
 8004202:	9201      	str	r2, [sp, #4]
 8004204:	9308      	str	r3, [sp, #32]
 8004206:	f001 fb01 	bl	800580c <__aeabi_f2d>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4813      	ldr	r0, [pc, #76]	; (800425c <acosf+0xa0>)
 8004210:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004218:	f001 f890 	bl	800533c <nan>
 800421c:	f995 3000 	ldrsb.w	r3, [r5]
 8004220:	2b02      	cmp	r3, #2
 8004222:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004226:	d00b      	beq.n	8004240 <acosf+0x84>
 8004228:	4668      	mov	r0, sp
 800422a:	f001 f885 	bl	8005338 <matherr>
 800422e:	b138      	cbz	r0, 8004240 <acosf+0x84>
 8004230:	9b08      	ldr	r3, [sp, #32]
 8004232:	b953      	cbnz	r3, 800424a <acosf+0x8e>
 8004234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004238:	f001 fd4e 	bl	8005cd8 <__aeabi_d2f>
 800423c:	b00a      	add	sp, #40	; 0x28
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f002 f866 	bl	8006310 <__errno>
 8004244:	2321      	movs	r3, #33	; 0x21
 8004246:	6003      	str	r3, [r0, #0]
 8004248:	e7f2      	b.n	8004230 <acosf+0x74>
 800424a:	f002 f861 	bl	8006310 <__errno>
 800424e:	9b08      	ldr	r3, [sp, #32]
 8004250:	6003      	str	r3, [r0, #0]
 8004252:	e7ef      	b.n	8004234 <acosf+0x78>
 8004254:	20000099 	.word	0x20000099
 8004258:	08006458 	.word	0x08006458
 800425c:	08006460 	.word	0x08006460

08004260 <asinf>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4d25      	ldr	r5, [pc, #148]	; (80042f8 <asinf+0x98>)
 8004264:	b08a      	sub	sp, #40	; 0x28
 8004266:	4606      	mov	r6, r0
 8004268:	f000 f9ce 	bl	8004608 <__ieee754_asinf>
 800426c:	f995 3000 	ldrsb.w	r3, [r5]
 8004270:	3301      	adds	r3, #1
 8004272:	4604      	mov	r4, r0
 8004274:	d003      	beq.n	800427e <asinf+0x1e>
 8004276:	4630      	mov	r0, r6
 8004278:	f001 f8c4 	bl	8005404 <__fpclassifyf>
 800427c:	b910      	cbnz	r0, 8004284 <asinf+0x24>
 800427e:	4620      	mov	r0, r4
 8004280:	b00a      	add	sp, #40	; 0x28
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	4630      	mov	r0, r6
 8004286:	f001 f85f 	bl	8005348 <fabsf>
 800428a:	ee07 0a10 	vmov	s14, r0
 800428e:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429a:	ddf0      	ble.n	800427e <asinf+0x1e>
 800429c:	2301      	movs	r3, #1
 800429e:	4a17      	ldr	r2, [pc, #92]	; (80042fc <asinf+0x9c>)
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4630      	mov	r0, r6
 80042a4:	2300      	movs	r3, #0
 80042a6:	9201      	str	r2, [sp, #4]
 80042a8:	9308      	str	r3, [sp, #32]
 80042aa:	f001 faaf 	bl	800580c <__aeabi_f2d>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4813      	ldr	r0, [pc, #76]	; (8004300 <asinf+0xa0>)
 80042b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042bc:	f001 f83e 	bl	800533c <nan>
 80042c0:	f995 3000 	ldrsb.w	r3, [r5]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042ca:	d00b      	beq.n	80042e4 <asinf+0x84>
 80042cc:	4668      	mov	r0, sp
 80042ce:	f001 f833 	bl	8005338 <matherr>
 80042d2:	b138      	cbz	r0, 80042e4 <asinf+0x84>
 80042d4:	9b08      	ldr	r3, [sp, #32]
 80042d6:	b953      	cbnz	r3, 80042ee <asinf+0x8e>
 80042d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042dc:	f001 fcfc 	bl	8005cd8 <__aeabi_d2f>
 80042e0:	b00a      	add	sp, #40	; 0x28
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	f002 f814 	bl	8006310 <__errno>
 80042e8:	2321      	movs	r3, #33	; 0x21
 80042ea:	6003      	str	r3, [r0, #0]
 80042ec:	e7f2      	b.n	80042d4 <asinf+0x74>
 80042ee:	f002 f80f 	bl	8006310 <__errno>
 80042f2:	9b08      	ldr	r3, [sp, #32]
 80042f4:	6003      	str	r3, [r0, #0]
 80042f6:	e7ef      	b.n	80042d8 <asinf+0x78>
 80042f8:	20000099 	.word	0x20000099
 80042fc:	08006464 	.word	0x08006464
 8004300:	08006460 	.word	0x08006460

08004304 <sqrtf>:
 8004304:	b530      	push	{r4, r5, lr}
 8004306:	ed2d 8b02 	vpush	{d8}
 800430a:	4d28      	ldr	r5, [pc, #160]	; (80043ac <sqrtf+0xa8>)
 800430c:	b08b      	sub	sp, #44	; 0x2c
 800430e:	ee08 0a10 	vmov	s16, r0
 8004312:	f000 fbcf 	bl	8004ab4 <__ieee754_sqrtf>
 8004316:	f995 3000 	ldrsb.w	r3, [r5]
 800431a:	3301      	adds	r3, #1
 800431c:	4604      	mov	r4, r0
 800431e:	d009      	beq.n	8004334 <sqrtf+0x30>
 8004320:	ee18 0a10 	vmov	r0, s16
 8004324:	f001 f86e 	bl	8005404 <__fpclassifyf>
 8004328:	b120      	cbz	r0, 8004334 <sqrtf+0x30>
 800432a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d404      	bmi.n	800433e <sqrtf+0x3a>
 8004334:	4620      	mov	r0, r4
 8004336:	b00b      	add	sp, #44	; 0x2c
 8004338:	ecbd 8b02 	vpop	{d8}
 800433c:	bd30      	pop	{r4, r5, pc}
 800433e:	2301      	movs	r3, #1
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <sqrtf+0xac>)
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	ee18 0a10 	vmov	r0, s16
 8004348:	2300      	movs	r3, #0
 800434a:	9201      	str	r2, [sp, #4]
 800434c:	9308      	str	r3, [sp, #32]
 800434e:	f001 fa5d 	bl	800580c <__aeabi_f2d>
 8004352:	782c      	ldrb	r4, [r5, #0]
 8004354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800435c:	b98c      	cbnz	r4, 8004382 <sqrtf+0x7e>
 800435e:	2200      	movs	r2, #0
 8004360:	2300      	movs	r3, #0
 8004362:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004366:	4668      	mov	r0, sp
 8004368:	f000 ffe6 	bl	8005338 <matherr>
 800436c:	b198      	cbz	r0, 8004396 <sqrtf+0x92>
 800436e:	9b08      	ldr	r3, [sp, #32]
 8004370:	b9b3      	cbnz	r3, 80043a0 <sqrtf+0x9c>
 8004372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004376:	f001 fcaf 	bl	8005cd8 <__aeabi_d2f>
 800437a:	b00b      	add	sp, #44	; 0x2c
 800437c:	ecbd 8b02 	vpop	{d8}
 8004380:	bd30      	pop	{r4, r5, pc}
 8004382:	2000      	movs	r0, #0
 8004384:	2100      	movs	r1, #0
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	f001 fbbd 	bl	8005b08 <__aeabi_ddiv>
 800438e:	2c02      	cmp	r4, #2
 8004390:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004394:	d1e7      	bne.n	8004366 <sqrtf+0x62>
 8004396:	f001 ffbb 	bl	8006310 <__errno>
 800439a:	2321      	movs	r3, #33	; 0x21
 800439c:	6003      	str	r3, [r0, #0]
 800439e:	e7e6      	b.n	800436e <sqrtf+0x6a>
 80043a0:	f001 ffb6 	bl	8006310 <__errno>
 80043a4:	9b08      	ldr	r3, [sp, #32]
 80043a6:	6003      	str	r3, [r0, #0]
 80043a8:	e7e3      	b.n	8004372 <sqrtf+0x6e>
 80043aa:	bf00      	nop
 80043ac:	20000099 	.word	0x20000099
 80043b0:	0800646c 	.word	0x0800646c

080043b4 <__ieee754_acosf>:
 80043b4:	b508      	push	{r3, lr}
 80043b6:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80043ba:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80043be:	ed2d 8b02 	vpush	{d8}
 80043c2:	ee07 0a90 	vmov	s15, r0
 80043c6:	d016      	beq.n	80043f6 <__ieee754_acosf+0x42>
 80043c8:	dc0c      	bgt.n	80043e4 <__ieee754_acosf+0x30>
 80043ca:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80043ce:	da1f      	bge.n	8004410 <__ieee754_acosf+0x5c>
 80043d0:	f1b3 5f0c 	cmp.w	r3, #587202560	; 0x23000000
 80043d4:	dc70      	bgt.n	80044b8 <__ieee754_acosf+0x104>
 80043d6:	ecbd 8b02 	vpop	{d8}
 80043da:	eddf 7a7a 	vldr	s15, [pc, #488]	; 80045c4 <__ieee754_acosf+0x210>
 80043de:	ee17 0a90 	vmov	r0, s15
 80043e2:	bd08      	pop	{r3, pc}
 80043e4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80043e8:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 80043ec:	ecbd 8b02 	vpop	{d8}
 80043f0:	ee17 0a90 	vmov	r0, s15
 80043f4:	bd08      	pop	{r3, pc}
 80043f6:	ecbd 8b02 	vpop	{d8}
 80043fa:	eddf 7a73 	vldr	s15, [pc, #460]	; 80045c8 <__ieee754_acosf+0x214>
 80043fe:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80045cc <__ieee754_acosf+0x218>
 8004402:	2800      	cmp	r0, #0
 8004404:	bfd8      	it	le
 8004406:	eef0 7a47 	vmovle.f32	s15, s14
 800440a:	ee17 0a90 	vmov	r0, s15
 800440e:	bd08      	pop	{r3, pc}
 8004410:	2800      	cmp	r0, #0
 8004412:	f2c0 808e 	blt.w	8004532 <__ieee754_acosf+0x17e>
 8004416:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
 800441a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800441e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x60
 8004422:	ee27 8a88 	vmul.f32	s16, s15, s16
 8004426:	ee18 0a10 	vmov	r0, s16
 800442a:	f000 fb43 	bl	8004ab4 <__ieee754_sqrtf>
 800442e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80045d0 <__ieee754_acosf+0x21c>
 8004432:	ed9f 3a68 	vldr	s6, [pc, #416]	; 80045d4 <__ieee754_acosf+0x220>
 8004436:	ed9f 4a68 	vldr	s8, [pc, #416]	; 80045d8 <__ieee754_acosf+0x224>
 800443a:	eddf 2a68 	vldr	s5, [pc, #416]	; 80045dc <__ieee754_acosf+0x228>
 800443e:	eddf 3a68 	vldr	s7, [pc, #416]	; 80045e0 <__ieee754_acosf+0x22c>
 8004442:	ed9f 5a68 	vldr	s10, [pc, #416]	; 80045e4 <__ieee754_acosf+0x230>
 8004446:	eddf 4a68 	vldr	s9, [pc, #416]	; 80045e8 <__ieee754_acosf+0x234>
 800444a:	eddf 6a68 	vldr	s13, [pc, #416]	; 80045ec <__ieee754_acosf+0x238>
 800444e:	eddf 5a68 	vldr	s11, [pc, #416]	; 80045f0 <__ieee754_acosf+0x23c>
 8004452:	eddf 7a68 	vldr	s15, [pc, #416]	; 80045f4 <__ieee754_acosf+0x240>
 8004456:	eea8 3a07 	vfma.f32	s6, s16, s14
 800445a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800445e:	f023 030f 	bic.w	r3, r3, #15
 8004462:	eee8 3a22 	vfma.f32	s7, s16, s5
 8004466:	eea3 4a08 	vfma.f32	s8, s6, s16
 800446a:	eee3 4a88 	vfma.f32	s9, s7, s16
 800446e:	eea4 5a08 	vfma.f32	s10, s8, s16
 8004472:	eee4 5a88 	vfma.f32	s11, s9, s16
 8004476:	eee5 6a08 	vfma.f32	s13, s10, s16
 800447a:	ee07 3a10 	vmov	s14, r3
 800447e:	eee6 7a88 	vfma.f32	s15, s13, s16
 8004482:	eef0 6a48 	vmov.f32	s13, s16
 8004486:	ee06 0a10 	vmov	s12, r0
 800448a:	eee5 8a88 	vfma.f32	s17, s11, s16
 800448e:	eee7 6a47 	vfms.f32	s13, s14, s14
 8004492:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004496:	ee76 5a07 	vadd.f32	s11, s12, s14
 800449a:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 800449e:	eec6 7aa5 	vdiv.f32	s15, s13, s11
 80044a2:	eee8 7a06 	vfma.f32	s15, s16, s12
 80044a6:	ecbd 8b02 	vpop	{d8}
 80044aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044b2:	ee17 0a90 	vmov	r0, s15
 80044b6:	bd08      	pop	{r3, pc}
 80044b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80044bc:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80045d0 <__ieee754_acosf+0x21c>
 80044c0:	eddf 2a44 	vldr	s5, [pc, #272]	; 80045d4 <__ieee754_acosf+0x220>
 80044c4:	eddf 3a44 	vldr	s7, [pc, #272]	; 80045d8 <__ieee754_acosf+0x224>
 80044c8:	eddf 1a44 	vldr	s3, [pc, #272]	; 80045dc <__ieee754_acosf+0x228>
 80044cc:	ed9f 3a44 	vldr	s6, [pc, #272]	; 80045e0 <__ieee754_acosf+0x22c>
 80044d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80045e4 <__ieee754_acosf+0x230>
 80044d4:	ed9f 4a44 	vldr	s8, [pc, #272]	; 80045e8 <__ieee754_acosf+0x234>
 80044d8:	eddf 4a44 	vldr	s9, [pc, #272]	; 80045ec <__ieee754_acosf+0x238>
 80044dc:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80045f0 <__ieee754_acosf+0x23c>
 80044e0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80045f4 <__ieee754_acosf+0x240>
 80044e4:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80045f8 <__ieee754_acosf+0x244>
 80044e8:	ed9f 2a44 	vldr	s4, [pc, #272]	; 80045fc <__ieee754_acosf+0x248>
 80044ec:	eee7 2a01 	vfma.f32	s5, s14, s2
 80044f0:	ecbd 8b02 	vpop	{d8}
 80044f4:	eee2 3a87 	vfma.f32	s7, s5, s14
 80044f8:	eea7 3a21 	vfma.f32	s6, s14, s3
 80044fc:	eee3 5a87 	vfma.f32	s11, s7, s14
 8004500:	eea3 4a07 	vfma.f32	s8, s6, s14
 8004504:	eee5 4a87 	vfma.f32	s9, s11, s14
 8004508:	eea4 5a07 	vfma.f32	s10, s8, s14
 800450c:	eee4 6a87 	vfma.f32	s13, s9, s14
 8004510:	eef7 5a00 	vmov.f32	s11, #112	; 0x70
 8004514:	eee5 5a07 	vfma.f32	s11, s10, s14
 8004518:	ee26 7a87 	vmul.f32	s14, s13, s14
 800451c:	ee87 7a25 	vdiv.f32	s14, s14, s11
 8004520:	eea7 6ac7 	vfms.f32	s12, s15, s14
 8004524:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004528:	ee72 7a67 	vsub.f32	s15, s4, s15
 800452c:	ee17 0a90 	vmov	r0, s15
 8004530:	bd08      	pop	{r3, pc}
 8004532:	eeb7 8a00 	vmov.f32	s16, #112	; 0x70
 8004536:	ee77 7a88 	vadd.f32	s15, s15, s16
 800453a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800453e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004542:	eddf 2a23 	vldr	s5, [pc, #140]	; 80045d0 <__ieee754_acosf+0x21c>
 8004546:	eddf 3a23 	vldr	s7, [pc, #140]	; 80045d4 <__ieee754_acosf+0x220>
 800454a:	ed9f 3a24 	vldr	s6, [pc, #144]	; 80045dc <__ieee754_acosf+0x228>
 800454e:	eddf 4a22 	vldr	s9, [pc, #136]	; 80045d8 <__ieee754_acosf+0x224>
 8004552:	ed9f 4a23 	vldr	s8, [pc, #140]	; 80045e0 <__ieee754_acosf+0x22c>
 8004556:	eddf 5a23 	vldr	s11, [pc, #140]	; 80045e4 <__ieee754_acosf+0x230>
 800455a:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80045e8 <__ieee754_acosf+0x234>
 800455e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80045ec <__ieee754_acosf+0x238>
 8004562:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80045f0 <__ieee754_acosf+0x23c>
 8004566:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80045f4 <__ieee754_acosf+0x240>
 800456a:	eee7 3aa2 	vfma.f32	s7, s15, s5
 800456e:	eea7 4a83 	vfma.f32	s8, s15, s6
 8004572:	eee3 4aa7 	vfma.f32	s9, s7, s15
 8004576:	eea4 5a27 	vfma.f32	s10, s8, s15
 800457a:	eee4 5aa7 	vfma.f32	s11, s9, s15
 800457e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8004582:	eee5 6aa7 	vfma.f32	s13, s11, s15
 8004586:	eea6 8a27 	vfma.f32	s16, s12, s15
 800458a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800458e:	eef0 8a48 	vmov.f32	s17, s16
 8004592:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004596:	ee17 0a90 	vmov	r0, s15
 800459a:	f000 fa8b 	bl	8004ab4 <__ieee754_sqrtf>
 800459e:	ee88 8a28 	vdiv.f32	s16, s16, s17
 80045a2:	ee06 0a90 	vmov	s13, r0
 80045a6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004600 <__ieee754_acosf+0x24c>
 80045aa:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004604 <__ieee754_acosf+0x250>
 80045ae:	eea8 7a26 	vfma.f32	s14, s16, s13
 80045b2:	ee06 0a10 	vmov	s12, r0
 80045b6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80045ba:	eef0 6a00 	vmov.f32	s13, #0
 80045be:	eee7 7a66 	vfms.f32	s15, s14, s13
 80045c2:	e713      	b.n	80043ec <__ieee754_acosf+0x38>
 80045c4:	3fc90fdb 	.word	0x3fc90fdb
 80045c8:	00000000 	.word	0x00000000
 80045cc:	40490fdb 	.word	0x40490fdb
 80045d0:	3811ef08 	.word	0x3811ef08
 80045d4:	3a4f7f04 	.word	0x3a4f7f04
 80045d8:	bd241146 	.word	0xbd241146
 80045dc:	3d9dc62e 	.word	0x3d9dc62e
 80045e0:	bf303361 	.word	0xbf303361
 80045e4:	3e4e0aa8 	.word	0x3e4e0aa8
 80045e8:	4001572d 	.word	0x4001572d
 80045ec:	bea6b090 	.word	0xbea6b090
 80045f0:	c019d139 	.word	0xc019d139
 80045f4:	3e2aaaab 	.word	0x3e2aaaab
 80045f8:	33a22168 	.word	0x33a22168
 80045fc:	3fc90fda 	.word	0x3fc90fda
 8004600:	b3a22168 	.word	0xb3a22168
 8004604:	40490fda 	.word	0x40490fda

08004608 <__ieee754_asinf>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800460e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004612:	ed2d 8b04 	vpush	{d8-d9}
 8004616:	ee07 0a90 	vmov	s15, r0
 800461a:	4605      	mov	r5, r0
 800461c:	f000 8099 	beq.w	8004752 <__ieee754_asinf+0x14a>
 8004620:	dc7f      	bgt.n	8004722 <__ieee754_asinf+0x11a>
 8004622:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004626:	da0e      	bge.n	8004646 <__ieee754_asinf+0x3e>
 8004628:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800462c:	f280 80a0 	bge.w	8004770 <__ieee754_asinf+0x168>
 8004630:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80047dc <__ieee754_asinf+0x1d4>
 8004634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004638:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 800463c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	dc71      	bgt.n	800472a <__ieee754_asinf+0x122>
 8004646:	ee17 0a90 	vmov	r0, s15
 800464a:	f000 fe7d 	bl	8005348 <fabsf>
 800464e:	ee07 0a90 	vmov	s15, r0
 8004652:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
 8004656:	ee38 8ae7 	vsub.f32	s16, s17, s15
 800465a:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800465e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004662:	ed9f 3a5f 	vldr	s6, [pc, #380]	; 80047e0 <__ieee754_asinf+0x1d8>
 8004666:	ed9f 4a5f 	vldr	s8, [pc, #380]	; 80047e4 <__ieee754_asinf+0x1dc>
 800466a:	eddf 3a5f 	vldr	s7, [pc, #380]	; 80047e8 <__ieee754_asinf+0x1e0>
 800466e:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 80047ec <__ieee754_asinf+0x1e4>
 8004672:	eddf 4a5f 	vldr	s9, [pc, #380]	; 80047f0 <__ieee754_asinf+0x1e8>
 8004676:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80047f4 <__ieee754_asinf+0x1ec>
 800467a:	eddf 5a5f 	vldr	s11, [pc, #380]	; 80047f8 <__ieee754_asinf+0x1f0>
 800467e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047fc <__ieee754_asinf+0x1f4>
 8004682:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004800 <__ieee754_asinf+0x1f8>
 8004686:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8004804 <__ieee754_asinf+0x1fc>
 800468a:	eea8 4a03 	vfma.f32	s8, s16, s6
 800468e:	eee8 4a23 	vfma.f32	s9, s16, s7
 8004692:	eea4 5a08 	vfma.f32	s10, s8, s16
 8004696:	eee4 5a88 	vfma.f32	s11, s9, s16
 800469a:	eea5 6a08 	vfma.f32	s12, s10, s16
 800469e:	eea5 7a88 	vfma.f32	s14, s11, s16
 80046a2:	eee6 6a08 	vfma.f32	s13, s12, s16
 80046a6:	eee7 8a08 	vfma.f32	s17, s14, s16
 80046aa:	eee6 7a88 	vfma.f32	s15, s13, s16
 80046ae:	ee18 0a10 	vmov	r0, s16
 80046b2:	eeb0 9a68 	vmov.f32	s18, s17
 80046b6:	ee67 8a88 	vmul.f32	s17, s15, s16
 80046ba:	f000 f9fb 	bl	8004ab4 <__ieee754_sqrtf>
 80046be:	4b52      	ldr	r3, [pc, #328]	; (8004808 <__ieee754_asinf+0x200>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	ee06 0a90 	vmov	s13, r0
 80046c6:	dc35      	bgt.n	8004734 <__ieee754_asinf+0x12c>
 80046c8:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80046cc:	f023 030f 	bic.w	r3, r3, #15
 80046d0:	ee07 3a90 	vmov	s15, r3
 80046d4:	eef1 5a67 	vneg.f32	s11, s15
 80046d8:	eea5 8aa7 	vfma.f32	s16, s11, s15
 80046dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e0:	eec8 8a89 	vdiv.f32	s17, s17, s18
 80046e4:	ee88 8a27 	vdiv.f32	s16, s16, s15
 80046e8:	eddf 7a48 	vldr	s15, [pc, #288]	; 800480c <__ieee754_asinf+0x204>
 80046ec:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004810 <__ieee754_asinf+0x208>
 80046f0:	eeb0 6a00 	vmov.f32	s12, #0
 80046f4:	eee8 7a46 	vfms.f32	s15, s16, s12
 80046f8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80046fc:	eeb0 5a47 	vmov.f32	s10, s14
 8004700:	eea5 5a86 	vfma.f32	s10, s11, s12
 8004704:	eed6 7aa8 	vfnms.f32	s15, s13, s17
 8004708:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800470c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004710:	ecbd 8b04 	vpop	{d8-d9}
 8004714:	2d00      	cmp	r5, #0
 8004716:	bfd8      	it	le
 8004718:	eef1 7a67 	vnegle.f32	s15, s15
 800471c:	ee17 0a90 	vmov	r0, s15
 8004720:	bd38      	pop	{r3, r4, r5, pc}
 8004722:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004726:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 800472a:	ecbd 8b04 	vpop	{d8-d9}
 800472e:	ee17 0a90 	vmov	r0, s15
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	eec8 8a89 	vdiv.f32	s17, s17, s18
 8004738:	eddf 7a36 	vldr	s15, [pc, #216]	; 8004814 <__ieee754_asinf+0x20c>
 800473c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004818 <__ieee754_asinf+0x210>
 8004740:	eee6 6aa8 	vfma.f32	s13, s13, s17
 8004744:	eeb0 6a00 	vmov.f32	s12, #0
 8004748:	eee6 7a86 	vfma.f32	s15, s13, s12
 800474c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004750:	e7de      	b.n	8004710 <__ieee754_asinf+0x108>
 8004752:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800480c <__ieee754_asinf+0x204>
 8004756:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004818 <__ieee754_asinf+0x210>
 800475a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800475e:	ecbd 8b04 	vpop	{d8-d9}
 8004762:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004766:	eef0 7a47 	vmov.f32	s15, s14
 800476a:	ee17 0a90 	vmov	r0, s15
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004774:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 80047e0 <__ieee754_asinf+0x1d8>
 8004778:	ed9f 3a1a 	vldr	s6, [pc, #104]	; 80047e4 <__ieee754_asinf+0x1dc>
 800477c:	ed9f 4a1b 	vldr	s8, [pc, #108]	; 80047ec <__ieee754_asinf+0x1e4>
 8004780:	eddf 2a19 	vldr	s5, [pc, #100]	; 80047e8 <__ieee754_asinf+0x1e0>
 8004784:	eddf 3a1a 	vldr	s7, [pc, #104]	; 80047f0 <__ieee754_asinf+0x1e8>
 8004788:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80047f4 <__ieee754_asinf+0x1ec>
 800478c:	eddf 4a1a 	vldr	s9, [pc, #104]	; 80047f8 <__ieee754_asinf+0x1f0>
 8004790:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 80047fc <__ieee754_asinf+0x1f4>
 8004794:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004800 <__ieee754_asinf+0x1f8>
 8004798:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004804 <__ieee754_asinf+0x1fc>
 800479c:	eea7 3a02 	vfma.f32	s6, s14, s4
 80047a0:	ecbd 8b04 	vpop	{d8-d9}
 80047a4:	eea3 4a07 	vfma.f32	s8, s6, s14
 80047a8:	eee7 3a22 	vfma.f32	s7, s14, s5
 80047ac:	eea4 6a07 	vfma.f32	s12, s8, s14
 80047b0:	eee3 4a87 	vfma.f32	s9, s7, s14
 80047b4:	eea6 5a07 	vfma.f32	s10, s12, s14
 80047b8:	eee4 5a87 	vfma.f32	s11, s9, s14
 80047bc:	eee5 6a07 	vfma.f32	s13, s10, s14
 80047c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x70
 80047c4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80047c8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80047cc:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80047d0:	eee7 7a87 	vfma.f32	s15, s15, s14
 80047d4:	ee17 0a90 	vmov	r0, s15
 80047d8:	bd38      	pop	{r3, r4, r5, pc}
 80047da:	bf00      	nop
 80047dc:	7149f2ca 	.word	0x7149f2ca
 80047e0:	3811ef08 	.word	0x3811ef08
 80047e4:	3a4f7f04 	.word	0x3a4f7f04
 80047e8:	3d9dc62e 	.word	0x3d9dc62e
 80047ec:	bd241146 	.word	0xbd241146
 80047f0:	bf303361 	.word	0xbf303361
 80047f4:	3e4e0aa8 	.word	0x3e4e0aa8
 80047f8:	4001572d 	.word	0x4001572d
 80047fc:	bea6b090 	.word	0xbea6b090
 8004800:	c019d139 	.word	0xc019d139
 8004804:	3e2aaaab 	.word	0x3e2aaaab
 8004808:	3f799999 	.word	0x3f799999
 800480c:	b33bbd2e 	.word	0xb33bbd2e
 8004810:	3f490fdb 	.word	0x3f490fdb
 8004814:	333bbd2e 	.word	0x333bbd2e
 8004818:	3fc90fdb 	.word	0x3fc90fdb

0800481c <__ieee754_rem_pio2f>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4a97      	ldr	r2, [pc, #604]	; (8004a7c <__ieee754_rem_pio2f+0x260>)
 8004820:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004824:	4294      	cmp	r4, r2
 8004826:	b086      	sub	sp, #24
 8004828:	4606      	mov	r6, r0
 800482a:	460d      	mov	r5, r1
 800482c:	dd68      	ble.n	8004900 <__ieee754_rem_pio2f+0xe4>
 800482e:	4a94      	ldr	r2, [pc, #592]	; (8004a80 <__ieee754_rem_pio2f+0x264>)
 8004830:	4294      	cmp	r4, r2
 8004832:	dc1c      	bgt.n	800486e <__ieee754_rem_pio2f+0x52>
 8004834:	2800      	cmp	r0, #0
 8004836:	eddf 7a93 	vldr	s15, [pc, #588]	; 8004a84 <__ieee754_rem_pio2f+0x268>
 800483a:	4a93      	ldr	r2, [pc, #588]	; (8004a88 <__ieee754_rem_pio2f+0x26c>)
 800483c:	f024 040f 	bic.w	r4, r4, #15
 8004840:	ee07 0a10 	vmov	s14, r0
 8004844:	f340 80e2 	ble.w	8004a0c <__ieee754_rem_pio2f+0x1f0>
 8004848:	4294      	cmp	r4, r2
 800484a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800484e:	d067      	beq.n	8004920 <__ieee754_rem_pio2f+0x104>
 8004850:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8004a8c <__ieee754_rem_pio2f+0x270>
 8004854:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004858:	2001      	movs	r0, #1
 800485a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800485e:	edc1 6a00 	vstr	s13, [r1]
 8004862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004866:	edc1 7a01 	vstr	s15, [r1, #4]
 800486a:	b006      	add	sp, #24
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	4a88      	ldr	r2, [pc, #544]	; (8004a90 <__ieee754_rem_pio2f+0x274>)
 8004870:	4294      	cmp	r4, r2
 8004872:	dd67      	ble.n	8004944 <__ieee754_rem_pio2f+0x128>
 8004874:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004878:	da48      	bge.n	800490c <__ieee754_rem_pio2f+0xf0>
 800487a:	15e2      	asrs	r2, r4, #23
 800487c:	3a86      	subs	r2, #134	; 0x86
 800487e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8004882:	ee07 3a10 	vmov	s14, r3
 8004886:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 800488a:	eddf 7a82 	vldr	s15, [pc, #520]	; 8004a94 <__ieee754_rem_pio2f+0x278>
 800488e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004892:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004896:	edcd 6a03 	vstr	s13, [sp, #12]
 800489a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800489e:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 80048a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80048a6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80048aa:	edcd 6a04 	vstr	s13, [sp, #16]
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	edcd 7a05 	vstr	s15, [sp, #20]
 80048be:	f040 80b8 	bne.w	8004a32 <__ieee754_rem_pio2f+0x216>
 80048c2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	bf14      	ite	ne
 80048cc:	2302      	movne	r3, #2
 80048ce:	2301      	moveq	r3, #1
 80048d0:	4971      	ldr	r1, [pc, #452]	; (8004a98 <__ieee754_rem_pio2f+0x27c>)
 80048d2:	2002      	movs	r0, #2
 80048d4:	e88d 0003 	stmia.w	sp, {r0, r1}
 80048d8:	a803      	add	r0, sp, #12
 80048da:	4629      	mov	r1, r5
 80048dc:	f000 f9ca 	bl	8004c74 <__kernel_rem_pio2f>
 80048e0:	2e00      	cmp	r6, #0
 80048e2:	da11      	bge.n	8004908 <__ieee754_rem_pio2f+0xec>
 80048e4:	ed95 7a00 	vldr	s14, [r5]
 80048e8:	edd5 7a01 	vldr	s15, [r5, #4]
 80048ec:	eeb1 7a47 	vneg.f32	s14, s14
 80048f0:	eef1 7a67 	vneg.f32	s15, s15
 80048f4:	4240      	negs	r0, r0
 80048f6:	ed85 7a00 	vstr	s14, [r5]
 80048fa:	edc5 7a01 	vstr	s15, [r5, #4]
 80048fe:	e003      	b.n	8004908 <__ieee754_rem_pio2f+0xec>
 8004900:	2200      	movs	r2, #0
 8004902:	6028      	str	r0, [r5, #0]
 8004904:	604a      	str	r2, [r1, #4]
 8004906:	2000      	movs	r0, #0
 8004908:	b006      	add	sp, #24
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	ee07 0a90 	vmov	s15, r0
 8004910:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004914:	2000      	movs	r0, #0
 8004916:	edc1 7a01 	vstr	s15, [r1, #4]
 800491a:	edc1 7a00 	vstr	s15, [r1]
 800491e:	e7f3      	b.n	8004908 <__ieee754_rem_pio2f+0xec>
 8004920:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004a9c <__ieee754_rem_pio2f+0x280>
 8004924:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004aa0 <__ieee754_rem_pio2f+0x284>
 8004928:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800492c:	2001      	movs	r0, #1
 800492e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004932:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004936:	edc1 6a00 	vstr	s13, [r1]
 800493a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800493e:	edc1 7a01 	vstr	s15, [r1, #4]
 8004942:	e7e1      	b.n	8004908 <__ieee754_rem_pio2f+0xec>
 8004944:	f000 fd00 	bl	8005348 <fabsf>
 8004948:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8004aa4 <__ieee754_rem_pio2f+0x288>
 800494c:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 8004a84 <__ieee754_rem_pio2f+0x268>
 8004950:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004a8c <__ieee754_rem_pio2f+0x270>
 8004954:	ee07 0a10 	vmov	s14, r0
 8004958:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800495c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8004960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004964:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004968:	ee17 0a90 	vmov	r0, s15
 800496c:	eef1 5a46 	vneg.f32	s11, s12
 8004970:	eef0 7a47 	vmov.f32	s15, s14
 8004974:	281f      	cmp	r0, #31
 8004976:	eee5 7a85 	vfma.f32	s15, s11, s10
 800497a:	ee26 7a26 	vmul.f32	s14, s12, s13
 800497e:	dc1d      	bgt.n	80049bc <__ieee754_rem_pio2f+0x1a0>
 8004980:	4a49      	ldr	r2, [pc, #292]	; (8004aa8 <__ieee754_rem_pio2f+0x28c>)
 8004982:	1e41      	subs	r1, r0, #1
 8004984:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8004988:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800498c:	4293      	cmp	r3, r2
 800498e:	d015      	beq.n	80049bc <__ieee754_rem_pio2f+0x1a0>
 8004990:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004994:	edc5 6a00 	vstr	s13, [r5]
 8004998:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800499c:	2e00      	cmp	r6, #0
 800499e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049a2:	edc5 7a01 	vstr	s15, [r5, #4]
 80049a6:	daaf      	bge.n	8004908 <__ieee754_rem_pio2f+0xec>
 80049a8:	eef1 6a66 	vneg.f32	s13, s13
 80049ac:	eef1 7a67 	vneg.f32	s15, s15
 80049b0:	edc5 6a00 	vstr	s13, [r5]
 80049b4:	edc5 7a01 	vstr	s15, [r5, #4]
 80049b8:	4240      	negs	r0, r0
 80049ba:	e7a5      	b.n	8004908 <__ieee754_rem_pio2f+0xec>
 80049bc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80049c0:	15e4      	asrs	r4, r4, #23
 80049c2:	ee16 3a90 	vmov	r3, s13
 80049c6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80049ca:	1ae3      	subs	r3, r4, r3
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	dde1      	ble.n	8004994 <__ieee754_rem_pio2f+0x178>
 80049d0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004a9c <__ieee754_rem_pio2f+0x280>
 80049d4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004aa0 <__ieee754_rem_pio2f+0x284>
 80049d8:	eeb0 5a67 	vmov.f32	s10, s15
 80049dc:	eea5 5a87 	vfma.f32	s10, s11, s14
 80049e0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80049e4:	eee5 7a87 	vfma.f32	s15, s11, s14
 80049e8:	eed6 7a26 	vfnms.f32	s15, s12, s13
 80049ec:	ee75 6a67 	vsub.f32	s13, s10, s15
 80049f0:	eeb0 7a67 	vmov.f32	s14, s15
 80049f4:	ee16 3a90 	vmov	r3, s13
 80049f8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80049fc:	1ae4      	subs	r4, r4, r3
 80049fe:	2c19      	cmp	r4, #25
 8004a00:	dc2c      	bgt.n	8004a5c <__ieee754_rem_pio2f+0x240>
 8004a02:	edc5 6a00 	vstr	s13, [r5]
 8004a06:	eef0 7a45 	vmov.f32	s15, s10
 8004a0a:	e7c5      	b.n	8004998 <__ieee754_rem_pio2f+0x17c>
 8004a0c:	4294      	cmp	r4, r2
 8004a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a12:	d010      	beq.n	8004a36 <__ieee754_rem_pio2f+0x21a>
 8004a14:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a8c <__ieee754_rem_pio2f+0x270>
 8004a18:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a24:	edc1 6a00 	vstr	s13, [r1]
 8004a28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a2c:	edc1 7a01 	vstr	s15, [r1, #4]
 8004a30:	e76a      	b.n	8004908 <__ieee754_rem_pio2f+0xec>
 8004a32:	2303      	movs	r3, #3
 8004a34:	e74c      	b.n	80048d0 <__ieee754_rem_pio2f+0xb4>
 8004a36:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004a9c <__ieee754_rem_pio2f+0x280>
 8004a3a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004aa0 <__ieee754_rem_pio2f+0x284>
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
 8004a46:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004a4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a4e:	edc1 6a00 	vstr	s13, [r1]
 8004a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a56:	edc1 7a01 	vstr	s15, [r1, #4]
 8004a5a:	e755      	b.n	8004908 <__ieee754_rem_pio2f+0xec>
 8004a5c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004aac <__ieee754_rem_pio2f+0x290>
 8004a60:	eddf 4a13 	vldr	s9, [pc, #76]	; 8004ab0 <__ieee754_rem_pio2f+0x294>
 8004a64:	eef0 7a45 	vmov.f32	s15, s10
 8004a68:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8004a6c:	ee35 7a67 	vsub.f32	s14, s10, s15
 8004a70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004a74:	ee96 7a24 	vfnms.f32	s14, s12, s9
 8004a78:	e78a      	b.n	8004990 <__ieee754_rem_pio2f+0x174>
 8004a7a:	bf00      	nop
 8004a7c:	3f490fd8 	.word	0x3f490fd8
 8004a80:	4016cbe3 	.word	0x4016cbe3
 8004a84:	3fc90f80 	.word	0x3fc90f80
 8004a88:	3fc90fd0 	.word	0x3fc90fd0
 8004a8c:	37354443 	.word	0x37354443
 8004a90:	43490f80 	.word	0x43490f80
 8004a94:	43800000 	.word	0x43800000
 8004a98:	080064f4 	.word	0x080064f4
 8004a9c:	37354400 	.word	0x37354400
 8004aa0:	2e85a308 	.word	0x2e85a308
 8004aa4:	3f22f984 	.word	0x3f22f984
 8004aa8:	08006474 	.word	0x08006474
 8004aac:	2e85a300 	.word	0x2e85a300
 8004ab0:	248d3132 	.word	0x248d3132

08004ab4 <__ieee754_sqrtf>:
 8004ab4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004ab8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004abc:	b470      	push	{r4, r5, r6}
 8004abe:	ee07 0a90 	vmov	s15, r0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	d232      	bcs.n	8004b2c <__ieee754_sqrtf+0x78>
 8004ac6:	b36a      	cbz	r2, 8004b24 <__ieee754_sqrtf+0x70>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	db41      	blt.n	8004b50 <__ieee754_sqrtf+0x9c>
 8004acc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004ad0:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8004ad4:	d330      	bcc.n	8004b38 <__ieee754_sqrtf+0x84>
 8004ad6:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8004ada:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ade:	07d1      	lsls	r1, r2, #31
 8004ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ae4:	bf48      	it	mi
 8004ae6:	005b      	lslmi	r3, r3, #1
 8004ae8:	2400      	movs	r4, #0
 8004aea:	1056      	asrs	r6, r2, #1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4625      	mov	r5, r4
 8004af0:	2119      	movs	r1, #25
 8004af2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af6:	18a8      	adds	r0, r5, r2
 8004af8:	4298      	cmp	r0, r3
 8004afa:	dc02      	bgt.n	8004b02 <__ieee754_sqrtf+0x4e>
 8004afc:	1a1b      	subs	r3, r3, r0
 8004afe:	1885      	adds	r5, r0, r2
 8004b00:	4414      	add	r4, r2
 8004b02:	3901      	subs	r1, #1
 8004b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b08:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004b0c:	d1f3      	bne.n	8004af6 <__ieee754_sqrtf+0x42>
 8004b0e:	b113      	cbz	r3, 8004b16 <__ieee754_sqrtf+0x62>
 8004b10:	f004 0301 	and.w	r3, r4, #1
 8004b14:	441c      	add	r4, r3
 8004b16:	1064      	asrs	r4, r4, #1
 8004b18:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8004b1c:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	ee17 0a90 	vmov	r0, s15
 8004b28:	bc70      	pop	{r4, r5, r6}
 8004b2a:	4770      	bx	lr
 8004b2c:	eee7 7aa7 	vfma.f32	s15, s15, s15
 8004b30:	bc70      	pop	{r4, r5, r6}
 8004b32:	ee17 0a90 	vmov	r0, s15
 8004b36:	4770      	bx	lr
 8004b38:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8004b3c:	d10d      	bne.n	8004b5a <__ieee754_sqrtf+0xa6>
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	0218      	lsls	r0, r3, #8
 8004b42:	f102 0201 	add.w	r2, r2, #1
 8004b46:	d5fa      	bpl.n	8004b3e <__ieee754_sqrtf+0x8a>
 8004b48:	f1c2 0201 	rsb	r2, r2, #1
 8004b4c:	4411      	add	r1, r2
 8004b4e:	e7c2      	b.n	8004ad6 <__ieee754_sqrtf+0x22>
 8004b50:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004b54:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8004b58:	e7e4      	b.n	8004b24 <__ieee754_sqrtf+0x70>
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4411      	add	r1, r2
 8004b5e:	e7ba      	b.n	8004ad6 <__ieee754_sqrtf+0x22>

08004b60 <__kernel_cosf>:
 8004b60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004b64:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004b68:	ee06 0a10 	vmov	s12, r0
 8004b6c:	ee06 1a90 	vmov	s13, r1
 8004b70:	da2e      	bge.n	8004bd0 <__kernel_cosf+0x70>
 8004b72:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8004b76:	ee17 3a90 	vmov	r3, s15
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d064      	beq.n	8004c48 <__kernel_cosf+0xe8>
 8004b7e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8004b82:	eddf 3a34 	vldr	s7, [pc, #208]	; 8004c54 <__kernel_cosf+0xf4>
 8004b86:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8004c58 <__kernel_cosf+0xf8>
 8004b8a:	eddf 4a34 	vldr	s9, [pc, #208]	; 8004c5c <__kernel_cosf+0xfc>
 8004b8e:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8004c60 <__kernel_cosf+0x100>
 8004b92:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004c64 <__kernel_cosf+0x104>
 8004b96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c68 <__kernel_cosf+0x108>
 8004b9a:	eea7 4a23 	vfma.f32	s8, s14, s7
 8004b9e:	eee4 4a07 	vfma.f32	s9, s8, s14
 8004ba2:	eea4 5a87 	vfma.f32	s10, s9, s14
 8004ba6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8004baa:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004bae:	ee65 5a87 	vmul.f32	s11, s11, s14
 8004bb2:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8004bb6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8004bba:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004bbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004bc2:	eed7 6a06 	vfnms.f32	s13, s14, s12
 8004bc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004bca:	ee17 0a90 	vmov	r0, s15
 8004bce:	4770      	bx	lr
 8004bd0:	ee26 7a06 	vmul.f32	s14, s12, s12
 8004bd4:	eddf 3a1f 	vldr	s7, [pc, #124]	; 8004c54 <__kernel_cosf+0xf4>
 8004bd8:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 8004c58 <__kernel_cosf+0xf8>
 8004bdc:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8004c5c <__kernel_cosf+0xfc>
 8004be0:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004c60 <__kernel_cosf+0x100>
 8004be4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004c64 <__kernel_cosf+0x104>
 8004be8:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8004c68 <__kernel_cosf+0x108>
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <__kernel_cosf+0x10c>)
 8004bee:	eea7 4a23 	vfma.f32	s8, s14, s7
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	eee4 4a07 	vfma.f32	s9, s8, s14
 8004bf8:	eea4 5a87 	vfma.f32	s10, s9, s14
 8004bfc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8004c00:	eee7 5a87 	vfma.f32	s11, s15, s14
 8004c04:	ee65 5a87 	vmul.f32	s11, s11, s14
 8004c08:	ddd3      	ble.n	8004bb2 <__kernel_cosf+0x52>
 8004c0a:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <__kernel_cosf+0x110>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	dc16      	bgt.n	8004c3e <__kernel_cosf+0xde>
 8004c10:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8004c1c:	ee35 5a67 	vsub.f32	s10, s10, s15
 8004c20:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8004c24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8004c28:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004c2c:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8004c30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c34:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004c38:	ee17 0a90 	vmov	r0, s15
 8004c3c:	4770      	bx	lr
 8004c3e:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 8004c42:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 8004c46:	e7eb      	b.n	8004c20 <__kernel_cosf+0xc0>
 8004c48:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004c4c:	ee17 0a90 	vmov	r0, s15
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	ad47d74e 	.word	0xad47d74e
 8004c58:	310f74f6 	.word	0x310f74f6
 8004c5c:	b493f27c 	.word	0xb493f27c
 8004c60:	37d00d01 	.word	0x37d00d01
 8004c64:	bab60b61 	.word	0xbab60b61
 8004c68:	3d2aaaab 	.word	0x3d2aaaab
 8004c6c:	3e999999 	.word	0x3e999999
 8004c70:	3f480000 	.word	0x3f480000

08004c74 <__kernel_rem_pio2f>:
 8004c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c78:	ed2d 8b04 	vpush	{d8-d9}
 8004c7c:	b0d7      	sub	sp, #348	; 0x15c
 8004c7e:	1e5e      	subs	r6, r3, #1
 8004c80:	4ca5      	ldr	r4, [pc, #660]	; (8004f18 <__kernel_rem_pio2f+0x2a4>)
 8004c82:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8004c84:	9302      	str	r3, [sp, #8]
 8004c86:	1ed3      	subs	r3, r2, #3
 8004c88:	bf48      	it	mi
 8004c8a:	1d13      	addmi	r3, r2, #4
 8004c8c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8004c90:	9101      	str	r1, [sp, #4]
 8004c92:	10db      	asrs	r3, r3, #3
 8004c94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c98:	ea6f 0a03 	mvn.w	sl, r3
 8004c9c:	1971      	adds	r1, r6, r5
 8004c9e:	9303      	str	r3, [sp, #12]
 8004ca0:	4681      	mov	r9, r0
 8004ca2:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 8004ca6:	eba3 0306 	sub.w	r3, r3, r6
 8004caa:	d414      	bmi.n	8004cd6 <__kernel_rem_pio2f+0x62>
 8004cac:	4419      	add	r1, r3
 8004cae:	9865      	ldr	r0, [sp, #404]	; 0x194
 8004cb0:	3101      	adds	r1, #1
 8004cb2:	aa1a      	add	r2, sp, #104	; 0x68
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bfaa      	itet	ge
 8004cb8:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8004cbc:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8004f1c <__kernel_rem_pio2f+0x2a8>
 8004cc0:	ee07 4a90 	vmovge	s15, r4
 8004cc4:	f103 0301 	add.w	r3, r3, #1
 8004cc8:	bfa8      	it	ge
 8004cca:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8004cce:	428b      	cmp	r3, r1
 8004cd0:	ece2 7a01 	vstmia	r2!, {s15}
 8004cd4:	d1ee      	bne.n	8004cb4 <__kernel_rem_pio2f+0x40>
 8004cd6:	2d00      	cmp	r5, #0
 8004cd8:	db1a      	blt.n	8004d10 <__kernel_rem_pio2f+0x9c>
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	a91a      	add	r1, sp, #104	; 0x68
 8004cde:	1c6c      	adds	r4, r5, #1
 8004ce0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8004ce4:	a842      	add	r0, sp, #264	; 0x108
 8004ce6:	009f      	lsls	r7, r3, #2
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	f2c0 81ce 	blt.w	800508a <__kernel_rem_pio2f+0x416>
 8004cee:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8004f1c <__kernel_rem_pio2f+0x2a8>
 8004cf2:	464a      	mov	r2, r9
 8004cf4:	19cb      	adds	r3, r1, r7
 8004cf6:	ed33 7a01 	vldmdb	r3!, {s14}
 8004cfa:	ecf2 6a01 	vldmia	r2!, {s13}
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004d04:	d1f7      	bne.n	8004cf6 <__kernel_rem_pio2f+0x82>
 8004d06:	3104      	adds	r1, #4
 8004d08:	42a1      	cmp	r1, r4
 8004d0a:	ece0 7a01 	vstmia	r0!, {s15}
 8004d0e:	d1eb      	bne.n	8004ce8 <__kernel_rem_pio2f+0x74>
 8004d10:	9a02      	ldr	r2, [sp, #8]
 8004d12:	eddf 8a84 	vldr	s17, [pc, #528]	; 8004f24 <__kernel_rem_pio2f+0x2b0>
 8004d16:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8004f20 <__kernel_rem_pio2f+0x2ac>
 8004d1a:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 8004d26:	aa06      	add	r2, sp, #24
 8004d28:	1d1f      	adds	r7, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4417      	add	r7, r2
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004d34:	462c      	mov	r4, r5
 8004d36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d3a:	ab56      	add	r3, sp, #344	; 0x158
 8004d3c:	445b      	add	r3, fp
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 8004d44:	dd19      	ble.n	8004d7a <__kernel_rem_pio2f+0x106>
 8004d46:	a942      	add	r1, sp, #264	; 0x108
 8004d48:	eb01 030b 	add.w	r3, r1, fp
 8004d4c:	aa05      	add	r2, sp, #20
 8004d4e:	ee66 7aa8 	vmul.f32	s15, s13, s17
 8004d52:	eeb0 7a66 	vmov.f32	s14, s13
 8004d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d5a:	ed33 6a01 	vldmdb	r3!, {s12}
 8004d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d62:	428b      	cmp	r3, r1
 8004d64:	eea7 7ac8 	vfms.f32	s14, s15, s16
 8004d68:	ee77 6a86 	vadd.f32	s13, s15, s12
 8004d6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004d70:	ee17 0a10 	vmov	r0, s14
 8004d74:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d78:	d1e9      	bne.n	8004d4e <__kernel_rem_pio2f+0xda>
 8004d7a:	ee16 0a90 	vmov	r0, s13
 8004d7e:	4651      	mov	r1, sl
 8004d80:	f000 fb5a 	bl	8005438 <scalbnf>
 8004d84:	ee09 0a10 	vmov	s18, r0
 8004d88:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 8004d8c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004d90:	ee17 0a90 	vmov	r0, s15
 8004d94:	f000 fadc 	bl	8005350 <floorf>
 8004d98:	ee07 0a10 	vmov	s14, r0
 8004d9c:	eef2 7a00 	vmov.f32	s15, #32
 8004da0:	eea7 9a67 	vfms.f32	s18, s14, s15
 8004da4:	f1ba 0f00 	cmp.w	sl, #0
 8004da8:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 8004dac:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8004db0:	ee39 9a67 	vsub.f32	s18, s18, s15
 8004db4:	f340 814d 	ble.w	8005052 <__kernel_rem_pio2f+0x3de>
 8004db8:	1e61      	subs	r1, r4, #1
 8004dba:	aa06      	add	r2, sp, #24
 8004dbc:	f1ca 0308 	rsb	r3, sl, #8
 8004dc0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004dc4:	fa40 f203 	asr.w	r2, r0, r3
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	f10d 0e18 	add.w	lr, sp, #24
 8004dd0:	1ac3      	subs	r3, r0, r3
 8004dd2:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8004dd6:	ee19 1a90 	vmov	r1, s19
 8004dda:	4411      	add	r1, r2
 8004ddc:	f1ca 0007 	rsb	r0, sl, #7
 8004de0:	ee09 1a90 	vmov	s19, r1
 8004de4:	fa43 fc00 	asr.w	ip, r3, r0
 8004de8:	f1bc 0f00 	cmp.w	ip, #0
 8004dec:	dd37      	ble.n	8004e5e <__kernel_rem_pio2f+0x1ea>
 8004dee:	ee19 3a90 	vmov	r3, s19
 8004df2:	2c00      	cmp	r4, #0
 8004df4:	f103 0301 	add.w	r3, r3, #1
 8004df8:	ee09 3a90 	vmov	s19, r3
 8004dfc:	f340 81de 	ble.w	80051bc <__kernel_rem_pio2f+0x548>
 8004e00:	2200      	movs	r2, #0
 8004e02:	4610      	mov	r0, r2
 8004e04:	a905      	add	r1, sp, #20
 8004e06:	e008      	b.n	8004e1a <__kernel_rem_pio2f+0x1a6>
 8004e08:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8004e0c:	b113      	cbz	r3, 8004e14 <__kernel_rem_pio2f+0x1a0>
 8004e0e:	f8c1 e000 	str.w	lr, [r1]
 8004e12:	2001      	movs	r0, #1
 8004e14:	3201      	adds	r2, #1
 8004e16:	4294      	cmp	r4, r2
 8004e18:	dd0b      	ble.n	8004e32 <__kernel_rem_pio2f+0x1be>
 8004e1a:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d0f2      	beq.n	8004e08 <__kernel_rem_pio2f+0x194>
 8004e22:	3201      	adds	r2, #1
 8004e24:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004e28:	4294      	cmp	r4, r2
 8004e2a:	600b      	str	r3, [r1, #0]
 8004e2c:	f04f 0001 	mov.w	r0, #1
 8004e30:	dcf3      	bgt.n	8004e1a <__kernel_rem_pio2f+0x1a6>
 8004e32:	f1ba 0f00 	cmp.w	sl, #0
 8004e36:	dd0f      	ble.n	8004e58 <__kernel_rem_pio2f+0x1e4>
 8004e38:	f1ba 0f01 	cmp.w	sl, #1
 8004e3c:	f000 8111 	beq.w	8005062 <__kernel_rem_pio2f+0x3ee>
 8004e40:	f1ba 0f02 	cmp.w	sl, #2
 8004e44:	d108      	bne.n	8004e58 <__kernel_rem_pio2f+0x1e4>
 8004e46:	1e62      	subs	r2, r4, #1
 8004e48:	ab06      	add	r3, sp, #24
 8004e4a:	a906      	add	r1, sp, #24
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004e58:	f1bc 0f02 	cmp.w	ip, #2
 8004e5c:	d064      	beq.n	8004f28 <__kernel_rem_pio2f+0x2b4>
 8004e5e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e66:	d177      	bne.n	8004f58 <__kernel_rem_pio2f+0x2e4>
 8004e68:	1e63      	subs	r3, r4, #1
 8004e6a:	429d      	cmp	r5, r3
 8004e6c:	dc0b      	bgt.n	8004e86 <__kernel_rem_pio2f+0x212>
 8004e6e:	aa06      	add	r2, sp, #24
 8004e70:	4493      	add	fp, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8004e78:	45bb      	cmp	fp, r7
 8004e7a:	ea42 0201 	orr.w	r2, r2, r1
 8004e7e:	d1f9      	bne.n	8004e74 <__kernel_rem_pio2f+0x200>
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	f040 8185 	bne.w	8005190 <__kernel_rem_pio2f+0x51c>
 8004e86:	1e6b      	subs	r3, r5, #1
 8004e88:	aa06      	add	r2, sp, #24
 8004e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8191 	bne.w	80051b6 <__kernel_rem_pio2f+0x542>
 8004e94:	9b04      	ldr	r3, [sp, #16]
 8004e96:	f04f 0c01 	mov.w	ip, #1
 8004e9a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004e9e:	f10c 0c01 	add.w	ip, ip, #1
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	d0f9      	beq.n	8004e9a <__kernel_rem_pio2f+0x226>
 8004ea6:	44a4      	add	ip, r4
 8004ea8:	1c63      	adds	r3, r4, #1
 8004eaa:	4563      	cmp	r3, ip
 8004eac:	dc31      	bgt.n	8004f12 <__kernel_rem_pio2f+0x29e>
 8004eae:	9a03      	ldr	r2, [sp, #12]
 8004eb0:	eb03 0e02 	add.w	lr, r3, r2
 8004eb4:	9a02      	ldr	r2, [sp, #8]
 8004eb6:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8004eba:	18a0      	adds	r0, r4, r2
 8004ebc:	eb0c 0b02 	add.w	fp, ip, r2
 8004ec0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8004ec2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004ec6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8004eca:	aa1a      	add	r2, sp, #104	; 0x68
 8004ecc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8004ed0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004ed4:	aa42      	add	r2, sp, #264	; 0x108
 8004ed6:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8004eda:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	ece0 7a01 	vstmia	r0!, {s15}
 8004eec:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004f1c <__kernel_rem_pio2f+0x2a8>
 8004ef0:	db0b      	blt.n	8004f0a <__kernel_rem_pio2f+0x296>
 8004ef2:	464a      	mov	r2, r9
 8004ef4:	eb00 0108 	add.w	r1, r0, r8
 8004ef8:	4603      	mov	r3, r0
 8004efa:	ed33 7a01 	vldmdb	r3!, {s14}
 8004efe:	ecf2 6a01 	vldmia	r2!, {s13}
 8004f02:	428b      	cmp	r3, r1
 8004f04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004f08:	d1f7      	bne.n	8004efa <__kernel_rem_pio2f+0x286>
 8004f0a:	4558      	cmp	r0, fp
 8004f0c:	ece4 7a01 	vstmia	r4!, {s15}
 8004f10:	d1e3      	bne.n	8004eda <__kernel_rem_pio2f+0x266>
 8004f12:	4664      	mov	r4, ip
 8004f14:	e70f      	b.n	8004d36 <__kernel_rem_pio2f+0xc2>
 8004f16:	bf00      	nop
 8004f18:	0800680c 	.word	0x0800680c
 8004f1c:	00000000 	.word	0x00000000
 8004f20:	43800000 	.word	0x43800000
 8004f24:	3b800000 	.word	0x3b800000
 8004f28:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004f2c:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d094      	beq.n	8004e5e <__kernel_rem_pio2f+0x1ea>
 8004f34:	ee17 0a90 	vmov	r0, s15
 8004f38:	4651      	mov	r1, sl
 8004f3a:	f8cd c014 	str.w	ip, [sp, #20]
 8004f3e:	f000 fa7b 	bl	8005438 <scalbnf>
 8004f42:	ee07 0a90 	vmov	s15, r0
 8004f46:	ee39 9a67 	vsub.f32	s18, s18, s15
 8004f4a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004f4e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	d087      	beq.n	8004e68 <__kernel_rem_pio2f+0x1f4>
 8004f58:	ee19 0a10 	vmov	r0, s18
 8004f5c:	f1ca 0100 	rsb	r1, sl, #0
 8004f60:	f8cd c008 	str.w	ip, [sp, #8]
 8004f64:	f000 fa68 	bl	8005438 <scalbnf>
 8004f68:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8004f20 <__kernel_rem_pio2f+0x2ac>
 8004f6c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004f70:	ee07 0a10 	vmov	s14, r0
 8004f74:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7c:	f2c0 8181 	blt.w	8005282 <__kernel_rem_pio2f+0x60e>
 8004f80:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 8004f24 <__kernel_rem_pio2f+0x2b0>
 8004f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f88:	a906      	add	r1, sp, #24
 8004f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f8e:	1c63      	adds	r3, r4, #1
 8004f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f94:	f10a 0a08 	add.w	sl, sl, #8
 8004f98:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004fa4:	ee17 2a10 	vmov	r2, s14
 8004fa8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004fac:	ee17 2a90 	vmov	r2, s15
 8004fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004fba:	9303      	str	r3, [sp, #12]
 8004fbc:	f8cd c008 	str.w	ip, [sp, #8]
 8004fc0:	f000 fa3a 	bl	8005438 <scalbnf>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	ee07 0a10 	vmov	s14, r0
 8004fd0:	f2c0 80c2 	blt.w	8005158 <__kernel_rem_pio2f+0x4e4>
 8004fd4:	1c5f      	adds	r7, r3, #1
 8004fd6:	00ba      	lsls	r2, r7, #2
 8004fd8:	a842      	add	r0, sp, #264	; 0x108
 8004fda:	a906      	add	r1, sp, #24
 8004fdc:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 8004f24 <__kernel_rem_pio2f+0x2b0>
 8004fe0:	4411      	add	r1, r2
 8004fe2:	1886      	adds	r6, r0, r2
 8004fe4:	ed71 7a01 	vldmdb	r1!, {s15}
 8004fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ff0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ff4:	ed66 7a01 	vstmdb	r6!, {s15}
 8004ff8:	4286      	cmp	r6, r0
 8004ffa:	d1f3      	bne.n	8004fe4 <__kernel_rem_pio2f+0x370>
 8004ffc:	3a04      	subs	r2, #4
 8004ffe:	4416      	add	r6, r2
 8005000:	2400      	movs	r4, #0
 8005002:	2d00      	cmp	r5, #0
 8005004:	f2c0 80a5 	blt.w	8005152 <__kernel_rem_pio2f+0x4de>
 8005008:	2c00      	cmp	r4, #0
 800500a:	f2c0 80a2 	blt.w	8005152 <__kernel_rem_pio2f+0x4de>
 800500e:	48a1      	ldr	r0, [pc, #644]	; (8005294 <__kernel_rem_pio2f+0x620>)
 8005010:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8005298 <__kernel_rem_pio2f+0x624>
 8005014:	4631      	mov	r1, r6
 8005016:	2200      	movs	r2, #0
 8005018:	e001      	b.n	800501e <__kernel_rem_pio2f+0x3aa>
 800501a:	42a2      	cmp	r2, r4
 800501c:	dc08      	bgt.n	8005030 <__kernel_rem_pio2f+0x3bc>
 800501e:	ecf0 6a01 	vldmia	r0!, {s13}
 8005022:	ecb1 7a01 	vldmia	r1!, {s14}
 8005026:	3201      	adds	r2, #1
 8005028:	4295      	cmp	r5, r2
 800502a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800502e:	daf4      	bge.n	800501a <__kernel_rem_pio2f+0x3a6>
 8005030:	aa56      	add	r2, sp, #344	; 0x158
 8005032:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005036:	3401      	adds	r4, #1
 8005038:	42bc      	cmp	r4, r7
 800503a:	f1a6 0604 	sub.w	r6, r6, #4
 800503e:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005042:	d1de      	bne.n	8005002 <__kernel_rem_pio2f+0x38e>
 8005044:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005046:	2a03      	cmp	r2, #3
 8005048:	d865      	bhi.n	8005116 <__kernel_rem_pio2f+0x4a2>
 800504a:	e8df f002 	tbb	[pc, r2]
 800504e:	3a6d      	.short	0x3a6d
 8005050:	b93a      	.short	0xb93a
 8005052:	d110      	bne.n	8005076 <__kernel_rem_pio2f+0x402>
 8005054:	1e63      	subs	r3, r4, #1
 8005056:	aa06      	add	r2, sp, #24
 8005058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8005060:	e6c2      	b.n	8004de8 <__kernel_rem_pio2f+0x174>
 8005062:	1e62      	subs	r2, r4, #1
 8005064:	ab06      	add	r3, sp, #24
 8005066:	a906      	add	r1, sp, #24
 8005068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005074:	e6f0      	b.n	8004e58 <__kernel_rem_pio2f+0x1e4>
 8005076:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800507a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	da0b      	bge.n	800509c <__kernel_rem_pio2f+0x428>
 8005084:	f04f 0c00 	mov.w	ip, #0
 8005088:	e6e9      	b.n	8004e5e <__kernel_rem_pio2f+0x1ea>
 800508a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8005298 <__kernel_rem_pio2f+0x624>
 800508e:	3104      	adds	r1, #4
 8005090:	42a1      	cmp	r1, r4
 8005092:	ece0 7a01 	vstmia	r0!, {s15}
 8005096:	f47f ae27 	bne.w	8004ce8 <__kernel_rem_pio2f+0x74>
 800509a:	e639      	b.n	8004d10 <__kernel_rem_pio2f+0x9c>
 800509c:	ee19 3a90 	vmov	r3, s19
 80050a0:	2c00      	cmp	r4, #0
 80050a2:	f103 0301 	add.w	r3, r3, #1
 80050a6:	ee09 3a90 	vmov	s19, r3
 80050aa:	bfc8      	it	gt
 80050ac:	f04f 0c02 	movgt.w	ip, #2
 80050b0:	f73f aea6 	bgt.w	8004e00 <__kernel_rem_pio2f+0x18c>
 80050b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80050b8:	ee37 9ac9 	vsub.f32	s18, s15, s18
 80050bc:	f04f 0c02 	mov.w	ip, #2
 80050c0:	e6cd      	b.n	8004e5e <__kernel_rem_pio2f+0x1ea>
 80050c2:	aa2e      	add	r2, sp, #184	; 0xb8
 80050c4:	eddf 7a74 	vldr	s15, [pc, #464]	; 8005298 <__kernel_rem_pio2f+0x624>
 80050c8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80050cc:	ed37 7a01 	vldmdb	r7!, {s14}
 80050d0:	4297      	cmp	r7, r2
 80050d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050d6:	d1f9      	bne.n	80050cc <__kernel_rem_pio2f+0x458>
 80050d8:	f1bc 0f00 	cmp.w	ip, #0
 80050dc:	d048      	beq.n	8005170 <__kernel_rem_pio2f+0x4fc>
 80050de:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80050e2:	9a01      	ldr	r2, [sp, #4]
 80050e4:	eeb1 7a67 	vneg.f32	s14, s15
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80050ee:	ed82 7a00 	vstr	s14, [r2]
 80050f2:	dd0b      	ble.n	800510c <__kernel_rem_pio2f+0x498>
 80050f4:	a92f      	add	r1, sp, #188	; 0xbc
 80050f6:	2201      	movs	r2, #1
 80050f8:	ecb1 7a01 	vldmia	r1!, {s14}
 80050fc:	3201      	adds	r2, #1
 80050fe:	4293      	cmp	r3, r2
 8005100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005104:	daf8      	bge.n	80050f8 <__kernel_rem_pio2f+0x484>
 8005106:	f1bc 0f00 	cmp.w	ip, #0
 800510a:	d001      	beq.n	8005110 <__kernel_rem_pio2f+0x49c>
 800510c:	eef1 7a67 	vneg.f32	s15, s15
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	edc3 7a01 	vstr	s15, [r3, #4]
 8005116:	ee19 3a90 	vmov	r3, s19
 800511a:	f003 0007 	and.w	r0, r3, #7
 800511e:	b057      	add	sp, #348	; 0x15c
 8005120:	ecbd 8b04 	vpop	{d8-d9}
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	aa2e      	add	r2, sp, #184	; 0xb8
 800512a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005298 <__kernel_rem_pio2f+0x624>
 800512e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005132:	ed37 7a01 	vldmdb	r7!, {s14}
 8005136:	3b01      	subs	r3, #1
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800513e:	d1f8      	bne.n	8005132 <__kernel_rem_pio2f+0x4be>
 8005140:	f1bc 0f00 	cmp.w	ip, #0
 8005144:	d001      	beq.n	800514a <__kernel_rem_pio2f+0x4d6>
 8005146:	eef1 7a67 	vneg.f32	s15, s15
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	edc3 7a00 	vstr	s15, [r3]
 8005150:	e7e1      	b.n	8005116 <__kernel_rem_pio2f+0x4a2>
 8005152:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005298 <__kernel_rem_pio2f+0x624>
 8005156:	e76b      	b.n	8005030 <__kernel_rem_pio2f+0x3bc>
 8005158:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800515a:	2a03      	cmp	r2, #3
 800515c:	d8db      	bhi.n	8005116 <__kernel_rem_pio2f+0x4a2>
 800515e:	e8df f002 	tbb	[pc, r2]
 8005162:	0214      	.short	0x0214
 8005164:	8302      	.short	0x8302
 8005166:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8005298 <__kernel_rem_pio2f+0x624>
 800516a:	f1bc 0f00 	cmp.w	ip, #0
 800516e:	d1b6      	bne.n	80050de <__kernel_rem_pio2f+0x46a>
 8005170:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8005174:	9a01      	ldr	r2, [sp, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	edc2 7a00 	vstr	s15, [r2]
 800517c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005180:	dcb8      	bgt.n	80050f4 <__kernel_rem_pio2f+0x480>
 8005182:	9b01      	ldr	r3, [sp, #4]
 8005184:	edc3 7a01 	vstr	s15, [r3, #4]
 8005188:	e7c5      	b.n	8005116 <__kernel_rem_pio2f+0x4a2>
 800518a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005298 <__kernel_rem_pio2f+0x624>
 800518e:	e7d7      	b.n	8005140 <__kernel_rem_pio2f+0x4cc>
 8005190:	aa06      	add	r2, sp, #24
 8005192:	f1aa 0a08 	sub.w	sl, sl, #8
 8005196:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800519a:	2a00      	cmp	r2, #0
 800519c:	f47f af0a 	bne.w	8004fb4 <__kernel_rem_pio2f+0x340>
 80051a0:	aa06      	add	r2, sp, #24
 80051a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80051a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80051aa:	3b01      	subs	r3, #1
 80051ac:	f1aa 0a08 	sub.w	sl, sl, #8
 80051b0:	2900      	cmp	r1, #0
 80051b2:	d0f8      	beq.n	80051a6 <__kernel_rem_pio2f+0x532>
 80051b4:	e6fe      	b.n	8004fb4 <__kernel_rem_pio2f+0x340>
 80051b6:	f04f 0c01 	mov.w	ip, #1
 80051ba:	e674      	b.n	8004ea6 <__kernel_rem_pio2f+0x232>
 80051bc:	2000      	movs	r0, #0
 80051be:	e638      	b.n	8004e32 <__kernel_rem_pio2f+0x1be>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dd51      	ble.n	8005268 <__kernel_rem_pio2f+0x5f4>
 80051c4:	009a      	lsls	r2, r3, #2
 80051c6:	a956      	add	r1, sp, #344	; 0x158
 80051c8:	4411      	add	r1, r2
 80051ca:	ac2e      	add	r4, sp, #184	; 0xb8
 80051cc:	1d10      	adds	r0, r2, #4
 80051ce:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 80051d2:	4420      	add	r0, r4
 80051d4:	18a1      	adds	r1, r4, r2
 80051d6:	ed71 7a01 	vldmdb	r1!, {s15}
 80051da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80051de:	42a1      	cmp	r1, r4
 80051e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e8:	eeb0 7a66 	vmov.f32	s14, s13
 80051ec:	ed60 7a01 	vstmdb	r0!, {s15}
 80051f0:	edc1 6a00 	vstr	s13, [r1]
 80051f4:	d1ef      	bne.n	80051d6 <__kernel_rem_pio2f+0x562>
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	dd36      	ble.n	8005268 <__kernel_rem_pio2f+0x5f4>
 80051fa:	1d13      	adds	r3, r2, #4
 80051fc:	a856      	add	r0, sp, #344	; 0x158
 80051fe:	4410      	add	r0, r2
 8005200:	440b      	add	r3, r1
 8005202:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 8005206:	440a      	add	r2, r1
 8005208:	a82f      	add	r0, sp, #188	; 0xbc
 800520a:	4619      	mov	r1, r3
 800520c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005210:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005214:	4282      	cmp	r2, r0
 8005216:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800521a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800521e:	eeb0 7a66 	vmov.f32	s14, s13
 8005222:	ed61 7a01 	vstmdb	r1!, {s15}
 8005226:	edc2 6a00 	vstr	s13, [r2]
 800522a:	d1ef      	bne.n	800520c <__kernel_rem_pio2f+0x598>
 800522c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8005298 <__kernel_rem_pio2f+0x624>
 8005230:	aa30      	add	r2, sp, #192	; 0xc0
 8005232:	ed33 7a01 	vldmdb	r3!, {s14}
 8005236:	4293      	cmp	r3, r2
 8005238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800523c:	d1f9      	bne.n	8005232 <__kernel_rem_pio2f+0x5be>
 800523e:	f1bc 0f00 	cmp.w	ip, #0
 8005242:	d016      	beq.n	8005272 <__kernel_rem_pio2f+0x5fe>
 8005244:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005248:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	eef1 7a67 	vneg.f32	s15, s15
 8005252:	eef1 6a66 	vneg.f32	s13, s13
 8005256:	eeb1 7a47 	vneg.f32	s14, s14
 800525a:	edc2 7a02 	vstr	s15, [r2, #8]
 800525e:	edc2 6a00 	vstr	s13, [r2]
 8005262:	ed82 7a01 	vstr	s14, [r2, #4]
 8005266:	e756      	b.n	8005116 <__kernel_rem_pio2f+0x4a2>
 8005268:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005298 <__kernel_rem_pio2f+0x624>
 800526c:	f1bc 0f00 	cmp.w	ip, #0
 8005270:	d1e8      	bne.n	8005244 <__kernel_rem_pio2f+0x5d0>
 8005272:	9801      	ldr	r0, [sp, #4]
 8005274:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005276:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8005278:	edc0 7a02 	vstr	s15, [r0, #8]
 800527c:	6002      	str	r2, [r0, #0]
 800527e:	6043      	str	r3, [r0, #4]
 8005280:	e749      	b.n	8005116 <__kernel_rem_pio2f+0x4a2>
 8005282:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005286:	a906      	add	r1, sp, #24
 8005288:	ee17 2a10 	vmov	r2, s14
 800528c:	4623      	mov	r3, r4
 800528e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8005292:	e68f      	b.n	8004fb4 <__kernel_rem_pio2f+0x340>
 8005294:	08006818 	.word	0x08006818
 8005298:	00000000 	.word	0x00000000

0800529c <__kernel_sinf>:
 800529c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80052a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80052a4:	ee07 0a90 	vmov	s15, r0
 80052a8:	ee06 1a10 	vmov	s12, r1
 80052ac:	da04      	bge.n	80052b8 <__kernel_sinf+0x1c>
 80052ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80052b2:	ee17 3a10 	vmov	r3, s14
 80052b6:	b323      	cbz	r3, 8005302 <__kernel_sinf+0x66>
 80052b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80052bc:	ed9f 4a17 	vldr	s8, [pc, #92]	; 800531c <__kernel_sinf+0x80>
 80052c0:	eddf 4a17 	vldr	s9, [pc, #92]	; 8005320 <__kernel_sinf+0x84>
 80052c4:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8005324 <__kernel_sinf+0x88>
 80052c8:	eddf 5a17 	vldr	s11, [pc, #92]	; 8005328 <__kernel_sinf+0x8c>
 80052cc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800532c <__kernel_sinf+0x90>
 80052d0:	eee7 4a04 	vfma.f32	s9, s14, s8
 80052d4:	ee27 4a27 	vmul.f32	s8, s14, s15
 80052d8:	eea4 5a87 	vfma.f32	s10, s9, s14
 80052dc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80052e0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80052e4:	b182      	cbz	r2, 8005308 <__kernel_sinf+0x6c>
 80052e6:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 80052ea:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 80052ee:	eee6 6a25 	vfma.f32	s13, s12, s11
 80052f2:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8005330 <__kernel_sinf+0x94>
 80052f6:	ee96 6a87 	vfnms.f32	s12, s13, s14
 80052fa:	eea4 6a25 	vfma.f32	s12, s8, s11
 80052fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005302:	ee17 0a90 	vmov	r0, s15
 8005306:	4770      	bx	lr
 8005308:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005334 <__kernel_sinf+0x98>
 800530c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005310:	eee6 7a04 	vfma.f32	s15, s12, s8
 8005314:	ee17 0a90 	vmov	r0, s15
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005320:	b2d72f34 	.word	0xb2d72f34
 8005324:	3638ef1b 	.word	0x3638ef1b
 8005328:	b9500d01 	.word	0xb9500d01
 800532c:	3c088889 	.word	0x3c088889
 8005330:	3e2aaaab 	.word	0x3e2aaaab
 8005334:	be2aaaab 	.word	0xbe2aaaab

08005338 <matherr>:
 8005338:	2000      	movs	r0, #0
 800533a:	4770      	bx	lr

0800533c <nan>:
 800533c:	2000      	movs	r0, #0
 800533e:	4901      	ldr	r1, [pc, #4]	; (8005344 <nan+0x8>)
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	7ff80000 	.word	0x7ff80000

08005348 <fabsf>:
 8005348:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop

08005350 <floorf>:
 8005350:	b410      	push	{r4}
 8005352:	b083      	sub	sp, #12
 8005354:	9001      	str	r0, [sp, #4]
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800535c:	0dcb      	lsrs	r3, r1, #23
 800535e:	3b7f      	subs	r3, #127	; 0x7f
 8005360:	2b16      	cmp	r3, #22
 8005362:	dc19      	bgt.n	8005398 <floorf+0x48>
 8005364:	2b00      	cmp	r3, #0
 8005366:	4614      	mov	r4, r2
 8005368:	db28      	blt.n	80053bc <floorf+0x6c>
 800536a:	4824      	ldr	r0, [pc, #144]	; (80053fc <floorf+0xac>)
 800536c:	4118      	asrs	r0, r3
 800536e:	4210      	tst	r0, r2
 8005370:	d015      	beq.n	800539e <floorf+0x4e>
 8005372:	eddf 7a23 	vldr	s15, [pc, #140]	; 8005400 <floorf+0xb0>
 8005376:	ed9d 7a01 	vldr	s14, [sp, #4]
 800537a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	dd28      	ble.n	80053da <floorf+0x8a>
 8005388:	2a00      	cmp	r2, #0
 800538a:	db29      	blt.n	80053e0 <floorf+0x90>
 800538c:	ea24 0000 	bic.w	r0, r4, r0
 8005390:	b003      	add	sp, #12
 8005392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800539c:	d204      	bcs.n	80053a8 <floorf+0x58>
 800539e:	9801      	ldr	r0, [sp, #4]
 80053a0:	b003      	add	sp, #12
 80053a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	eddd 7a01 	vldr	s15, [sp, #4]
 80053ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053b0:	ee17 0a90 	vmov	r0, s15
 80053b4:	b003      	add	sp, #12
 80053b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005400 <floorf+0xb0>
 80053c0:	ee07 0a10 	vmov	s14, r0
 80053c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	dde5      	ble.n	800539e <floorf+0x4e>
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	db0a      	blt.n	80053ec <floorf+0x9c>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e7e2      	b.n	80053a0 <floorf+0x50>
 80053da:	ee17 0a10 	vmov	r0, s14
 80053de:	e7df      	b.n	80053a0 <floorf+0x50>
 80053e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053e4:	fa42 f303 	asr.w	r3, r2, r3
 80053e8:	441c      	add	r4, r3
 80053ea:	e7cf      	b.n	800538c <floorf+0x3c>
 80053ec:	2900      	cmp	r1, #0
 80053ee:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 80053f2:	bf18      	it	ne
 80053f4:	ee17 0a90 	vmovne	r0, s15
 80053f8:	e7d2      	b.n	80053a0 <floorf+0x50>
 80053fa:	bf00      	nop
 80053fc:	007fffff 	.word	0x007fffff
 8005400:	7149f2ca 	.word	0x7149f2ca

08005404 <__fpclassifyf>:
 8005404:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8005408:	d101      	bne.n	800540e <__fpclassifyf+0xa>
 800540a:	2002      	movs	r0, #2
 800540c:	4770      	bx	lr
 800540e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8005412:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005416:	d201      	bcs.n	800541c <__fpclassifyf+0x18>
 8005418:	2004      	movs	r0, #4
 800541a:	4770      	bx	lr
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <__fpclassifyf+0x30>)
 800541e:	1e42      	subs	r2, r0, #1
 8005420:	429a      	cmp	r2, r3
 8005422:	d801      	bhi.n	8005428 <__fpclassifyf+0x24>
 8005424:	2003      	movs	r0, #3
 8005426:	4770      	bx	lr
 8005428:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 800542c:	fab0 f080 	clz	r0, r0
 8005430:	0940      	lsrs	r0, r0, #5
 8005432:	4770      	bx	lr
 8005434:	007ffffe 	.word	0x007ffffe

08005438 <scalbnf>:
 8005438:	b500      	push	{lr}
 800543a:	ed2d 8b02 	vpush	{d8}
 800543e:	b083      	sub	sp, #12
 8005440:	9001      	str	r0, [sp, #4]
 8005442:	9b01      	ldr	r3, [sp, #4]
 8005444:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005448:	d023      	beq.n	8005492 <scalbnf+0x5a>
 800544a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800544e:	d215      	bcs.n	800547c <scalbnf+0x44>
 8005450:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005454:	d326      	bcc.n	80054a4 <scalbnf+0x6c>
 8005456:	0dd2      	lsrs	r2, r2, #23
 8005458:	440a      	add	r2, r1
 800545a:	2afe      	cmp	r2, #254	; 0xfe
 800545c:	dc3c      	bgt.n	80054d8 <scalbnf+0xa0>
 800545e:	2a00      	cmp	r2, #0
 8005460:	dd30      	ble.n	80054c4 <scalbnf+0x8c>
 8005462:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005466:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	ee17 0a90 	vmov	r0, s15
 8005472:	b003      	add	sp, #12
 8005474:	ecbd 8b02 	vpop	{d8}
 8005478:	f85d fb04 	ldr.w	pc, [sp], #4
 800547c:	ee07 0a90 	vmov	s15, r0
 8005480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005484:	ee17 0a90 	vmov	r0, s15
 8005488:	b003      	add	sp, #12
 800548a:	ecbd 8b02 	vpop	{d8}
 800548e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005492:	eddd 7a01 	vldr	s15, [sp, #4]
 8005496:	ee17 0a90 	vmov	r0, s15
 800549a:	b003      	add	sp, #12
 800549c:	ecbd 8b02 	vpop	{d8}
 80054a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80054a4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80054a8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005524 <scalbnf+0xec>
 80054ac:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <scalbnf+0xf0>)
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	4299      	cmp	r1, r3
 80054b4:	edcd 7a01 	vstr	s15, [sp, #4]
 80054b8:	db20      	blt.n	80054fc <scalbnf+0xc4>
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80054c0:	3a19      	subs	r2, #25
 80054c2:	e7c9      	b.n	8005458 <scalbnf+0x20>
 80054c4:	f112 0f16 	cmn.w	r2, #22
 80054c8:	da1f      	bge.n	800550a <scalbnf+0xd2>
 80054ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80054ce:	4299      	cmp	r1, r3
 80054d0:	dc02      	bgt.n	80054d8 <scalbnf+0xa0>
 80054d2:	ed9f 8a16 	vldr	s16, [pc, #88]	; 800552c <scalbnf+0xf4>
 80054d6:	e001      	b.n	80054dc <scalbnf+0xa4>
 80054d8:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005530 <scalbnf+0xf8>
 80054dc:	9901      	ldr	r1, [sp, #4]
 80054de:	ee18 0a10 	vmov	r0, s16
 80054e2:	f000 f829 	bl	8005538 <copysignf>
 80054e6:	ee07 0a90 	vmov	s15, r0
 80054ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80054ee:	ee17 0a90 	vmov	r0, s15
 80054f2:	b003      	add	sp, #12
 80054f4:	ecbd 8b02 	vpop	{d8}
 80054f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80054fc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800552c <scalbnf+0xf4>
 8005500:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005508:	e7bc      	b.n	8005484 <scalbnf+0x4c>
 800550a:	3219      	adds	r2, #25
 800550c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005510:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005514:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005534 <scalbnf+0xfc>
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005520:	e7b0      	b.n	8005484 <scalbnf+0x4c>
 8005522:	bf00      	nop
 8005524:	4c000000 	.word	0x4c000000
 8005528:	ffff3cb0 	.word	0xffff3cb0
 800552c:	0da24260 	.word	0x0da24260
 8005530:	7149f2ca 	.word	0x7149f2ca
 8005534:	33000000 	.word	0x33000000

08005538 <copysignf>:
 8005538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800553c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005540:	4308      	orrs	r0, r1
 8005542:	4770      	bx	lr

08005544 <__aeabi_drsub>:
 8005544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005548:	e002      	b.n	8005550 <__adddf3>
 800554a:	bf00      	nop

0800554c <__aeabi_dsub>:
 800554c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005550 <__adddf3>:
 8005550:	b530      	push	{r4, r5, lr}
 8005552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800555a:	ea94 0f05 	teq	r4, r5
 800555e:	bf08      	it	eq
 8005560:	ea90 0f02 	teqeq	r0, r2
 8005564:	bf1f      	itttt	ne
 8005566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800556a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800556e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005576:	f000 80e2 	beq.w	800573e <__adddf3+0x1ee>
 800557a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800557e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005582:	bfb8      	it	lt
 8005584:	426d      	neglt	r5, r5
 8005586:	dd0c      	ble.n	80055a2 <__adddf3+0x52>
 8005588:	442c      	add	r4, r5
 800558a:	ea80 0202 	eor.w	r2, r0, r2
 800558e:	ea81 0303 	eor.w	r3, r1, r3
 8005592:	ea82 0000 	eor.w	r0, r2, r0
 8005596:	ea83 0101 	eor.w	r1, r3, r1
 800559a:	ea80 0202 	eor.w	r2, r0, r2
 800559e:	ea81 0303 	eor.w	r3, r1, r3
 80055a2:	2d36      	cmp	r5, #54	; 0x36
 80055a4:	bf88      	it	hi
 80055a6:	bd30      	pophi	{r4, r5, pc}
 80055a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80055ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80055b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80055b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80055b8:	d002      	beq.n	80055c0 <__adddf3+0x70>
 80055ba:	4240      	negs	r0, r0
 80055bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80055c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80055c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80055c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80055cc:	d002      	beq.n	80055d4 <__adddf3+0x84>
 80055ce:	4252      	negs	r2, r2
 80055d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80055d4:	ea94 0f05 	teq	r4, r5
 80055d8:	f000 80a7 	beq.w	800572a <__adddf3+0x1da>
 80055dc:	f1a4 0401 	sub.w	r4, r4, #1
 80055e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80055e4:	db0d      	blt.n	8005602 <__adddf3+0xb2>
 80055e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80055ea:	fa22 f205 	lsr.w	r2, r2, r5
 80055ee:	1880      	adds	r0, r0, r2
 80055f0:	f141 0100 	adc.w	r1, r1, #0
 80055f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80055f8:	1880      	adds	r0, r0, r2
 80055fa:	fa43 f305 	asr.w	r3, r3, r5
 80055fe:	4159      	adcs	r1, r3
 8005600:	e00e      	b.n	8005620 <__adddf3+0xd0>
 8005602:	f1a5 0520 	sub.w	r5, r5, #32
 8005606:	f10e 0e20 	add.w	lr, lr, #32
 800560a:	2a01      	cmp	r2, #1
 800560c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005610:	bf28      	it	cs
 8005612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005616:	fa43 f305 	asr.w	r3, r3, r5
 800561a:	18c0      	adds	r0, r0, r3
 800561c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005624:	d507      	bpl.n	8005636 <__adddf3+0xe6>
 8005626:	f04f 0e00 	mov.w	lr, #0
 800562a:	f1dc 0c00 	rsbs	ip, ip, #0
 800562e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005632:	eb6e 0101 	sbc.w	r1, lr, r1
 8005636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800563a:	d31b      	bcc.n	8005674 <__adddf3+0x124>
 800563c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005640:	d30c      	bcc.n	800565c <__adddf3+0x10c>
 8005642:	0849      	lsrs	r1, r1, #1
 8005644:	ea5f 0030 	movs.w	r0, r0, rrx
 8005648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800564c:	f104 0401 	add.w	r4, r4, #1
 8005650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005658:	f080 809a 	bcs.w	8005790 <__adddf3+0x240>
 800565c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005660:	bf08      	it	eq
 8005662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005666:	f150 0000 	adcs.w	r0, r0, #0
 800566a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800566e:	ea41 0105 	orr.w	r1, r1, r5
 8005672:	bd30      	pop	{r4, r5, pc}
 8005674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005678:	4140      	adcs	r0, r0
 800567a:	eb41 0101 	adc.w	r1, r1, r1
 800567e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005682:	f1a4 0401 	sub.w	r4, r4, #1
 8005686:	d1e9      	bne.n	800565c <__adddf3+0x10c>
 8005688:	f091 0f00 	teq	r1, #0
 800568c:	bf04      	itt	eq
 800568e:	4601      	moveq	r1, r0
 8005690:	2000      	moveq	r0, #0
 8005692:	fab1 f381 	clz	r3, r1
 8005696:	bf08      	it	eq
 8005698:	3320      	addeq	r3, #32
 800569a:	f1a3 030b 	sub.w	r3, r3, #11
 800569e:	f1b3 0220 	subs.w	r2, r3, #32
 80056a2:	da0c      	bge.n	80056be <__adddf3+0x16e>
 80056a4:	320c      	adds	r2, #12
 80056a6:	dd08      	ble.n	80056ba <__adddf3+0x16a>
 80056a8:	f102 0c14 	add.w	ip, r2, #20
 80056ac:	f1c2 020c 	rsb	r2, r2, #12
 80056b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80056b4:	fa21 f102 	lsr.w	r1, r1, r2
 80056b8:	e00c      	b.n	80056d4 <__adddf3+0x184>
 80056ba:	f102 0214 	add.w	r2, r2, #20
 80056be:	bfd8      	it	le
 80056c0:	f1c2 0c20 	rsble	ip, r2, #32
 80056c4:	fa01 f102 	lsl.w	r1, r1, r2
 80056c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80056cc:	bfdc      	itt	le
 80056ce:	ea41 010c 	orrle.w	r1, r1, ip
 80056d2:	4090      	lslle	r0, r2
 80056d4:	1ae4      	subs	r4, r4, r3
 80056d6:	bfa2      	ittt	ge
 80056d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80056dc:	4329      	orrge	r1, r5
 80056de:	bd30      	popge	{r4, r5, pc}
 80056e0:	ea6f 0404 	mvn.w	r4, r4
 80056e4:	3c1f      	subs	r4, #31
 80056e6:	da1c      	bge.n	8005722 <__adddf3+0x1d2>
 80056e8:	340c      	adds	r4, #12
 80056ea:	dc0e      	bgt.n	800570a <__adddf3+0x1ba>
 80056ec:	f104 0414 	add.w	r4, r4, #20
 80056f0:	f1c4 0220 	rsb	r2, r4, #32
 80056f4:	fa20 f004 	lsr.w	r0, r0, r4
 80056f8:	fa01 f302 	lsl.w	r3, r1, r2
 80056fc:	ea40 0003 	orr.w	r0, r0, r3
 8005700:	fa21 f304 	lsr.w	r3, r1, r4
 8005704:	ea45 0103 	orr.w	r1, r5, r3
 8005708:	bd30      	pop	{r4, r5, pc}
 800570a:	f1c4 040c 	rsb	r4, r4, #12
 800570e:	f1c4 0220 	rsb	r2, r4, #32
 8005712:	fa20 f002 	lsr.w	r0, r0, r2
 8005716:	fa01 f304 	lsl.w	r3, r1, r4
 800571a:	ea40 0003 	orr.w	r0, r0, r3
 800571e:	4629      	mov	r1, r5
 8005720:	bd30      	pop	{r4, r5, pc}
 8005722:	fa21 f004 	lsr.w	r0, r1, r4
 8005726:	4629      	mov	r1, r5
 8005728:	bd30      	pop	{r4, r5, pc}
 800572a:	f094 0f00 	teq	r4, #0
 800572e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005732:	bf06      	itte	eq
 8005734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005738:	3401      	addeq	r4, #1
 800573a:	3d01      	subne	r5, #1
 800573c:	e74e      	b.n	80055dc <__adddf3+0x8c>
 800573e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005742:	bf18      	it	ne
 8005744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005748:	d029      	beq.n	800579e <__adddf3+0x24e>
 800574a:	ea94 0f05 	teq	r4, r5
 800574e:	bf08      	it	eq
 8005750:	ea90 0f02 	teqeq	r0, r2
 8005754:	d005      	beq.n	8005762 <__adddf3+0x212>
 8005756:	ea54 0c00 	orrs.w	ip, r4, r0
 800575a:	bf04      	itt	eq
 800575c:	4619      	moveq	r1, r3
 800575e:	4610      	moveq	r0, r2
 8005760:	bd30      	pop	{r4, r5, pc}
 8005762:	ea91 0f03 	teq	r1, r3
 8005766:	bf1e      	ittt	ne
 8005768:	2100      	movne	r1, #0
 800576a:	2000      	movne	r0, #0
 800576c:	bd30      	popne	{r4, r5, pc}
 800576e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005772:	d105      	bne.n	8005780 <__adddf3+0x230>
 8005774:	0040      	lsls	r0, r0, #1
 8005776:	4149      	adcs	r1, r1
 8005778:	bf28      	it	cs
 800577a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800577e:	bd30      	pop	{r4, r5, pc}
 8005780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005784:	bf3c      	itt	cc
 8005786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800578a:	bd30      	popcc	{r4, r5, pc}
 800578c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005798:	f04f 0000 	mov.w	r0, #0
 800579c:	bd30      	pop	{r4, r5, pc}
 800579e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80057a2:	bf1a      	itte	ne
 80057a4:	4619      	movne	r1, r3
 80057a6:	4610      	movne	r0, r2
 80057a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80057ac:	bf1c      	itt	ne
 80057ae:	460b      	movne	r3, r1
 80057b0:	4602      	movne	r2, r0
 80057b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80057b6:	bf06      	itte	eq
 80057b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80057bc:	ea91 0f03 	teqeq	r1, r3
 80057c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80057c4:	bd30      	pop	{r4, r5, pc}
 80057c6:	bf00      	nop

080057c8 <__aeabi_ui2d>:
 80057c8:	f090 0f00 	teq	r0, #0
 80057cc:	bf04      	itt	eq
 80057ce:	2100      	moveq	r1, #0
 80057d0:	4770      	bxeq	lr
 80057d2:	b530      	push	{r4, r5, lr}
 80057d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80057d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80057dc:	f04f 0500 	mov.w	r5, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	e750      	b.n	8005688 <__adddf3+0x138>
 80057e6:	bf00      	nop

080057e8 <__aeabi_i2d>:
 80057e8:	f090 0f00 	teq	r0, #0
 80057ec:	bf04      	itt	eq
 80057ee:	2100      	moveq	r1, #0
 80057f0:	4770      	bxeq	lr
 80057f2:	b530      	push	{r4, r5, lr}
 80057f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80057f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80057fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005800:	bf48      	it	mi
 8005802:	4240      	negmi	r0, r0
 8005804:	f04f 0100 	mov.w	r1, #0
 8005808:	e73e      	b.n	8005688 <__adddf3+0x138>
 800580a:	bf00      	nop

0800580c <__aeabi_f2d>:
 800580c:	0042      	lsls	r2, r0, #1
 800580e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005812:	ea4f 0131 	mov.w	r1, r1, rrx
 8005816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800581a:	bf1f      	itttt	ne
 800581c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005828:	4770      	bxne	lr
 800582a:	f092 0f00 	teq	r2, #0
 800582e:	bf14      	ite	ne
 8005830:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005834:	4770      	bxeq	lr
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	f44f 7460 	mov.w	r4, #896	; 0x380
 800583c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005844:	e720      	b.n	8005688 <__adddf3+0x138>
 8005846:	bf00      	nop

08005848 <__aeabi_ul2d>:
 8005848:	ea50 0201 	orrs.w	r2, r0, r1
 800584c:	bf08      	it	eq
 800584e:	4770      	bxeq	lr
 8005850:	b530      	push	{r4, r5, lr}
 8005852:	f04f 0500 	mov.w	r5, #0
 8005856:	e00a      	b.n	800586e <__aeabi_l2d+0x16>

08005858 <__aeabi_l2d>:
 8005858:	ea50 0201 	orrs.w	r2, r0, r1
 800585c:	bf08      	it	eq
 800585e:	4770      	bxeq	lr
 8005860:	b530      	push	{r4, r5, lr}
 8005862:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005866:	d502      	bpl.n	800586e <__aeabi_l2d+0x16>
 8005868:	4240      	negs	r0, r0
 800586a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800586e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005872:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005876:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800587a:	f43f aedc 	beq.w	8005636 <__adddf3+0xe6>
 800587e:	f04f 0203 	mov.w	r2, #3
 8005882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005886:	bf18      	it	ne
 8005888:	3203      	addne	r2, #3
 800588a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800588e:	bf18      	it	ne
 8005890:	3203      	addne	r2, #3
 8005892:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005896:	f1c2 0320 	rsb	r3, r2, #32
 800589a:	fa00 fc03 	lsl.w	ip, r0, r3
 800589e:	fa20 f002 	lsr.w	r0, r0, r2
 80058a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80058a6:	ea40 000e 	orr.w	r0, r0, lr
 80058aa:	fa21 f102 	lsr.w	r1, r1, r2
 80058ae:	4414      	add	r4, r2
 80058b0:	e6c1      	b.n	8005636 <__adddf3+0xe6>
 80058b2:	bf00      	nop

080058b4 <__aeabi_dmul>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80058ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80058be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80058c2:	bf1d      	ittte	ne
 80058c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80058c8:	ea94 0f0c 	teqne	r4, ip
 80058cc:	ea95 0f0c 	teqne	r5, ip
 80058d0:	f000 f8de 	bleq	8005a90 <__aeabi_dmul+0x1dc>
 80058d4:	442c      	add	r4, r5
 80058d6:	ea81 0603 	eor.w	r6, r1, r3
 80058da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80058de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80058e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80058e6:	bf18      	it	ne
 80058e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80058ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80058f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f4:	d038      	beq.n	8005968 <__aeabi_dmul+0xb4>
 80058f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80058fa:	f04f 0500 	mov.w	r5, #0
 80058fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005902:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005906:	fbe0 e503 	umlal	lr, r5, r0, r3
 800590a:	f04f 0600 	mov.w	r6, #0
 800590e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005912:	f09c 0f00 	teq	ip, #0
 8005916:	bf18      	it	ne
 8005918:	f04e 0e01 	orrne.w	lr, lr, #1
 800591c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005920:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005924:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005928:	d204      	bcs.n	8005934 <__aeabi_dmul+0x80>
 800592a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800592e:	416d      	adcs	r5, r5
 8005930:	eb46 0606 	adc.w	r6, r6, r6
 8005934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800593c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005948:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800594c:	bf88      	it	hi
 800594e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005952:	d81e      	bhi.n	8005992 <__aeabi_dmul+0xde>
 8005954:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005958:	bf08      	it	eq
 800595a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800595e:	f150 0000 	adcs.w	r0, r0, #0
 8005962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800596c:	ea46 0101 	orr.w	r1, r6, r1
 8005970:	ea40 0002 	orr.w	r0, r0, r2
 8005974:	ea81 0103 	eor.w	r1, r1, r3
 8005978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800597c:	bfc2      	ittt	gt
 800597e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005986:	bd70      	popgt	{r4, r5, r6, pc}
 8005988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800598c:	f04f 0e00 	mov.w	lr, #0
 8005990:	3c01      	subs	r4, #1
 8005992:	f300 80ab 	bgt.w	8005aec <__aeabi_dmul+0x238>
 8005996:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800599a:	bfde      	ittt	le
 800599c:	2000      	movle	r0, #0
 800599e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80059a2:	bd70      	pople	{r4, r5, r6, pc}
 80059a4:	f1c4 0400 	rsb	r4, r4, #0
 80059a8:	3c20      	subs	r4, #32
 80059aa:	da35      	bge.n	8005a18 <__aeabi_dmul+0x164>
 80059ac:	340c      	adds	r4, #12
 80059ae:	dc1b      	bgt.n	80059e8 <__aeabi_dmul+0x134>
 80059b0:	f104 0414 	add.w	r4, r4, #20
 80059b4:	f1c4 0520 	rsb	r5, r4, #32
 80059b8:	fa00 f305 	lsl.w	r3, r0, r5
 80059bc:	fa20 f004 	lsr.w	r0, r0, r4
 80059c0:	fa01 f205 	lsl.w	r2, r1, r5
 80059c4:	ea40 0002 	orr.w	r0, r0, r2
 80059c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80059cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80059d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80059d4:	fa21 f604 	lsr.w	r6, r1, r4
 80059d8:	eb42 0106 	adc.w	r1, r2, r6
 80059dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80059e0:	bf08      	it	eq
 80059e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f1c4 040c 	rsb	r4, r4, #12
 80059ec:	f1c4 0520 	rsb	r5, r4, #32
 80059f0:	fa00 f304 	lsl.w	r3, r0, r4
 80059f4:	fa20 f005 	lsr.w	r0, r0, r5
 80059f8:	fa01 f204 	lsl.w	r2, r1, r4
 80059fc:	ea40 0002 	orr.w	r0, r0, r2
 8005a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005a08:	f141 0100 	adc.w	r1, r1, #0
 8005a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a10:	bf08      	it	eq
 8005a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f1c4 0520 	rsb	r5, r4, #32
 8005a1c:	fa00 f205 	lsl.w	r2, r0, r5
 8005a20:	ea4e 0e02 	orr.w	lr, lr, r2
 8005a24:	fa20 f304 	lsr.w	r3, r0, r4
 8005a28:	fa01 f205 	lsl.w	r2, r1, r5
 8005a2c:	ea43 0302 	orr.w	r3, r3, r2
 8005a30:	fa21 f004 	lsr.w	r0, r1, r4
 8005a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a38:	fa21 f204 	lsr.w	r2, r1, r4
 8005a3c:	ea20 0002 	bic.w	r0, r0, r2
 8005a40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005a44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a48:	bf08      	it	eq
 8005a4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
 8005a50:	f094 0f00 	teq	r4, #0
 8005a54:	d10f      	bne.n	8005a76 <__aeabi_dmul+0x1c2>
 8005a56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005a5a:	0040      	lsls	r0, r0, #1
 8005a5c:	eb41 0101 	adc.w	r1, r1, r1
 8005a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005a64:	bf08      	it	eq
 8005a66:	3c01      	subeq	r4, #1
 8005a68:	d0f7      	beq.n	8005a5a <__aeabi_dmul+0x1a6>
 8005a6a:	ea41 0106 	orr.w	r1, r1, r6
 8005a6e:	f095 0f00 	teq	r5, #0
 8005a72:	bf18      	it	ne
 8005a74:	4770      	bxne	lr
 8005a76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005a7a:	0052      	lsls	r2, r2, #1
 8005a7c:	eb43 0303 	adc.w	r3, r3, r3
 8005a80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005a84:	bf08      	it	eq
 8005a86:	3d01      	subeq	r5, #1
 8005a88:	d0f7      	beq.n	8005a7a <__aeabi_dmul+0x1c6>
 8005a8a:	ea43 0306 	orr.w	r3, r3, r6
 8005a8e:	4770      	bx	lr
 8005a90:	ea94 0f0c 	teq	r4, ip
 8005a94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005a98:	bf18      	it	ne
 8005a9a:	ea95 0f0c 	teqne	r5, ip
 8005a9e:	d00c      	beq.n	8005aba <__aeabi_dmul+0x206>
 8005aa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005aa4:	bf18      	it	ne
 8005aa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005aaa:	d1d1      	bne.n	8005a50 <__aeabi_dmul+0x19c>
 8005aac:	ea81 0103 	eor.w	r1, r1, r3
 8005ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}
 8005aba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005abe:	bf06      	itte	eq
 8005ac0:	4610      	moveq	r0, r2
 8005ac2:	4619      	moveq	r1, r3
 8005ac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005ac8:	d019      	beq.n	8005afe <__aeabi_dmul+0x24a>
 8005aca:	ea94 0f0c 	teq	r4, ip
 8005ace:	d102      	bne.n	8005ad6 <__aeabi_dmul+0x222>
 8005ad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005ad4:	d113      	bne.n	8005afe <__aeabi_dmul+0x24a>
 8005ad6:	ea95 0f0c 	teq	r5, ip
 8005ada:	d105      	bne.n	8005ae8 <__aeabi_dmul+0x234>
 8005adc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005ae0:	bf1c      	itt	ne
 8005ae2:	4610      	movne	r0, r2
 8005ae4:	4619      	movne	r1, r3
 8005ae6:	d10a      	bne.n	8005afe <__aeabi_dmul+0x24a>
 8005ae8:	ea81 0103 	eor.w	r1, r1, r3
 8005aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005af0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005af4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005af8:	f04f 0000 	mov.w	r0, #0
 8005afc:	bd70      	pop	{r4, r5, r6, pc}
 8005afe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005b02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005b06:	bd70      	pop	{r4, r5, r6, pc}

08005b08 <__aeabi_ddiv>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005b0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005b12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005b16:	bf1d      	ittte	ne
 8005b18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005b1c:	ea94 0f0c 	teqne	r4, ip
 8005b20:	ea95 0f0c 	teqne	r5, ip
 8005b24:	f000 f8a7 	bleq	8005c76 <__aeabi_ddiv+0x16e>
 8005b28:	eba4 0405 	sub.w	r4, r4, r5
 8005b2c:	ea81 0e03 	eor.w	lr, r1, r3
 8005b30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005b38:	f000 8088 	beq.w	8005c4c <__aeabi_ddiv+0x144>
 8005b3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005b40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005b44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005b48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005b4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005b50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005b54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005b58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005b5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005b60:	429d      	cmp	r5, r3
 8005b62:	bf08      	it	eq
 8005b64:	4296      	cmpeq	r6, r2
 8005b66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005b6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005b6e:	d202      	bcs.n	8005b76 <__aeabi_ddiv+0x6e>
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b76:	1ab6      	subs	r6, r6, r2
 8005b78:	eb65 0503 	sbc.w	r5, r5, r3
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005b86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005b8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8005b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005b92:	bf22      	ittt	cs
 8005b94:	1ab6      	subcs	r6, r6, r2
 8005b96:	4675      	movcs	r5, lr
 8005b98:	ea40 000c 	orrcs.w	r0, r0, ip
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ba2:	ebb6 0e02 	subs.w	lr, r6, r2
 8005ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005baa:	bf22      	ittt	cs
 8005bac:	1ab6      	subcs	r6, r6, r2
 8005bae:	4675      	movcs	r5, lr
 8005bb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bba:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bc2:	bf22      	ittt	cs
 8005bc4:	1ab6      	subcs	r6, r6, r2
 8005bc6:	4675      	movcs	r5, lr
 8005bc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bda:	bf22      	ittt	cs
 8005bdc:	1ab6      	subcs	r6, r6, r2
 8005bde:	4675      	movcs	r5, lr
 8005be0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005be4:	ea55 0e06 	orrs.w	lr, r5, r6
 8005be8:	d018      	beq.n	8005c1c <__aeabi_ddiv+0x114>
 8005bea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005bee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005bf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005bf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005bfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005bfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005c02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005c06:	d1c0      	bne.n	8005b8a <__aeabi_ddiv+0x82>
 8005c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005c0c:	d10b      	bne.n	8005c26 <__aeabi_ddiv+0x11e>
 8005c0e:	ea41 0100 	orr.w	r1, r1, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005c1a:	e7b6      	b.n	8005b8a <__aeabi_ddiv+0x82>
 8005c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005c20:	bf04      	itt	eq
 8005c22:	4301      	orreq	r1, r0
 8005c24:	2000      	moveq	r0, #0
 8005c26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005c2a:	bf88      	it	hi
 8005c2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005c30:	f63f aeaf 	bhi.w	8005992 <__aeabi_dmul+0xde>
 8005c34:	ebb5 0c03 	subs.w	ip, r5, r3
 8005c38:	bf04      	itt	eq
 8005c3a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005c42:	f150 0000 	adcs.w	r0, r0, #0
 8005c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005c50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005c54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005c58:	bfc2      	ittt	gt
 8005c5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005c5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005c62:	bd70      	popgt	{r4, r5, r6, pc}
 8005c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c68:	f04f 0e00 	mov.w	lr, #0
 8005c6c:	3c01      	subs	r4, #1
 8005c6e:	e690      	b.n	8005992 <__aeabi_dmul+0xde>
 8005c70:	ea45 0e06 	orr.w	lr, r5, r6
 8005c74:	e68d      	b.n	8005992 <__aeabi_dmul+0xde>
 8005c76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005c7a:	ea94 0f0c 	teq	r4, ip
 8005c7e:	bf08      	it	eq
 8005c80:	ea95 0f0c 	teqeq	r5, ip
 8005c84:	f43f af3b 	beq.w	8005afe <__aeabi_dmul+0x24a>
 8005c88:	ea94 0f0c 	teq	r4, ip
 8005c8c:	d10a      	bne.n	8005ca4 <__aeabi_ddiv+0x19c>
 8005c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005c92:	f47f af34 	bne.w	8005afe <__aeabi_dmul+0x24a>
 8005c96:	ea95 0f0c 	teq	r5, ip
 8005c9a:	f47f af25 	bne.w	8005ae8 <__aeabi_dmul+0x234>
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	e72c      	b.n	8005afe <__aeabi_dmul+0x24a>
 8005ca4:	ea95 0f0c 	teq	r5, ip
 8005ca8:	d106      	bne.n	8005cb8 <__aeabi_ddiv+0x1b0>
 8005caa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005cae:	f43f aefd 	beq.w	8005aac <__aeabi_dmul+0x1f8>
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	e722      	b.n	8005afe <__aeabi_dmul+0x24a>
 8005cb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005cbc:	bf18      	it	ne
 8005cbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005cc2:	f47f aec5 	bne.w	8005a50 <__aeabi_dmul+0x19c>
 8005cc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005cca:	f47f af0d 	bne.w	8005ae8 <__aeabi_dmul+0x234>
 8005cce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005cd2:	f47f aeeb 	bne.w	8005aac <__aeabi_dmul+0x1f8>
 8005cd6:	e712      	b.n	8005afe <__aeabi_dmul+0x24a>

08005cd8 <__aeabi_d2f>:
 8005cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005ce0:	bf24      	itt	cs
 8005ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005cea:	d90d      	bls.n	8005d08 <__aeabi_d2f+0x30>
 8005cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005d00:	bf08      	it	eq
 8005d02:	f020 0001 	biceq.w	r0, r0, #1
 8005d06:	4770      	bx	lr
 8005d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005d0c:	d121      	bne.n	8005d52 <__aeabi_d2f+0x7a>
 8005d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005d12:	bfbc      	itt	lt
 8005d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005d18:	4770      	bxlt	lr
 8005d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005d22:	f1c2 0218 	rsb	r2, r2, #24
 8005d26:	f1c2 0c20 	rsb	ip, r2, #32
 8005d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8005d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8005d32:	bf18      	it	ne
 8005d34:	f040 0001 	orrne.w	r0, r0, #1
 8005d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005d44:	ea40 000c 	orr.w	r0, r0, ip
 8005d48:	fa23 f302 	lsr.w	r3, r3, r2
 8005d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d50:	e7cc      	b.n	8005cec <__aeabi_d2f+0x14>
 8005d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005d56:	d107      	bne.n	8005d68 <__aeabi_d2f+0x90>
 8005d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005d5c:	bf1e      	ittt	ne
 8005d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005d66:	4770      	bxne	lr
 8005d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <__aeabi_uldivmod>:
 8005d78:	b94b      	cbnz	r3, 8005d8e <__aeabi_uldivmod+0x16>
 8005d7a:	b942      	cbnz	r2, 8005d8e <__aeabi_uldivmod+0x16>
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	bf08      	it	eq
 8005d80:	2800      	cmpeq	r0, #0
 8005d82:	d002      	beq.n	8005d8a <__aeabi_uldivmod+0x12>
 8005d84:	f04f 31ff 	mov.w	r1, #4294967295
 8005d88:	4608      	mov	r0, r1
 8005d8a:	f000 b83b 	b.w	8005e04 <__aeabi_idiv0>
 8005d8e:	b082      	sub	sp, #8
 8005d90:	46ec      	mov	ip, sp
 8005d92:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005d96:	f000 f81d 	bl	8005dd4 <__gnu_uldivmod_helper>
 8005d9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005d9e:	b002      	add	sp, #8
 8005da0:	bc0c      	pop	{r2, r3}
 8005da2:	4770      	bx	lr

08005da4 <__gnu_ldivmod_helper>:
 8005da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da8:	9c06      	ldr	r4, [sp, #24]
 8005daa:	4615      	mov	r5, r2
 8005dac:	4606      	mov	r6, r0
 8005dae:	460f      	mov	r7, r1
 8005db0:	4698      	mov	r8, r3
 8005db2:	f000 f829 	bl	8005e08 <__divdi3>
 8005db6:	fb05 f301 	mul.w	r3, r5, r1
 8005dba:	fb00 3808 	mla	r8, r0, r8, r3
 8005dbe:	fba5 2300 	umull	r2, r3, r5, r0
 8005dc2:	1ab2      	subs	r2, r6, r2
 8005dc4:	4443      	add	r3, r8
 8005dc6:	eb67 0303 	sbc.w	r3, r7, r3
 8005dca:	e9c4 2300 	strd	r2, r3, [r4]
 8005dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd2:	bf00      	nop

08005dd4 <__gnu_uldivmod_helper>:
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	9c06      	ldr	r4, [sp, #24]
 8005dda:	4690      	mov	r8, r2
 8005ddc:	4606      	mov	r6, r0
 8005dde:	460f      	mov	r7, r1
 8005de0:	461d      	mov	r5, r3
 8005de2:	f000 f95f 	bl	80060a4 <__udivdi3>
 8005de6:	fb00 f505 	mul.w	r5, r0, r5
 8005dea:	fba0 2308 	umull	r2, r3, r0, r8
 8005dee:	fb08 5501 	mla	r5, r8, r1, r5
 8005df2:	1ab2      	subs	r2, r6, r2
 8005df4:	442b      	add	r3, r5
 8005df6:	eb67 0303 	sbc.w	r3, r7, r3
 8005dfa:	e9c4 2300 	strd	r2, r3, [r4]
 8005dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e02:	bf00      	nop

08005e04 <__aeabi_idiv0>:
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop

08005e08 <__divdi3>:
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e0e:	f2c0 80a6 	blt.w	8005f5e <__divdi3+0x156>
 8005e12:	2600      	movs	r6, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f2c0 809c 	blt.w	8005f52 <__divdi3+0x14a>
 8005e1a:	4688      	mov	r8, r1
 8005e1c:	4694      	mov	ip, r2
 8005e1e:	469e      	mov	lr, r3
 8005e20:	4615      	mov	r5, r2
 8005e22:	4604      	mov	r4, r0
 8005e24:	460f      	mov	r7, r1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13d      	bne.n	8005ea6 <__divdi3+0x9e>
 8005e2a:	428a      	cmp	r2, r1
 8005e2c:	d959      	bls.n	8005ee2 <__divdi3+0xda>
 8005e2e:	fab2 f382 	clz	r3, r2
 8005e32:	b13b      	cbz	r3, 8005e44 <__divdi3+0x3c>
 8005e34:	f1c3 0220 	rsb	r2, r3, #32
 8005e38:	409f      	lsls	r7, r3
 8005e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8005e3e:	409d      	lsls	r5, r3
 8005e40:	4317      	orrs	r7, r2
 8005e42:	409c      	lsls	r4, r3
 8005e44:	0c29      	lsrs	r1, r5, #16
 8005e46:	0c22      	lsrs	r2, r4, #16
 8005e48:	fbb7 fef1 	udiv	lr, r7, r1
 8005e4c:	b2a8      	uxth	r0, r5
 8005e4e:	fb01 771e 	mls	r7, r1, lr, r7
 8005e52:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005e56:	fb00 f30e 	mul.w	r3, r0, lr
 8005e5a:	42bb      	cmp	r3, r7
 8005e5c:	d90a      	bls.n	8005e74 <__divdi3+0x6c>
 8005e5e:	197f      	adds	r7, r7, r5
 8005e60:	f10e 32ff 	add.w	r2, lr, #4294967295
 8005e64:	f080 8105 	bcs.w	8006072 <__divdi3+0x26a>
 8005e68:	42bb      	cmp	r3, r7
 8005e6a:	f240 8102 	bls.w	8006072 <__divdi3+0x26a>
 8005e6e:	f1ae 0e02 	sub.w	lr, lr, #2
 8005e72:	442f      	add	r7, r5
 8005e74:	1aff      	subs	r7, r7, r3
 8005e76:	b2a4      	uxth	r4, r4
 8005e78:	fbb7 f3f1 	udiv	r3, r7, r1
 8005e7c:	fb01 7713 	mls	r7, r1, r3, r7
 8005e80:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005e84:	fb00 f003 	mul.w	r0, r0, r3
 8005e88:	42b8      	cmp	r0, r7
 8005e8a:	d908      	bls.n	8005e9e <__divdi3+0x96>
 8005e8c:	197f      	adds	r7, r7, r5
 8005e8e:	f103 32ff 	add.w	r2, r3, #4294967295
 8005e92:	f080 80f0 	bcs.w	8006076 <__divdi3+0x26e>
 8005e96:	42b8      	cmp	r0, r7
 8005e98:	f240 80ed 	bls.w	8006076 <__divdi3+0x26e>
 8005e9c:	3b02      	subs	r3, #2
 8005e9e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	e003      	b.n	8005eae <__divdi3+0xa6>
 8005ea6:	428b      	cmp	r3, r1
 8005ea8:	d90f      	bls.n	8005eca <__divdi3+0xc2>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4613      	mov	r3, r2
 8005eae:	1c34      	adds	r4, r6, #0
 8005eb0:	bf18      	it	ne
 8005eb2:	2401      	movne	r4, #1
 8005eb4:	4260      	negs	r0, r4
 8005eb6:	f04f 0500 	mov.w	r5, #0
 8005eba:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8005ebe:	4058      	eors	r0, r3
 8005ec0:	4051      	eors	r1, r2
 8005ec2:	1900      	adds	r0, r0, r4
 8005ec4:	4169      	adcs	r1, r5
 8005ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eca:	fab3 f283 	clz	r2, r3
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	f040 8086 	bne.w	8005fe0 <__divdi3+0x1d8>
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	d302      	bcc.n	8005ede <__divdi3+0xd6>
 8005ed8:	4584      	cmp	ip, r0
 8005eda:	f200 80db 	bhi.w	8006094 <__divdi3+0x28c>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e7e5      	b.n	8005eae <__divdi3+0xa6>
 8005ee2:	b912      	cbnz	r2, 8005eea <__divdi3+0xe2>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	fbb3 f5f2 	udiv	r5, r3, r2
 8005eea:	fab5 f085 	clz	r0, r5
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d13b      	bne.n	8005f6a <__divdi3+0x162>
 8005ef2:	1b78      	subs	r0, r7, r5
 8005ef4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005ef8:	fa1f fc85 	uxth.w	ip, r5
 8005efc:	2201      	movs	r2, #1
 8005efe:	fbb0 f8fe 	udiv	r8, r0, lr
 8005f02:	0c21      	lsrs	r1, r4, #16
 8005f04:	fb0e 0718 	mls	r7, lr, r8, r0
 8005f08:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8005f0c:	fb0c f308 	mul.w	r3, ip, r8
 8005f10:	42bb      	cmp	r3, r7
 8005f12:	d907      	bls.n	8005f24 <__divdi3+0x11c>
 8005f14:	197f      	adds	r7, r7, r5
 8005f16:	f108 31ff 	add.w	r1, r8, #4294967295
 8005f1a:	d202      	bcs.n	8005f22 <__divdi3+0x11a>
 8005f1c:	42bb      	cmp	r3, r7
 8005f1e:	f200 80bd 	bhi.w	800609c <__divdi3+0x294>
 8005f22:	4688      	mov	r8, r1
 8005f24:	1aff      	subs	r7, r7, r3
 8005f26:	b2a4      	uxth	r4, r4
 8005f28:	fbb7 f3fe 	udiv	r3, r7, lr
 8005f2c:	fb0e 7713 	mls	r7, lr, r3, r7
 8005f30:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005f34:	fb0c fc03 	mul.w	ip, ip, r3
 8005f38:	45bc      	cmp	ip, r7
 8005f3a:	d907      	bls.n	8005f4c <__divdi3+0x144>
 8005f3c:	197f      	adds	r7, r7, r5
 8005f3e:	f103 31ff 	add.w	r1, r3, #4294967295
 8005f42:	d202      	bcs.n	8005f4a <__divdi3+0x142>
 8005f44:	45bc      	cmp	ip, r7
 8005f46:	f200 80a7 	bhi.w	8006098 <__divdi3+0x290>
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005f50:	e7ad      	b.n	8005eae <__divdi3+0xa6>
 8005f52:	4252      	negs	r2, r2
 8005f54:	ea6f 0606 	mvn.w	r6, r6
 8005f58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005f5c:	e75d      	b.n	8005e1a <__divdi3+0x12>
 8005f5e:	4240      	negs	r0, r0
 8005f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f64:	f04f 36ff 	mov.w	r6, #4294967295
 8005f68:	e754      	b.n	8005e14 <__divdi3+0xc>
 8005f6a:	f1c0 0220 	rsb	r2, r0, #32
 8005f6e:	fa24 f102 	lsr.w	r1, r4, r2
 8005f72:	fa07 f300 	lsl.w	r3, r7, r0
 8005f76:	4085      	lsls	r5, r0
 8005f78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005f7c:	40d7      	lsrs	r7, r2
 8005f7e:	4319      	orrs	r1, r3
 8005f80:	fbb7 f2fe 	udiv	r2, r7, lr
 8005f84:	0c0b      	lsrs	r3, r1, #16
 8005f86:	fb0e 7712 	mls	r7, lr, r2, r7
 8005f8a:	fa1f fc85 	uxth.w	ip, r5
 8005f8e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f92:	fb0c f702 	mul.w	r7, ip, r2
 8005f96:	429f      	cmp	r7, r3
 8005f98:	fa04 f400 	lsl.w	r4, r4, r0
 8005f9c:	d907      	bls.n	8005fae <__divdi3+0x1a6>
 8005f9e:	195b      	adds	r3, r3, r5
 8005fa0:	f102 30ff 	add.w	r0, r2, #4294967295
 8005fa4:	d274      	bcs.n	8006090 <__divdi3+0x288>
 8005fa6:	429f      	cmp	r7, r3
 8005fa8:	d972      	bls.n	8006090 <__divdi3+0x288>
 8005faa:	3a02      	subs	r2, #2
 8005fac:	442b      	add	r3, r5
 8005fae:	1bdf      	subs	r7, r3, r7
 8005fb0:	b289      	uxth	r1, r1
 8005fb2:	fbb7 f8fe 	udiv	r8, r7, lr
 8005fb6:	fb0e 7318 	mls	r3, lr, r8, r7
 8005fba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005fbe:	fb0c f708 	mul.w	r7, ip, r8
 8005fc2:	429f      	cmp	r7, r3
 8005fc4:	d908      	bls.n	8005fd8 <__divdi3+0x1d0>
 8005fc6:	195b      	adds	r3, r3, r5
 8005fc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8005fcc:	d25c      	bcs.n	8006088 <__divdi3+0x280>
 8005fce:	429f      	cmp	r7, r3
 8005fd0:	d95a      	bls.n	8006088 <__divdi3+0x280>
 8005fd2:	f1a8 0802 	sub.w	r8, r8, #2
 8005fd6:	442b      	add	r3, r5
 8005fd8:	1bd8      	subs	r0, r3, r7
 8005fda:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8005fde:	e78e      	b.n	8005efe <__divdi3+0xf6>
 8005fe0:	f1c2 0320 	rsb	r3, r2, #32
 8005fe4:	fa2c f103 	lsr.w	r1, ip, r3
 8005fe8:	fa0e fe02 	lsl.w	lr, lr, r2
 8005fec:	fa20 f703 	lsr.w	r7, r0, r3
 8005ff0:	ea41 0e0e 	orr.w	lr, r1, lr
 8005ff4:	fa08 f002 	lsl.w	r0, r8, r2
 8005ff8:	fa28 f103 	lsr.w	r1, r8, r3
 8005ffc:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8006000:	4338      	orrs	r0, r7
 8006002:	fbb1 f8f5 	udiv	r8, r1, r5
 8006006:	0c03      	lsrs	r3, r0, #16
 8006008:	fb05 1118 	mls	r1, r5, r8, r1
 800600c:	fa1f f78e 	uxth.w	r7, lr
 8006010:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8006014:	fb07 f308 	mul.w	r3, r7, r8
 8006018:	428b      	cmp	r3, r1
 800601a:	fa0c fc02 	lsl.w	ip, ip, r2
 800601e:	d909      	bls.n	8006034 <__divdi3+0x22c>
 8006020:	eb11 010e 	adds.w	r1, r1, lr
 8006024:	f108 39ff 	add.w	r9, r8, #4294967295
 8006028:	d230      	bcs.n	800608c <__divdi3+0x284>
 800602a:	428b      	cmp	r3, r1
 800602c:	d92e      	bls.n	800608c <__divdi3+0x284>
 800602e:	f1a8 0802 	sub.w	r8, r8, #2
 8006032:	4471      	add	r1, lr
 8006034:	1ac9      	subs	r1, r1, r3
 8006036:	b280      	uxth	r0, r0
 8006038:	fbb1 f3f5 	udiv	r3, r1, r5
 800603c:	fb05 1113 	mls	r1, r5, r3, r1
 8006040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006044:	fb07 f703 	mul.w	r7, r7, r3
 8006048:	428f      	cmp	r7, r1
 800604a:	d908      	bls.n	800605e <__divdi3+0x256>
 800604c:	eb11 010e 	adds.w	r1, r1, lr
 8006050:	f103 30ff 	add.w	r0, r3, #4294967295
 8006054:	d216      	bcs.n	8006084 <__divdi3+0x27c>
 8006056:	428f      	cmp	r7, r1
 8006058:	d914      	bls.n	8006084 <__divdi3+0x27c>
 800605a:	3b02      	subs	r3, #2
 800605c:	4471      	add	r1, lr
 800605e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006062:	1bc9      	subs	r1, r1, r7
 8006064:	fba3 890c 	umull	r8, r9, r3, ip
 8006068:	4549      	cmp	r1, r9
 800606a:	d309      	bcc.n	8006080 <__divdi3+0x278>
 800606c:	d005      	beq.n	800607a <__divdi3+0x272>
 800606e:	2200      	movs	r2, #0
 8006070:	e71d      	b.n	8005eae <__divdi3+0xa6>
 8006072:	4696      	mov	lr, r2
 8006074:	e6fe      	b.n	8005e74 <__divdi3+0x6c>
 8006076:	4613      	mov	r3, r2
 8006078:	e711      	b.n	8005e9e <__divdi3+0x96>
 800607a:	4094      	lsls	r4, r2
 800607c:	4544      	cmp	r4, r8
 800607e:	d2f6      	bcs.n	800606e <__divdi3+0x266>
 8006080:	3b01      	subs	r3, #1
 8006082:	e7f4      	b.n	800606e <__divdi3+0x266>
 8006084:	4603      	mov	r3, r0
 8006086:	e7ea      	b.n	800605e <__divdi3+0x256>
 8006088:	4688      	mov	r8, r1
 800608a:	e7a5      	b.n	8005fd8 <__divdi3+0x1d0>
 800608c:	46c8      	mov	r8, r9
 800608e:	e7d1      	b.n	8006034 <__divdi3+0x22c>
 8006090:	4602      	mov	r2, r0
 8006092:	e78c      	b.n	8005fae <__divdi3+0x1a6>
 8006094:	4613      	mov	r3, r2
 8006096:	e70a      	b.n	8005eae <__divdi3+0xa6>
 8006098:	3b02      	subs	r3, #2
 800609a:	e757      	b.n	8005f4c <__divdi3+0x144>
 800609c:	f1a8 0802 	sub.w	r8, r8, #2
 80060a0:	442f      	add	r7, r5
 80060a2:	e73f      	b.n	8005f24 <__divdi3+0x11c>

080060a4 <__udivdi3>:
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d144      	bne.n	8006136 <__udivdi3+0x92>
 80060ac:	428a      	cmp	r2, r1
 80060ae:	4615      	mov	r5, r2
 80060b0:	4604      	mov	r4, r0
 80060b2:	d94f      	bls.n	8006154 <__udivdi3+0xb0>
 80060b4:	fab2 f782 	clz	r7, r2
 80060b8:	460e      	mov	r6, r1
 80060ba:	b14f      	cbz	r7, 80060d0 <__udivdi3+0x2c>
 80060bc:	f1c7 0320 	rsb	r3, r7, #32
 80060c0:	40b9      	lsls	r1, r7
 80060c2:	fa20 f603 	lsr.w	r6, r0, r3
 80060c6:	fa02 f507 	lsl.w	r5, r2, r7
 80060ca:	430e      	orrs	r6, r1
 80060cc:	fa00 f407 	lsl.w	r4, r0, r7
 80060d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80060d4:	0c23      	lsrs	r3, r4, #16
 80060d6:	fbb6 f0fe 	udiv	r0, r6, lr
 80060da:	b2af      	uxth	r7, r5
 80060dc:	fb0e 6110 	mls	r1, lr, r0, r6
 80060e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80060e4:	fb07 f100 	mul.w	r1, r7, r0
 80060e8:	4299      	cmp	r1, r3
 80060ea:	d909      	bls.n	8006100 <__udivdi3+0x5c>
 80060ec:	195b      	adds	r3, r3, r5
 80060ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80060f2:	f080 80ec 	bcs.w	80062ce <__udivdi3+0x22a>
 80060f6:	4299      	cmp	r1, r3
 80060f8:	f240 80e9 	bls.w	80062ce <__udivdi3+0x22a>
 80060fc:	3802      	subs	r0, #2
 80060fe:	442b      	add	r3, r5
 8006100:	1a5a      	subs	r2, r3, r1
 8006102:	b2a4      	uxth	r4, r4
 8006104:	fbb2 f3fe 	udiv	r3, r2, lr
 8006108:	fb0e 2213 	mls	r2, lr, r3, r2
 800610c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8006110:	fb07 f703 	mul.w	r7, r7, r3
 8006114:	4297      	cmp	r7, r2
 8006116:	d908      	bls.n	800612a <__udivdi3+0x86>
 8006118:	1952      	adds	r2, r2, r5
 800611a:	f103 31ff 	add.w	r1, r3, #4294967295
 800611e:	f080 80d8 	bcs.w	80062d2 <__udivdi3+0x22e>
 8006122:	4297      	cmp	r7, r2
 8006124:	f240 80d5 	bls.w	80062d2 <__udivdi3+0x22e>
 8006128:	3b02      	subs	r3, #2
 800612a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800612e:	2600      	movs	r6, #0
 8006130:	4631      	mov	r1, r6
 8006132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006136:	428b      	cmp	r3, r1
 8006138:	d847      	bhi.n	80061ca <__udivdi3+0x126>
 800613a:	fab3 f683 	clz	r6, r3
 800613e:	2e00      	cmp	r6, #0
 8006140:	d148      	bne.n	80061d4 <__udivdi3+0x130>
 8006142:	428b      	cmp	r3, r1
 8006144:	d302      	bcc.n	800614c <__udivdi3+0xa8>
 8006146:	4282      	cmp	r2, r0
 8006148:	f200 80cd 	bhi.w	80062e6 <__udivdi3+0x242>
 800614c:	2001      	movs	r0, #1
 800614e:	4631      	mov	r1, r6
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006154:	b912      	cbnz	r2, 800615c <__udivdi3+0xb8>
 8006156:	2501      	movs	r5, #1
 8006158:	fbb5 f5f2 	udiv	r5, r5, r2
 800615c:	fab5 f885 	clz	r8, r5
 8006160:	f1b8 0f00 	cmp.w	r8, #0
 8006164:	d177      	bne.n	8006256 <__udivdi3+0x1b2>
 8006166:	1b4a      	subs	r2, r1, r5
 8006168:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800616c:	b2af      	uxth	r7, r5
 800616e:	2601      	movs	r6, #1
 8006170:	fbb2 f0fe 	udiv	r0, r2, lr
 8006174:	0c23      	lsrs	r3, r4, #16
 8006176:	fb0e 2110 	mls	r1, lr, r0, r2
 800617a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800617e:	fb07 f300 	mul.w	r3, r7, r0
 8006182:	428b      	cmp	r3, r1
 8006184:	d907      	bls.n	8006196 <__udivdi3+0xf2>
 8006186:	1949      	adds	r1, r1, r5
 8006188:	f100 32ff 	add.w	r2, r0, #4294967295
 800618c:	d202      	bcs.n	8006194 <__udivdi3+0xf0>
 800618e:	428b      	cmp	r3, r1
 8006190:	f200 80ba 	bhi.w	8006308 <__udivdi3+0x264>
 8006194:	4610      	mov	r0, r2
 8006196:	1ac9      	subs	r1, r1, r3
 8006198:	b2a4      	uxth	r4, r4
 800619a:	fbb1 f3fe 	udiv	r3, r1, lr
 800619e:	fb0e 1113 	mls	r1, lr, r3, r1
 80061a2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80061a6:	fb07 f703 	mul.w	r7, r7, r3
 80061aa:	42a7      	cmp	r7, r4
 80061ac:	d908      	bls.n	80061c0 <__udivdi3+0x11c>
 80061ae:	1964      	adds	r4, r4, r5
 80061b0:	f103 32ff 	add.w	r2, r3, #4294967295
 80061b4:	f080 808f 	bcs.w	80062d6 <__udivdi3+0x232>
 80061b8:	42a7      	cmp	r7, r4
 80061ba:	f240 808c 	bls.w	80062d6 <__udivdi3+0x232>
 80061be:	3b02      	subs	r3, #2
 80061c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80061c4:	4631      	mov	r1, r6
 80061c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ca:	2600      	movs	r6, #0
 80061cc:	4630      	mov	r0, r6
 80061ce:	4631      	mov	r1, r6
 80061d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d4:	f1c6 0420 	rsb	r4, r6, #32
 80061d8:	fa22 f504 	lsr.w	r5, r2, r4
 80061dc:	40b3      	lsls	r3, r6
 80061de:	432b      	orrs	r3, r5
 80061e0:	fa20 fc04 	lsr.w	ip, r0, r4
 80061e4:	fa01 f706 	lsl.w	r7, r1, r6
 80061e8:	fa21 f504 	lsr.w	r5, r1, r4
 80061ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061f0:	ea4c 0707 	orr.w	r7, ip, r7
 80061f4:	fbb5 f8fe 	udiv	r8, r5, lr
 80061f8:	0c39      	lsrs	r1, r7, #16
 80061fa:	fb0e 5518 	mls	r5, lr, r8, r5
 80061fe:	fa1f fc83 	uxth.w	ip, r3
 8006202:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8006206:	fb0c f108 	mul.w	r1, ip, r8
 800620a:	42a9      	cmp	r1, r5
 800620c:	fa02 f206 	lsl.w	r2, r2, r6
 8006210:	d904      	bls.n	800621c <__udivdi3+0x178>
 8006212:	18ed      	adds	r5, r5, r3
 8006214:	f108 34ff 	add.w	r4, r8, #4294967295
 8006218:	d367      	bcc.n	80062ea <__udivdi3+0x246>
 800621a:	46a0      	mov	r8, r4
 800621c:	1a6d      	subs	r5, r5, r1
 800621e:	b2bf      	uxth	r7, r7
 8006220:	fbb5 f4fe 	udiv	r4, r5, lr
 8006224:	fb0e 5514 	mls	r5, lr, r4, r5
 8006228:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800622c:	fb0c fc04 	mul.w	ip, ip, r4
 8006230:	458c      	cmp	ip, r1
 8006232:	d904      	bls.n	800623e <__udivdi3+0x19a>
 8006234:	18c9      	adds	r1, r1, r3
 8006236:	f104 35ff 	add.w	r5, r4, #4294967295
 800623a:	d35c      	bcc.n	80062f6 <__udivdi3+0x252>
 800623c:	462c      	mov	r4, r5
 800623e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8006242:	ebcc 0101 	rsb	r1, ip, r1
 8006246:	fba4 2302 	umull	r2, r3, r4, r2
 800624a:	4299      	cmp	r1, r3
 800624c:	d348      	bcc.n	80062e0 <__udivdi3+0x23c>
 800624e:	d044      	beq.n	80062da <__udivdi3+0x236>
 8006250:	4620      	mov	r0, r4
 8006252:	2600      	movs	r6, #0
 8006254:	e76c      	b.n	8006130 <__udivdi3+0x8c>
 8006256:	f1c8 0420 	rsb	r4, r8, #32
 800625a:	fa01 f308 	lsl.w	r3, r1, r8
 800625e:	fa05 f508 	lsl.w	r5, r5, r8
 8006262:	fa20 f704 	lsr.w	r7, r0, r4
 8006266:	40e1      	lsrs	r1, r4
 8006268:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800626c:	431f      	orrs	r7, r3
 800626e:	fbb1 f6fe 	udiv	r6, r1, lr
 8006272:	0c3a      	lsrs	r2, r7, #16
 8006274:	fb0e 1116 	mls	r1, lr, r6, r1
 8006278:	fa1f fc85 	uxth.w	ip, r5
 800627c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8006280:	fb0c f206 	mul.w	r2, ip, r6
 8006284:	429a      	cmp	r2, r3
 8006286:	fa00 f408 	lsl.w	r4, r0, r8
 800628a:	d907      	bls.n	800629c <__udivdi3+0x1f8>
 800628c:	195b      	adds	r3, r3, r5
 800628e:	f106 31ff 	add.w	r1, r6, #4294967295
 8006292:	d237      	bcs.n	8006304 <__udivdi3+0x260>
 8006294:	429a      	cmp	r2, r3
 8006296:	d935      	bls.n	8006304 <__udivdi3+0x260>
 8006298:	3e02      	subs	r6, #2
 800629a:	442b      	add	r3, r5
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	b2bf      	uxth	r7, r7
 80062a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80062a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80062a8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80062ac:	fb0c f100 	mul.w	r1, ip, r0
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d907      	bls.n	80062c4 <__udivdi3+0x220>
 80062b4:	195b      	adds	r3, r3, r5
 80062b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80062ba:	d221      	bcs.n	8006300 <__udivdi3+0x25c>
 80062bc:	4299      	cmp	r1, r3
 80062be:	d91f      	bls.n	8006300 <__udivdi3+0x25c>
 80062c0:	3802      	subs	r0, #2
 80062c2:	442b      	add	r3, r5
 80062c4:	1a5a      	subs	r2, r3, r1
 80062c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80062ca:	4667      	mov	r7, ip
 80062cc:	e750      	b.n	8006170 <__udivdi3+0xcc>
 80062ce:	4610      	mov	r0, r2
 80062d0:	e716      	b.n	8006100 <__udivdi3+0x5c>
 80062d2:	460b      	mov	r3, r1
 80062d4:	e729      	b.n	800612a <__udivdi3+0x86>
 80062d6:	4613      	mov	r3, r2
 80062d8:	e772      	b.n	80061c0 <__udivdi3+0x11c>
 80062da:	40b0      	lsls	r0, r6
 80062dc:	4290      	cmp	r0, r2
 80062de:	d2b7      	bcs.n	8006250 <__udivdi3+0x1ac>
 80062e0:	1e60      	subs	r0, r4, #1
 80062e2:	2600      	movs	r6, #0
 80062e4:	e724      	b.n	8006130 <__udivdi3+0x8c>
 80062e6:	4630      	mov	r0, r6
 80062e8:	e722      	b.n	8006130 <__udivdi3+0x8c>
 80062ea:	42a9      	cmp	r1, r5
 80062ec:	d995      	bls.n	800621a <__udivdi3+0x176>
 80062ee:	f1a8 0802 	sub.w	r8, r8, #2
 80062f2:	441d      	add	r5, r3
 80062f4:	e792      	b.n	800621c <__udivdi3+0x178>
 80062f6:	458c      	cmp	ip, r1
 80062f8:	d9a0      	bls.n	800623c <__udivdi3+0x198>
 80062fa:	3c02      	subs	r4, #2
 80062fc:	4419      	add	r1, r3
 80062fe:	e79e      	b.n	800623e <__udivdi3+0x19a>
 8006300:	4610      	mov	r0, r2
 8006302:	e7df      	b.n	80062c4 <__udivdi3+0x220>
 8006304:	460e      	mov	r6, r1
 8006306:	e7c9      	b.n	800629c <__udivdi3+0x1f8>
 8006308:	3802      	subs	r0, #2
 800630a:	4429      	add	r1, r5
 800630c:	e743      	b.n	8006196 <__udivdi3+0xf2>
 800630e:	bf00      	nop

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	; (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	200000fc 	.word	0x200000fc

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <__libc_init_array+0x3c>)
 8006320:	4c0e      	ldr	r4, [pc, #56]	; (800635c <__libc_init_array+0x40>)
 8006322:	1ae4      	subs	r4, r4, r3
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2500      	movs	r5, #0
 8006328:	461e      	mov	r6, r3
 800632a:	42a5      	cmp	r5, r4
 800632c:	d004      	beq.n	8006338 <__libc_init_array+0x1c>
 800632e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006332:	4798      	blx	r3
 8006334:	3501      	adds	r5, #1
 8006336:	e7f8      	b.n	800632a <__libc_init_array+0xe>
 8006338:	f7fb fac0 	bl	80018bc <_init>
 800633c:	4c08      	ldr	r4, [pc, #32]	; (8006360 <__libc_init_array+0x44>)
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <__libc_init_array+0x48>)
 8006340:	1ae4      	subs	r4, r4, r3
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	2500      	movs	r5, #0
 8006346:	461e      	mov	r6, r3
 8006348:	42a5      	cmp	r5, r4
 800634a:	d004      	beq.n	8006356 <__libc_init_array+0x3a>
 800634c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006350:	4798      	blx	r3
 8006352:	3501      	adds	r5, #1
 8006354:	e7f8      	b.n	8006348 <__libc_init_array+0x2c>
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	20000100 	.word	0x20000100
 800635c:	20000100 	.word	0x20000100
 8006360:	20000100 	.word	0x20000100
 8006364:	20000100 	.word	0x20000100

08006368 <RS_channel_config>:
 8006368:	0001c200 10010808 00000000              ............

08006374 <RS_tx_pin_config>:
 8006374:	000000d0 00000001 00000004              ............

08006380 <RS_tx_pin>:
 8006380:	48028200 0000000e 08006374              ...H....tc..

0800638c <RS_config>:
 800638c:	08006368 08002075 08003341 080032c1     hc..u ..A3...2..
	...
 80063b0:	08006380 04000001 00000104              .c..........

080063bc <PWM_CCU4_0_timer_handle>:
 80063bc:	00000000 00000005                       ........

080063c4 <PWM_CCU4_0_event0_config>:
 80063c4:	00010000                                ....

080063c8 <PWM_CCU4_0_event1_config>:
 80063c8:	00010000                                ....

080063cc <PWM_CCU4_0_event2_config>:
 80063cc:	00010000                                ....

080063d0 <PWM_CCU4_0_ch1_out0_config>:
 80063d0:	00000098 00010000 00000004              ............

080063dc <PWM_CCU4_0_config_handle>:
 80063dc:	927b0000 0000927c 00000000 00000000     ..{.|...........
 80063ec:	00000000 080063c4 080063c8 080063cc     .....c...c...c..
	...
 8006408:	01000000 00000000 08000000 080063bc     .............c..
 8006418:	00000001 48028100 00000002 080063d0     .......H.....c..
 8006428:	2000005c                                \.. 

0800642c <TIM_IRQ>:
 800642c:	0100032e                                ....

08006430 <LED1>:
 8006430:	48028100 00000080 00010000 00000000     ...H............
 8006440:	00000000 01040250 00010000 00000000     ....P...........
 8006450:	00010000 01010101 736f6361 00000066     ........acosf...
 8006460:	00000000 6e697361 00000066 74727173     ....asinf...sqrt
 8006470:	00000066                                f...

08006474 <npio2_hw>:
 8006474:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8006484:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8006494:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 80064a4:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80064b4:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80064c4:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80064d4:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80064e4:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080064f4 <two_over_pi>:
 80064f4:	000000a2 000000f9 00000083 0000006e     ............n...
 8006504:	0000004e 00000044 00000015 00000029     N...D.......)...
 8006514:	000000fc 00000027 00000057 000000d1     ....'...W.......
 8006524:	000000f5 00000034 000000dd 000000c0     ....4...........
 8006534:	000000db 00000062 00000095 00000099     ....b...........
 8006544:	0000003c 00000043 00000090 00000041     <...C.......A...
 8006554:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8006564:	000000de 000000bb 000000c5 00000061     ............a...
 8006574:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8006584:	00000042 0000004d 000000d2 000000e0     B...M...........
 8006594:	00000006 00000049 0000002e 000000ea     ....I...........
 80065a4:	00000009 000000d1 00000092 0000001c     ................
 80065b4:	000000fe 0000001d 000000eb 0000001c     ................
 80065c4:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80065d4:	000000e8 00000082 00000035 000000f5     ........5.......
 80065e4:	0000002e 000000bb 00000044 00000084     ........D.......
 80065f4:	000000e9 0000009c 00000070 00000026     ........p...&...
 8006604:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 8006614:	00000039 00000091 000000d6 00000039     9...........9...
 8006624:	00000083 00000053 00000039 000000f4     ....S...9.......
 8006634:	0000009c 00000084 0000005f 0000008b     ........_.......
 8006644:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8006654:	0000001f 000000f8 00000097 000000ff     ................
 8006664:	000000de 00000005 00000098 0000000f     ................
 8006674:	000000ef 0000002f 00000011 0000008b     ..../...........
 8006684:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8006694:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80066a4:	00000027 000000cb 00000009 000000b7     '...............
 80066b4:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80066c4:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80066d4:	00000075 00000027 000000ba 000000c7     u...'...........
 80066e4:	000000eb 000000e5 000000f1 0000007b     ............{...
 80066f4:	0000003d 00000007 00000039 000000f7     =.......9.......
 8006704:	0000008a 00000052 00000092 000000ea     ....R...........
 8006714:	0000006b 000000fb 0000005f 000000b1     k......._.......
 8006724:	0000001f 0000008d 0000005d 00000008     ........].......
 8006734:	00000056 00000003 00000030 00000046     V.......0...F...
 8006744:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8006754:	000000f0 000000cf 000000bc 00000020     ............ ...
 8006764:	0000009a 000000f4 00000036 0000001d     ........6.......
 8006774:	000000a9 000000e3 00000091 00000061     ............a...
 8006784:	0000005e 000000e6 0000001b 00000008     ^...............
 8006794:	00000065 00000099 00000085 0000005f     e..........._...
 80067a4:	00000014 000000a0 00000068 00000040     ........h...@...
 80067b4:	0000008d 000000ff 000000d8 00000080     ................
 80067c4:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80067d4:	00000006 00000006 00000015 00000056     ............V...
 80067e4:	000000ca 00000073 000000a8 000000c9     ....s...........
 80067f4:	00000060 000000e2 0000007b 000000c0     `.......{.......
 8006804:	0000008c 0000006b                       ....k...

0800680c <init_jk>:
 800680c:	00000004 00000007 00000009              ............

08006818 <PIo2>:
 8006818:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8006828:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8006838:	1fc40000 1bc60000 17440000 00000043     ..........D.C...
