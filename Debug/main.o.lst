   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.XMC_GPIO_ToggleOutput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_ToggleOutput:
 120              	.LFB166:
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 309 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 139              	 .loc 1 312 0
 140 000c FB78     	 ldrb r3,[r7,#3]
 141 000e 4FF00112 	 mov r2,#65537
 142 0012 9A40     	 lsls r2,r2,r3
 143 0014 7B68     	 ldr r3,[r7,#4]
 144 0016 5A60     	 str r2,[r3,#4]
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 313 0
 146 0018 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001a BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001c 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0020 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE166:
 161 0022 00BF     	 .section .text.UART_IsTxBusy,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	UART_IsTxBusy:
 167              	.LFB267:
 168              	 .file 2 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 169              	 .loc 2 2117 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
 185              	 .loc 2 2119 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 9B68     	 ldr r3,[r3,#8]
 188 000c 1B7E     	 ldrb r3,[r3,#24]
 189 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
 190              	 .loc 2 2120 0
 191 0010 1846     	 mov r0,r3
 192 0012 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0014 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 0016 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001a 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE267:
 207              	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	DIGITAL_IO_SetOutputHigh:
 213              	.LFB269:
 214              	 .file 3 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 215              	 .loc 3 269 0
 216              	 .cfi_startproc
 217              	 
 218              	 
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI25:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI26:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 231              	 .loc 3 271 0
 232 0008 7B68     	 ldr r3,[r7,#4]
 233 000a 1A68     	 ldr r2,[r3]
 234 000c 7B68     	 ldr r3,[r7,#4]
 235 000e 1B7C     	 ldrb r3,[r3,#16]
 236 0010 1046     	 mov r0,r2
 237 0012 1946     	 mov r1,r3
 238 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 239              	 .loc 3 272 0
 240 0018 0837     	 adds r7,r7,#8
 241              	.LCFI27:
 242              	 .cfi_def_cfa_offset 8
 243 001a BD46     	 mov sp,r7
 244              	.LCFI28:
 245              	 .cfi_def_cfa_register 13
 246              	 
 247 001c 80BD     	 pop {r7,pc}
 248              	 .cfi_endproc
 249              	.LFE269:
 251 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 252              	 .align 2
 253              	 .thumb
 254              	 .thumb_func
 256              	DIGITAL_IO_SetOutputLow:
 257              	.LFB270:
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 258              	 .loc 3 316 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 80B5     	 push {r7,lr}
 263              	.LCFI29:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 82B0     	 sub sp,sp,#8
 268              	.LCFI30:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI31:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 274              	 .loc 3 318 0
 275 0008 7B68     	 ldr r3,[r7,#4]
 276 000a 1A68     	 ldr r2,[r3]
 277 000c 7B68     	 ldr r3,[r7,#4]
 278 000e 1B7C     	 ldrb r3,[r3,#16]
 279 0010 1046     	 mov r0,r2
 280 0012 1946     	 mov r1,r3
 281 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 282              	 .loc 3 319 0
 283 0018 0837     	 adds r7,r7,#8
 284              	.LCFI32:
 285              	 .cfi_def_cfa_offset 8
 286 001a BD46     	 mov sp,r7
 287              	.LCFI33:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 001c 80BD     	 pop {r7,pc}
 291              	 .cfi_endproc
 292              	.LFE270:
 294 001e 00BF     	 .section .text.DIGITAL_IO_ToggleOutput,"ax",%progbits
 295              	 .align 2
 296              	 .thumb
 297              	 .thumb_func
 299              	DIGITAL_IO_ToggleOutput:
 300              	.LFB271:
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to Toggle port pin.
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to toggle port pin.
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputLow(), DIGITAL_IO_SetOutputHigh()
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   uint32_t delay_count;;
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 1 -> 0 (if initial output level is logic
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 0 -> 1
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 301              	 .loc 3 368 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305 0000 80B5     	 push {r7,lr}
 306              	.LCFI34:
 307              	 .cfi_def_cfa_offset 8
 308              	 .cfi_offset 7,-8
 309              	 .cfi_offset 14,-4
 310 0002 82B0     	 sub sp,sp,#8
 311              	.LCFI35:
 312              	 .cfi_def_cfa_offset 16
 313 0004 00AF     	 add r7,sp,#0
 314              	.LCFI36:
 315              	 .cfi_def_cfa_register 7
 316 0006 7860     	 str r0,[r7,#4]
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 317              	 .loc 3 370 0
 318 0008 7B68     	 ldr r3,[r7,#4]
 319 000a 1A68     	 ldr r2,[r3]
 320 000c 7B68     	 ldr r3,[r7,#4]
 321 000e 1B7C     	 ldrb r3,[r3,#16]
 322 0010 1046     	 mov r0,r2
 323 0012 1946     	 mov r1,r3
 324 0014 FFF7FEFF 	 bl XMC_GPIO_ToggleOutput
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 325              	 .loc 3 371 0
 326 0018 0837     	 adds r7,r7,#8
 327              	.LCFI37:
 328              	 .cfi_def_cfa_offset 8
 329 001a BD46     	 mov sp,r7
 330              	.LCFI38:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 001c 80BD     	 pop {r7,pc}
 334              	 .cfi_endproc
 335              	.LFE271:
 337              	 .global pi
 338 001e 00BF     	 .section .data.pi,"aw",%progbits
 339              	 .align 2
 342              	pi:
 343 0000 D00F4940 	 .word 1078530000
 344              	 .global l1
 345              	 .section .data.l1,"aw",%progbits
 346              	 .align 2
 349              	l1:
 350 0000 0000C842 	 .word 1120403456
 351              	 .global l2
 352              	 .section .data.l2,"aw",%progbits
 353              	 .align 2
 356              	l2:
 357 0000 00004843 	 .word 1128792064
 358              	 .global d
 359              	 .section .data.d,"aw",%progbits
 360              	 .align 2
 363              	d:
 364 0000 0000B242 	 .word 1118961664
 365              	 .global t
 366              	 .section .bss.t,"aw",%nobits
 367              	 .align 2
 370              	t:
 371 0000 00000000 	 .space 4
 372              	 .global dt
 373              	 .section .data.dt,"aw",%progbits
 374              	 .align 2
 377              	dt:
 378 0000 9A9919BE 	 .word -1105618534
 379              	 .comm rxData,10,4
 380              	 .comm txData,10,4
 381              	 .global adress
 382              	 .section .data.adress,"aw",%progbits
 385              	adress:
 386 0000 EE       	 .byte -18
 387              	 .global rxByte
 388              	 .section .bss.rxByte,"aw",%nobits
 391              	rxByte:
 392 0000 00       	 .space 1
 393              	 .global iterator_wiadomosci
 394              	 .section .bss.iterator_wiadomosci,"aw",%nobits
 397              	iterator_wiadomosci:
 398 0000 00       	 .space 1
 399              	 .global is_delay
 400              	 .section .data.is_delay,"aw",%progbits
 403              	is_delay:
 404 0000 01       	 .byte 1
 405              	 .global init
 406              	 .section .bss.init,"aw",%nobits
 409              	init:
 410 0000 00       	 .space 1
 411              	 .comm motors,352,4
 412              	 .comm Legs,352,4
 413              	 .section .text.delay,"ax",%progbits
 414              	 .align 2
 415              	 .global delay
 416              	 .thumb
 417              	 .thumb_func
 419              	delay:
 420              	.LFB322:
 421              	 .file 4 "../variables.h"
   1:../variables.h **** #define SOF 0xCC			//start of message
   2:../variables.h **** #define EOF 0xDD			//end of message
   3:../variables.h **** #define INIT 0xA1			//init message
   4:../variables.h **** #define CHECK 0xA3		//go no go message
   5:../variables.h **** 
   6:../variables.h **** // kinematics vars
   7:../variables.h **** float pi = 3.14159f;
   8:../variables.h **** float l1 =100;					//length of thight
   9:../variables.h **** float l2 =200;					//length of tibia
  10:../variables.h **** float d =89;					//distance between motors
  11:../variables.h **** float t = 0.0f;					//time of execution
  12:../variables.h **** float dt = -0.15;				//delta t
  13:../variables.h **** 
  14:../variables.h **** //communication vars
  15:../variables.h **** uint8_t rxData[10];								//buffer for incoming messages
  16:../variables.h **** uint8_t txData[10];								//buffer for outgoing messages
  17:../variables.h **** uint8_t adress =0xEE;						//adress of Controller device
  18:../variables.h **** uint8_t rxByte = 0;								//temprorary incoming byte holder
  19:../variables.h **** uint8_t iterator_wiadomosci = 0;	//message iterator
  20:../variables.h **** 
  21:../variables.h **** //other vars
  22:../variables.h **** uint8_t is_delay = 1;							//is on active delay
  23:../variables.h **** uint8_t init = 0;									//is initiated
  24:../variables.h **** 
  25:../variables.h **** struct Motor
  26:../variables.h **** {
  27:../variables.h **** 	uint8_t motor_n;						//driver numbers
  28:../variables.h **** 	uint8_t is_go;								//is motor go
  29:../variables.h **** 	uint8_t adress;							//adresses
  30:../variables.h **** 	int16_t i_net;								//summarized current
  31:../variables.h **** 	int32_t ang_abs;						//absolute angle of the motor
  32:../variables.h **** 	float ang_abs_poprzedni;		//last absolute angle of the motor
  33:../variables.h **** 	float predkosc_silnika;			//motor speed
  34:../variables.h **** 	float ang_abs_rad;					//current motor angle in radians
  35:../variables.h **** 	uint16_t poz_zad;							//commanded motor angle as 16bit unsigned integer
  36:../variables.h **** 	uint16_t ks;										//virtal spring strength
  37:../variables.h **** 	uint16_t kd;									//virtual damper strength
  38:../variables.h **** 	float torque;								//measured Torque on the motors
  39:../variables.h **** 	int32_t teta_int;							//commanded motor angle as 32bit integer
  40:../variables.h **** 	float teta;									//commanded motor angle in radaians
  41:../variables.h **** };
  42:../variables.h **** struct Motor motors[8];
  43:../variables.h **** 
  44:../variables.h **** struct vec2										//floating point 2d vector
  45:../variables.h **** {
  46:../variables.h **** 	float x;
  47:../variables.h **** 	float y;
  48:../variables.h **** };
  49:../variables.h **** struct vec3										//floating point 3d vector
  50:../variables.h **** {
  51:../variables.h **** 	float x;
  52:../variables.h **** 	float y;
  53:../variables.h **** 	float z;
  54:../variables.h **** };
  55:../variables.h **** struct Leg											//structure holding leg parameters
  56:../variables.h **** {
  57:../variables.h **** 	uint8_t motor_L;
  58:../variables.h **** 	uint8_t motor_R;
  59:../variables.h **** 	struct vec2 foot;							//commanded foot position in milimeters in x-y reference frame
  60:../variables.h **** 	struct vec2 real_foot;					//measured foot position in milimeters in x-y reference frame
  61:../variables.h **** 	struct vec2 real_speed;				//measured speed of the foot in x-y referance frame
  62:../variables.h **** 	struct vec2 eF;								//estimated Forces on the foot
  63:../variables.h **** 	float eFY_buffer[5];						// buffer for filtering estimated Y forces
  64:../variables.h **** 	float r0;											//base virtual spring length for Reiberts Hopper
  65:../variables.h **** 	float r0_angle;								//motor  angle in radians to achive r0 position for  Reiberts Hopper
  66:../variables.h **** 	float ksr;											//virtual spring stiffness cooefficient for Reiberts Hopper
  67:../variables.h **** 	float kdr;										//virtual spring damping cooefficient for Reiberts Hopper
  68:../variables.h **** 	float J[2][2];									//Jackobian
  69:../variables.h **** };
  70:../variables.h **** struct Leg Legs[4];
  71:../variables.h **** 
  72:../variables.h **** 
  73:../variables.h **** void delay(uint32_t us)					//active delay
  74:../variables.h **** {
 422              	 .loc 4 74 0
 423              	 .cfi_startproc
 424              	 
 425              	 
 426 0000 80B5     	 push {r7,lr}
 427              	.LCFI39:
 428              	 .cfi_def_cfa_offset 8
 429              	 .cfi_offset 7,-8
 430              	 .cfi_offset 14,-4
 431 0002 82B0     	 sub sp,sp,#8
 432              	.LCFI40:
 433              	 .cfi_def_cfa_offset 16
 434 0004 00AF     	 add r7,sp,#0
 435              	.LCFI41:
 436              	 .cfi_def_cfa_register 7
 437 0006 7860     	 str r0,[r7,#4]
  75:../variables.h **** 	us *= 100;
 438              	 .loc 4 75 0
 439 0008 7B68     	 ldr r3,[r7,#4]
 440 000a 6422     	 movs r2,#100
 441 000c 02FB03F3 	 mul r3,r2,r3
 442 0010 7B60     	 str r3,[r7,#4]
  76:../variables.h **** 	is_delay = 1;
 443              	 .loc 4 76 0
 444 0012 0A4B     	 ldr r3,.L11
 445 0014 0122     	 movs r2,#1
 446 0016 1A70     	 strb r2,[r3]
  77:../variables.h **** 	TIMER_SetTimeInterval(&DELAY, us);
 447              	 .loc 4 77 0
 448 0018 0948     	 ldr r0,.L11+4
 449 001a 7968     	 ldr r1,[r7,#4]
 450 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
  78:../variables.h **** 	TIMER_Start(&DELAY);
 451              	 .loc 4 78 0
 452 0020 0748     	 ldr r0,.L11+4
 453 0022 FFF7FEFF 	 bl TIMER_Start
  79:../variables.h **** 	while(is_delay);
 454              	 .loc 4 79 0
 455 0026 00BF     	 nop
 456              	.L10:
 457              	 .loc 4 79 0 is_stmt 0 discriminator 1
 458 0028 044B     	 ldr r3,.L11
 459 002a 1B78     	 ldrb r3,[r3]
 460 002c 002B     	 cmp r3,#0
 461 002e FBD1     	 bne .L10
  80:../variables.h **** 	TIMER_Stop(&DELAY);
 462              	 .loc 4 80 0 is_stmt 1
 463 0030 0348     	 ldr r0,.L11+4
 464 0032 FFF7FEFF 	 bl TIMER_Stop
  81:../variables.h **** }
 465              	 .loc 4 81 0
 466 0036 0837     	 adds r7,r7,#8
 467              	.LCFI42:
 468              	 .cfi_def_cfa_offset 8
 469 0038 BD46     	 mov sp,r7
 470              	.LCFI43:
 471              	 .cfi_def_cfa_register 13
 472              	 
 473 003a 80BD     	 pop {r7,pc}
 474              	.L12:
 475              	 .align 2
 476              	.L11:
 477 003c 00000000 	 .word is_delay
 478 0040 00000000 	 .word DELAY
 479              	 .cfi_endproc
 480              	.LFE322:
 482              	 .section .text.Init,"ax",%progbits
 483              	 .align 2
 484              	 .global Init
 485              	 .thumb
 486              	 .thumb_func
 488              	Init:
 489              	.LFB323:
  82:../variables.h **** 
  83:../variables.h **** void Init()			//initialization function for test stand
  84:../variables.h **** {
 490              	 .loc 4 84 0
 491              	 .cfi_startproc
 492              	 
 493              	 
 494              	 
 495 0000 80B4     	 push {r7}
 496              	.LCFI44:
 497              	 .cfi_def_cfa_offset 4
 498              	 .cfi_offset 7,-4
 499 0002 85B0     	 sub sp,sp,#20
 500              	.LCFI45:
 501              	 .cfi_def_cfa_offset 24
 502 0004 00AF     	 add r7,sp,#0
 503              	.LCFI46:
 504              	 .cfi_def_cfa_register 7
 505              	.LBB2:
  85:../variables.h **** 	for(uint8_t i = 0; i < 4; i++ )
 506              	 .loc 4 85 0
 507 0006 0023     	 movs r3,#0
 508 0008 FB73     	 strb r3,[r7,#15]
 509 000a 4AE0     	 b .L14
 510              	.L15:
  86:../variables.h **** 	{
  87:../variables.h **** 			motors[i].i_net = 0;
 511              	 .loc 4 87 0 discriminator 3
 512 000c FB7B     	 ldrb r3,[r7,#15]
 513 000e 6D4A     	 ldr r2,.L18
 514 0010 2C21     	 movs r1,#44
 515 0012 01FB03F3 	 mul r3,r1,r3
 516 0016 1344     	 add r3,r3,r2
 517 0018 0022     	 movs r2,#0
 518 001a 9A80     	 strh r2,[r3,#4]
  88:../variables.h **** 			motors[i].ang_abs = 0;
 519              	 .loc 4 88 0 discriminator 3
 520 001c FB7B     	 ldrb r3,[r7,#15]
 521 001e 694A     	 ldr r2,.L18
 522 0020 2C21     	 movs r1,#44
 523 0022 01FB03F3 	 mul r3,r1,r3
 524 0026 1344     	 add r3,r3,r2
 525 0028 0833     	 adds r3,r3,#8
 526 002a 0022     	 movs r2,#0
 527 002c 1A60     	 str r2,[r3]
  89:../variables.h **** 			motors[i].ang_abs_poprzedni = 0;
 528              	 .loc 4 89 0 discriminator 3
 529 002e FB7B     	 ldrb r3,[r7,#15]
 530 0030 644A     	 ldr r2,.L18
 531 0032 2C21     	 movs r1,#44
 532 0034 01FB03F3 	 mul r3,r1,r3
 533 0038 1344     	 add r3,r3,r2
 534 003a 0833     	 adds r3,r3,#8
 535 003c 4FF00002 	 mov r2,#0
 536 0040 5A60     	 str r2,[r3,#4]
  90:../variables.h **** 			motors[i].predkosc_silnika = 0;
 537              	 .loc 4 90 0 discriminator 3
 538 0042 FB7B     	 ldrb r3,[r7,#15]
 539 0044 5F4A     	 ldr r2,.L18
 540 0046 2C21     	 movs r1,#44
 541 0048 01FB03F3 	 mul r3,r1,r3
 542 004c 1344     	 add r3,r3,r2
 543 004e 1033     	 adds r3,r3,#16
 544 0050 4FF00002 	 mov r2,#0
 545 0054 1A60     	 str r2,[r3]
  91:../variables.h **** 			motors[i].is_go  =0;
 546              	 .loc 4 91 0 discriminator 3
 547 0056 FB7B     	 ldrb r3,[r7,#15]
 548 0058 5A4A     	 ldr r2,.L18
 549 005a 2C21     	 movs r1,#44
 550 005c 01FB03F3 	 mul r3,r1,r3
 551 0060 1344     	 add r3,r3,r2
 552 0062 0022     	 movs r2,#0
 553 0064 5A70     	 strb r2,[r3,#1]
  92:../variables.h **** 			motors[i].motor_n = 0;
 554              	 .loc 4 92 0 discriminator 3
 555 0066 FB7B     	 ldrb r3,[r7,#15]
 556 0068 564A     	 ldr r2,.L18
 557 006a 2C21     	 movs r1,#44
 558 006c 01FB03F3 	 mul r3,r1,r3
 559 0070 1344     	 add r3,r3,r2
 560 0072 0022     	 movs r2,#0
 561 0074 1A70     	 strb r2,[r3]
  93:../variables.h **** 			motors[i].ks = 180;
 562              	 .loc 4 93 0 discriminator 3
 563 0076 FB7B     	 ldrb r3,[r7,#15]
 564 0078 524A     	 ldr r2,.L18
 565 007a 2C21     	 movs r1,#44
 566 007c 01FB03F3 	 mul r3,r1,r3
 567 0080 1344     	 add r3,r3,r2
 568 0082 1833     	 adds r3,r3,#24
 569 0084 B422     	 movs r2,#180
 570 0086 5A80     	 strh r2,[r3,#2]
  94:../variables.h **** 			motors[i].kd = 800;
 571              	 .loc 4 94 0 discriminator 3
 572 0088 FB7B     	 ldrb r3,[r7,#15]
 573 008a 4E4A     	 ldr r2,.L18
 574 008c 2C21     	 movs r1,#44
 575 008e 01FB03F3 	 mul r3,r1,r3
 576 0092 1344     	 add r3,r3,r2
 577 0094 1833     	 adds r3,r3,#24
 578 0096 4FF44872 	 mov r2,#800
 579 009a 9A80     	 strh r2,[r3,#4]
  85:../variables.h **** 	{
 580              	 .loc 4 85 0 discriminator 3
 581 009c FB7B     	 ldrb r3,[r7,#15]
 582 009e 0133     	 adds r3,r3,#1
 583 00a0 FB73     	 strb r3,[r7,#15]
 584              	.L14:
  85:../variables.h **** 	{
 585              	 .loc 4 85 0 is_stmt 0 discriminator 1
 586 00a2 FB7B     	 ldrb r3,[r7,#15]
 587 00a4 032B     	 cmp r3,#3
 588 00a6 B1D9     	 bls .L15
 589              	.LBE2:
  95:../variables.h **** 	}
  96:../variables.h **** 	struct vec2 zero;	zero.x = 0;	zero.y = 0;
 590              	 .loc 4 96 0 is_stmt 1
 591 00a8 4FF00003 	 mov r3,#0
 592 00ac 7B60     	 str r3,[r7,#4]
 593 00ae 4FF00003 	 mov r3,#0
 594 00b2 BB60     	 str r3,[r7,#8]
  97:../variables.h **** 
  98:../variables.h **** 	uint8_t iterator = 0;
 595              	 .loc 4 98 0
 596 00b4 0023     	 movs r3,#0
 597 00b6 BB73     	 strb r3,[r7,#14]
 598              	.LBB3:
  99:../variables.h **** 	for(uint8_t i = 0; i < 4; i++ )
 599              	 .loc 4 99 0
 600 00b8 0023     	 movs r3,#0
 601 00ba 7B73     	 strb r3,[r7,#13]
 602 00bc 77E0     	 b .L16
 603              	.L17:
 100:../variables.h **** 	{
 101:../variables.h **** 		Legs[i].motor_L = iterator;
 604              	 .loc 4 101 0 discriminator 3
 605 00be 7B7B     	 ldrb r3,[r7,#13]
 606 00c0 414A     	 ldr r2,.L18+4
 607 00c2 5821     	 movs r1,#88
 608 00c4 01FB03F3 	 mul r3,r1,r3
 609 00c8 1344     	 add r3,r3,r2
 610 00ca BA7B     	 ldrb r2,[r7,#14]
 611 00cc 1A70     	 strb r2,[r3]
 102:../variables.h **** 		iterator++;
 612              	 .loc 4 102 0 discriminator 3
 613 00ce BB7B     	 ldrb r3,[r7,#14]
 614 00d0 0133     	 adds r3,r3,#1
 615 00d2 BB73     	 strb r3,[r7,#14]
 103:../variables.h **** 		Legs[i].motor_R = iterator;
 616              	 .loc 4 103 0 discriminator 3
 617 00d4 7B7B     	 ldrb r3,[r7,#13]
 618 00d6 3C4A     	 ldr r2,.L18+4
 619 00d8 5821     	 movs r1,#88
 620 00da 01FB03F3 	 mul r3,r1,r3
 621 00de 1344     	 add r3,r3,r2
 622 00e0 BA7B     	 ldrb r2,[r7,#14]
 623 00e2 5A70     	 strb r2,[r3,#1]
 104:../variables.h **** 		iterator++;
 624              	 .loc 4 104 0 discriminator 3
 625 00e4 BB7B     	 ldrb r3,[r7,#14]
 626 00e6 0133     	 adds r3,r3,#1
 627 00e8 BB73     	 strb r3,[r7,#14]
 105:../variables.h **** 		Legs[i].eF = zero;
 628              	 .loc 4 105 0 discriminator 3
 629 00ea 7B7B     	 ldrb r3,[r7,#13]
 630 00ec 364A     	 ldr r2,.L18+4
 631 00ee 5821     	 movs r1,#88
 632 00f0 01FB03F3 	 mul r3,r1,r3
 633 00f4 1344     	 add r3,r3,r2
 634 00f6 1833     	 adds r3,r3,#24
 635 00f8 0433     	 adds r3,r3,#4
 636 00fa 3A1D     	 adds r2,r7,#4
 637 00fc 92E80300 	 ldmia r2,{r0,r1}
 638 0100 83E80300 	 stmia r3,{r0,r1}
 106:../variables.h **** 		Legs[i].kdr = 0;
 639              	 .loc 4 106 0 discriminator 3
 640 0104 7B7B     	 ldrb r3,[r7,#13]
 641 0106 304A     	 ldr r2,.L18+4
 642 0108 5821     	 movs r1,#88
 643 010a 01FB03F3 	 mul r3,r1,r3
 644 010e 1344     	 add r3,r3,r2
 645 0110 4033     	 adds r3,r3,#64
 646 0112 4FF00002 	 mov r2,#0
 647 0116 5A60     	 str r2,[r3,#4]
 107:../variables.h **** 		Legs[i].ksr = 0;
 648              	 .loc 4 107 0 discriminator 3
 649 0118 7B7B     	 ldrb r3,[r7,#13]
 650 011a 2B4A     	 ldr r2,.L18+4
 651 011c 5821     	 movs r1,#88
 652 011e 01FB03F3 	 mul r3,r1,r3
 653 0122 1344     	 add r3,r3,r2
 654 0124 4033     	 adds r3,r3,#64
 655 0126 4FF00002 	 mov r2,#0
 656 012a 1A60     	 str r2,[r3]
 108:../variables.h **** 		Legs[i].r0 = 0;
 657              	 .loc 4 108 0 discriminator 3
 658 012c 7B7B     	 ldrb r3,[r7,#13]
 659 012e 264A     	 ldr r2,.L18+4
 660 0130 5821     	 movs r1,#88
 661 0132 01FB03F3 	 mul r3,r1,r3
 662 0136 1344     	 add r3,r3,r2
 663 0138 3833     	 adds r3,r3,#56
 664 013a 4FF00002 	 mov r2,#0
 665 013e 1A60     	 str r2,[r3]
 109:../variables.h **** 		Legs[i].r0_angle = 0;
 666              	 .loc 4 109 0 discriminator 3
 667 0140 7B7B     	 ldrb r3,[r7,#13]
 668 0142 214A     	 ldr r2,.L18+4
 669 0144 5821     	 movs r1,#88
 670 0146 01FB03F3 	 mul r3,r1,r3
 671 014a 1344     	 add r3,r3,r2
 672 014c 3833     	 adds r3,r3,#56
 673 014e 4FF00002 	 mov r2,#0
 674 0152 5A60     	 str r2,[r3,#4]
 110:../variables.h **** 		Legs[i].real_foot = zero;
 675              	 .loc 4 110 0 discriminator 3
 676 0154 7B7B     	 ldrb r3,[r7,#13]
 677 0156 1C4A     	 ldr r2,.L18+4
 678 0158 5821     	 movs r1,#88
 679 015a 01FB03F3 	 mul r3,r1,r3
 680 015e 1344     	 add r3,r3,r2
 681 0160 0833     	 adds r3,r3,#8
 682 0162 0433     	 adds r3,r3,#4
 683 0164 3A1D     	 adds r2,r7,#4
 684 0166 92E80300 	 ldmia r2,{r0,r1}
 685 016a 83E80300 	 stmia r3,{r0,r1}
 111:../variables.h **** 		Legs[i].foot.y = 150;
 686              	 .loc 4 111 0 discriminator 3
 687 016e 7B7B     	 ldrb r3,[r7,#13]
 688 0170 154A     	 ldr r2,.L18+4
 689 0172 5821     	 movs r1,#88
 690 0174 01FB03F3 	 mul r3,r1,r3
 691 0178 1344     	 add r3,r3,r2
 692 017a 144A     	 ldr r2,.L18+8
 693 017c 9A60     	 str r2,[r3,#8]
 112:../variables.h **** 		Legs[i].foot.x = 40;
 694              	 .loc 4 112 0 discriminator 3
 695 017e 7B7B     	 ldrb r3,[r7,#13]
 696 0180 114A     	 ldr r2,.L18+4
 697 0182 5821     	 movs r1,#88
 698 0184 01FB03F3 	 mul r3,r1,r3
 699 0188 1344     	 add r3,r3,r2
 700 018a 114A     	 ldr r2,.L18+12
 701 018c 5A60     	 str r2,[r3,#4]
 113:../variables.h **** 		Legs[i].real_speed = zero;
 702              	 .loc 4 113 0 discriminator 3
 703 018e 7B7B     	 ldrb r3,[r7,#13]
 704 0190 0D4A     	 ldr r2,.L18+4
 705 0192 5821     	 movs r1,#88
 706 0194 01FB03F3 	 mul r3,r1,r3
 707 0198 1344     	 add r3,r3,r2
 708 019a 1033     	 adds r3,r3,#16
 709 019c 0433     	 adds r3,r3,#4
 710 019e 3A1D     	 adds r2,r7,#4
 711 01a0 92E80300 	 ldmia r2,{r0,r1}
 712 01a4 83E80300 	 stmia r3,{r0,r1}
  99:../variables.h **** 	{
 713              	 .loc 4 99 0 discriminator 3
 714 01a8 7B7B     	 ldrb r3,[r7,#13]
 715 01aa 0133     	 adds r3,r3,#1
 716 01ac 7B73     	 strb r3,[r7,#13]
 717              	.L16:
  99:../variables.h **** 	{
 718              	 .loc 4 99 0 is_stmt 0 discriminator 1
 719 01ae 7B7B     	 ldrb r3,[r7,#13]
 720 01b0 032B     	 cmp r3,#3
 721 01b2 84D9     	 bls .L17
 722              	.LBE3:
 114:../variables.h **** 	}
 115:../variables.h **** 	txData[0] = SOF;
 723              	 .loc 4 115 0 is_stmt 1
 724 01b4 074B     	 ldr r3,.L18+16
 725 01b6 CC22     	 movs r2,#204
 726 01b8 1A70     	 strb r2,[r3]
 116:../variables.h **** }
 727              	 .loc 4 116 0
 728 01ba 1437     	 adds r7,r7,#20
 729              	.LCFI47:
 730              	 .cfi_def_cfa_offset 4
 731 01bc BD46     	 mov sp,r7
 732              	.LCFI48:
 733              	 .cfi_def_cfa_register 13
 734              	 
 735 01be 5DF8047B 	 ldr r7,[sp],#4
 736              	.LCFI49:
 737              	 .cfi_restore 7
 738              	 .cfi_def_cfa_offset 0
 739 01c2 7047     	 bx lr
 740              	.L19:
 741              	 .align 2
 742              	.L18:
 743 01c4 00000000 	 .word motors
 744 01c8 00000000 	 .word Legs
 745 01cc 00001643 	 .word 1125515264
 746 01d0 00002042 	 .word 1109393408
 747 01d4 00000000 	 .word txData
 748              	 .cfi_endproc
 749              	.LFE323:
 751              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 752              	 .align 2
 753              	 .global CCU43_1_IRQHandler
 754              	 .thumb
 755              	 .thumb_func
 757              	CCU43_1_IRQHandler:
 758              	.LFB324:
 117:../variables.h **** void TIMER_IRQ()				//delay interrupt
 118:../variables.h **** {
 759              	 .loc 4 118 0
 760              	 .cfi_startproc
 761              	 
 762              	 
 763              	 
 764 0000 80B4     	 push {r7}
 765              	.LCFI50:
 766              	 .cfi_def_cfa_offset 4
 767              	 .cfi_offset 7,-4
 768 0002 00AF     	 add r7,sp,#0
 769              	.LCFI51:
 770              	 .cfi_def_cfa_register 7
 119:../variables.h **** 	is_delay = 0;
 771              	 .loc 4 119 0
 772 0004 034B     	 ldr r3,.L21
 773 0006 0022     	 movs r2,#0
 774 0008 1A70     	 strb r2,[r3]
 120:../variables.h **** }
 775              	 .loc 4 120 0
 776 000a BD46     	 mov sp,r7
 777              	.LCFI52:
 778              	 .cfi_def_cfa_register 13
 779              	 
 780 000c 5DF8047B 	 ldr r7,[sp],#4
 781              	.LCFI53:
 782              	 .cfi_restore 7
 783              	 .cfi_def_cfa_offset 0
 784 0010 7047     	 bx lr
 785              	.L22:
 786 0012 00BF     	 .align 2
 787              	.L21:
 788 0014 00000000 	 .word is_delay
 789              	 .cfi_endproc
 790              	.LFE324:
 792              	 .section .text.Ik,"ax",%progbits
 793              	 .align 2
 794              	 .global Ik
 795              	 .thumb
 796              	 .thumb_func
 798              	Ik:
 799              	.LFB325:
 800              	 .file 5 "../kinematics.h"
   1:../kinematics.h **** /*
   2:../kinematics.h ****  * kinematics.h
   3:../kinematics.h ****  *
   4:../kinematics.h ****  *  Created on: 11 Jan 2018
   5:../kinematics.h ****  *      Author: Mafish
   6:../kinematics.h ****  */
   7:../kinematics.h **** 
   8:../kinematics.h **** void Ik(struct Leg *n);		//Inverse kinematics
   9:../kinematics.h **** void Fk(struct Leg *n);	//Forward kinematics
  10:../kinematics.h **** void Update(struct Leg *n);	//Update floating numbers from raw data from motor drivers
  11:../kinematics.h **** void Trajectory(struct Leg *n);		//calculate trajectory for selected leg
  12:../kinematics.h **** 
  13:../kinematics.h **** void Ik(struct Leg *n)		//Inverse kinematics for (Leg)
  14:../kinematics.h **** {
 801              	 .loc 5 14 0
 802              	 .cfi_startproc
 803              	 
 804              	 
 805 0000 80B5     	 push {r7,lr}
 806              	.LCFI54:
 807              	 .cfi_def_cfa_offset 8
 808              	 .cfi_offset 7,-8
 809              	 .cfi_offset 14,-4
 810 0002 8AB0     	 sub sp,sp,#40
 811              	.LCFI55:
 812              	 .cfi_def_cfa_offset 48
 813 0004 00AF     	 add r7,sp,#0
 814              	.LCFI56:
 815              	 .cfi_def_cfa_register 7
 816 0006 7860     	 str r0,[r7,#4]
  15:../kinematics.h **** 	float x = n->foot.x;
 817              	 .loc 5 15 0
 818 0008 7B68     	 ldr r3,[r7,#4]
 819 000a 5B68     	 ldr r3,[r3,#4]
 820 000c 7B62     	 str r3,[r7,#36]
  16:../kinematics.h **** 	float y = n->foot.y;
 821              	 .loc 5 16 0
 822 000e 7B68     	 ldr r3,[r7,#4]
 823 0010 9B68     	 ldr r3,[r3,#8]
 824 0012 3B62     	 str r3,[r7,#32]
  17:../kinematics.h **** 	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 825              	 .loc 5 17 0
 826 0014 764B     	 ldr r3,.L24
 827 0016 D3ED007A 	 flds s15,[r3]
 828 001a B0EE007A 	 fconsts s14,#0
 829 001e 87EE877A 	 fdivs s14,s15,s14
 830 0022 D7ED097A 	 flds s15,[r7,#36]
 831 0026 37EE677A 	 fsubs s14,s14,s15
 832 002a 714B     	 ldr r3,.L24
 833 002c D3ED007A 	 flds s15,[r3]
 834 0030 F0EE006A 	 fconsts s13,#0
 835 0034 C7EEA66A 	 fdivs s13,s15,s13
 836 0038 D7ED097A 	 flds s15,[r7,#36]
 837 003c 76EEE77A 	 fsubs s15,s13,s15
 838 0040 27EE277A 	 fmuls s14,s14,s15
 839 0044 D7ED086A 	 flds s13,[r7,#32]
 840 0048 D7ED087A 	 flds s15,[r7,#32]
 841 004c 66EEA77A 	 fmuls s15,s13,s15
 842 0050 77EE277A 	 fadds s15,s14,s15
 843 0054 17EE900A 	 fmrs r0,s15
 844 0058 FFF7FEFF 	 bl sqrtf
 845 005c F861     	 str r0,[r7,#28]
  18:../kinematics.h **** 	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 846              	 .loc 5 18 0
 847 005e 644B     	 ldr r3,.L24
 848 0060 D3ED007A 	 flds s15,[r3]
 849 0064 B0EE007A 	 fconsts s14,#0
 850 0068 87EE877A 	 fdivs s14,s15,s14
 851 006c D7ED097A 	 flds s15,[r7,#36]
 852 0070 37EE277A 	 fadds s14,s14,s15
 853 0074 5E4B     	 ldr r3,.L24
 854 0076 D3ED007A 	 flds s15,[r3]
 855 007a F0EE006A 	 fconsts s13,#0
 856 007e C7EEA66A 	 fdivs s13,s15,s13
 857 0082 D7ED097A 	 flds s15,[r7,#36]
 858 0086 76EEA77A 	 fadds s15,s13,s15
 859 008a 27EE277A 	 fmuls s14,s14,s15
 860 008e D7ED086A 	 flds s13,[r7,#32]
 861 0092 D7ED087A 	 flds s15,[r7,#32]
 862 0096 66EEA77A 	 fmuls s15,s13,s15
 863 009a 77EE277A 	 fadds s15,s14,s15
 864 009e 17EE900A 	 fmrs r0,s15
 865 00a2 FFF7FEFF 	 bl sqrtf
 866 00a6 B861     	 str r0,[r7,#24]
  19:../kinematics.h **** 	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 867              	 .loc 5 19 0
 868 00a8 524B     	 ldr r3,.L24+4
 869 00aa 93ED007A 	 flds s14,[r3]
 870 00ae 514B     	 ldr r3,.L24+4
 871 00b0 D3ED007A 	 flds s15,[r3]
 872 00b4 27EE277A 	 fmuls s14,s14,s15
 873 00b8 D7ED076A 	 flds s13,[r7,#28]
 874 00bc D7ED077A 	 flds s15,[r7,#28]
 875 00c0 66EEA77A 	 fmuls s15,s13,s15
 876 00c4 37EE277A 	 fadds s14,s14,s15
 877 00c8 4B4B     	 ldr r3,.L24+8
 878 00ca D3ED006A 	 flds s13,[r3]
 879 00ce 4A4B     	 ldr r3,.L24+8
 880 00d0 D3ED007A 	 flds s15,[r3]
 881 00d4 66EEA77A 	 fmuls s15,s13,s15
 882 00d8 37EE677A 	 fsubs s14,s14,s15
 883 00dc 454B     	 ldr r3,.L24+4
 884 00de D3ED007A 	 flds s15,[r3]
 885 00e2 77EEA76A 	 fadds s13,s15,s15
 886 00e6 D7ED077A 	 flds s15,[r7,#28]
 887 00ea 66EEA77A 	 fmuls s15,s13,s15
 888 00ee C7EE277A 	 fdivs s15,s14,s15
 889 00f2 C7ED057A 	 fsts s15,[r7,#20]
  20:../kinematics.h **** 	fi1 = acosf(fi1);
 890              	 .loc 5 20 0
 891 00f6 7869     	 ldr r0,[r7,#20]
 892 00f8 FFF7FEFF 	 bl acosf
 893 00fc 7861     	 str r0,[r7,#20]
  21:../kinematics.h **** 	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 894              	 .loc 5 21 0
 895 00fe 3D4B     	 ldr r3,.L24+4
 896 0100 93ED007A 	 flds s14,[r3]
 897 0104 3B4B     	 ldr r3,.L24+4
 898 0106 D3ED007A 	 flds s15,[r3]
 899 010a 27EE277A 	 fmuls s14,s14,s15
 900 010e D7ED066A 	 flds s13,[r7,#24]
 901 0112 D7ED067A 	 flds s15,[r7,#24]
 902 0116 66EEA77A 	 fmuls s15,s13,s15
 903 011a 37EE277A 	 fadds s14,s14,s15
 904 011e 364B     	 ldr r3,.L24+8
 905 0120 D3ED006A 	 flds s13,[r3]
 906 0124 344B     	 ldr r3,.L24+8
 907 0126 D3ED007A 	 flds s15,[r3]
 908 012a 66EEA77A 	 fmuls s15,s13,s15
 909 012e 37EE677A 	 fsubs s14,s14,s15
 910 0132 304B     	 ldr r3,.L24+4
 911 0134 D3ED007A 	 flds s15,[r3]
 912 0138 77EEA76A 	 fadds s13,s15,s15
 913 013c D7ED067A 	 flds s15,[r7,#24]
 914 0140 66EEA77A 	 fmuls s15,s13,s15
 915 0144 C7EE277A 	 fdivs s15,s14,s15
 916 0148 C7ED047A 	 fsts s15,[r7,#16]
  22:../kinematics.h **** 	fi2 = acosf(fi2);
 917              	 .loc 5 22 0
 918 014c 3869     	 ldr r0,[r7,#16]
 919 014e FFF7FEFF 	 bl acosf
 920 0152 3861     	 str r0,[r7,#16]
  23:../kinematics.h **** 	float psi1 = asinf(((d/2)-x)/La);
 921              	 .loc 5 23 0
 922 0154 264B     	 ldr r3,.L24
 923 0156 D3ED007A 	 flds s15,[r3]
 924 015a B0EE007A 	 fconsts s14,#0
 925 015e 87EE877A 	 fdivs s14,s15,s14
 926 0162 D7ED097A 	 flds s15,[r7,#36]
 927 0166 37EE677A 	 fsubs s14,s14,s15
 928 016a D7ED077A 	 flds s15,[r7,#28]
 929 016e C7EE277A 	 fdivs s15,s14,s15
 930 0172 17EE900A 	 fmrs r0,s15
 931 0176 FFF7FEFF 	 bl asinf
 932 017a F860     	 str r0,[r7,#12]
  24:../kinematics.h **** 	float psi2 = asinf(((d/2)+x)/Lb);
 933              	 .loc 5 24 0
 934 017c 1C4B     	 ldr r3,.L24
 935 017e D3ED007A 	 flds s15,[r3]
 936 0182 B0EE007A 	 fconsts s14,#0
 937 0186 87EE877A 	 fdivs s14,s15,s14
 938 018a D7ED097A 	 flds s15,[r7,#36]
 939 018e 37EE277A 	 fadds s14,s14,s15
 940 0192 D7ED067A 	 flds s15,[r7,#24]
 941 0196 C7EE277A 	 fdivs s15,s14,s15
 942 019a 17EE900A 	 fmrs r0,s15
 943 019e FFF7FEFF 	 bl asinf
 944 01a2 B860     	 str r0,[r7,#8]
  25:../kinematics.h **** 
  26:../kinematics.h **** 	motors[n->motor_L]. teta = fi1 - psi1;
 945              	 .loc 5 26 0
 946 01a4 7B68     	 ldr r3,[r7,#4]
 947 01a6 1B78     	 ldrb r3,[r3]
 948 01a8 1946     	 mov r1,r3
 949 01aa 97ED057A 	 flds s14,[r7,#20]
 950 01ae D7ED037A 	 flds s15,[r7,#12]
 951 01b2 77EE677A 	 fsubs s15,s14,s15
 952 01b6 114A     	 ldr r2,.L24+12
 953 01b8 2C23     	 movs r3,#44
 954 01ba 03FB01F3 	 mul r3,r3,r1
 955 01be 1344     	 add r3,r3,r2
 956 01c0 2833     	 adds r3,r3,#40
 957 01c2 C3ED007A 	 fsts s15,[r3]
  27:../kinematics.h **** 	motors[n->motor_R]. teta = fi2 - psi2;
 958              	 .loc 5 27 0
 959 01c6 7B68     	 ldr r3,[r7,#4]
 960 01c8 5B78     	 ldrb r3,[r3,#1]
 961 01ca 1946     	 mov r1,r3
 962 01cc 97ED047A 	 flds s14,[r7,#16]
 963 01d0 D7ED027A 	 flds s15,[r7,#8]
 964 01d4 77EE677A 	 fsubs s15,s14,s15
 965 01d8 084A     	 ldr r2,.L24+12
 966 01da 2C23     	 movs r3,#44
 967 01dc 03FB01F3 	 mul r3,r3,r1
 968 01e0 1344     	 add r3,r3,r2
 969 01e2 2833     	 adds r3,r3,#40
 970 01e4 C3ED007A 	 fsts s15,[r3]
  28:../kinematics.h **** }
 971              	 .loc 5 28 0
 972 01e8 2837     	 adds r7,r7,#40
 973              	.LCFI57:
 974              	 .cfi_def_cfa_offset 8
 975 01ea BD46     	 mov sp,r7
 976              	.LCFI58:
 977              	 .cfi_def_cfa_register 13
 978              	 
 979 01ec 80BD     	 pop {r7,pc}
 980              	.L25:
 981 01ee 00BF     	 .align 2
 982              	.L24:
 983 01f0 00000000 	 .word d
 984 01f4 00000000 	 .word l1
 985 01f8 00000000 	 .word l2
 986 01fc 00000000 	 .word motors
 987              	 .cfi_endproc
 988              	.LFE325:
 990              	 .section .text.Fk,"ax",%progbits
 991              	 .align 2
 992              	 .global Fk
 993              	 .thumb
 994              	 .thumb_func
 996              	Fk:
 997              	.LFB326:
  29:../kinematics.h **** void Fk(struct Leg *n)		//Forward kinematics for (Leg)
  30:../kinematics.h **** {
 998              	 .loc 5 30 0
 999              	 .cfi_startproc
 1000              	 
 1001              	 
 1002 0000 80B5     	 push {r7,lr}
 1003              	.LCFI59:
 1004              	 .cfi_def_cfa_offset 8
 1005              	 .cfi_offset 7,-8
 1006              	 .cfi_offset 14,-4
 1007 0002 2DED028B 	 fstmfdd sp!,{d8}
 1008              	.LCFI60:
 1009              	 .cfi_def_cfa_offset 16
 1010              	 .cfi_offset 80,-16
 1011              	 .cfi_offset 81,-12
 1012 0006 94B0     	 sub sp,sp,#80
 1013              	.LCFI61:
 1014              	 .cfi_def_cfa_offset 96
 1015 0008 00AF     	 add r7,sp,#0
 1016              	.LCFI62:
 1017              	 .cfi_def_cfa_register 7
 1018 000a 7860     	 str r0,[r7,#4]
  31:../kinematics.h **** 	float a = d+l1*(sinf(motors[n->motor_L].ang_abs_rad)+sinf(motors[n->motor_R].ang_abs_rad));
 1019              	 .loc 5 31 0
 1020 000c 7B68     	 ldr r3,[r7,#4]
 1021 000e 1B78     	 ldrb r3,[r3]
 1022 0010 1946     	 mov r1,r3
 1023 0012 D34A     	 ldr r2,.L29
 1024 0014 2C23     	 movs r3,#44
 1025 0016 03FB01F3 	 mul r3,r3,r1
 1026 001a 1344     	 add r3,r3,r2
 1027 001c 1033     	 adds r3,r3,#16
 1028 001e 5B68     	 ldr r3,[r3,#4]
 1029 0020 1846     	 mov r0,r3
 1030 0022 FFF7FEFF 	 bl sinf
 1031 0026 08EE100A 	 fmsr s16,r0
 1032 002a 7B68     	 ldr r3,[r7,#4]
 1033 002c 5B78     	 ldrb r3,[r3,#1]
 1034 002e 1946     	 mov r1,r3
 1035 0030 CB4A     	 ldr r2,.L29
 1036 0032 2C23     	 movs r3,#44
 1037 0034 03FB01F3 	 mul r3,r3,r1
 1038 0038 1344     	 add r3,r3,r2
 1039 003a 1033     	 adds r3,r3,#16
 1040 003c 5B68     	 ldr r3,[r3,#4]
 1041 003e 1846     	 mov r0,r3
 1042 0040 FFF7FEFF 	 bl sinf
 1043 0044 07EE900A 	 fmsr s15,r0
 1044 0048 38EE277A 	 fadds s14,s16,s15
 1045 004c C54B     	 ldr r3,.L29+4
 1046 004e D3ED007A 	 flds s15,[r3]
 1047 0052 27EE277A 	 fmuls s14,s14,s15
 1048 0056 C44B     	 ldr r3,.L29+8
 1049 0058 D3ED007A 	 flds s15,[r3]
 1050 005c 77EE277A 	 fadds s15,s14,s15
 1051 0060 C7ED127A 	 fsts s15,[r7,#72]
  32:../kinematics.h **** 	float b = l1*(cosf(motors[n->motor_R].ang_abs_rad)-cosf(motors[n->motor_L].ang_abs_rad));
 1052              	 .loc 5 32 0
 1053 0064 7B68     	 ldr r3,[r7,#4]
 1054 0066 5B78     	 ldrb r3,[r3,#1]
 1055 0068 1946     	 mov r1,r3
 1056 006a BD4A     	 ldr r2,.L29
 1057 006c 2C23     	 movs r3,#44
 1058 006e 03FB01F3 	 mul r3,r3,r1
 1059 0072 1344     	 add r3,r3,r2
 1060 0074 1033     	 adds r3,r3,#16
 1061 0076 5B68     	 ldr r3,[r3,#4]
 1062 0078 1846     	 mov r0,r3
 1063 007a FFF7FEFF 	 bl cosf
 1064 007e 08EE100A 	 fmsr s16,r0
 1065 0082 7B68     	 ldr r3,[r7,#4]
 1066 0084 1B78     	 ldrb r3,[r3]
 1067 0086 1946     	 mov r1,r3
 1068 0088 B54A     	 ldr r2,.L29
 1069 008a 2C23     	 movs r3,#44
 1070 008c 03FB01F3 	 mul r3,r3,r1
 1071 0090 1344     	 add r3,r3,r2
 1072 0092 1033     	 adds r3,r3,#16
 1073 0094 5B68     	 ldr r3,[r3,#4]
 1074 0096 1846     	 mov r0,r3
 1075 0098 FFF7FEFF 	 bl cosf
 1076 009c 07EE900A 	 fmsr s15,r0
 1077 00a0 38EE677A 	 fsubs s14,s16,s15
 1078 00a4 AF4B     	 ldr r3,.L29+4
 1079 00a6 D3ED007A 	 flds s15,[r3]
 1080 00aa 67EE277A 	 fmuls s15,s14,s15
 1081 00ae C7ED117A 	 fsts s15,[r7,#68]
  33:../kinematics.h **** 	float p = sqrtf(a*a+b*b);
 1082              	 .loc 5 33 0
 1083 00b2 97ED127A 	 flds s14,[r7,#72]
 1084 00b6 D7ED127A 	 flds s15,[r7,#72]
 1085 00ba 27EE277A 	 fmuls s14,s14,s15
 1086 00be D7ED116A 	 flds s13,[r7,#68]
 1087 00c2 D7ED117A 	 flds s15,[r7,#68]
 1088 00c6 66EEA77A 	 fmuls s15,s13,s15
 1089 00ca 77EE277A 	 fadds s15,s14,s15
 1090 00ce 17EE900A 	 fmrs r0,s15
 1091 00d2 FFF7FEFF 	 bl sqrtf
 1092 00d6 3864     	 str r0,[r7,#64]
  34:../kinematics.h **** 	float fi = atan2f(b,a);
 1093              	 .loc 5 34 0
 1094 00d8 786C     	 ldr r0,[r7,#68]
 1095 00da B96C     	 ldr r1,[r7,#72]
 1096 00dc FFF7FEFF 	 bl atan2f
 1097 00e0 F863     	 str r0,[r7,#60]
  35:../kinematics.h **** 	float theta = asinf(p/(2*l2));
 1098              	 .loc 5 35 0
 1099 00e2 A24B     	 ldr r3,.L29+12
 1100 00e4 D3ED007A 	 flds s15,[r3]
 1101 00e8 77EEA77A 	 fadds s15,s15,s15
 1102 00ec 97ED107A 	 flds s14,[r7,#64]
 1103 00f0 C7EE277A 	 fdivs s15,s14,s15
 1104 00f4 17EE900A 	 fmrs r0,s15
 1105 00f8 FFF7FEFF 	 bl asinf
 1106 00fc B863     	 str r0,[r7,#56]
  36:../kinematics.h **** 	float gama = (pi/2)-theta;
 1107              	 .loc 5 36 0
 1108 00fe 9C4B     	 ldr r3,.L29+16
 1109 0100 D3ED007A 	 flds s15,[r3]
 1110 0104 B0EE007A 	 fconsts s14,#0
 1111 0108 87EE877A 	 fdivs s14,s15,s14
 1112 010c D7ED0E7A 	 flds s15,[r7,#56]
 1113 0110 77EE677A 	 fsubs s15,s14,s15
 1114 0114 C7ED0D7A 	 fsts s15,[r7,#52]
  37:../kinematics.h **** 	float psi = gama+fi;
 1115              	 .loc 5 37 0
 1116 0118 97ED0D7A 	 flds s14,[r7,#52]
 1117 011c D7ED0F7A 	 flds s15,[r7,#60]
 1118 0120 77EE277A 	 fadds s15,s14,s15
 1119 0124 C7ED0C7A 	 fsts s15,[r7,#48]
  38:../kinematics.h **** 
  39:../kinematics.h **** 	n->real_foot.x = -(d/2) - l1*sinf(motors[n->motor_L].ang_abs_rad) + l2*cosf(psi);	//Forward kinema
 1120              	 .loc 5 39 0
 1121 0128 8F4B     	 ldr r3,.L29+8
 1122 012a D3ED007A 	 flds s15,[r3]
 1123 012e B0EE007A 	 fconsts s14,#0
 1124 0132 C7EE877A 	 fdivs s15,s15,s14
 1125 0136 B1EE678A 	 fnegs s16,s15
 1126 013a 7B68     	 ldr r3,[r7,#4]
 1127 013c 1B78     	 ldrb r3,[r3]
 1128 013e 1946     	 mov r1,r3
 1129 0140 874A     	 ldr r2,.L29
 1130 0142 2C23     	 movs r3,#44
 1131 0144 03FB01F3 	 mul r3,r3,r1
 1132 0148 1344     	 add r3,r3,r2
 1133 014a 1033     	 adds r3,r3,#16
 1134 014c 5B68     	 ldr r3,[r3,#4]
 1135 014e 1846     	 mov r0,r3
 1136 0150 FFF7FEFF 	 bl sinf
 1137 0154 07EE100A 	 fmsr s14,r0
 1138 0158 824B     	 ldr r3,.L29+4
 1139 015a D3ED007A 	 flds s15,[r3]
 1140 015e 67EE277A 	 fmuls s15,s14,s15
 1141 0162 38EE678A 	 fsubs s16,s16,s15
 1142 0166 386B     	 ldr r0,[r7,#48]
 1143 0168 FFF7FEFF 	 bl cosf
 1144 016c 07EE100A 	 fmsr s14,r0
 1145 0170 7E4B     	 ldr r3,.L29+12
 1146 0172 D3ED007A 	 flds s15,[r3]
 1147 0176 67EE277A 	 fmuls s15,s14,s15
 1148 017a 78EE277A 	 fadds s15,s16,s15
 1149 017e 7B68     	 ldr r3,[r7,#4]
 1150 0180 C3ED037A 	 fsts s15,[r3,#12]
  40:../kinematics.h **** 	n->real_foot.y = l1*cosf(motors[n->motor_L].ang_abs_rad) + l2*sinf(psi);
 1151              	 .loc 5 40 0
 1152 0184 7B68     	 ldr r3,[r7,#4]
 1153 0186 1B78     	 ldrb r3,[r3]
 1154 0188 1946     	 mov r1,r3
 1155 018a 754A     	 ldr r2,.L29
 1156 018c 2C23     	 movs r3,#44
 1157 018e 03FB01F3 	 mul r3,r3,r1
 1158 0192 1344     	 add r3,r3,r2
 1159 0194 1033     	 adds r3,r3,#16
 1160 0196 5B68     	 ldr r3,[r3,#4]
 1161 0198 1846     	 mov r0,r3
 1162 019a FFF7FEFF 	 bl cosf
 1163 019e 07EE100A 	 fmsr s14,r0
 1164 01a2 704B     	 ldr r3,.L29+4
 1165 01a4 D3ED007A 	 flds s15,[r3]
 1166 01a8 27EE278A 	 fmuls s16,s14,s15
 1167 01ac 386B     	 ldr r0,[r7,#48]
 1168 01ae FFF7FEFF 	 bl sinf
 1169 01b2 07EE100A 	 fmsr s14,r0
 1170 01b6 6D4B     	 ldr r3,.L29+12
 1171 01b8 D3ED007A 	 flds s15,[r3]
 1172 01bc 67EE277A 	 fmuls s15,s14,s15
 1173 01c0 78EE277A 	 fadds s15,s16,s15
 1174 01c4 7B68     	 ldr r3,[r7,#4]
 1175 01c6 C3ED047A 	 fsts s15,[r3,#16]
  41:../kinematics.h **** 
  42:../kinematics.h **** 	float A = a*cosf(motors[n->motor_L].ang_abs_rad)+b*sinf(motors[n->motor_L].ang_abs_rad);
 1176              	 .loc 5 42 0
 1177 01ca 7B68     	 ldr r3,[r7,#4]
 1178 01cc 1B78     	 ldrb r3,[r3]
 1179 01ce 1946     	 mov r1,r3
 1180 01d0 634A     	 ldr r2,.L29
 1181 01d2 2C23     	 movs r3,#44
 1182 01d4 03FB01F3 	 mul r3,r3,r1
 1183 01d8 1344     	 add r3,r3,r2
 1184 01da 1033     	 adds r3,r3,#16
 1185 01dc 5B68     	 ldr r3,[r3,#4]
 1186 01de 1846     	 mov r0,r3
 1187 01e0 FFF7FEFF 	 bl cosf
 1188 01e4 07EE100A 	 fmsr s14,r0
 1189 01e8 D7ED127A 	 flds s15,[r7,#72]
 1190 01ec 27EE278A 	 fmuls s16,s14,s15
 1191 01f0 7B68     	 ldr r3,[r7,#4]
 1192 01f2 1B78     	 ldrb r3,[r3]
 1193 01f4 1946     	 mov r1,r3
 1194 01f6 5A4A     	 ldr r2,.L29
 1195 01f8 2C23     	 movs r3,#44
 1196 01fa 03FB01F3 	 mul r3,r3,r1
 1197 01fe 1344     	 add r3,r3,r2
 1198 0200 1033     	 adds r3,r3,#16
 1199 0202 5B68     	 ldr r3,[r3,#4]
 1200 0204 1846     	 mov r0,r3
 1201 0206 FFF7FEFF 	 bl sinf
 1202 020a 07EE100A 	 fmsr s14,r0
 1203 020e D7ED117A 	 flds s15,[r7,#68]
 1204 0212 67EE277A 	 fmuls s15,s14,s15
 1205 0216 78EE277A 	 fadds s15,s16,s15
 1206 021a C7ED0B7A 	 fsts s15,[r7,#44]
  43:../kinematics.h **** 	float B = sqrtf((a*a+b*b)*(4*l2*l2-p*p));
 1207              	 .loc 5 43 0
 1208 021e 97ED127A 	 flds s14,[r7,#72]
 1209 0222 D7ED127A 	 flds s15,[r7,#72]
 1210 0226 27EE277A 	 fmuls s14,s14,s15
 1211 022a D7ED116A 	 flds s13,[r7,#68]
 1212 022e D7ED117A 	 flds s15,[r7,#68]
 1213 0232 66EEA77A 	 fmuls s15,s13,s15
 1214 0236 37EE277A 	 fadds s14,s14,s15
 1215 023a 4C4B     	 ldr r3,.L29+12
 1216 023c D3ED007A 	 flds s15,[r3]
 1217 0240 F1EE006A 	 fconsts s13,#16
 1218 0244 67EEA66A 	 fmuls s13,s15,s13
 1219 0248 484B     	 ldr r3,.L29+12
 1220 024a D3ED007A 	 flds s15,[r3]
 1221 024e 66EEA76A 	 fmuls s13,s13,s15
 1222 0252 97ED106A 	 flds s12,[r7,#64]
 1223 0256 D7ED107A 	 flds s15,[r7,#64]
 1224 025a 66EE277A 	 fmuls s15,s12,s15
 1225 025e 76EEE77A 	 fsubs s15,s13,s15
 1226 0262 67EE277A 	 fmuls s15,s14,s15
 1227 0266 17EE900A 	 fmrs r0,s15
 1228 026a FFF7FEFF 	 bl sqrtf
 1229 026e B862     	 str r0,[r7,#40]
  44:../kinematics.h **** 	float C = a*sinf(motors[n->motor_L].ang_abs_rad)-b*cosf(motors[n->motor_L].ang_abs_rad);
 1230              	 .loc 5 44 0
 1231 0270 7B68     	 ldr r3,[r7,#4]
 1232 0272 1B78     	 ldrb r3,[r3]
 1233 0274 1946     	 mov r1,r3
 1234 0276 3A4A     	 ldr r2,.L29
 1235 0278 2C23     	 movs r3,#44
 1236 027a 03FB01F3 	 mul r3,r3,r1
 1237 027e 1344     	 add r3,r3,r2
 1238 0280 1033     	 adds r3,r3,#16
 1239 0282 5B68     	 ldr r3,[r3,#4]
 1240 0284 1846     	 mov r0,r3
 1241 0286 FFF7FEFF 	 bl sinf
 1242 028a 07EE100A 	 fmsr s14,r0
 1243 028e D7ED127A 	 flds s15,[r7,#72]
 1244 0292 27EE278A 	 fmuls s16,s14,s15
 1245 0296 7B68     	 ldr r3,[r7,#4]
 1246 0298 1B78     	 ldrb r3,[r3]
 1247 029a 1946     	 mov r1,r3
 1248 029c 304A     	 ldr r2,.L29
 1249 029e 2C23     	 movs r3,#44
 1250 02a0 03FB01F3 	 mul r3,r3,r1
 1251 02a4 1344     	 add r3,r3,r2
 1252 02a6 1033     	 adds r3,r3,#16
 1253 02a8 5B68     	 ldr r3,[r3,#4]
 1254 02aa 1846     	 mov r0,r3
 1255 02ac FFF7FEFF 	 bl cosf
 1256 02b0 07EE100A 	 fmsr s14,r0
 1257 02b4 D7ED117A 	 flds s15,[r7,#68]
 1258 02b8 67EE277A 	 fmuls s15,s14,s15
 1259 02bc 78EE677A 	 fsubs s15,s16,s15
 1260 02c0 C7ED097A 	 fsts s15,[r7,#36]
  45:../kinematics.h **** 	float D = a*a+b*b;
 1261              	 .loc 5 45 0
 1262 02c4 97ED127A 	 flds s14,[r7,#72]
 1263 02c8 D7ED127A 	 flds s15,[r7,#72]
 1264 02cc 27EE277A 	 fmuls s14,s14,s15
 1265 02d0 D7ED116A 	 flds s13,[r7,#68]
 1266 02d4 D7ED117A 	 flds s15,[r7,#68]
 1267 02d8 66EEA77A 	 fmuls s15,s13,s15
 1268 02dc 77EE277A 	 fadds s15,s14,s15
 1269 02e0 C7ED087A 	 fsts s15,[r7,#32]
  46:../kinematics.h **** 	float E = a*cosf(motors[n->motor_R].ang_abs_rad)-b*sinf(motors[n->motor_R].ang_abs_rad);
 1270              	 .loc 5 46 0
 1271 02e4 7B68     	 ldr r3,[r7,#4]
 1272 02e6 5B78     	 ldrb r3,[r3,#1]
 1273 02e8 1946     	 mov r1,r3
 1274 02ea 1D4A     	 ldr r2,.L29
 1275 02ec 2C23     	 movs r3,#44
 1276 02ee 03FB01F3 	 mul r3,r3,r1
 1277 02f2 1344     	 add r3,r3,r2
 1278 02f4 1033     	 adds r3,r3,#16
 1279 02f6 5B68     	 ldr r3,[r3,#4]
 1280 02f8 1846     	 mov r0,r3
 1281 02fa FFF7FEFF 	 bl cosf
 1282 02fe 07EE100A 	 fmsr s14,r0
 1283 0302 D7ED127A 	 flds s15,[r7,#72]
 1284 0306 27EE278A 	 fmuls s16,s14,s15
 1285 030a 7B68     	 ldr r3,[r7,#4]
 1286 030c 5B78     	 ldrb r3,[r3,#1]
 1287 030e 1946     	 mov r1,r3
 1288 0310 134A     	 ldr r2,.L29
 1289 0312 2C23     	 movs r3,#44
 1290 0314 03FB01F3 	 mul r3,r3,r1
 1291 0318 1344     	 add r3,r3,r2
 1292 031a 1033     	 adds r3,r3,#16
 1293 031c 5B68     	 ldr r3,[r3,#4]
 1294 031e 1846     	 mov r0,r3
 1295 0320 FFF7FEFF 	 bl sinf
 1296 0324 07EE100A 	 fmsr s14,r0
 1297 0328 D7ED117A 	 flds s15,[r7,#68]
 1298 032c 67EE277A 	 fmuls s15,s14,s15
 1299 0330 78EE677A 	 fsubs s15,s16,s15
 1300 0334 C7ED077A 	 fsts s15,[r7,#28]
  47:../kinematics.h **** 	float F = a*sinf(motors[n->motor_R].ang_abs_rad)+b*cosf(motors[n->motor_R].ang_abs_rad);
 1301              	 .loc 5 47 0
 1302 0338 7B68     	 ldr r3,[r7,#4]
 1303 033a 5B78     	 ldrb r3,[r3,#1]
 1304 033c 1946     	 mov r1,r3
 1305 033e 084A     	 ldr r2,.L29
 1306 0340 2C23     	 movs r3,#44
 1307 0342 03FB01F3 	 mul r3,r3,r1
 1308 0346 1344     	 add r3,r3,r2
 1309 0348 1033     	 adds r3,r3,#16
 1310 034a 5B68     	 ldr r3,[r3,#4]
 1311 034c 1846     	 mov r0,r3
 1312 034e FFF7FEFF 	 bl sinf
 1313 0352 07EE100A 	 fmsr s14,r0
 1314 0356 D7ED127A 	 flds s15,[r7,#72]
 1315 035a 27EE278A 	 fmuls s16,s14,s15
 1316 035e 09E0     	 b .L30
 1317              	.L31:
 1318              	 .align 2
 1319              	.L29:
 1320 0360 00000000 	 .word motors
 1321 0364 00000000 	 .word l1
 1322 0368 00000000 	 .word d
 1323 036c 00000000 	 .word l2
 1324 0370 00000000 	 .word pi
 1325              	.L30:
 1326 0374 7B68     	 ldr r3,[r7,#4]
 1327 0376 5B78     	 ldrb r3,[r3,#1]
 1328 0378 1946     	 mov r1,r3
 1329 037a BC4A     	 ldr r2,.L32
 1330 037c 2C23     	 movs r3,#44
 1331 037e 03FB01F3 	 mul r3,r3,r1
 1332 0382 1344     	 add r3,r3,r2
 1333 0384 1033     	 adds r3,r3,#16
 1334 0386 5B68     	 ldr r3,[r3,#4]
 1335 0388 1846     	 mov r0,r3
 1336 038a FFF7FEFF 	 bl cosf
 1337 038e 07EE100A 	 fmsr s14,r0
 1338 0392 D7ED117A 	 flds s15,[r7,#68]
 1339 0396 67EE277A 	 fmuls s15,s14,s15
 1340 039a 78EE277A 	 fadds s15,s16,s15
 1341 039e C7ED067A 	 fsts s15,[r7,#24]
  48:../kinematics.h ****   	n->J[0][0] = -l1*l2*sinf(psi)*(-(A/B)+(C/D))-l1*cosf(motors[n->motor_L].ang_abs_rad);
 1342              	 .loc 5 48 0
 1343 03a2 B34B     	 ldr r3,.L32+4
 1344 03a4 D3ED007A 	 flds s15,[r3]
 1345 03a8 B1EE677A 	 fnegs s14,s15
 1346 03ac B14B     	 ldr r3,.L32+8
 1347 03ae D3ED007A 	 flds s15,[r3]
 1348 03b2 27EE278A 	 fmuls s16,s14,s15
 1349 03b6 386B     	 ldr r0,[r7,#48]
 1350 03b8 FFF7FEFF 	 bl sinf
 1351 03bc 07EE900A 	 fmsr s15,r0
 1352 03c0 28EE277A 	 fmuls s14,s16,s15
 1353 03c4 D7ED096A 	 flds s13,[r7,#36]
 1354 03c8 D7ED087A 	 flds s15,[r7,#32]
 1355 03cc C6EEA76A 	 fdivs s13,s13,s15
 1356 03d0 97ED0B6A 	 flds s12,[r7,#44]
 1357 03d4 D7ED0A7A 	 flds s15,[r7,#40]
 1358 03d8 C6EE277A 	 fdivs s15,s12,s15
 1359 03dc 76EEE77A 	 fsubs s15,s13,s15
 1360 03e0 27EE278A 	 fmuls s16,s14,s15
 1361 03e4 7B68     	 ldr r3,[r7,#4]
 1362 03e6 1B78     	 ldrb r3,[r3]
 1363 03e8 1946     	 mov r1,r3
 1364 03ea A04A     	 ldr r2,.L32
 1365 03ec 2C23     	 movs r3,#44
 1366 03ee 03FB01F3 	 mul r3,r3,r1
 1367 03f2 1344     	 add r3,r3,r2
 1368 03f4 1033     	 adds r3,r3,#16
 1369 03f6 5B68     	 ldr r3,[r3,#4]
 1370 03f8 1846     	 mov r0,r3
 1371 03fa FFF7FEFF 	 bl cosf
 1372 03fe 07EE100A 	 fmsr s14,r0
 1373 0402 9B4B     	 ldr r3,.L32+4
 1374 0404 D3ED007A 	 flds s15,[r3]
 1375 0408 67EE277A 	 fmuls s15,s14,s15
 1376 040c 78EE677A 	 fsubs s15,s16,s15
 1377 0410 7B68     	 ldr r3,[r7,#4]
 1378 0412 C3ED127A 	 fsts s15,[r3,#72]
  49:../kinematics.h ****   	n->J[0][1] = -l1*cosf(motors[n->motor_L].ang_abs_rad)+l1*l2*cosf(psi)*(-(A/B)+(C/D));
 1379              	 .loc 5 49 0
 1380 0416 964B     	 ldr r3,.L32+4
 1381 0418 D3ED007A 	 flds s15,[r3]
 1382 041c B1EE678A 	 fnegs s16,s15
 1383 0420 7B68     	 ldr r3,[r7,#4]
 1384 0422 1B78     	 ldrb r3,[r3]
 1385 0424 1946     	 mov r1,r3
 1386 0426 914A     	 ldr r2,.L32
 1387 0428 2C23     	 movs r3,#44
 1388 042a 03FB01F3 	 mul r3,r3,r1
 1389 042e 1344     	 add r3,r3,r2
 1390 0430 1033     	 adds r3,r3,#16
 1391 0432 5B68     	 ldr r3,[r3,#4]
 1392 0434 1846     	 mov r0,r3
 1393 0436 FFF7FEFF 	 bl cosf
 1394 043a 07EE900A 	 fmsr s15,r0
 1395 043e 28EE278A 	 fmuls s16,s16,s15
 1396 0442 8B4B     	 ldr r3,.L32+4
 1397 0444 93ED007A 	 flds s14,[r3]
 1398 0448 8A4B     	 ldr r3,.L32+8
 1399 044a D3ED007A 	 flds s15,[r3]
 1400 044e 67EE278A 	 fmuls s17,s14,s15
 1401 0452 386B     	 ldr r0,[r7,#48]
 1402 0454 FFF7FEFF 	 bl cosf
 1403 0458 07EE900A 	 fmsr s15,r0
 1404 045c 28EEA77A 	 fmuls s14,s17,s15
 1405 0460 D7ED096A 	 flds s13,[r7,#36]
 1406 0464 D7ED087A 	 flds s15,[r7,#32]
 1407 0468 C6EEA76A 	 fdivs s13,s13,s15
 1408 046c 97ED0B6A 	 flds s12,[r7,#44]
 1409 0470 D7ED0A7A 	 flds s15,[r7,#40]
 1410 0474 C6EE277A 	 fdivs s15,s12,s15
 1411 0478 76EEE77A 	 fsubs s15,s13,s15
 1412 047c 67EE277A 	 fmuls s15,s14,s15
 1413 0480 78EE277A 	 fadds s15,s16,s15
 1414 0484 7B68     	 ldr r3,[r7,#4]
 1415 0486 C3ED137A 	 fsts s15,[r3,#76]
  50:../kinematics.h ****   	n->J[1][0] = -l1*l2*sinf(psi)*(-(E/B)+(F/D));
 1416              	 .loc 5 50 0
 1417 048a 794B     	 ldr r3,.L32+4
 1418 048c D3ED007A 	 flds s15,[r3]
 1419 0490 B1EE677A 	 fnegs s14,s15
 1420 0494 774B     	 ldr r3,.L32+8
 1421 0496 D3ED007A 	 flds s15,[r3]
 1422 049a 27EE278A 	 fmuls s16,s14,s15
 1423 049e 386B     	 ldr r0,[r7,#48]
 1424 04a0 FFF7FEFF 	 bl sinf
 1425 04a4 07EE900A 	 fmsr s15,r0
 1426 04a8 28EE277A 	 fmuls s14,s16,s15
 1427 04ac D7ED066A 	 flds s13,[r7,#24]
 1428 04b0 D7ED087A 	 flds s15,[r7,#32]
 1429 04b4 C6EEA76A 	 fdivs s13,s13,s15
 1430 04b8 97ED076A 	 flds s12,[r7,#28]
 1431 04bc D7ED0A7A 	 flds s15,[r7,#40]
 1432 04c0 C6EE277A 	 fdivs s15,s12,s15
 1433 04c4 76EEE77A 	 fsubs s15,s13,s15
 1434 04c8 67EE277A 	 fmuls s15,s14,s15
 1435 04cc 7B68     	 ldr r3,[r7,#4]
 1436 04ce C3ED147A 	 fsts s15,[r3,#80]
  51:../kinematics.h ****   	n->J[1][1] = l1*l2*sinf(psi)*(-(E/B)+(F/D));
 1437              	 .loc 5 51 0
 1438 04d2 674B     	 ldr r3,.L32+4
 1439 04d4 93ED007A 	 flds s14,[r3]
 1440 04d8 664B     	 ldr r3,.L32+8
 1441 04da D3ED007A 	 flds s15,[r3]
 1442 04de 27EE278A 	 fmuls s16,s14,s15
 1443 04e2 386B     	 ldr r0,[r7,#48]
 1444 04e4 FFF7FEFF 	 bl sinf
 1445 04e8 07EE900A 	 fmsr s15,r0
 1446 04ec 28EE277A 	 fmuls s14,s16,s15
 1447 04f0 D7ED066A 	 flds s13,[r7,#24]
 1448 04f4 D7ED087A 	 flds s15,[r7,#32]
 1449 04f8 C6EEA76A 	 fdivs s13,s13,s15
 1450 04fc 97ED076A 	 flds s12,[r7,#28]
 1451 0500 D7ED0A7A 	 flds s15,[r7,#40]
 1452 0504 C6EE277A 	 fdivs s15,s12,s15
 1453 0508 76EEE77A 	 fsubs s15,s13,s15
 1454 050c 67EE277A 	 fmuls s15,s14,s15
 1455 0510 7B68     	 ldr r3,[r7,#4]
 1456 0512 C3ED157A 	 fsts s15,[r3,#84]
  52:../kinematics.h **** 
  53:../kinematics.h ****   	float mianownik = n->J[0][0]*n->J[1][1] - n->J[0][1]*n->J[1][0];
 1457              	 .loc 5 53 0
 1458 0516 7B68     	 ldr r3,[r7,#4]
 1459 0518 93ED127A 	 flds s14,[r3,#72]
 1460 051c 7B68     	 ldr r3,[r7,#4]
 1461 051e D3ED157A 	 flds s15,[r3,#84]
 1462 0522 27EE277A 	 fmuls s14,s14,s15
 1463 0526 7B68     	 ldr r3,[r7,#4]
 1464 0528 D3ED136A 	 flds s13,[r3,#76]
 1465 052c 7B68     	 ldr r3,[r7,#4]
 1466 052e D3ED147A 	 flds s15,[r3,#80]
 1467 0532 66EEA77A 	 fmuls s15,s13,s15
 1468 0536 77EE677A 	 fsubs s15,s14,s15
 1469 053a C7ED057A 	 fsts s15,[r7,#20]
  54:../kinematics.h ****   	float H = n->J[1][1]*motors[n->motor_L].torque - n->J[0][1]*motors[n->motor_R].torque;
 1470              	 .loc 5 54 0
 1471 053e 7B68     	 ldr r3,[r7,#4]
 1472 0540 93ED157A 	 flds s14,[r3,#84]
 1473 0544 7B68     	 ldr r3,[r7,#4]
 1474 0546 1B78     	 ldrb r3,[r3]
 1475 0548 1946     	 mov r1,r3
 1476 054a 484A     	 ldr r2,.L32
 1477 054c 2C23     	 movs r3,#44
 1478 054e 03FB01F3 	 mul r3,r3,r1
 1479 0552 1344     	 add r3,r3,r2
 1480 0554 2033     	 adds r3,r3,#32
 1481 0556 D3ED007A 	 flds s15,[r3]
 1482 055a 27EE277A 	 fmuls s14,s14,s15
 1483 055e 7B68     	 ldr r3,[r7,#4]
 1484 0560 D3ED136A 	 flds s13,[r3,#76]
 1485 0564 7B68     	 ldr r3,[r7,#4]
 1486 0566 5B78     	 ldrb r3,[r3,#1]
 1487 0568 1946     	 mov r1,r3
 1488 056a 404A     	 ldr r2,.L32
 1489 056c 2C23     	 movs r3,#44
 1490 056e 03FB01F3 	 mul r3,r3,r1
 1491 0572 1344     	 add r3,r3,r2
 1492 0574 2033     	 adds r3,r3,#32
 1493 0576 D3ED007A 	 flds s15,[r3]
 1494 057a 66EEA77A 	 fmuls s15,s13,s15
 1495 057e 77EE677A 	 fsubs s15,s14,s15
 1496 0582 C7ED047A 	 fsts s15,[r7,#16]
  55:../kinematics.h ****   	float I = n->J[0][0] *motors[n->motor_R].torque - n->J[1][0] * motors[n->motor_L].torque;
 1497              	 .loc 5 55 0
 1498 0586 7B68     	 ldr r3,[r7,#4]
 1499 0588 93ED127A 	 flds s14,[r3,#72]
 1500 058c 7B68     	 ldr r3,[r7,#4]
 1501 058e 5B78     	 ldrb r3,[r3,#1]
 1502 0590 1946     	 mov r1,r3
 1503 0592 364A     	 ldr r2,.L32
 1504 0594 2C23     	 movs r3,#44
 1505 0596 03FB01F3 	 mul r3,r3,r1
 1506 059a 1344     	 add r3,r3,r2
 1507 059c 2033     	 adds r3,r3,#32
 1508 059e D3ED007A 	 flds s15,[r3]
 1509 05a2 27EE277A 	 fmuls s14,s14,s15
 1510 05a6 7B68     	 ldr r3,[r7,#4]
 1511 05a8 D3ED146A 	 flds s13,[r3,#80]
 1512 05ac 7B68     	 ldr r3,[r7,#4]
 1513 05ae 1B78     	 ldrb r3,[r3]
 1514 05b0 1946     	 mov r1,r3
 1515 05b2 2E4A     	 ldr r2,.L32
 1516 05b4 2C23     	 movs r3,#44
 1517 05b6 03FB01F3 	 mul r3,r3,r1
 1518 05ba 1344     	 add r3,r3,r2
 1519 05bc 2033     	 adds r3,r3,#32
 1520 05be D3ED007A 	 flds s15,[r3]
 1521 05c2 66EEA77A 	 fmuls s15,s13,s15
 1522 05c6 77EE677A 	 fsubs s15,s14,s15
 1523 05ca C7ED037A 	 fsts s15,[r7,#12]
  56:../kinematics.h **** 
  57:../kinematics.h **** 
  58:../kinematics.h ****   	n->real_speed.x = n->J[0][0] * motors[n->motor_L].predkosc_silnika + n->J[0][1] * motors[n->moto
 1524              	 .loc 5 58 0
 1525 05ce 7B68     	 ldr r3,[r7,#4]
 1526 05d0 93ED127A 	 flds s14,[r3,#72]
 1527 05d4 7B68     	 ldr r3,[r7,#4]
 1528 05d6 1B78     	 ldrb r3,[r3]
 1529 05d8 1946     	 mov r1,r3
 1530 05da 244A     	 ldr r2,.L32
 1531 05dc 2C23     	 movs r3,#44
 1532 05de 03FB01F3 	 mul r3,r3,r1
 1533 05e2 1344     	 add r3,r3,r2
 1534 05e4 1033     	 adds r3,r3,#16
 1535 05e6 D3ED007A 	 flds s15,[r3]
 1536 05ea 27EE277A 	 fmuls s14,s14,s15
 1537 05ee 7B68     	 ldr r3,[r7,#4]
 1538 05f0 D3ED136A 	 flds s13,[r3,#76]
 1539 05f4 7B68     	 ldr r3,[r7,#4]
 1540 05f6 5B78     	 ldrb r3,[r3,#1]
 1541 05f8 1946     	 mov r1,r3
 1542 05fa 1C4A     	 ldr r2,.L32
 1543 05fc 2C23     	 movs r3,#44
 1544 05fe 03FB01F3 	 mul r3,r3,r1
 1545 0602 1344     	 add r3,r3,r2
 1546 0604 1033     	 adds r3,r3,#16
 1547 0606 D3ED007A 	 flds s15,[r3]
 1548 060a 66EEA77A 	 fmuls s15,s13,s15
 1549 060e 77EE277A 	 fadds s15,s14,s15
 1550 0612 7B68     	 ldr r3,[r7,#4]
 1551 0614 C3ED057A 	 fsts s15,[r3,#20]
  59:../kinematics.h ****   	n->real_speed.y = n-> J[1][0] * motors[n->motor_L].predkosc_silnika + n->J[1][1] * motors[n->mot
 1552              	 .loc 5 59 0
 1553 0618 7B68     	 ldr r3,[r7,#4]
 1554 061a 93ED147A 	 flds s14,[r3,#80]
 1555 061e 7B68     	 ldr r3,[r7,#4]
 1556 0620 1B78     	 ldrb r3,[r3]
 1557 0622 1946     	 mov r1,r3
 1558 0624 114A     	 ldr r2,.L32
 1559 0626 2C23     	 movs r3,#44
 1560 0628 03FB01F3 	 mul r3,r3,r1
 1561 062c 1344     	 add r3,r3,r2
 1562 062e 1033     	 adds r3,r3,#16
 1563 0630 D3ED007A 	 flds s15,[r3]
 1564 0634 27EE277A 	 fmuls s14,s14,s15
 1565 0638 7B68     	 ldr r3,[r7,#4]
 1566 063a D3ED156A 	 flds s13,[r3,#84]
 1567 063e 7B68     	 ldr r3,[r7,#4]
 1568 0640 5B78     	 ldrb r3,[r3,#1]
 1569 0642 1946     	 mov r1,r3
 1570 0644 094A     	 ldr r2,.L32
 1571 0646 2C23     	 movs r3,#44
 1572 0648 03FB01F3 	 mul r3,r3,r1
 1573 064c 1344     	 add r3,r3,r2
 1574 064e 1033     	 adds r3,r3,#16
 1575 0650 D3ED007A 	 flds s15,[r3]
 1576 0654 66EEA77A 	 fmuls s15,s13,s15
 1577 0658 77EE277A 	 fadds s15,s14,s15
 1578 065c 7B68     	 ldr r3,[r7,#4]
 1579 065e C3ED067A 	 fsts s15,[r3,#24]
 1580              	.LBB4:
  60:../kinematics.h **** 
  61:../kinematics.h ****   	for(uint8_t i = 4; i >0; i--)								//moving eFy_buffer to make space for new value
 1581              	 .loc 5 61 0
 1582 0662 0423     	 movs r3,#4
 1583 0664 87F84F30 	 strb r3,[r7,#79]
 1584 0668 1AE0     	 b .L27
 1585              	.L33:
 1586 066a 00BF     	 .align 2
 1587              	.L32:
 1588 066c 00000000 	 .word motors
 1589 0670 00000000 	 .word l1
 1590 0674 00000000 	 .word l2
 1591              	.L28:
  62:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 1592              	 .loc 5 62 0 discriminator 3
 1593 0678 97F84F30 	 ldrb r3,[r7,#79]
 1594 067c 97F84F20 	 ldrb r2,[r7,#79]
 1595 0680 013A     	 subs r2,r2,#1
 1596 0682 7968     	 ldr r1,[r7,#4]
 1597 0684 0832     	 adds r2,r2,#8
 1598 0686 9200     	 lsls r2,r2,#2
 1599 0688 0A44     	 add r2,r2,r1
 1600 068a 5268     	 ldr r2,[r2,#4]
 1601 068c 7968     	 ldr r1,[r7,#4]
 1602 068e 0833     	 adds r3,r3,#8
 1603 0690 9B00     	 lsls r3,r3,#2
 1604 0692 0B44     	 add r3,r3,r1
 1605 0694 5A60     	 str r2,[r3,#4]
  61:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 1606              	 .loc 5 61 0 discriminator 3
 1607 0696 97F84F30 	 ldrb r3,[r7,#79]
 1608 069a 013B     	 subs r3,r3,#1
 1609 069c 87F84F30 	 strb r3,[r7,#79]
 1610              	.L27:
  61:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 1611              	 .loc 5 61 0 is_stmt 0 discriminator 1
 1612 06a0 97F84F30 	 ldrb r3,[r7,#79]
 1613 06a4 002B     	 cmp r3,#0
 1614 06a6 E7D1     	 bne .L28
 1615              	.LBE4:
  63:../kinematics.h **** 
  64:../kinematics.h ****   	n->eF.x = H/(mianownik*5);				//mnozenie *5 poniewaz tak wyszlo z pomiarów nie wiadomo czemu al
 1616              	 .loc 5 64 0 is_stmt 1
 1617 06a8 D7ED057A 	 flds s15,[r7,#20]
 1618 06ac B1EE047A 	 fconsts s14,#20
 1619 06b0 67EE877A 	 fmuls s15,s15,s14
 1620 06b4 97ED047A 	 flds s14,[r7,#16]
 1621 06b8 C7EE277A 	 fdivs s15,s14,s15
 1622 06bc 7B68     	 ldr r3,[r7,#4]
 1623 06be C3ED077A 	 fsts s15,[r3,#28]
  65:../kinematics.h **** 
  66:../kinematics.h ****   	n->eF.y = I/mianownik;
 1624              	 .loc 5 66 0
 1625 06c2 97ED037A 	 flds s14,[r7,#12]
 1626 06c6 D7ED057A 	 flds s15,[r7,#20]
 1627 06ca C7EE277A 	 fdivs s15,s14,s15
 1628 06ce 7B68     	 ldr r3,[r7,#4]
 1629 06d0 C3ED087A 	 fsts s15,[r3,#32]
  67:../kinematics.h **** 
  68:../kinematics.h ****   	n->eFY_buffer[0] = n->eF.y;							//filling buffer with newest data
 1630              	 .loc 5 68 0
 1631 06d4 7B68     	 ldr r3,[r7,#4]
 1632 06d6 1A6A     	 ldr r2,[r3,#32]
 1633 06d8 7B68     	 ldr r3,[r7,#4]
 1634 06da 5A62     	 str r2,[r3,#36]
  69:../kinematics.h **** }
 1635              	 .loc 5 69 0
 1636 06dc 5037     	 adds r7,r7,#80
 1637              	.LCFI63:
 1638              	 .cfi_def_cfa_offset 16
 1639 06de BD46     	 mov sp,r7
 1640              	.LCFI64:
 1641              	 .cfi_def_cfa_register 13
 1642              	 
 1643 06e0 BDEC028B 	 fldmfdd sp!,{d8}
 1644              	.LCFI65:
 1645              	 .cfi_restore 80
 1646              	 .cfi_restore 81
 1647              	 .cfi_def_cfa_offset 8
 1648 06e4 80BD     	 pop {r7,pc}
 1649              	 .cfi_endproc
 1650              	.LFE326:
 1652 06e6 00BF     	 .section .text.Update,"ax",%progbits
 1653              	 .align 2
 1654              	 .global Update
 1655              	 .thumb
 1656              	 .thumb_func
 1658              	Update:
 1659              	.LFB327:
  70:../kinematics.h **** void Update(struct Leg *n)		//Update floating numbers from raw data from motor drivers
  71:../kinematics.h **** {
 1660              	 .loc 5 71 0
 1661              	 .cfi_startproc
 1662              	 
 1663              	 
 1664              	 
 1665 0000 80B4     	 push {r7}
 1666              	.LCFI66:
 1667              	 .cfi_def_cfa_offset 4
 1668              	 .cfi_offset 7,-4
 1669 0002 85B0     	 sub sp,sp,#20
 1670              	.LCFI67:
 1671              	 .cfi_def_cfa_offset 24
 1672 0004 00AF     	 add r7,sp,#0
 1673              	.LCFI68:
 1674              	 .cfi_def_cfa_register 7
 1675 0006 7860     	 str r0,[r7,#4]
 1676              	.LBB5:
  72:../kinematics.h **** 	for(uint8_t i = 0; i < 8; i++)
 1677              	 .loc 5 72 0
 1678 0008 0023     	 movs r3,#0
 1679 000a FB73     	 strb r3,[r7,#15]
 1680 000c C8E0     	 b .L35
 1681              	.L36:
  73:../kinematics.h **** 	{
  74:../kinematics.h **** 		motors[i].ang_abs_poprzedni = motors[i].ang_abs_rad;
 1682              	 .loc 5 74 0 discriminator 3
 1683 000e FB7B     	 ldrb r3,[r7,#15]
 1684 0010 FA7B     	 ldrb r2,[r7,#15]
 1685 0012 6849     	 ldr r1,.L37
 1686 0014 2C20     	 movs r0,#44
 1687 0016 00FB02F2 	 mul r2,r0,r2
 1688 001a 0A44     	 add r2,r2,r1
 1689 001c 1032     	 adds r2,r2,#16
 1690 001e 5268     	 ldr r2,[r2,#4]
 1691 0020 6449     	 ldr r1,.L37
 1692 0022 2C20     	 movs r0,#44
 1693 0024 00FB03F3 	 mul r3,r0,r3
 1694 0028 0B44     	 add r3,r3,r1
 1695 002a 0833     	 adds r3,r3,#8
 1696 002c 5A60     	 str r2,[r3,#4]
  75:../kinematics.h **** 		motors[i].ang_abs_poprzedni = motors[i].ang_abs_rad;
 1697              	 .loc 5 75 0 discriminator 3
 1698 002e FB7B     	 ldrb r3,[r7,#15]
 1699 0030 FA7B     	 ldrb r2,[r7,#15]
 1700 0032 6049     	 ldr r1,.L37
 1701 0034 2C20     	 movs r0,#44
 1702 0036 00FB02F2 	 mul r2,r0,r2
 1703 003a 0A44     	 add r2,r2,r1
 1704 003c 1032     	 adds r2,r2,#16
 1705 003e 5268     	 ldr r2,[r2,#4]
 1706 0040 5C49     	 ldr r1,.L37
 1707 0042 2C20     	 movs r0,#44
 1708 0044 00FB03F3 	 mul r3,r0,r3
 1709 0048 0B44     	 add r3,r3,r1
 1710 004a 0833     	 adds r3,r3,#8
 1711 004c 5A60     	 str r2,[r3,#4]
  76:../kinematics.h **** 		motors[i].ang_abs_rad = (float)motors[i].ang_abs * pi / 32767.0f;;
 1712              	 .loc 5 76 0 discriminator 3
 1713 004e FB7B     	 ldrb r3,[r7,#15]
 1714 0050 FA7B     	 ldrb r2,[r7,#15]
 1715 0052 5849     	 ldr r1,.L37
 1716 0054 2C20     	 movs r0,#44
 1717 0056 00FB02F2 	 mul r2,r0,r2
 1718 005a 0A44     	 add r2,r2,r1
 1719 005c 0832     	 adds r2,r2,#8
 1720 005e 1268     	 ldr r2,[r2]
 1721 0060 07EE902A 	 fmsr s15,r2
 1722 0064 B8EEE77A 	 fsitos s14,s15
 1723 0068 534A     	 ldr r2,.L37+4
 1724 006a D2ED007A 	 flds s15,[r2]
 1725 006e 67EE277A 	 fmuls s15,s14,s15
 1726 0072 9FED527A 	 flds s14,.L37+8
 1727 0076 C7EE877A 	 fdivs s15,s15,s14
 1728 007a 4E4A     	 ldr r2,.L37
 1729 007c 2C21     	 movs r1,#44
 1730 007e 01FB03F3 	 mul r3,r1,r3
 1731 0082 1344     	 add r3,r3,r2
 1732 0084 1033     	 adds r3,r3,#16
 1733 0086 C3ED017A 	 fsts s15,[r3,#4]
  77:../kinematics.h **** 		motors[i].ang_abs_rad = (float)motors[i].ang_abs  * pi / 32767.0f;;
 1734              	 .loc 5 77 0 discriminator 3
 1735 008a FB7B     	 ldrb r3,[r7,#15]
 1736 008c FA7B     	 ldrb r2,[r7,#15]
 1737 008e 4949     	 ldr r1,.L37
 1738 0090 2C20     	 movs r0,#44
 1739 0092 00FB02F2 	 mul r2,r0,r2
 1740 0096 0A44     	 add r2,r2,r1
 1741 0098 0832     	 adds r2,r2,#8
 1742 009a 1268     	 ldr r2,[r2]
 1743 009c 07EE902A 	 fmsr s15,r2
 1744 00a0 B8EEE77A 	 fsitos s14,s15
 1745 00a4 444A     	 ldr r2,.L37+4
 1746 00a6 D2ED007A 	 flds s15,[r2]
 1747 00aa 67EE277A 	 fmuls s15,s14,s15
 1748 00ae 9FED437A 	 flds s14,.L37+8
 1749 00b2 C7EE877A 	 fdivs s15,s15,s14
 1750 00b6 3F4A     	 ldr r2,.L37
 1751 00b8 2C21     	 movs r1,#44
 1752 00ba 01FB03F3 	 mul r3,r1,r3
 1753 00be 1344     	 add r3,r3,r2
 1754 00c0 1033     	 adds r3,r3,#16
 1755 00c2 C3ED017A 	 fsts s15,[r3,#4]
  78:../kinematics.h **** 		motors[i].predkosc_silnika =(motors[i].predkosc_silnika * 0.4f) + ((motors[i].ang_abs_rad - motor
 1756              	 .loc 5 78 0 discriminator 3
 1757 00c6 FB7B     	 ldrb r3,[r7,#15]
 1758 00c8 FA7B     	 ldrb r2,[r7,#15]
 1759 00ca 3A49     	 ldr r1,.L37
 1760 00cc 2C20     	 movs r0,#44
 1761 00ce 00FB02F2 	 mul r2,r0,r2
 1762 00d2 0A44     	 add r2,r2,r1
 1763 00d4 1032     	 adds r2,r2,#16
 1764 00d6 D2ED007A 	 flds s15,[r2]
 1765 00da 9FED397A 	 flds s14,.L37+12
 1766 00de 27EE877A 	 fmuls s14,s15,s14
 1767 00e2 FA7B     	 ldrb r2,[r7,#15]
 1768 00e4 3349     	 ldr r1,.L37
 1769 00e6 2C20     	 movs r0,#44
 1770 00e8 00FB02F2 	 mul r2,r0,r2
 1771 00ec 0A44     	 add r2,r2,r1
 1772 00ee 1032     	 adds r2,r2,#16
 1773 00f0 D2ED016A 	 flds s13,[r2,#4]
 1774 00f4 FA7B     	 ldrb r2,[r7,#15]
 1775 00f6 2F49     	 ldr r1,.L37
 1776 00f8 2C20     	 movs r0,#44
 1777 00fa 00FB02F2 	 mul r2,r0,r2
 1778 00fe 0A44     	 add r2,r2,r1
 1779 0100 0832     	 adds r2,r2,#8
 1780 0102 D2ED017A 	 flds s15,[r2,#4]
 1781 0106 76EEE76A 	 fsubs s13,s13,s15
 1782 010a 2E4A     	 ldr r2,.L37+16
 1783 010c D2ED007A 	 flds s15,[r2]
 1784 0110 C6EEA77A 	 fdivs s15,s13,s15
 1785 0114 DFED2C6A 	 flds s13,.L37+20
 1786 0118 67EEA67A 	 fmuls s15,s15,s13
 1787 011c 77EE277A 	 fadds s15,s14,s15
 1788 0120 244A     	 ldr r2,.L37
 1789 0122 2C21     	 movs r1,#44
 1790 0124 01FB03F3 	 mul r3,r1,r3
 1791 0128 1344     	 add r3,r3,r2
 1792 012a 1033     	 adds r3,r3,#16
 1793 012c C3ED007A 	 fsts s15,[r3]
  79:../kinematics.h **** 		motors[i].predkosc_silnika =(motors[i].predkosc_silnika * 0.4f) + ((motors[i].ang_abs_rad - motor
 1794              	 .loc 5 79 0 discriminator 3
 1795 0130 FB7B     	 ldrb r3,[r7,#15]
 1796 0132 FA7B     	 ldrb r2,[r7,#15]
 1797 0134 1F49     	 ldr r1,.L37
 1798 0136 2C20     	 movs r0,#44
 1799 0138 00FB02F2 	 mul r2,r0,r2
 1800 013c 0A44     	 add r2,r2,r1
 1801 013e 1032     	 adds r2,r2,#16
 1802 0140 D2ED007A 	 flds s15,[r2]
 1803 0144 9FED1E7A 	 flds s14,.L37+12
 1804 0148 27EE877A 	 fmuls s14,s15,s14
 1805 014c FA7B     	 ldrb r2,[r7,#15]
 1806 014e 1949     	 ldr r1,.L37
 1807 0150 2C20     	 movs r0,#44
 1808 0152 00FB02F2 	 mul r2,r0,r2
 1809 0156 0A44     	 add r2,r2,r1
 1810 0158 1032     	 adds r2,r2,#16
 1811 015a D2ED016A 	 flds s13,[r2,#4]
 1812 015e FA7B     	 ldrb r2,[r7,#15]
 1813 0160 1449     	 ldr r1,.L37
 1814 0162 2C20     	 movs r0,#44
 1815 0164 00FB02F2 	 mul r2,r0,r2
 1816 0168 0A44     	 add r2,r2,r1
 1817 016a 0832     	 adds r2,r2,#8
 1818 016c D2ED017A 	 flds s15,[r2,#4]
 1819 0170 76EEE76A 	 fsubs s13,s13,s15
 1820 0174 134A     	 ldr r2,.L37+16
 1821 0176 D2ED007A 	 flds s15,[r2]
 1822 017a C6EEA77A 	 fdivs s15,s13,s15
 1823 017e DFED126A 	 flds s13,.L37+20
 1824 0182 67EEA67A 	 fmuls s15,s15,s13
 1825 0186 77EE277A 	 fadds s15,s14,s15
 1826 018a 0A4A     	 ldr r2,.L37
 1827 018c 2C21     	 movs r1,#44
 1828 018e 01FB03F3 	 mul r3,r1,r3
 1829 0192 1344     	 add r3,r3,r2
 1830 0194 1033     	 adds r3,r3,#16
 1831 0196 C3ED007A 	 fsts s15,[r3]
  72:../kinematics.h **** 	{
 1832              	 .loc 5 72 0 discriminator 3
 1833 019a FB7B     	 ldrb r3,[r7,#15]
 1834 019c 0133     	 adds r3,r3,#1
 1835 019e FB73     	 strb r3,[r7,#15]
 1836              	.L35:
  72:../kinematics.h **** 	{
 1837              	 .loc 5 72 0 is_stmt 0 discriminator 1
 1838 01a0 FB7B     	 ldrb r3,[r7,#15]
 1839 01a2 072B     	 cmp r3,#7
 1840 01a4 7FF633AF 	 bls .L36
 1841              	.LBE5:
  80:../kinematics.h **** 	}
  81:../kinematics.h **** }
 1842              	 .loc 5 81 0 is_stmt 1
 1843 01a8 1437     	 adds r7,r7,#20
 1844              	.LCFI69:
 1845              	 .cfi_def_cfa_offset 4
 1846 01aa BD46     	 mov sp,r7
 1847              	.LCFI70:
 1848              	 .cfi_def_cfa_register 13
 1849              	 
 1850 01ac 5DF8047B 	 ldr r7,[sp],#4
 1851              	.LCFI71:
 1852              	 .cfi_restore 7
 1853              	 .cfi_def_cfa_offset 0
 1854 01b0 7047     	 bx lr
 1855              	.L38:
 1856 01b2 00BF     	 .align 2
 1857              	.L37:
 1858 01b4 00000000 	 .word motors
 1859 01b8 00000000 	 .word pi
 1860 01bc 00FEFF46 	 .word 1191181824
 1861 01c0 CDCCCC3E 	 .word 1053609165
 1862 01c4 00000000 	 .word dt
 1863 01c8 9A99193F 	 .word 1058642330
 1864              	 .cfi_endproc
 1865              	.LFE327:
 1867              	 .section .text.Trajectory,"ax",%progbits
 1868              	 .align 2
 1869              	 .global Trajectory
 1870              	 .thumb
 1871              	 .thumb_func
 1873              	Trajectory:
 1874              	.LFB328:
  82:../kinematics.h **** void Trajectory(struct Leg *n)		//calculate trajectory for selected leg
  83:../kinematics.h **** {
 1875              	 .loc 5 83 0
 1876              	 .cfi_startproc
 1877              	 
 1878              	 
 1879 0000 80B5     	 push {r7,lr}
 1880              	.LCFI72:
 1881              	 .cfi_def_cfa_offset 8
 1882              	 .cfi_offset 7,-8
 1883              	 .cfi_offset 14,-4
 1884 0002 82B0     	 sub sp,sp,#8
 1885              	.LCFI73:
 1886              	 .cfi_def_cfa_offset 16
 1887 0004 00AF     	 add r7,sp,#0
 1888              	.LCFI74:
 1889              	 .cfi_def_cfa_register 7
 1890 0006 7860     	 str r0,[r7,#4]
  84:../kinematics.h **** 	//circle
  85:../kinematics.h **** 	n->foot.x = sinf(t) * 80.0f;
 1891              	 .loc 5 85 0
 1892 0008 114B     	 ldr r3,.L40
 1893 000a 1B68     	 ldr r3,[r3]
 1894 000c 1846     	 mov r0,r3
 1895 000e FFF7FEFF 	 bl sinf
 1896 0012 07EE100A 	 fmsr s14,r0
 1897 0016 DFED0F7A 	 flds s15,.L40+4
 1898 001a 67EE277A 	 fmuls s15,s14,s15
 1899 001e 7B68     	 ldr r3,[r7,#4]
 1900 0020 C3ED017A 	 fsts s15,[r3,#4]
  86:../kinematics.h **** 	n->foot.y =180.0f + cosf(t) * 80.0f;
 1901              	 .loc 5 86 0
 1902 0024 0A4B     	 ldr r3,.L40
 1903 0026 1B68     	 ldr r3,[r3]
 1904 0028 1846     	 mov r0,r3
 1905 002a FFF7FEFF 	 bl cosf
 1906 002e 07EE100A 	 fmsr s14,r0
 1907 0032 DFED087A 	 flds s15,.L40+4
 1908 0036 67EE277A 	 fmuls s15,s14,s15
 1909 003a 9FED077A 	 flds s14,.L40+8
 1910 003e 77EE877A 	 fadds s15,s15,s14
 1911 0042 7B68     	 ldr r3,[r7,#4]
 1912 0044 C3ED027A 	 fsts s15,[r3,#8]
  87:../kinematics.h **** 	/*if(n->skoki == 1)
  88:../kinematics.h **** 		n->foot.y = 280;
  89:../kinematics.h **** 	else
  90:../kinematics.h **** 	{
  91:../kinematics.h **** 		if(n->foot.y > 100)
  92:../kinematics.h **** 			n->foot.y -= 2;
  93:../kinematics.h **** 	}*/
  94:../kinematics.h **** }
 1913              	 .loc 5 94 0
 1914 0048 0837     	 adds r7,r7,#8
 1915              	.LCFI75:
 1916              	 .cfi_def_cfa_offset 8
 1917 004a BD46     	 mov sp,r7
 1918              	.LCFI76:
 1919              	 .cfi_def_cfa_register 13
 1920              	 
 1921 004c 80BD     	 pop {r7,pc}
 1922              	.L41:
 1923 004e 00BF     	 .align 2
 1924              	.L40:
 1925 0050 00000000 	 .word t
 1926 0054 0000A042 	 .word 1117782016
 1927 0058 00003443 	 .word 1127481344
 1928              	 .cfi_endproc
 1929              	.LFE328:
 1931              	 .section .text.XMC_Init,"ax",%progbits
 1932              	 .align 2
 1933              	 .global XMC_Init
 1934              	 .thumb
 1935              	 .thumb_func
 1937              	XMC_Init:
 1938              	.LFB329:
 1939              	 .file 6 "../communications.h"
   1:../communications.h **** /*
   2:../communications.h ****  * communications.h
   3:../communications.h ****  *
   4:../communications.h ****  *  Created on: 11 Jan 2018
   5:../communications.h ****  *      Author: Mafish
   6:../communications.h ****  */
   7:../communications.h **** 
   8:../communications.h **** uint8_t  XMC_Init(uint8_t);			//initialize driver (n). n=10 for all drivers
   9:../communications.h **** void XMC_Check();						//check state all drivers
  10:../communications.h **** void eorx();									//end of receive interrupt
  11:../communications.h **** void Message_interpreter();		//read last message
  12:../communications.h **** void Send(uint8_t);						// Send (n) bytes of data via half-duplex uart
  13:../communications.h **** void Send_Leg(struct Leg *n);	//Send regular command string to both of legs drivers
  14:../communications.h **** 
  15:../communications.h **** uint8_t  XMC_Init(uint8_t n)	//initialize driver (n). n=10 for all drivers
  16:../communications.h **** {
 1940              	 .loc 6 16 0
 1941              	 .cfi_startproc
 1942              	 
 1943              	 
 1944 0000 80B5     	 push {r7,lr}
 1945              	.LCFI77:
 1946              	 .cfi_def_cfa_offset 8
 1947              	 .cfi_offset 7,-8
 1948              	 .cfi_offset 14,-4
 1949 0002 84B0     	 sub sp,sp,#16
 1950              	.LCFI78:
 1951              	 .cfi_def_cfa_offset 24
 1952 0004 00AF     	 add r7,sp,#0
 1953              	.LCFI79:
 1954              	 .cfi_def_cfa_register 7
 1955 0006 0346     	 mov r3,r0
 1956 0008 FB71     	 strb r3,[r7,#7]
  17:../communications.h **** 	if(n == 10)							//if n = 10 then init all drivers
 1957              	 .loc 6 17 0
 1958 000a FB79     	 ldrb r3,[r7,#7]
 1959 000c 0A2B     	 cmp r3,#10
 1960 000e 1BD1     	 bne .L43
 1961              	.LBB6:
  18:../communications.h **** 		for(uint8_t i = 0; i < 8; i++)
 1962              	 .loc 6 18 0
 1963 0010 0023     	 movs r3,#0
 1964 0012 FB73     	 strb r3,[r7,#15]
 1965 0014 14E0     	 b .L44
 1966              	.L45:
  19:../communications.h **** 		{
  20:../communications.h **** 			txData[1] = 0x10 + i;
 1967              	 .loc 6 20 0 discriminator 3
 1968 0016 FB7B     	 ldrb r3,[r7,#15]
 1969 0018 1033     	 adds r3,r3,#16
 1970 001a DAB2     	 uxtb r2,r3
 1971 001c 164B     	 ldr r3,.L48
 1972 001e 5A70     	 strb r2,[r3,#1]
  21:../communications.h **** 			txData[2] = 0xA1;
 1973              	 .loc 6 21 0 discriminator 3
 1974 0020 154B     	 ldr r3,.L48
 1975 0022 A122     	 movs r2,#161
 1976 0024 9A70     	 strb r2,[r3,#2]
  22:../communications.h **** 			txData[3] = EOF;
 1977              	 .loc 6 22 0 discriminator 3
 1978 0026 144B     	 ldr r3,.L48
 1979 0028 DD22     	 movs r2,#221
 1980 002a DA70     	 strb r2,[r3,#3]
  23:../communications.h **** 			Send(4);
 1981              	 .loc 6 23 0 discriminator 3
 1982 002c 0420     	 movs r0,#4
 1983 002e FFF7FEFF 	 bl Send
  24:../communications.h **** 			delay(1100);
 1984              	 .loc 6 24 0 discriminator 3
 1985 0032 40F24C40 	 movw r0,#1100
 1986 0036 FFF7FEFF 	 bl delay
  18:../communications.h **** 		{
 1987              	 .loc 6 18 0 discriminator 3
 1988 003a FB7B     	 ldrb r3,[r7,#15]
 1989 003c 0133     	 adds r3,r3,#1
 1990 003e FB73     	 strb r3,[r7,#15]
 1991              	.L44:
  18:../communications.h **** 		{
 1992              	 .loc 6 18 0 is_stmt 0 discriminator 1
 1993 0040 FB7B     	 ldrb r3,[r7,#15]
 1994 0042 072B     	 cmp r3,#7
 1995 0044 E7D9     	 bls .L45
 1996              	.LBE6:
 1997 0046 04E0     	 b .L46
 1998              	.L43:
  25:../communications.h **** 		}
  26:../communications.h **** 	else										//init single driver (n)
  27:../communications.h **** 		txData[1] = 0x10 + n;
 1999              	 .loc 6 27 0 is_stmt 1
 2000 0048 FB79     	 ldrb r3,[r7,#7]
 2001 004a 1033     	 adds r3,r3,#16
 2002 004c DAB2     	 uxtb r2,r3
 2003 004e 0A4B     	 ldr r3,.L48
 2004 0050 5A70     	 strb r2,[r3,#1]
 2005              	.L46:
  28:../communications.h **** 		txData[2] = 0xA1;
 2006              	 .loc 6 28 0
 2007 0052 094B     	 ldr r3,.L48
 2008 0054 A122     	 movs r2,#161
 2009 0056 9A70     	 strb r2,[r3,#2]
  29:../communications.h **** 		txData[3] = EOF;
 2010              	 .loc 6 29 0
 2011 0058 074B     	 ldr r3,.L48
 2012 005a DD22     	 movs r2,#221
 2013 005c DA70     	 strb r2,[r3,#3]
  30:../communications.h **** 		Send(4);
 2014              	 .loc 6 30 0
 2015 005e 0420     	 movs r0,#4
 2016 0060 FFF7FEFF 	 bl Send
  31:../communications.h **** 		delay(1100);
 2017              	 .loc 6 31 0
 2018 0064 40F24C40 	 movw r0,#1100
 2019 0068 FFF7FEFF 	 bl delay
  32:../communications.h **** 
  33:../communications.h **** 	return 0;
 2020              	 .loc 6 33 0
 2021 006c 0023     	 movs r3,#0
  34:../communications.h **** }
 2022              	 .loc 6 34 0
 2023 006e 1846     	 mov r0,r3
 2024 0070 1037     	 adds r7,r7,#16
 2025              	.LCFI80:
 2026              	 .cfi_def_cfa_offset 8
 2027 0072 BD46     	 mov sp,r7
 2028              	.LCFI81:
 2029              	 .cfi_def_cfa_register 13
 2030              	 
 2031 0074 80BD     	 pop {r7,pc}
 2032              	.L49:
 2033 0076 00BF     	 .align 2
 2034              	.L48:
 2035 0078 00000000 	 .word txData
 2036              	 .cfi_endproc
 2037              	.LFE329:
 2039              	 .section .text.XMC_Check,"ax",%progbits
 2040              	 .align 2
 2041              	 .global XMC_Check
 2042              	 .thumb
 2043              	 .thumb_func
 2045              	XMC_Check:
 2046              	.LFB330:
  35:../communications.h **** void XMC_Check()	//check state all drivers
  36:../communications.h **** {
 2047              	 .loc 6 36 0
 2048              	 .cfi_startproc
 2049              	 
 2050              	 
 2051 0000 80B5     	 push {r7,lr}
 2052              	.LCFI82:
 2053              	 .cfi_def_cfa_offset 8
 2054              	 .cfi_offset 7,-8
 2055              	 .cfi_offset 14,-4
 2056 0002 82B0     	 sub sp,sp,#8
 2057              	.LCFI83:
 2058              	 .cfi_def_cfa_offset 16
 2059 0004 00AF     	 add r7,sp,#0
 2060              	.LCFI84:
 2061              	 .cfi_def_cfa_register 7
 2062              	.LBB7:
  37:../communications.h **** 	for(uint8_t i = 0; i < 8; i++)		//iterate to check state of all drivers
 2063              	 .loc 6 37 0
 2064 0006 0023     	 movs r3,#0
 2065 0008 FB71     	 strb r3,[r7,#7]
 2066 000a 1AE0     	 b .L51
 2067              	.L52:
  38:../communications.h **** 	{
  39:../communications.h **** 		DIGITAL_IO_SetOutputHigh(&LED1);
 2068              	 .loc 6 39 0 discriminator 3
 2069 000c 1048     	 ldr r0,.L53
 2070 000e FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
  40:../communications.h **** 		txData[1] = 0x10 + i;
 2071              	 .loc 6 40 0 discriminator 3
 2072 0012 FB79     	 ldrb r3,[r7,#7]
 2073 0014 1033     	 adds r3,r3,#16
 2074 0016 DAB2     	 uxtb r2,r3
 2075 0018 0E4B     	 ldr r3,.L53+4
 2076 001a 5A70     	 strb r2,[r3,#1]
  41:../communications.h **** 		txData[2] = 0xA3;
 2077              	 .loc 6 41 0 discriminator 3
 2078 001c 0D4B     	 ldr r3,.L53+4
 2079 001e A322     	 movs r2,#163
 2080 0020 9A70     	 strb r2,[r3,#2]
  42:../communications.h **** 		txData[3] = EOF;
 2081              	 .loc 6 42 0 discriminator 3
 2082 0022 0C4B     	 ldr r3,.L53+4
 2083 0024 DD22     	 movs r2,#221
 2084 0026 DA70     	 strb r2,[r3,#3]
  43:../communications.h **** 		Send(4);
 2085              	 .loc 6 43 0 discriminator 3
 2086 0028 0420     	 movs r0,#4
 2087 002a FFF7FEFF 	 bl Send
  44:../communications.h **** 		delay(1100);
 2088              	 .loc 6 44 0 discriminator 3
 2089 002e 40F24C40 	 movw r0,#1100
 2090 0032 FFF7FEFF 	 bl delay
  45:../communications.h **** 		DIGITAL_IO_SetOutputLow((&LED1));
 2091              	 .loc 6 45 0 discriminator 3
 2092 0036 0648     	 ldr r0,.L53
 2093 0038 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
  37:../communications.h **** 	{
 2094              	 .loc 6 37 0 discriminator 3
 2095 003c FB79     	 ldrb r3,[r7,#7]
 2096 003e 0133     	 adds r3,r3,#1
 2097 0040 FB71     	 strb r3,[r7,#7]
 2098              	.L51:
  37:../communications.h **** 	{
 2099              	 .loc 6 37 0 is_stmt 0 discriminator 1
 2100 0042 FB79     	 ldrb r3,[r7,#7]
 2101 0044 072B     	 cmp r3,#7
 2102 0046 E1D9     	 bls .L52
 2103              	.LBE7:
  46:../communications.h **** 	}
  47:../communications.h **** }
 2104              	 .loc 6 47 0 is_stmt 1
 2105 0048 0837     	 adds r7,r7,#8
 2106              	.LCFI85:
 2107              	 .cfi_def_cfa_offset 8
 2108 004a BD46     	 mov sp,r7
 2109              	.LCFI86:
 2110              	 .cfi_def_cfa_register 13
 2111              	 
 2112 004c 80BD     	 pop {r7,pc}
 2113              	.L54:
 2114 004e 00BF     	 .align 2
 2115              	.L53:
 2116 0050 00000000 	 .word LED1
 2117 0054 00000000 	 .word txData
 2118              	 .cfi_endproc
 2119              	.LFE330:
 2121              	 .section .text.eorx,"ax",%progbits
 2122              	 .align 2
 2123              	 .global eorx
 2124              	 .thumb
 2125              	 .thumb_func
 2127              	eorx:
 2128              	.LFB331:
  48:../communications.h **** void eorx()		//end of receive interrupt
  49:../communications.h **** {
 2129              	 .loc 6 49 0
 2130              	 .cfi_startproc
 2131              	 
 2132              	 
 2133 0000 80B5     	 push {r7,lr}
 2134              	.LCFI87:
 2135              	 .cfi_def_cfa_offset 8
 2136              	 .cfi_offset 7,-8
 2137              	 .cfi_offset 14,-4
 2138 0002 00AF     	 add r7,sp,#0
 2139              	.LCFI88:
 2140              	 .cfi_def_cfa_register 7
  50:../communications.h **** 	if(rxByte == SOF)
 2141              	 .loc 6 50 0
 2142 0004 1A4B     	 ldr r3,.L59
 2143 0006 1B78     	 ldrb r3,[r3]
 2144 0008 CC2B     	 cmp r3,#204
 2145 000a 07D1     	 bne .L56
  51:../communications.h **** 	{
  52:../communications.h **** 		rxData[0] = rxByte;
 2146              	 .loc 6 52 0
 2147 000c 184B     	 ldr r3,.L59
 2148 000e 1A78     	 ldrb r2,[r3]
 2149 0010 184B     	 ldr r3,.L59+4
 2150 0012 1A70     	 strb r2,[r3]
  53:../communications.h **** 		iterator_wiadomosci = 1;
 2151              	 .loc 6 53 0
 2152 0014 184B     	 ldr r3,.L59+8
 2153 0016 0122     	 movs r2,#1
 2154 0018 1A70     	 strb r2,[r3]
 2155 001a 23E0     	 b .L57
 2156              	.L56:
  54:../communications.h **** 	}
  55:../communications.h **** 	else if (rxByte == EOF)
 2157              	 .loc 6 55 0
 2158 001c 144B     	 ldr r3,.L59
 2159 001e 1B78     	 ldrb r3,[r3]
 2160 0020 DD2B     	 cmp r3,#221
 2161 0022 0ED1     	 bne .L58
  56:../communications.h **** 	{
  57:../communications.h **** 		rxData[iterator_wiadomosci +1] = EOF;
 2162              	 .loc 6 57 0
 2163 0024 144B     	 ldr r3,.L59+8
 2164 0026 1B78     	 ldrb r3,[r3]
 2165 0028 0133     	 adds r3,r3,#1
 2166 002a 124A     	 ldr r2,.L59+4
 2167 002c DD21     	 movs r1,#221
 2168 002e D154     	 strb r1,[r2,r3]
  58:../communications.h **** 		iterator_wiadomosci++;
 2169              	 .loc 6 58 0
 2170 0030 114B     	 ldr r3,.L59+8
 2171 0032 1B78     	 ldrb r3,[r3]
 2172 0034 0133     	 adds r3,r3,#1
 2173 0036 DAB2     	 uxtb r2,r3
 2174 0038 0F4B     	 ldr r3,.L59+8
 2175 003a 1A70     	 strb r2,[r3]
  59:../communications.h **** 		Message_interpreter();
 2176              	 .loc 6 59 0
 2177 003c FFF7FEFF 	 bl Message_interpreter
 2178 0040 10E0     	 b .L57
 2179              	.L58:
  60:../communications.h **** 	}
  61:../communications.h **** 	else if ( iterator_wiadomosci < 9)
 2180              	 .loc 6 61 0
 2181 0042 0D4B     	 ldr r3,.L59+8
 2182 0044 1B78     	 ldrb r3,[r3]
 2183 0046 082B     	 cmp r3,#8
 2184 0048 0CD8     	 bhi .L57
  62:../communications.h **** 	{
  63:../communications.h **** 		rxData[iterator_wiadomosci] =rxByte;
 2185              	 .loc 6 63 0
 2186 004a 0B4B     	 ldr r3,.L59+8
 2187 004c 1B78     	 ldrb r3,[r3]
 2188 004e 1A46     	 mov r2,r3
 2189 0050 074B     	 ldr r3,.L59
 2190 0052 1978     	 ldrb r1,[r3]
 2191 0054 074B     	 ldr r3,.L59+4
 2192 0056 9954     	 strb r1,[r3,r2]
  64:../communications.h **** 		iterator_wiadomosci++;
 2193              	 .loc 6 64 0
 2194 0058 074B     	 ldr r3,.L59+8
 2195 005a 1B78     	 ldrb r3,[r3]
 2196 005c 0133     	 adds r3,r3,#1
 2197 005e DAB2     	 uxtb r2,r3
 2198 0060 054B     	 ldr r3,.L59+8
 2199 0062 1A70     	 strb r2,[r3]
 2200              	.L57:
  65:../communications.h **** 	}
  66:../communications.h **** 	UART_Receive(&RS, &rxByte,1);
 2201              	 .loc 6 66 0
 2202 0064 0548     	 ldr r0,.L59+12
 2203 0066 0249     	 ldr r1,.L59
 2204 0068 0122     	 movs r2,#1
 2205 006a FFF7FEFF 	 bl UART_Receive
  67:../communications.h **** }
 2206              	 .loc 6 67 0
 2207 006e 80BD     	 pop {r7,pc}
 2208              	.L60:
 2209              	 .align 2
 2210              	.L59:
 2211 0070 00000000 	 .word rxByte
 2212 0074 00000000 	 .word rxData
 2213 0078 00000000 	 .word iterator_wiadomosci
 2214 007c 00000000 	 .word RS
 2215              	 .cfi_endproc
 2216              	.LFE331:
 2218              	 .section .text.eotx,"ax",%progbits
 2219              	 .align 2
 2220              	 .global eotx
 2221              	 .thumb
 2222              	 .thumb_func
 2224              	eotx:
 2225              	.LFB332:
  68:../communications.h **** void eotx()
  69:../communications.h **** {
 2226              	 .loc 6 69 0
 2227              	 .cfi_startproc
 2228              	 
 2229              	 
 2230              	 
 2231 0000 80B4     	 push {r7}
 2232              	.LCFI89:
 2233              	 .cfi_def_cfa_offset 4
 2234              	 .cfi_offset 7,-4
 2235 0002 00AF     	 add r7,sp,#0
 2236              	.LCFI90:
 2237              	 .cfi_def_cfa_register 7
  70:../communications.h **** 
  71:../communications.h **** }
 2238              	 .loc 6 71 0
 2239 0004 BD46     	 mov sp,r7
 2240              	.LCFI91:
 2241              	 .cfi_def_cfa_register 13
 2242              	 
 2243 0006 5DF8047B 	 ldr r7,[sp],#4
 2244              	.LCFI92:
 2245              	 .cfi_restore 7
 2246              	 .cfi_def_cfa_offset 0
 2247 000a 7047     	 bx lr
 2248              	 .cfi_endproc
 2249              	.LFE332:
 2251              	 .section .text.Message_interpreter,"ax",%progbits
 2252              	 .align 2
 2253              	 .global Message_interpreter
 2254              	 .thumb
 2255              	 .thumb_func
 2257              	Message_interpreter:
 2258              	.LFB333:
  72:../communications.h **** void Message_interpreter()		//read last message
  73:../communications.h **** {
 2259              	 .loc 6 73 0
 2260              	 .cfi_startproc
 2261              	 
 2262              	 
 2263              	 
 2264 0000 80B4     	 push {r7}
 2265              	.LCFI93:
 2266              	 .cfi_def_cfa_offset 4
 2267              	 .cfi_offset 7,-4
 2268 0002 83B0     	 sub sp,sp,#12
 2269              	.LCFI94:
 2270              	 .cfi_def_cfa_offset 16
 2271 0004 00AF     	 add r7,sp,#0
 2272              	.LCFI95:
 2273              	 .cfi_def_cfa_register 7
  74:../communications.h **** 
  75:../communications.h **** 	if(rxData[0] == SOF && rxData[1] == adress)
 2274              	 .loc 6 75 0
 2275 0006 314B     	 ldr r3,.L66
 2276 0008 1B78     	 ldrb r3,[r3]
 2277 000a CC2B     	 cmp r3,#204
 2278 000c 58D1     	 bne .L62
 2279              	 .loc 6 75 0 is_stmt 0 discriminator 1
 2280 000e 2F4B     	 ldr r3,.L66
 2281 0010 5A78     	 ldrb r2,[r3,#1]
 2282 0012 2F4B     	 ldr r3,.L66+4
 2283 0014 1B78     	 ldrb r3,[r3]
 2284 0016 9A42     	 cmp r2,r3
 2285 0018 52D1     	 bne .L62
 2286              	.LBB8:
  76:../communications.h **** 	{
  77:../communications.h **** 		uint8_t numer_silnika;
  78:../communications.h **** 		numer_silnika = rxData[2] - 0x10;
 2287              	 .loc 6 78 0 is_stmt 1
 2288 001a 2C4B     	 ldr r3,.L66
 2289 001c 9B78     	 ldrb r3,[r3,#2]
 2290 001e 103B     	 subs r3,r3,#16
 2291 0020 FB71     	 strb r3,[r7,#7]
  79:../communications.h **** 		if(rxData[3] == INIT)
 2292              	 .loc 6 79 0
 2293 0022 2A4B     	 ldr r3,.L66
 2294 0024 DB78     	 ldrb r3,[r3,#3]
 2295 0026 A12B     	 cmp r3,#161
 2296 0028 0AD1     	 bne .L64
  80:../communications.h **** 			motors[numer_silnika].is_go = rxData[4];
 2297              	 .loc 6 80 0
 2298 002a FB79     	 ldrb r3,[r7,#7]
 2299 002c 274A     	 ldr r2,.L66
 2300 002e 1079     	 ldrb r0,[r2,#4]
 2301 0030 284A     	 ldr r2,.L66+8
 2302 0032 2C21     	 movs r1,#44
 2303 0034 01FB03F3 	 mul r3,r1,r3
 2304 0038 1344     	 add r3,r3,r2
 2305 003a 0246     	 mov r2,r0
 2306 003c 5A70     	 strb r2,[r3,#1]
 2307 003e 3FE0     	 b .L62
 2308              	.L64:
  81:../communications.h **** 		else if(rxData[3] == CHECK)
 2309              	 .loc 6 81 0
 2310 0040 224B     	 ldr r3,.L66
 2311 0042 DB78     	 ldrb r3,[r3,#3]
 2312 0044 A32B     	 cmp r3,#163
 2313 0046 14D1     	 bne .L65
  82:../communications.h **** 		{
  83:../communications.h **** 			motors[numer_silnika].is_go = rxData[4];
 2314              	 .loc 6 83 0
 2315 0048 FB79     	 ldrb r3,[r7,#7]
 2316 004a 204A     	 ldr r2,.L66
 2317 004c 1079     	 ldrb r0,[r2,#4]
 2318 004e 214A     	 ldr r2,.L66+8
 2319 0050 2C21     	 movs r1,#44
 2320 0052 01FB03F3 	 mul r3,r1,r3
 2321 0056 1344     	 add r3,r3,r2
 2322 0058 0246     	 mov r2,r0
 2323 005a 5A70     	 strb r2,[r3,#1]
  84:../communications.h **** 			motors[numer_silnika].motor_n = rxData[5];
 2324              	 .loc 6 84 0
 2325 005c FB79     	 ldrb r3,[r7,#7]
 2326 005e 1B4A     	 ldr r2,.L66
 2327 0060 5079     	 ldrb r0,[r2,#5]
 2328 0062 1C4A     	 ldr r2,.L66+8
 2329 0064 2C21     	 movs r1,#44
 2330 0066 01FB03F3 	 mul r3,r1,r3
 2331 006a 1344     	 add r3,r3,r2
 2332 006c 0246     	 mov r2,r0
 2333 006e 1A70     	 strb r2,[r3]
 2334 0070 26E0     	 b .L62
 2335              	.L65:
  85:../communications.h **** 		}
  86:../communications.h **** 		else
  87:../communications.h **** 		{
  88:../communications.h **** 			motors[numer_silnika].i_net =rxData[3] << 8 | rxData[4];
 2336              	 .loc 6 88 0
 2337 0072 FB79     	 ldrb r3,[r7,#7]
 2338 0074 154A     	 ldr r2,.L66
 2339 0076 D278     	 ldrb r2,[r2,#3]
 2340 0078 1202     	 lsls r2,r2,#8
 2341 007a 91B2     	 uxth r1,r2
 2342 007c 134A     	 ldr r2,.L66
 2343 007e 1279     	 ldrb r2,[r2,#4]
 2344 0080 92B2     	 uxth r2,r2
 2345 0082 0A43     	 orrs r2,r2,r1
 2346 0084 90B2     	 uxth r0,r2
 2347 0086 134A     	 ldr r2,.L66+8
 2348 0088 2C21     	 movs r1,#44
 2349 008a 01FB03F3 	 mul r3,r1,r3
 2350 008e 1344     	 add r3,r3,r2
 2351 0090 0246     	 mov r2,r0
 2352 0092 9A80     	 strh r2,[r3,#4]
  89:../communications.h **** 			motors[numer_silnika].ang_abs = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[8];
 2353              	 .loc 6 89 0
 2354 0094 FB79     	 ldrb r3,[r7,#7]
 2355 0096 0D4A     	 ldr r2,.L66
 2356 0098 5279     	 ldrb r2,[r2,#5]
 2357 009a 1106     	 lsls r1,r2,#24
 2358 009c 0B4A     	 ldr r2,.L66
 2359 009e 9279     	 ldrb r2,[r2,#6]
 2360 00a0 1204     	 lsls r2,r2,#16
 2361 00a2 1143     	 orrs r1,r1,r2
 2362 00a4 094A     	 ldr r2,.L66
 2363 00a6 D279     	 ldrb r2,[r2,#7]
 2364 00a8 1202     	 lsls r2,r2,#8
 2365 00aa 0A43     	 orrs r2,r2,r1
 2366 00ac 0749     	 ldr r1,.L66
 2367 00ae 097A     	 ldrb r1,[r1,#8]
 2368 00b0 0A43     	 orrs r2,r2,r1
 2369 00b2 0849     	 ldr r1,.L66+8
 2370 00b4 2C20     	 movs r0,#44
 2371 00b6 00FB03F3 	 mul r3,r0,r3
 2372 00ba 0B44     	 add r3,r3,r1
 2373 00bc 0833     	 adds r3,r3,#8
 2374 00be 1A60     	 str r2,[r3]
 2375              	.L62:
 2376              	.LBE8:
  90:../communications.h **** 		}
  91:../communications.h **** 	}
  92:../communications.h **** 
  93:../communications.h **** }
 2377              	 .loc 6 93 0
 2378 00c0 0C37     	 adds r7,r7,#12
 2379              	.LCFI96:
 2380              	 .cfi_def_cfa_offset 4
 2381 00c2 BD46     	 mov sp,r7
 2382              	.LCFI97:
 2383              	 .cfi_def_cfa_register 13
 2384              	 
 2385 00c4 5DF8047B 	 ldr r7,[sp],#4
 2386              	.LCFI98:
 2387              	 .cfi_restore 7
 2388              	 .cfi_def_cfa_offset 0
 2389 00c8 7047     	 bx lr
 2390              	.L67:
 2391 00ca 00BF     	 .align 2
 2392              	.L66:
 2393 00cc 00000000 	 .word rxData
 2394 00d0 00000000 	 .word adress
 2395 00d4 00000000 	 .word motors
 2396              	 .cfi_endproc
 2397              	.LFE333:
 2399              	 .section .text.Send_Leg,"ax",%progbits
 2400              	 .align 2
 2401              	 .global Send_Leg
 2402              	 .thumb
 2403              	 .thumb_func
 2405              	Send_Leg:
 2406              	.LFB334:
  94:../communications.h **** void Send_Leg(struct Leg *n)	//Send regular command string to both of legs drivers
  95:../communications.h **** {
 2407              	 .loc 6 95 0
 2408              	 .cfi_startproc
 2409              	 
 2410              	 
 2411 0000 80B5     	 push {r7,lr}
 2412              	.LCFI99:
 2413              	 .cfi_def_cfa_offset 8
 2414              	 .cfi_offset 7,-8
 2415              	 .cfi_offset 14,-4
 2416 0002 82B0     	 sub sp,sp,#8
 2417              	.LCFI100:
 2418              	 .cfi_def_cfa_offset 16
 2419 0004 00AF     	 add r7,sp,#0
 2420              	.LCFI101:
 2421              	 .cfi_def_cfa_register 7
 2422 0006 7860     	 str r0,[r7,#4]
  96:../communications.h **** 	motors[n->motor_L].poz_zad = motors[n->motor_L].teta * INT16_MAX / pi;
 2423              	 .loc 6 96 0
 2424 0008 7B68     	 ldr r3,[r7,#4]
 2425 000a 1B78     	 ldrb r3,[r3]
 2426 000c 1846     	 mov r0,r3
 2427 000e 7B68     	 ldr r3,[r7,#4]
 2428 0010 1B78     	 ldrb r3,[r3]
 2429 0012 1946     	 mov r1,r3
 2430 0014 8C4A     	 ldr r2,.L69
 2431 0016 2C23     	 movs r3,#44
 2432 0018 03FB01F3 	 mul r3,r3,r1
 2433 001c 1344     	 add r3,r3,r2
 2434 001e 2833     	 adds r3,r3,#40
 2435 0020 D3ED007A 	 flds s15,[r3]
 2436 0024 9FED897A 	 flds s14,.L69+4
 2437 0028 27EE877A 	 fmuls s14,s15,s14
 2438 002c 884B     	 ldr r3,.L69+8
 2439 002e D3ED007A 	 flds s15,[r3]
 2440 0032 C7EE277A 	 fdivs s15,s14,s15
 2441 0036 FCEEE77A 	 ftouizs s15,s15
 2442 003a C7ED007A 	 fsts s15,[r7]
 2443 003e 3B88     	 ldrh r3,[r7]
 2444 0040 99B2     	 uxth r1,r3
 2445 0042 814A     	 ldr r2,.L69
 2446 0044 2C23     	 movs r3,#44
 2447 0046 03FB00F3 	 mul r3,r3,r0
 2448 004a 1344     	 add r3,r3,r2
 2449 004c 1833     	 adds r3,r3,#24
 2450 004e 0A46     	 mov r2,r1
 2451 0050 1A80     	 strh r2,[r3]
  97:../communications.h **** 	motors[n->motor_L].poz_zad = motors[n->motor_L].teta * INT16_MAX / pi;
 2452              	 .loc 6 97 0
 2453 0052 7B68     	 ldr r3,[r7,#4]
 2454 0054 1B78     	 ldrb r3,[r3]
 2455 0056 1846     	 mov r0,r3
 2456 0058 7B68     	 ldr r3,[r7,#4]
 2457 005a 1B78     	 ldrb r3,[r3]
 2458 005c 1946     	 mov r1,r3
 2459 005e 7A4A     	 ldr r2,.L69
 2460 0060 2C23     	 movs r3,#44
 2461 0062 03FB01F3 	 mul r3,r3,r1
 2462 0066 1344     	 add r3,r3,r2
 2463 0068 2833     	 adds r3,r3,#40
 2464 006a D3ED007A 	 flds s15,[r3]
 2465 006e 9FED777A 	 flds s14,.L69+4
 2466 0072 27EE877A 	 fmuls s14,s15,s14
 2467 0076 764B     	 ldr r3,.L69+8
 2468 0078 D3ED007A 	 flds s15,[r3]
 2469 007c C7EE277A 	 fdivs s15,s14,s15
 2470 0080 FCEEE77A 	 ftouizs s15,s15
 2471 0084 C7ED007A 	 fsts s15,[r7]
 2472 0088 3B88     	 ldrh r3,[r7]
 2473 008a 99B2     	 uxth r1,r3
 2474 008c 6E4A     	 ldr r2,.L69
 2475 008e 2C23     	 movs r3,#44
 2476 0090 03FB00F3 	 mul r3,r3,r0
 2477 0094 1344     	 add r3,r3,r2
 2478 0096 1833     	 adds r3,r3,#24
 2479 0098 0A46     	 mov r2,r1
 2480 009a 1A80     	 strh r2,[r3]
  98:../communications.h **** 	 txData[1] = motors[n->motor_L].adress;
 2481              	 .loc 6 98 0
 2482 009c 7B68     	 ldr r3,[r7,#4]
 2483 009e 1B78     	 ldrb r3,[r3]
 2484 00a0 1946     	 mov r1,r3
 2485 00a2 694A     	 ldr r2,.L69
 2486 00a4 2C23     	 movs r3,#44
 2487 00a6 03FB01F3 	 mul r3,r3,r1
 2488 00aa 1344     	 add r3,r3,r2
 2489 00ac 9A78     	 ldrb r2,[r3,#2]
 2490 00ae 694B     	 ldr r3,.L69+12
 2491 00b0 5A70     	 strb r2,[r3,#1]
  99:../communications.h **** 	 txData[2] = motors[n->motor_L].poz_zad >> 8;
 2492              	 .loc 6 99 0
 2493 00b2 7B68     	 ldr r3,[r7,#4]
 2494 00b4 1B78     	 ldrb r3,[r3]
 2495 00b6 1946     	 mov r1,r3
 2496 00b8 634A     	 ldr r2,.L69
 2497 00ba 2C23     	 movs r3,#44
 2498 00bc 03FB01F3 	 mul r3,r3,r1
 2499 00c0 1344     	 add r3,r3,r2
 2500 00c2 1833     	 adds r3,r3,#24
 2501 00c4 1B88     	 ldrh r3,[r3]
 2502 00c6 1B0A     	 lsrs r3,r3,#8
 2503 00c8 9BB2     	 uxth r3,r3
 2504 00ca DAB2     	 uxtb r2,r3
 2505 00cc 614B     	 ldr r3,.L69+12
 2506 00ce 9A70     	 strb r2,[r3,#2]
 100:../communications.h **** 	 txData[3] = motors[n->motor_L].poz_zad;
 2507              	 .loc 6 100 0
 2508 00d0 7B68     	 ldr r3,[r7,#4]
 2509 00d2 1B78     	 ldrb r3,[r3]
 2510 00d4 1946     	 mov r1,r3
 2511 00d6 5C4A     	 ldr r2,.L69
 2512 00d8 2C23     	 movs r3,#44
 2513 00da 03FB01F3 	 mul r3,r3,r1
 2514 00de 1344     	 add r3,r3,r2
 2515 00e0 1833     	 adds r3,r3,#24
 2516 00e2 1B88     	 ldrh r3,[r3]
 2517 00e4 DAB2     	 uxtb r2,r3
 2518 00e6 5B4B     	 ldr r3,.L69+12
 2519 00e8 DA70     	 strb r2,[r3,#3]
 101:../communications.h **** 	 txData[4] = motors[n->motor_L].ks >> 8;
 2520              	 .loc 6 101 0
 2521 00ea 7B68     	 ldr r3,[r7,#4]
 2522 00ec 1B78     	 ldrb r3,[r3]
 2523 00ee 1946     	 mov r1,r3
 2524 00f0 554A     	 ldr r2,.L69
 2525 00f2 2C23     	 movs r3,#44
 2526 00f4 03FB01F3 	 mul r3,r3,r1
 2527 00f8 1344     	 add r3,r3,r2
 2528 00fa 1833     	 adds r3,r3,#24
 2529 00fc 5B88     	 ldrh r3,[r3,#2]
 2530 00fe 1B0A     	 lsrs r3,r3,#8
 2531 0100 9BB2     	 uxth r3,r3
 2532 0102 DAB2     	 uxtb r2,r3
 2533 0104 534B     	 ldr r3,.L69+12
 2534 0106 1A71     	 strb r2,[r3,#4]
 102:../communications.h **** 	 txData[5] = motors[n->motor_L].ks;
 2535              	 .loc 6 102 0
 2536 0108 7B68     	 ldr r3,[r7,#4]
 2537 010a 1B78     	 ldrb r3,[r3]
 2538 010c 1946     	 mov r1,r3
 2539 010e 4E4A     	 ldr r2,.L69
 2540 0110 2C23     	 movs r3,#44
 2541 0112 03FB01F3 	 mul r3,r3,r1
 2542 0116 1344     	 add r3,r3,r2
 2543 0118 1833     	 adds r3,r3,#24
 2544 011a 5B88     	 ldrh r3,[r3,#2]
 2545 011c DAB2     	 uxtb r2,r3
 2546 011e 4D4B     	 ldr r3,.L69+12
 2547 0120 5A71     	 strb r2,[r3,#5]
 103:../communications.h **** 	 txData[6] = motors[n->motor_L].kd >>8;
 2548              	 .loc 6 103 0
 2549 0122 7B68     	 ldr r3,[r7,#4]
 2550 0124 1B78     	 ldrb r3,[r3]
 2551 0126 1946     	 mov r1,r3
 2552 0128 474A     	 ldr r2,.L69
 2553 012a 2C23     	 movs r3,#44
 2554 012c 03FB01F3 	 mul r3,r3,r1
 2555 0130 1344     	 add r3,r3,r2
 2556 0132 1833     	 adds r3,r3,#24
 2557 0134 9B88     	 ldrh r3,[r3,#4]
 2558 0136 1B0A     	 lsrs r3,r3,#8
 2559 0138 9BB2     	 uxth r3,r3
 2560 013a DAB2     	 uxtb r2,r3
 2561 013c 454B     	 ldr r3,.L69+12
 2562 013e 9A71     	 strb r2,[r3,#6]
 104:../communications.h **** 	 txData[7] = motors[n->motor_L].kd;
 2563              	 .loc 6 104 0
 2564 0140 7B68     	 ldr r3,[r7,#4]
 2565 0142 1B78     	 ldrb r3,[r3]
 2566 0144 1946     	 mov r1,r3
 2567 0146 404A     	 ldr r2,.L69
 2568 0148 2C23     	 movs r3,#44
 2569 014a 03FB01F3 	 mul r3,r3,r1
 2570 014e 1344     	 add r3,r3,r2
 2571 0150 1833     	 adds r3,r3,#24
 2572 0152 9B88     	 ldrh r3,[r3,#4]
 2573 0154 DAB2     	 uxtb r2,r3
 2574 0156 3F4B     	 ldr r3,.L69+12
 2575 0158 DA71     	 strb r2,[r3,#7]
 105:../communications.h **** 	 txData[8] = EOF;
 2576              	 .loc 6 105 0
 2577 015a 3E4B     	 ldr r3,.L69+12
 2578 015c DD22     	 movs r2,#221
 2579 015e 1A72     	 strb r2,[r3,#8]
 106:../communications.h **** 	 Send(9);
 2580              	 .loc 6 106 0
 2581 0160 0920     	 movs r0,#9
 2582 0162 FFF7FEFF 	 bl Send
 107:../communications.h **** 	 delay(1100);
 2583              	 .loc 6 107 0
 2584 0166 40F24C40 	 movw r0,#1100
 2585 016a FFF7FEFF 	 bl delay
 108:../communications.h **** 	 txData[1] = motors[n->motor_R].adress;
 2586              	 .loc 6 108 0
 2587 016e 7B68     	 ldr r3,[r7,#4]
 2588 0170 5B78     	 ldrb r3,[r3,#1]
 2589 0172 1946     	 mov r1,r3
 2590 0174 344A     	 ldr r2,.L69
 2591 0176 2C23     	 movs r3,#44
 2592 0178 03FB01F3 	 mul r3,r3,r1
 2593 017c 1344     	 add r3,r3,r2
 2594 017e 9A78     	 ldrb r2,[r3,#2]
 2595 0180 344B     	 ldr r3,.L69+12
 2596 0182 5A70     	 strb r2,[r3,#1]
 109:../communications.h **** 	 txData[2] = motors[n->motor_R].poz_zad >> 8;
 2597              	 .loc 6 109 0
 2598 0184 7B68     	 ldr r3,[r7,#4]
 2599 0186 5B78     	 ldrb r3,[r3,#1]
 2600 0188 1946     	 mov r1,r3
 2601 018a 2F4A     	 ldr r2,.L69
 2602 018c 2C23     	 movs r3,#44
 2603 018e 03FB01F3 	 mul r3,r3,r1
 2604 0192 1344     	 add r3,r3,r2
 2605 0194 1833     	 adds r3,r3,#24
 2606 0196 1B88     	 ldrh r3,[r3]
 2607 0198 1B0A     	 lsrs r3,r3,#8
 2608 019a 9BB2     	 uxth r3,r3
 2609 019c DAB2     	 uxtb r2,r3
 2610 019e 2D4B     	 ldr r3,.L69+12
 2611 01a0 9A70     	 strb r2,[r3,#2]
 110:../communications.h **** 	 txData[3] = motors[n->motor_R].poz_zad;
 2612              	 .loc 6 110 0
 2613 01a2 7B68     	 ldr r3,[r7,#4]
 2614 01a4 5B78     	 ldrb r3,[r3,#1]
 2615 01a6 1946     	 mov r1,r3
 2616 01a8 274A     	 ldr r2,.L69
 2617 01aa 2C23     	 movs r3,#44
 2618 01ac 03FB01F3 	 mul r3,r3,r1
 2619 01b0 1344     	 add r3,r3,r2
 2620 01b2 1833     	 adds r3,r3,#24
 2621 01b4 1B88     	 ldrh r3,[r3]
 2622 01b6 DAB2     	 uxtb r2,r3
 2623 01b8 264B     	 ldr r3,.L69+12
 2624 01ba DA70     	 strb r2,[r3,#3]
 111:../communications.h **** 	 txData[4] = motors[n->motor_R].ks >> 8;
 2625              	 .loc 6 111 0
 2626 01bc 7B68     	 ldr r3,[r7,#4]
 2627 01be 5B78     	 ldrb r3,[r3,#1]
 2628 01c0 1946     	 mov r1,r3
 2629 01c2 214A     	 ldr r2,.L69
 2630 01c4 2C23     	 movs r3,#44
 2631 01c6 03FB01F3 	 mul r3,r3,r1
 2632 01ca 1344     	 add r3,r3,r2
 2633 01cc 1833     	 adds r3,r3,#24
 2634 01ce 5B88     	 ldrh r3,[r3,#2]
 2635 01d0 1B0A     	 lsrs r3,r3,#8
 2636 01d2 9BB2     	 uxth r3,r3
 2637 01d4 DAB2     	 uxtb r2,r3
 2638 01d6 1F4B     	 ldr r3,.L69+12
 2639 01d8 1A71     	 strb r2,[r3,#4]
 112:../communications.h **** 	 txData[5] = motors[n->motor_R].ks;
 2640              	 .loc 6 112 0
 2641 01da 7B68     	 ldr r3,[r7,#4]
 2642 01dc 5B78     	 ldrb r3,[r3,#1]
 2643 01de 1946     	 mov r1,r3
 2644 01e0 194A     	 ldr r2,.L69
 2645 01e2 2C23     	 movs r3,#44
 2646 01e4 03FB01F3 	 mul r3,r3,r1
 2647 01e8 1344     	 add r3,r3,r2
 2648 01ea 1833     	 adds r3,r3,#24
 2649 01ec 5B88     	 ldrh r3,[r3,#2]
 2650 01ee DAB2     	 uxtb r2,r3
 2651 01f0 184B     	 ldr r3,.L69+12
 2652 01f2 5A71     	 strb r2,[r3,#5]
 113:../communications.h **** 	 txData[6] = motors[n->motor_R].kd >>8;
 2653              	 .loc 6 113 0
 2654 01f4 7B68     	 ldr r3,[r7,#4]
 2655 01f6 5B78     	 ldrb r3,[r3,#1]
 2656 01f8 1946     	 mov r1,r3
 2657 01fa 134A     	 ldr r2,.L69
 2658 01fc 2C23     	 movs r3,#44
 2659 01fe 03FB01F3 	 mul r3,r3,r1
 2660 0202 1344     	 add r3,r3,r2
 2661 0204 1833     	 adds r3,r3,#24
 2662 0206 9B88     	 ldrh r3,[r3,#4]
 2663 0208 1B0A     	 lsrs r3,r3,#8
 2664 020a 9BB2     	 uxth r3,r3
 2665 020c DAB2     	 uxtb r2,r3
 2666 020e 114B     	 ldr r3,.L69+12
 2667 0210 9A71     	 strb r2,[r3,#6]
 114:../communications.h **** 	 txData[7] = motors[n->motor_R].kd;
 2668              	 .loc 6 114 0
 2669 0212 7B68     	 ldr r3,[r7,#4]
 2670 0214 5B78     	 ldrb r3,[r3,#1]
 2671 0216 1946     	 mov r1,r3
 2672 0218 0B4A     	 ldr r2,.L69
 2673 021a 2C23     	 movs r3,#44
 2674 021c 03FB01F3 	 mul r3,r3,r1
 2675 0220 1344     	 add r3,r3,r2
 2676 0222 1833     	 adds r3,r3,#24
 2677 0224 9B88     	 ldrh r3,[r3,#4]
 2678 0226 DAB2     	 uxtb r2,r3
 2679 0228 0A4B     	 ldr r3,.L69+12
 2680 022a DA71     	 strb r2,[r3,#7]
 115:../communications.h **** 	 txData[8] = EOF;
 2681              	 .loc 6 115 0
 2682 022c 094B     	 ldr r3,.L69+12
 2683 022e DD22     	 movs r2,#221
 2684 0230 1A72     	 strb r2,[r3,#8]
 116:../communications.h **** 	 Send(9);
 2685              	 .loc 6 116 0
 2686 0232 0920     	 movs r0,#9
 2687 0234 FFF7FEFF 	 bl Send
 117:../communications.h **** 	 delay(1100);
 2688              	 .loc 6 117 0
 2689 0238 40F24C40 	 movw r0,#1100
 2690 023c FFF7FEFF 	 bl delay
 118:../communications.h **** }
 2691              	 .loc 6 118 0
 2692 0240 0837     	 adds r7,r7,#8
 2693              	.LCFI102:
 2694              	 .cfi_def_cfa_offset 8
 2695 0242 BD46     	 mov sp,r7
 2696              	.LCFI103:
 2697              	 .cfi_def_cfa_register 13
 2698              	 
 2699 0244 80BD     	 pop {r7,pc}
 2700              	.L70:
 2701 0246 00BF     	 .align 2
 2702              	.L69:
 2703 0248 00000000 	 .word motors
 2704 024c 00FEFF46 	 .word 1191181824
 2705 0250 00000000 	 .word pi
 2706 0254 00000000 	 .word txData
 2707              	 .cfi_endproc
 2708              	.LFE334:
 2710              	 .section .text.Send,"ax",%progbits
 2711              	 .align 2
 2712              	 .global Send
 2713              	 .thumb
 2714              	 .thumb_func
 2716              	Send:
 2717              	.LFB335:
 119:../communications.h **** void Send(uint8_t size )	// Send (n) bytes of data via half-duplex uart
 120:../communications.h **** {
 2718              	 .loc 6 120 0
 2719              	 .cfi_startproc
 2720              	 
 2721              	 
 2722 0000 80B5     	 push {r7,lr}
 2723              	.LCFI104:
 2724              	 .cfi_def_cfa_offset 8
 2725              	 .cfi_offset 7,-8
 2726              	 .cfi_offset 14,-4
 2727 0002 82B0     	 sub sp,sp,#8
 2728              	.LCFI105:
 2729              	 .cfi_def_cfa_offset 16
 2730 0004 00AF     	 add r7,sp,#0
 2731              	.LCFI106:
 2732              	 .cfi_def_cfa_register 7
 2733 0006 0346     	 mov r3,r0
 2734 0008 FB71     	 strb r3,[r7,#7]
 121:../communications.h **** 
 122:../communications.h **** 	UART_Transmit(&RS, txData, size);
 2735              	 .loc 6 122 0
 2736 000a FB79     	 ldrb r3,[r7,#7]
 2737 000c 0948     	 ldr r0,.L73
 2738 000e 0A49     	 ldr r1,.L73+4
 2739 0010 1A46     	 mov r2,r3
 2740 0012 FFF7FEFF 	 bl UART_Transmit
 123:../communications.h **** 	while(UART_IsTxBusy(&RS));
 2741              	 .loc 6 123 0
 2742 0016 00BF     	 nop
 2743              	.L72:
 2744              	 .loc 6 123 0 is_stmt 0 discriminator 1
 2745 0018 0648     	 ldr r0,.L73
 2746 001a FFF7FEFF 	 bl UART_IsTxBusy
 2747 001e 0346     	 mov r3,r0
 2748 0020 002B     	 cmp r3,#0
 2749 0022 F9D1     	 bne .L72
 124:../communications.h **** 	UART_Receive(&RS, &rxByte, 1);
 2750              	 .loc 6 124 0 is_stmt 1
 2751 0024 0348     	 ldr r0,.L73
 2752 0026 0549     	 ldr r1,.L73+8
 2753 0028 0122     	 movs r2,#1
 2754 002a FFF7FEFF 	 bl UART_Receive
 125:../communications.h **** }
 2755              	 .loc 6 125 0
 2756 002e 0837     	 adds r7,r7,#8
 2757              	.LCFI107:
 2758              	 .cfi_def_cfa_offset 8
 2759 0030 BD46     	 mov sp,r7
 2760              	.LCFI108:
 2761              	 .cfi_def_cfa_register 13
 2762              	 
 2763 0032 80BD     	 pop {r7,pc}
 2764              	.L74:
 2765              	 .align 2
 2766              	.L73:
 2767 0034 00000000 	 .word RS
 2768 0038 00000000 	 .word txData
 2769 003c 00000000 	 .word rxByte
 2770              	 .cfi_endproc
 2771              	.LFE335:
 2773              	 .section .text.main,"ax",%progbits
 2774              	 .align 2
 2775              	 .global main
 2776              	 .thumb
 2777              	 .thumb_func
 2779              	main:
 2780              	.LFB336:
 2781              	 .file 7 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** #include <DAVE.h>
   3:../main.c     **** #include <math.h>
   4:../main.c     **** #include "variables.h"
   5:../main.c     **** #include "kinematics.h"
   6:../main.c     **** #include "communications.h"
   7:../main.c     **** //#include "dynamics.h"
   8:../main.c     **** 
   9:../main.c     **** int main(void)
  10:../main.c     **** {
 2782              	 .loc 7 10 0
 2783              	 .cfi_startproc
 2784              	 
 2785              	 
 2786 0000 80B5     	 push {r7,lr}
 2787              	.LCFI109:
 2788              	 .cfi_def_cfa_offset 8
 2789              	 .cfi_offset 7,-8
 2790              	 .cfi_offset 14,-4
 2791 0002 82B0     	 sub sp,sp,#8
 2792              	.LCFI110:
 2793              	 .cfi_def_cfa_offset 16
 2794 0004 00AF     	 add r7,sp,#0
 2795              	.LCFI111:
 2796              	 .cfi_def_cfa_register 7
  11:../main.c     ****   DAVE_STATUS_t status;
  12:../main.c     ****   status = DAVE_Init();
 2797              	 .loc 7 12 0
 2798 0006 FFF7FEFF 	 bl DAVE_Init
 2799 000a 0346     	 mov r3,r0
 2800 000c BB71     	 strb r3,[r7,#6]
  13:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 2801              	 .loc 7 13 0
 2802 000e 06E0     	 b .L76
 2803              	.L77:
  14:../main.c     ****   {
  15:../main.c     **** 	  delay(50000);
 2804              	 .loc 7 15 0
 2805 0010 4CF25030 	 movw r0,#50000
 2806 0014 FFF7FEFF 	 bl delay
  16:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
 2807              	 .loc 7 16 0
 2808 0018 2348     	 ldr r0,.L81
 2809 001a FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 2810              	.L76:
  13:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 2811              	 .loc 7 13 0
 2812 001e BB79     	 ldrb r3,[r7,#6]
 2813 0020 012B     	 cmp r3,#1
 2814 0022 F5D0     	 beq .L77
  17:../main.c     ****   }
  18:../main.c     ****   delay(250000);
 2815              	 .loc 7 18 0
 2816 0024 2148     	 ldr r0,.L81+4
 2817 0026 FFF7FEFF 	 bl delay
  19:../main.c     ****   Init();
 2818              	 .loc 7 19 0
 2819 002a FFF7FEFF 	 bl Init
  20:../main.c     **** 
  21:../main.c     ****  /*
  22:../main.c     ****   while(init == 0)							//wait for input from PC
  23:../main.c     ****   {
  24:../main.c     **** 	  delay(500000);
  25:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
  26:../main.c     ****   }
  27:../main.c     ****   */
  28:../main.c     **** 
  29:../main.c     ****   XMC_Init(10);
 2820              	 .loc 7 29 0
 2821 002e 0A20     	 movs r0,#10
 2822 0030 FFF7FEFF 	 bl XMC_Init
 2823              	.L80:
  30:../main.c     **** 
  31:../main.c     **** 
  32:../main.c     ****   while(1)
  33:../main.c     ****   {
  34:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 2824              	 .loc 7 34 0
 2825 0034 1C48     	 ldr r0,.L81
 2826 0036 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 2827              	.LBB9:
  35:../main.c     **** 	  for(uint8_t i =0; i < 4; i++)
 2828              	 .loc 7 35 0
 2829 003a 0023     	 movs r3,#0
 2830 003c FB71     	 strb r3,[r7,#7]
 2831 003e 21E0     	 b .L78
 2832              	.L79:
  36:../main.c     **** 	  {
  37:../main.c     **** 		  Ik(&Legs[i]);
 2833              	 .loc 7 37 0 discriminator 3
 2834 0040 FB79     	 ldrb r3,[r7,#7]
 2835 0042 5822     	 movs r2,#88
 2836 0044 02FB03F3 	 mul r3,r2,r3
 2837 0048 194A     	 ldr r2,.L81+8
 2838 004a 1344     	 add r3,r3,r2
 2839 004c 1846     	 mov r0,r3
 2840 004e FFF7FEFF 	 bl Ik
  38:../main.c     **** 		  Update(&Legs[i]);
 2841              	 .loc 7 38 0 discriminator 3
 2842 0052 FB79     	 ldrb r3,[r7,#7]
 2843 0054 5822     	 movs r2,#88
 2844 0056 02FB03F3 	 mul r3,r2,r3
 2845 005a 154A     	 ldr r2,.L81+8
 2846 005c 1344     	 add r3,r3,r2
 2847 005e 1846     	 mov r0,r3
 2848 0060 FFF7FEFF 	 bl Update
  39:../main.c     **** 		  Send_Leg(&Legs[i]);
 2849              	 .loc 7 39 0 discriminator 3
 2850 0064 FB79     	 ldrb r3,[r7,#7]
 2851 0066 5822     	 movs r2,#88
 2852 0068 02FB03F3 	 mul r3,r2,r3
 2853 006c 104A     	 ldr r2,.L81+8
 2854 006e 1344     	 add r3,r3,r2
 2855 0070 1846     	 mov r0,r3
 2856 0072 FFF7FEFF 	 bl Send_Leg
  40:../main.c     **** 		  delay(30000);
 2857              	 .loc 7 40 0 discriminator 3
 2858 0076 47F23050 	 movw r0,#30000
 2859 007a FFF7FEFF 	 bl delay
  35:../main.c     **** 	  {
 2860              	 .loc 7 35 0 discriminator 3
 2861 007e FB79     	 ldrb r3,[r7,#7]
 2862 0080 0133     	 adds r3,r3,#1
 2863 0082 FB71     	 strb r3,[r7,#7]
 2864              	.L78:
  35:../main.c     **** 	  {
 2865              	 .loc 7 35 0 is_stmt 0 discriminator 1
 2866 0084 FB79     	 ldrb r3,[r7,#7]
 2867 0086 032B     	 cmp r3,#3
 2868 0088 DAD9     	 bls .L79
 2869              	.LBE9:
  41:../main.c     **** 	  }
  42:../main.c     **** 
  43:../main.c     **** 	// stanowisko.torque[0] = TorqueFromInet(stanowisko.i_net[0]);
  44:../main.c     **** 	// stanowisko.torque[1] = TorqueFromInet(stanowisko.i_net[1]);
  45:../main.c     **** 	// t = Z_score_filter(stanowisko.eFY_buffer) * 25;
  46:../main.c     **** 	 //Reibert_Hopper(&stanowisko);
  47:../main.c     **** 	 //Fk(&stanowisko);
  48:../main.c     **** 	  t+= dt;
 2870              	 .loc 7 48 0 is_stmt 1
 2871 008a 0A4B     	 ldr r3,.L81+12
 2872 008c 93ED007A 	 flds s14,[r3]
 2873 0090 094B     	 ldr r3,.L81+16
 2874 0092 D3ED007A 	 flds s15,[r3]
 2875 0096 77EE277A 	 fadds s15,s14,s15
 2876 009a 064B     	 ldr r3,.L81+12
 2877 009c C3ED007A 	 fsts s15,[r3]
  49:../main.c     **** 
  50:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 2878              	 .loc 7 50 0
 2879 00a0 0148     	 ldr r0,.L81
 2880 00a2 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
  51:../main.c     **** 
  52:../main.c     ****   }
 2881              	 .loc 7 52 0
 2882 00a6 C5E7     	 b .L80
 2883              	.L82:
 2884              	 .align 2
 2885              	.L81:
 2886 00a8 00000000 	 .word LED1
 2887 00ac 90D00300 	 .word 250000
 2888 00b0 00000000 	 .word Legs
 2889 00b4 00000000 	 .word t
 2890 00b8 00000000 	 .word dt
 2891              	 .cfi_endproc
 2892              	.LFE336:
 2894              	 .text
 2895              	.Letext0:
 2896              	 .file 8 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2897              	 .file 9 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2898              	 .file 10 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2899              	 .file 11 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
 2900              	 .file 12 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_gpio.h"
 2901              	 .file 13 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_usic.h"
 2902              	 .file 14 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_uart.h"
 2903              	 .file 15 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
 2904              	 .file 16 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 2905              	 .file 17 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer.h"
 2906              	 .file 18 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DAVE.h"
 2907              	 .file 19 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Include/core_cm4.h"
 2908              	 .file 20 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 2909              	 .file 21 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 2910              	 .file 22 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer_extern.h"
 2911              	 .file 23 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_ToggleOutput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_ToggleOutput:00000000 XMC_GPIO_ToggleOutput
    {standard input}:162    .text.UART_IsTxBusy:00000000 $t
    {standard input}:166    .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:208    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:212    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:252    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:256    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:295    .text.DIGITAL_IO_ToggleOutput:00000000 $t
    {standard input}:299    .text.DIGITAL_IO_ToggleOutput:00000000 DIGITAL_IO_ToggleOutput
    {standard input}:342    .data.pi:00000000 pi
    {standard input}:339    .data.pi:00000000 $d
    {standard input}:349    .data.l1:00000000 l1
    {standard input}:346    .data.l1:00000000 $d
    {standard input}:356    .data.l2:00000000 l2
    {standard input}:353    .data.l2:00000000 $d
    {standard input}:363    .data.d:00000000 d
    {standard input}:360    .data.d:00000000 $d
    {standard input}:370    .bss.t:00000000 t
    {standard input}:367    .bss.t:00000000 $d
    {standard input}:377    .data.dt:00000000 dt
    {standard input}:374    .data.dt:00000000 $d
                            *COM*:0000000a rxData
                            *COM*:0000000a txData
    {standard input}:385    .data.adress:00000000 adress
    {standard input}:391    .bss.rxByte:00000000 rxByte
    {standard input}:392    .bss.rxByte:00000000 $d
    {standard input}:397    .bss.iterator_wiadomosci:00000000 iterator_wiadomosci
    {standard input}:398    .bss.iterator_wiadomosci:00000000 $d
    {standard input}:403    .data.is_delay:00000000 is_delay
    {standard input}:409    .bss.init:00000000 init
    {standard input}:410    .bss.init:00000000 $d
                            *COM*:00000160 motors
                            *COM*:00000160 Legs
    {standard input}:414    .text.delay:00000000 $t
    {standard input}:419    .text.delay:00000000 delay
    {standard input}:477    .text.delay:0000003c $d
    {standard input}:483    .text.Init:00000000 $t
    {standard input}:488    .text.Init:00000000 Init
    {standard input}:743    .text.Init:000001c4 $d
    {standard input}:752    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:757    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:788    .text.CCU43_1_IRQHandler:00000014 $d
    {standard input}:793    .text.Ik:00000000 $t
    {standard input}:798    .text.Ik:00000000 Ik
    {standard input}:983    .text.Ik:000001f0 $d
    {standard input}:991    .text.Fk:00000000 $t
    {standard input}:996    .text.Fk:00000000 Fk
    {standard input}:1320   .text.Fk:00000360 $d
    {standard input}:1326   .text.Fk:00000374 $t
    {standard input}:1588   .text.Fk:0000066c $d
    {standard input}:1593   .text.Fk:00000678 $t
    {standard input}:1653   .text.Update:00000000 $t
    {standard input}:1658   .text.Update:00000000 Update
    {standard input}:1858   .text.Update:000001b4 $d
    {standard input}:1868   .text.Trajectory:00000000 $t
    {standard input}:1873   .text.Trajectory:00000000 Trajectory
    {standard input}:1925   .text.Trajectory:00000050 $d
    {standard input}:1932   .text.XMC_Init:00000000 $t
    {standard input}:1937   .text.XMC_Init:00000000 XMC_Init
    {standard input}:2716   .text.Send:00000000 Send
    {standard input}:2035   .text.XMC_Init:00000078 $d
    {standard input}:2040   .text.XMC_Check:00000000 $t
    {standard input}:2045   .text.XMC_Check:00000000 XMC_Check
    {standard input}:2116   .text.XMC_Check:00000050 $d
    {standard input}:2122   .text.eorx:00000000 $t
    {standard input}:2127   .text.eorx:00000000 eorx
    {standard input}:2257   .text.Message_interpreter:00000000 Message_interpreter
    {standard input}:2211   .text.eorx:00000070 $d
    {standard input}:2219   .text.eotx:00000000 $t
    {standard input}:2224   .text.eotx:00000000 eotx
    {standard input}:2252   .text.Message_interpreter:00000000 $t
    {standard input}:2393   .text.Message_interpreter:000000cc $d
    {standard input}:2400   .text.Send_Leg:00000000 $t
    {standard input}:2405   .text.Send_Leg:00000000 Send_Leg
    {standard input}:2703   .text.Send_Leg:00000248 $d
    {standard input}:2711   .text.Send:00000000 $t
    {standard input}:2767   .text.Send:00000034 $d
    {standard input}:2774   .text.main:00000000 $t
    {standard input}:2779   .text.main:00000000 main
    {standard input}:2886   .text.main:000000a8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIMER_SetTimeInterval
TIMER_Start
TIMER_Stop
DELAY
sqrtf
acosf
asinf
sinf
cosf
atan2f
LED1
UART_Receive
RS
UART_Transmit
DAVE_Init
