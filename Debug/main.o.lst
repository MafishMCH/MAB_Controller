   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.XMC_GPIO_ToggleOutput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_ToggleOutput:
 120              	.LFB166:
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 309 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 139              	 .loc 1 312 0
 140 000c FB78     	 ldrb r3,[r7,#3]
 141 000e 4FF00112 	 mov r2,#65537
 142 0012 9A40     	 lsls r2,r2,r3
 143 0014 7B68     	 ldr r3,[r7,#4]
 144 0016 5A60     	 str r2,[r3,#4]
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 313 0
 146 0018 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001a BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001c 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0020 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE166:
 161 0022 00BF     	 .section .text.UART_IsTxBusy,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	UART_IsTxBusy:
 167              	.LFB267:
 168              	 .file 2 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 169              	 .loc 2 2117 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
 185              	 .loc 2 2119 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 9B68     	 ldr r3,[r3,#8]
 188 000c 1B7E     	 ldrb r3,[r3,#24]
 189 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
 190              	 .loc 2 2120 0
 191 0010 1846     	 mov r0,r3
 192 0012 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0014 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 0016 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001a 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE267:
 207              	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	DIGITAL_IO_SetOutputHigh:
 213              	.LFB269:
 214              	 .file 3 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 215              	 .loc 3 269 0
 216              	 .cfi_startproc
 217              	 
 218              	 
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI25:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI26:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 231              	 .loc 3 271 0
 232 0008 7B68     	 ldr r3,[r7,#4]
 233 000a 1A68     	 ldr r2,[r3]
 234 000c 7B68     	 ldr r3,[r7,#4]
 235 000e 1B7C     	 ldrb r3,[r3,#16]
 236 0010 1046     	 mov r0,r2
 237 0012 1946     	 mov r1,r3
 238 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 239              	 .loc 3 272 0
 240 0018 0837     	 adds r7,r7,#8
 241              	.LCFI27:
 242              	 .cfi_def_cfa_offset 8
 243 001a BD46     	 mov sp,r7
 244              	.LCFI28:
 245              	 .cfi_def_cfa_register 13
 246              	 
 247 001c 80BD     	 pop {r7,pc}
 248              	 .cfi_endproc
 249              	.LFE269:
 251 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 252              	 .align 2
 253              	 .thumb
 254              	 .thumb_func
 256              	DIGITAL_IO_SetOutputLow:
 257              	.LFB270:
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 258              	 .loc 3 316 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 80B5     	 push {r7,lr}
 263              	.LCFI29:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 82B0     	 sub sp,sp,#8
 268              	.LCFI30:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI31:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 274              	 .loc 3 318 0
 275 0008 7B68     	 ldr r3,[r7,#4]
 276 000a 1A68     	 ldr r2,[r3]
 277 000c 7B68     	 ldr r3,[r7,#4]
 278 000e 1B7C     	 ldrb r3,[r3,#16]
 279 0010 1046     	 mov r0,r2
 280 0012 1946     	 mov r1,r3
 281 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 282              	 .loc 3 319 0
 283 0018 0837     	 adds r7,r7,#8
 284              	.LCFI32:
 285              	 .cfi_def_cfa_offset 8
 286 001a BD46     	 mov sp,r7
 287              	.LCFI33:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 001c 80BD     	 pop {r7,pc}
 291              	 .cfi_endproc
 292              	.LFE270:
 294 001e 00BF     	 .section .text.DIGITAL_IO_ToggleOutput,"ax",%progbits
 295              	 .align 2
 296              	 .thumb
 297              	 .thumb_func
 299              	DIGITAL_IO_ToggleOutput:
 300              	.LFB271:
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to Toggle port pin.
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to toggle port pin.
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputLow(), DIGITAL_IO_SetOutputHigh()
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   uint32_t delay_count;;
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 1 -> 0 (if initial output level is logic
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 0 -> 1
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 301              	 .loc 3 368 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305 0000 80B5     	 push {r7,lr}
 306              	.LCFI34:
 307              	 .cfi_def_cfa_offset 8
 308              	 .cfi_offset 7,-8
 309              	 .cfi_offset 14,-4
 310 0002 82B0     	 sub sp,sp,#8
 311              	.LCFI35:
 312              	 .cfi_def_cfa_offset 16
 313 0004 00AF     	 add r7,sp,#0
 314              	.LCFI36:
 315              	 .cfi_def_cfa_register 7
 316 0006 7860     	 str r0,[r7,#4]
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 317              	 .loc 3 370 0
 318 0008 7B68     	 ldr r3,[r7,#4]
 319 000a 1A68     	 ldr r2,[r3]
 320 000c 7B68     	 ldr r3,[r7,#4]
 321 000e 1B7C     	 ldrb r3,[r3,#16]
 322 0010 1046     	 mov r0,r2
 323 0012 1946     	 mov r1,r3
 324 0014 FFF7FEFF 	 bl XMC_GPIO_ToggleOutput
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 325              	 .loc 3 371 0
 326 0018 0837     	 adds r7,r7,#8
 327              	.LCFI37:
 328              	 .cfi_def_cfa_offset 8
 329 001a BD46     	 mov sp,r7
 330              	.LCFI38:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 001c 80BD     	 pop {r7,pc}
 334              	 .cfi_endproc
 335              	.LFE271:
 337              	 .global pi
 338 001e 00BF     	 .section .data.pi,"aw",%progbits
 339              	 .align 2
 342              	pi:
 343 0000 D00F4940 	 .word 1078530000
 344              	 .global l1
 345              	 .section .data.l1,"aw",%progbits
 346              	 .align 2
 349              	l1:
 350 0000 0000C842 	 .word 1120403456
 351              	 .global l2
 352              	 .section .data.l2,"aw",%progbits
 353              	 .align 2
 356              	l2:
 357 0000 00004843 	 .word 1128792064
 358              	 .global d
 359              	 .section .data.d,"aw",%progbits
 360              	 .align 2
 363              	d:
 364 0000 0000B242 	 .word 1118961664
 365              	 .global t
 366              	 .section .bss.t,"aw",%nobits
 367              	 .align 2
 370              	t:
 371 0000 00000000 	 .space 4
 372              	 .global dt
 373              	 .section .data.dt,"aw",%progbits
 374              	 .align 2
 377              	dt:
 378 0000 0AD7A33C 	 .word 1017370378
 379              	 .comm rxData,10,4
 380              	 .comm txData,10,4
 381              	 .global adress
 382              	 .section .data.adress,"aw",%progbits
 385              	adress:
 386 0000 EE       	 .byte -18
 387              	 .global rxByte
 388              	 .section .bss.rxByte,"aw",%nobits
 391              	rxByte:
 392 0000 00       	 .space 1
 393              	 .global iterator_wiadomosci
 394              	 .section .bss.iterator_wiadomosci,"aw",%nobits
 397              	iterator_wiadomosci:
 398 0000 00       	 .space 1
 399              	 .global is_delay
 400              	 .section .data.is_delay,"aw",%progbits
 403              	is_delay:
 404 0000 01       	 .byte 1
 405              	 .global init
 406              	 .section .bss.init,"aw",%nobits
 409              	init:
 410 0000 00       	 .space 1
 411              	 .comm stanowisko,92,4
 412              	 .section .text.delay,"ax",%progbits
 413              	 .align 2
 414              	 .global delay
 415              	 .thumb
 416              	 .thumb_func
 418              	delay:
 419              	.LFB322:
 420              	 .file 4 "../variables.h"
   1:../variables.h **** #define SOF 0xCC
   2:../variables.h **** #define EOF 0xDD
   3:../variables.h **** #define INIT 0xA1
   4:../variables.h **** #define CHECK 0xA3
   5:../variables.h **** 
   6:../variables.h **** 
   7:../variables.h **** // kinematics vars
   8:../variables.h **** float pi = 3.14159f;
   9:../variables.h **** float l1 =100;
  10:../variables.h **** float l2 =200;
  11:../variables.h **** float d =89;
  12:../variables.h **** float t = 0.0f;
  13:../variables.h **** float dt = 0.02;
  14:../variables.h **** 
  15:../variables.h **** //communication vars
  16:../variables.h **** uint8_t rxData[10];
  17:../variables.h **** uint8_t txData[10];
  18:../variables.h **** uint8_t adress =0xEE;
  19:../variables.h **** uint8_t rxByte = 0;
  20:../variables.h **** uint8_t iterator_wiadomosci = 0;
  21:../variables.h **** 
  22:../variables.h **** //other vars
  23:../variables.h **** uint8_t is_delay = 1;
  24:../variables.h **** uint8_t init = 0;
  25:../variables.h **** 
  26:../variables.h **** struct vec2
  27:../variables.h **** {
  28:../variables.h **** 	float x;
  29:../variables.h **** 	float y;
  30:../variables.h **** };
  31:../variables.h **** struct vec3
  32:../variables.h **** {
  33:../variables.h **** 	float x;
  34:../variables.h **** 	float y;
  35:../variables.h **** 	float z;
  36:../variables.h **** };
  37:../variables.h **** struct Leg
  38:../variables.h **** {
  39:../variables.h **** 	uint8_t silnik_numer[2];
  40:../variables.h **** 	uint8_t silnik_start[2];
  41:../variables.h **** 	uint8_t adresy[2];
  42:../variables.h **** 	int16_t i_net[2];
  43:../variables.h **** 	int32_t kat_abs[2];
  44:../variables.h **** 	float kat_abs_poprzedni[2];
  45:../variables.h **** 	float predkosc_silnika[2];
  46:../variables.h **** 	int16_t ks;
  47:../variables.h **** 	int16_t kd;
  48:../variables.h **** 	int16_t dzielnik;
  49:../variables.h **** 	int16_t Iq_zadane[2];
  50:../variables.h **** 	int32_t teta_int[2];
  51:../variables.h **** 	int16_t poz_zad[2];
  52:../variables.h **** 	struct vec2 stopa;
  53:../variables.h **** 	float teta[2];
  54:../variables.h **** 	float r;
  55:../variables.h **** 	float r_poprzednie;
  56:../variables.h **** 	float kat_abs_rad[2];
  57:../variables.h **** };
  58:../variables.h **** struct Leg stanowisko;
  59:../variables.h **** 
  60:../variables.h **** 
  61:../variables.h **** void delay(uint32_t us)
  62:../variables.h **** {
 421              	 .loc 4 62 0
 422              	 .cfi_startproc
 423              	 
 424              	 
 425 0000 80B5     	 push {r7,lr}
 426              	.LCFI39:
 427              	 .cfi_def_cfa_offset 8
 428              	 .cfi_offset 7,-8
 429              	 .cfi_offset 14,-4
 430 0002 82B0     	 sub sp,sp,#8
 431              	.LCFI40:
 432              	 .cfi_def_cfa_offset 16
 433 0004 00AF     	 add r7,sp,#0
 434              	.LCFI41:
 435              	 .cfi_def_cfa_register 7
 436 0006 7860     	 str r0,[r7,#4]
  63:../variables.h **** 	us *= 100;
 437              	 .loc 4 63 0
 438 0008 7B68     	 ldr r3,[r7,#4]
 439 000a 6422     	 movs r2,#100
 440 000c 02FB03F3 	 mul r3,r2,r3
 441 0010 7B60     	 str r3,[r7,#4]
  64:../variables.h **** 	is_delay = 1;
 442              	 .loc 4 64 0
 443 0012 0A4B     	 ldr r3,.L11
 444 0014 0122     	 movs r2,#1
 445 0016 1A70     	 strb r2,[r3]
  65:../variables.h **** 	TIMER_SetTimeInterval(&DELAY, us);
 446              	 .loc 4 65 0
 447 0018 0948     	 ldr r0,.L11+4
 448 001a 7968     	 ldr r1,[r7,#4]
 449 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
  66:../variables.h **** 	TIMER_Start(&DELAY);
 450              	 .loc 4 66 0
 451 0020 0748     	 ldr r0,.L11+4
 452 0022 FFF7FEFF 	 bl TIMER_Start
  67:../variables.h **** 	while(is_delay);
 453              	 .loc 4 67 0
 454 0026 00BF     	 nop
 455              	.L10:
 456              	 .loc 4 67 0 is_stmt 0 discriminator 1
 457 0028 044B     	 ldr r3,.L11
 458 002a 1B78     	 ldrb r3,[r3]
 459 002c 002B     	 cmp r3,#0
 460 002e FBD1     	 bne .L10
  68:../variables.h **** 	TIMER_Stop(&DELAY);
 461              	 .loc 4 68 0 is_stmt 1
 462 0030 0348     	 ldr r0,.L11+4
 463 0032 FFF7FEFF 	 bl TIMER_Stop
  69:../variables.h **** }
 464              	 .loc 4 69 0
 465 0036 0837     	 adds r7,r7,#8
 466              	.LCFI42:
 467              	 .cfi_def_cfa_offset 8
 468 0038 BD46     	 mov sp,r7
 469              	.LCFI43:
 470              	 .cfi_def_cfa_register 13
 471              	 
 472 003a 80BD     	 pop {r7,pc}
 473              	.L12:
 474              	 .align 2
 475              	.L11:
 476 003c 00000000 	 .word is_delay
 477 0040 00000000 	 .word DELAY
 478              	 .cfi_endproc
 479              	.LFE322:
 481              	 .section .text.Init,"ax",%progbits
 482              	 .align 2
 483              	 .global Init
 484              	 .thumb
 485              	 .thumb_func
 487              	Init:
 488              	.LFB323:
  70:../variables.h **** 
  71:../variables.h **** void Init()
  72:../variables.h **** {
 489              	 .loc 4 72 0
 490              	 .cfi_startproc
 491              	 
 492              	 
 493              	 
 494 0000 80B4     	 push {r7}
 495              	.LCFI44:
 496              	 .cfi_def_cfa_offset 4
 497              	 .cfi_offset 7,-4
 498 0002 83B0     	 sub sp,sp,#12
 499              	.LCFI45:
 500              	 .cfi_def_cfa_offset 16
 501 0004 00AF     	 add r7,sp,#0
 502              	.LCFI46:
 503              	 .cfi_def_cfa_register 7
  73:../variables.h **** 	txData[0] = SOF;
 504              	 .loc 4 73 0
 505 0006 2A4B     	 ldr r3,.L16
 506 0008 CC22     	 movs r2,#204
 507 000a 1A70     	 strb r2,[r3]
  74:../variables.h **** 	stanowisko.adresy[0] = 0x10;
 508              	 .loc 4 74 0
 509 000c 294B     	 ldr r3,.L16+4
 510 000e 1022     	 movs r2,#16
 511 0010 1A71     	 strb r2,[r3,#4]
  75:../variables.h **** 	stanowisko.adresy[1] = 0x11;
 512              	 .loc 4 75 0
 513 0012 284B     	 ldr r3,.L16+4
 514 0014 1122     	 movs r2,#17
 515 0016 5A71     	 strb r2,[r3,#5]
 516              	.LBB2:
  76:../variables.h **** 	for(uint8_t i = 0 ; i < 2; i++)
 517              	 .loc 4 76 0
 518 0018 0023     	 movs r3,#0
 519 001a FB71     	 strb r3,[r7,#7]
 520 001c 2FE0     	 b .L14
 521              	.L15:
  77:../variables.h **** 	{
  78:../variables.h **** 		stanowisko.i_net[i] = 0;
 522              	 .loc 4 78 0 discriminator 3
 523 001e FB79     	 ldrb r3,[r7,#7]
 524 0020 244A     	 ldr r2,.L16+4
 525 0022 5B00     	 lsls r3,r3,#1
 526 0024 1344     	 add r3,r3,r2
 527 0026 0022     	 movs r2,#0
 528 0028 DA80     	 strh r2,[r3,#6]
  79:../variables.h **** 		stanowisko.kat_abs[i] = 0;
 529              	 .loc 4 79 0 discriminator 3
 530 002a FB79     	 ldrb r3,[r7,#7]
 531 002c 214A     	 ldr r2,.L16+4
 532 002e 0233     	 adds r3,r3,#2
 533 0030 9B00     	 lsls r3,r3,#2
 534 0032 1344     	 add r3,r3,r2
 535 0034 0022     	 movs r2,#0
 536 0036 5A60     	 str r2,[r3,#4]
  80:../variables.h **** 		stanowisko.kat_abs_poprzedni[i] = 0;
 537              	 .loc 4 80 0 discriminator 3
 538 0038 FB79     	 ldrb r3,[r7,#7]
 539 003a 1E4A     	 ldr r2,.L16+4
 540 003c 0433     	 adds r3,r3,#4
 541 003e 9B00     	 lsls r3,r3,#2
 542 0040 1344     	 add r3,r3,r2
 543 0042 4FF00002 	 mov r2,#0
 544 0046 5A60     	 str r2,[r3,#4]
  81:../variables.h **** 		stanowisko.predkosc_silnika[i] = 0;
 545              	 .loc 4 81 0 discriminator 3
 546 0048 FB79     	 ldrb r3,[r7,#7]
 547 004a 1A4A     	 ldr r2,.L16+4
 548 004c 0633     	 adds r3,r3,#6
 549 004e 9B00     	 lsls r3,r3,#2
 550 0050 1344     	 add r3,r3,r2
 551 0052 4FF00002 	 mov r2,#0
 552 0056 5A60     	 str r2,[r3,#4]
  82:../variables.h **** 		stanowisko.silnik_start[i]  =0;
 553              	 .loc 4 82 0 discriminator 3
 554 0058 FB79     	 ldrb r3,[r7,#7]
 555 005a 164A     	 ldr r2,.L16+4
 556 005c 1344     	 add r3,r3,r2
 557 005e 0022     	 movs r2,#0
 558 0060 9A70     	 strb r2,[r3,#2]
  83:../variables.h **** 		stanowisko.silnik_numer[i] = 0;
 559              	 .loc 4 83 0 discriminator 3
 560 0062 FB79     	 ldrb r3,[r7,#7]
 561 0064 134A     	 ldr r2,.L16+4
 562 0066 0021     	 movs r1,#0
 563 0068 D154     	 strb r1,[r2,r3]
  84:../variables.h **** 		stanowisko.Iq_zadane[i] = 0;
 564              	 .loc 4 84 0 discriminator 3
 565 006a FB79     	 ldrb r3,[r7,#7]
 566 006c 114A     	 ldr r2,.L16+4
 567 006e 1433     	 adds r3,r3,#20
 568 0070 5B00     	 lsls r3,r3,#1
 569 0072 1344     	 add r3,r3,r2
 570 0074 0022     	 movs r2,#0
 571 0076 5A80     	 strh r2,[r3,#2]
  76:../variables.h **** 	{
 572              	 .loc 4 76 0 discriminator 3
 573 0078 FB79     	 ldrb r3,[r7,#7]
 574 007a 0133     	 adds r3,r3,#1
 575 007c FB71     	 strb r3,[r7,#7]
 576              	.L14:
  76:../variables.h **** 	{
 577              	 .loc 4 76 0 is_stmt 0 discriminator 1
 578 007e FB79     	 ldrb r3,[r7,#7]
 579 0080 012B     	 cmp r3,#1
 580 0082 CCD9     	 bls .L15
 581              	.LBE2:
  85:../variables.h **** 	}
  86:../variables.h **** 	stanowisko.ks = 5050;
 582              	 .loc 4 86 0 is_stmt 1
 583 0084 0B4B     	 ldr r3,.L16+4
 584 0086 41F2BA32 	 movw r2,#5050
 585 008a 9A84     	 strh r2,[r3,#36]
  87:../variables.h **** 	stanowisko.kd = 8;
 586              	 .loc 4 87 0
 587 008c 094B     	 ldr r3,.L16+4
 588 008e 0822     	 movs r2,#8
 589 0090 DA84     	 strh r2,[r3,#38]
  88:../variables.h **** 	stanowisko.dzielnik = 100;
 590              	 .loc 4 88 0
 591 0092 084B     	 ldr r3,.L16+4
 592 0094 6422     	 movs r2,#100
 593 0096 1A85     	 strh r2,[r3,#40]
  89:../variables.h **** 	stanowisko.stopa.x = 0;
 594              	 .loc 4 89 0
 595 0098 064B     	 ldr r3,.L16+4
 596 009a 4FF00002 	 mov r2,#0
 597 009e DA63     	 str r2,[r3,#60]
  90:../variables.h **** 	stanowisko.stopa.y = 200;
 598              	 .loc 4 90 0
 599 00a0 044B     	 ldr r3,.L16+4
 600 00a2 054A     	 ldr r2,.L16+8
 601 00a4 1A64     	 str r2,[r3,#64]
  91:../variables.h **** }
 602              	 .loc 4 91 0
 603 00a6 0C37     	 adds r7,r7,#12
 604              	.LCFI47:
 605              	 .cfi_def_cfa_offset 4
 606 00a8 BD46     	 mov sp,r7
 607              	.LCFI48:
 608              	 .cfi_def_cfa_register 13
 609              	 
 610 00aa 5DF8047B 	 ldr r7,[sp],#4
 611              	.LCFI49:
 612              	 .cfi_restore 7
 613              	 .cfi_def_cfa_offset 0
 614 00ae 7047     	 bx lr
 615              	.L17:
 616              	 .align 2
 617              	.L16:
 618 00b0 00000000 	 .word txData
 619 00b4 00000000 	 .word stanowisko
 620 00b8 00004843 	 .word 1128792064
 621              	 .cfi_endproc
 622              	.LFE323:
 624              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 625              	 .align 2
 626              	 .global CCU43_1_IRQHandler
 627              	 .thumb
 628              	 .thumb_func
 630              	CCU43_1_IRQHandler:
 631              	.LFB324:
  92:../variables.h **** void TIMER_IRQ()
  93:../variables.h **** {
 632              	 .loc 4 93 0
 633              	 .cfi_startproc
 634              	 
 635              	 
 636              	 
 637 0000 80B4     	 push {r7}
 638              	.LCFI50:
 639              	 .cfi_def_cfa_offset 4
 640              	 .cfi_offset 7,-4
 641 0002 00AF     	 add r7,sp,#0
 642              	.LCFI51:
 643              	 .cfi_def_cfa_register 7
  94:../variables.h **** 	is_delay = 0;
 644              	 .loc 4 94 0
 645 0004 034B     	 ldr r3,.L19
 646 0006 0022     	 movs r2,#0
 647 0008 1A70     	 strb r2,[r3]
  95:../variables.h **** }
 648              	 .loc 4 95 0
 649 000a BD46     	 mov sp,r7
 650              	.LCFI52:
 651              	 .cfi_def_cfa_register 13
 652              	 
 653 000c 5DF8047B 	 ldr r7,[sp],#4
 654              	.LCFI53:
 655              	 .cfi_restore 7
 656              	 .cfi_def_cfa_offset 0
 657 0010 7047     	 bx lr
 658              	.L20:
 659 0012 00BF     	 .align 2
 660              	.L19:
 661 0014 00000000 	 .word is_delay
 662              	 .cfi_endproc
 663              	.LFE324:
 665              	 .section .text.Ik,"ax",%progbits
 666              	 .align 2
 667              	 .global Ik
 668              	 .thumb
 669              	 .thumb_func
 671              	Ik:
 672              	.LFB325:
 673              	 .file 5 "../kinematics.h"
   1:../kinematics.h **** /*
   2:../kinematics.h ****  * kinematics.h
   3:../kinematics.h ****  *
   4:../kinematics.h ****  *  Created on: 11 Jan 2018
   5:../kinematics.h ****  *      Author: Mafish
   6:../kinematics.h ****  */
   7:../kinematics.h **** 
   8:../kinematics.h **** void Ik(struct Leg *n);
   9:../kinematics.h **** void Fk(struct Leg *n);
  10:../kinematics.h **** void update(struct Leg *n);
  11:../kinematics.h **** 
  12:../kinematics.h **** void Ik(struct Leg *n)
  13:../kinematics.h **** {
 674              	 .loc 5 13 0
 675              	 .cfi_startproc
 676              	 
 677              	 
 678 0000 80B5     	 push {r7,lr}
 679              	.LCFI54:
 680              	 .cfi_def_cfa_offset 8
 681              	 .cfi_offset 7,-8
 682              	 .cfi_offset 14,-4
 683 0002 8AB0     	 sub sp,sp,#40
 684              	.LCFI55:
 685              	 .cfi_def_cfa_offset 48
 686 0004 00AF     	 add r7,sp,#0
 687              	.LCFI56:
 688              	 .cfi_def_cfa_register 7
 689 0006 7860     	 str r0,[r7,#4]
  14:../kinematics.h **** 	float x = n->stopa.x;
 690              	 .loc 5 14 0
 691 0008 7B68     	 ldr r3,[r7,#4]
 692 000a DB6B     	 ldr r3,[r3,#60]
 693 000c 7B62     	 str r3,[r7,#36]
  15:../kinematics.h **** 	float y = n->stopa.y;
 694              	 .loc 5 15 0
 695 000e 7B68     	 ldr r3,[r7,#4]
 696 0010 1B6C     	 ldr r3,[r3,#64]
 697 0012 3B62     	 str r3,[r7,#32]
  16:../kinematics.h **** 	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 698              	 .loc 5 16 0
 699 0014 6E4B     	 ldr r3,.L22
 700 0016 D3ED007A 	 flds s15,[r3]
 701 001a B0EE007A 	 fconsts s14,#0
 702 001e 87EE877A 	 fdivs s14,s15,s14
 703 0022 D7ED097A 	 flds s15,[r7,#36]
 704 0026 37EE677A 	 fsubs s14,s14,s15
 705 002a 694B     	 ldr r3,.L22
 706 002c D3ED007A 	 flds s15,[r3]
 707 0030 F0EE006A 	 fconsts s13,#0
 708 0034 C7EEA66A 	 fdivs s13,s15,s13
 709 0038 D7ED097A 	 flds s15,[r7,#36]
 710 003c 76EEE77A 	 fsubs s15,s13,s15
 711 0040 27EE277A 	 fmuls s14,s14,s15
 712 0044 D7ED086A 	 flds s13,[r7,#32]
 713 0048 D7ED087A 	 flds s15,[r7,#32]
 714 004c 66EEA77A 	 fmuls s15,s13,s15
 715 0050 77EE277A 	 fadds s15,s14,s15
 716 0054 17EE900A 	 fmrs r0,s15
 717 0058 FFF7FEFF 	 bl sqrtf
 718 005c F861     	 str r0,[r7,#28]
  17:../kinematics.h **** 	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 719              	 .loc 5 17 0
 720 005e 5C4B     	 ldr r3,.L22
 721 0060 D3ED007A 	 flds s15,[r3]
 722 0064 B0EE007A 	 fconsts s14,#0
 723 0068 87EE877A 	 fdivs s14,s15,s14
 724 006c D7ED097A 	 flds s15,[r7,#36]
 725 0070 37EE277A 	 fadds s14,s14,s15
 726 0074 564B     	 ldr r3,.L22
 727 0076 D3ED007A 	 flds s15,[r3]
 728 007a F0EE006A 	 fconsts s13,#0
 729 007e C7EEA66A 	 fdivs s13,s15,s13
 730 0082 D7ED097A 	 flds s15,[r7,#36]
 731 0086 76EEA77A 	 fadds s15,s13,s15
 732 008a 27EE277A 	 fmuls s14,s14,s15
 733 008e D7ED086A 	 flds s13,[r7,#32]
 734 0092 D7ED087A 	 flds s15,[r7,#32]
 735 0096 66EEA77A 	 fmuls s15,s13,s15
 736 009a 77EE277A 	 fadds s15,s14,s15
 737 009e 17EE900A 	 fmrs r0,s15
 738 00a2 FFF7FEFF 	 bl sqrtf
 739 00a6 B861     	 str r0,[r7,#24]
  18:../kinematics.h **** 	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 740              	 .loc 5 18 0
 741 00a8 4A4B     	 ldr r3,.L22+4
 742 00aa 93ED007A 	 flds s14,[r3]
 743 00ae 494B     	 ldr r3,.L22+4
 744 00b0 D3ED007A 	 flds s15,[r3]
 745 00b4 27EE277A 	 fmuls s14,s14,s15
 746 00b8 D7ED076A 	 flds s13,[r7,#28]
 747 00bc D7ED077A 	 flds s15,[r7,#28]
 748 00c0 66EEA77A 	 fmuls s15,s13,s15
 749 00c4 37EE277A 	 fadds s14,s14,s15
 750 00c8 434B     	 ldr r3,.L22+8
 751 00ca D3ED006A 	 flds s13,[r3]
 752 00ce 424B     	 ldr r3,.L22+8
 753 00d0 D3ED007A 	 flds s15,[r3]
 754 00d4 66EEA77A 	 fmuls s15,s13,s15
 755 00d8 37EE677A 	 fsubs s14,s14,s15
 756 00dc 3D4B     	 ldr r3,.L22+4
 757 00de D3ED007A 	 flds s15,[r3]
 758 00e2 77EEA76A 	 fadds s13,s15,s15
 759 00e6 D7ED077A 	 flds s15,[r7,#28]
 760 00ea 66EEA77A 	 fmuls s15,s13,s15
 761 00ee C7EE277A 	 fdivs s15,s14,s15
 762 00f2 C7ED057A 	 fsts s15,[r7,#20]
  19:../kinematics.h **** 	fi1 = acosf(fi1);
 763              	 .loc 5 19 0
 764 00f6 7869     	 ldr r0,[r7,#20]
 765 00f8 FFF7FEFF 	 bl acosf
 766 00fc 7861     	 str r0,[r7,#20]
  20:../kinematics.h **** 	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 767              	 .loc 5 20 0
 768 00fe 354B     	 ldr r3,.L22+4
 769 0100 93ED007A 	 flds s14,[r3]
 770 0104 334B     	 ldr r3,.L22+4
 771 0106 D3ED007A 	 flds s15,[r3]
 772 010a 27EE277A 	 fmuls s14,s14,s15
 773 010e D7ED066A 	 flds s13,[r7,#24]
 774 0112 D7ED067A 	 flds s15,[r7,#24]
 775 0116 66EEA77A 	 fmuls s15,s13,s15
 776 011a 37EE277A 	 fadds s14,s14,s15
 777 011e 2E4B     	 ldr r3,.L22+8
 778 0120 D3ED006A 	 flds s13,[r3]
 779 0124 2C4B     	 ldr r3,.L22+8
 780 0126 D3ED007A 	 flds s15,[r3]
 781 012a 66EEA77A 	 fmuls s15,s13,s15
 782 012e 37EE677A 	 fsubs s14,s14,s15
 783 0132 284B     	 ldr r3,.L22+4
 784 0134 D3ED007A 	 flds s15,[r3]
 785 0138 77EEA76A 	 fadds s13,s15,s15
 786 013c D7ED067A 	 flds s15,[r7,#24]
 787 0140 66EEA77A 	 fmuls s15,s13,s15
 788 0144 C7EE277A 	 fdivs s15,s14,s15
 789 0148 C7ED047A 	 fsts s15,[r7,#16]
  21:../kinematics.h **** 	fi2 = acosf(fi2);
 790              	 .loc 5 21 0
 791 014c 3869     	 ldr r0,[r7,#16]
 792 014e FFF7FEFF 	 bl acosf
 793 0152 3861     	 str r0,[r7,#16]
  22:../kinematics.h **** 	float psi1 = asinf(((d/2)-x)/La);
 794              	 .loc 5 22 0
 795 0154 1E4B     	 ldr r3,.L22
 796 0156 D3ED007A 	 flds s15,[r3]
 797 015a B0EE007A 	 fconsts s14,#0
 798 015e 87EE877A 	 fdivs s14,s15,s14
 799 0162 D7ED097A 	 flds s15,[r7,#36]
 800 0166 37EE677A 	 fsubs s14,s14,s15
 801 016a D7ED077A 	 flds s15,[r7,#28]
 802 016e C7EE277A 	 fdivs s15,s14,s15
 803 0172 17EE900A 	 fmrs r0,s15
 804 0176 FFF7FEFF 	 bl asinf
 805 017a F860     	 str r0,[r7,#12]
  23:../kinematics.h **** 	float psi2 = asinf(((d/2)+x)/Lb);
 806              	 .loc 5 23 0
 807 017c 144B     	 ldr r3,.L22
 808 017e D3ED007A 	 flds s15,[r3]
 809 0182 B0EE007A 	 fconsts s14,#0
 810 0186 87EE877A 	 fdivs s14,s15,s14
 811 018a D7ED097A 	 flds s15,[r7,#36]
 812 018e 37EE277A 	 fadds s14,s14,s15
 813 0192 D7ED067A 	 flds s15,[r7,#24]
 814 0196 C7EE277A 	 fdivs s15,s14,s15
 815 019a 17EE900A 	 fmrs r0,s15
 816 019e FFF7FEFF 	 bl asinf
 817 01a2 B860     	 str r0,[r7,#8]
  24:../kinematics.h **** 
  25:../kinematics.h **** 	n->teta[0] = fi1 - psi1;
 818              	 .loc 5 25 0
 819 01a4 97ED057A 	 flds s14,[r7,#20]
 820 01a8 D7ED037A 	 flds s15,[r7,#12]
 821 01ac 77EE677A 	 fsubs s15,s14,s15
 822 01b0 7B68     	 ldr r3,[r7,#4]
 823 01b2 C3ED117A 	 fsts s15,[r3,#68]
  26:../kinematics.h **** 	n->teta[1] = fi2 - psi2;
 824              	 .loc 5 26 0
 825 01b6 97ED047A 	 flds s14,[r7,#16]
 826 01ba D7ED027A 	 flds s15,[r7,#8]
 827 01be 77EE677A 	 fsubs s15,s14,s15
 828 01c2 7B68     	 ldr r3,[r7,#4]
 829 01c4 C3ED127A 	 fsts s15,[r3,#72]
  27:../kinematics.h **** }
 830              	 .loc 5 27 0
 831 01c8 2837     	 adds r7,r7,#40
 832              	.LCFI57:
 833              	 .cfi_def_cfa_offset 8
 834 01ca BD46     	 mov sp,r7
 835              	.LCFI58:
 836              	 .cfi_def_cfa_register 13
 837              	 
 838 01cc 80BD     	 pop {r7,pc}
 839              	.L23:
 840 01ce 00BF     	 .align 2
 841              	.L22:
 842 01d0 00000000 	 .word d
 843 01d4 00000000 	 .word l1
 844 01d8 00000000 	 .word l2
 845              	 .cfi_endproc
 846              	.LFE325:
 848              	 .global __aeabi_f2d
 849              	 .global __aeabi_dmul
 850              	 .global __aeabi_dsub
 851              	 .global __aeabi_dadd
 852              	 .global __aeabi_d2f
 853              	 .section .text.Fk,"ax",%progbits
 854              	 .align 2
 855              	 .global Fk
 856              	 .thumb
 857              	 .thumb_func
 859              	Fk:
 860              	.LFB326:
  28:../kinematics.h **** void Fk(struct Leg *n)
  29:../kinematics.h **** {
 861              	 .loc 5 29 0
 862              	 .cfi_startproc
 863              	 
 864              	 
 865 0000 2DE9B043 	 push {r4,r5,r7,r8,r9,lr}
 866              	.LCFI59:
 867              	 .cfi_def_cfa_offset 24
 868              	 .cfi_offset 4,-24
 869              	 .cfi_offset 5,-20
 870              	 .cfi_offset 7,-16
 871              	 .cfi_offset 8,-12
 872              	 .cfi_offset 9,-8
 873              	 .cfi_offset 14,-4
 874 0004 2DED028B 	 fstmfdd sp!,{d8}
 875              	.LCFI60:
 876              	 .cfi_def_cfa_offset 32
 877              	 .cfi_offset 80,-32
 878              	 .cfi_offset 81,-28
 879 0008 8CB0     	 sub sp,sp,#48
 880              	.LCFI61:
 881              	 .cfi_def_cfa_offset 80
 882 000a 00AF     	 add r7,sp,#0
 883              	.LCFI62:
 884              	 .cfi_def_cfa_register 7
 885 000c 7860     	 str r0,[r7,#4]
  30:../kinematics.h **** 	float a = d + l1*(sinf(n->teta[1]) + sinf(n->teta[0])) ;
 886              	 .loc 5 30 0
 887 000e 7B68     	 ldr r3,[r7,#4]
 888 0010 9B6C     	 ldr r3,[r3,#72]
 889 0012 1846     	 mov r0,r3
 890 0014 FFF7FEFF 	 bl sinf
 891 0018 08EE100A 	 fmsr s16,r0
 892 001c 7B68     	 ldr r3,[r7,#4]
 893 001e 5B6C     	 ldr r3,[r3,#68]
 894 0020 1846     	 mov r0,r3
 895 0022 FFF7FEFF 	 bl sinf
 896 0026 07EE900A 	 fmsr s15,r0
 897 002a 38EE277A 	 fadds s14,s16,s15
 898 002e 694B     	 ldr r3,.L25
 899 0030 D3ED007A 	 flds s15,[r3]
 900 0034 27EE277A 	 fmuls s14,s14,s15
 901 0038 674B     	 ldr r3,.L25+4
 902 003a D3ED007A 	 flds s15,[r3]
 903 003e 77EE277A 	 fadds s15,s14,s15
 904 0042 C7ED0B7A 	 fsts s15,[r7,#44]
  31:../kinematics.h **** 	float b = l1 * (cosf(n->teta[1]) - cosf(n->teta[0]));
 905              	 .loc 5 31 0
 906 0046 7B68     	 ldr r3,[r7,#4]
 907 0048 9B6C     	 ldr r3,[r3,#72]
 908 004a 1846     	 mov r0,r3
 909 004c FFF7FEFF 	 bl cosf
 910 0050 08EE100A 	 fmsr s16,r0
 911 0054 7B68     	 ldr r3,[r7,#4]
 912 0056 5B6C     	 ldr r3,[r3,#68]
 913 0058 1846     	 mov r0,r3
 914 005a FFF7FEFF 	 bl cosf
 915 005e 07EE900A 	 fmsr s15,r0
 916 0062 38EE677A 	 fsubs s14,s16,s15
 917 0066 5B4B     	 ldr r3,.L25
 918 0068 D3ED007A 	 flds s15,[r3]
 919 006c 67EE277A 	 fmuls s15,s14,s15
 920 0070 C7ED0A7A 	 fsts s15,[r7,#40]
  32:../kinematics.h **** 	float p = sqrtf(a*a + b*b);
 921              	 .loc 5 32 0
 922 0074 97ED0B7A 	 flds s14,[r7,#44]
 923 0078 D7ED0B7A 	 flds s15,[r7,#44]
 924 007c 27EE277A 	 fmuls s14,s14,s15
 925 0080 D7ED0A6A 	 flds s13,[r7,#40]
 926 0084 D7ED0A7A 	 flds s15,[r7,#40]
 927 0088 66EEA77A 	 fmuls s15,s13,s15
 928 008c 77EE277A 	 fadds s15,s14,s15
 929 0090 17EE900A 	 fmrs r0,s15
 930 0094 FFF7FEFF 	 bl sqrtf
 931 0098 7862     	 str r0,[r7,#36]
  33:../kinematics.h **** 	float fi = atan2f(b,a);
 932              	 .loc 5 33 0
 933 009a B86A     	 ldr r0,[r7,#40]
 934 009c F96A     	 ldr r1,[r7,#44]
 935 009e FFF7FEFF 	 bl atan2f
 936 00a2 3862     	 str r0,[r7,#32]
  34:../kinematics.h **** 	float theta = asinf(p / 2*l2);
 937              	 .loc 5 34 0
 938 00a4 D7ED097A 	 flds s15,[r7,#36]
 939 00a8 B0EE007A 	 fconsts s14,#0
 940 00ac 87EE877A 	 fdivs s14,s15,s14
 941 00b0 4A4B     	 ldr r3,.L25+8
 942 00b2 D3ED007A 	 flds s15,[r3]
 943 00b6 67EE277A 	 fmuls s15,s14,s15
 944 00ba 17EE900A 	 fmrs r0,s15
 945 00be FFF7FEFF 	 bl asinf
 946 00c2 F861     	 str r0,[r7,#28]
  35:../kinematics.h **** 	float gamma = pi / 2 - theta;
 947              	 .loc 5 35 0
 948 00c4 464B     	 ldr r3,.L25+12
 949 00c6 D3ED007A 	 flds s15,[r3]
 950 00ca B0EE007A 	 fconsts s14,#0
 951 00ce 87EE877A 	 fdivs s14,s15,s14
 952 00d2 D7ED077A 	 flds s15,[r7,#28]
 953 00d6 77EE677A 	 fsubs s15,s14,s15
 954 00da C7ED067A 	 fsts s15,[r7,#24]
  36:../kinematics.h **** 	float psi = gamma + fi;
 955              	 .loc 5 36 0
 956 00de 97ED067A 	 flds s14,[r7,#24]
 957 00e2 D7ED087A 	 flds s15,[r7,#32]
 958 00e6 77EE277A 	 fadds s15,s14,s15
 959 00ea C7ED057A 	 fsts s15,[r7,#20]
  37:../kinematics.h **** 	struct vec2 xy;
  38:../kinematics.h **** 	xy.x = d/2 - l1*sin(n->teta[0]) + l2*cosf(psi);
 960              	 .loc 5 38 0
 961 00ee 3A4B     	 ldr r3,.L25+4
 962 00f0 D3ED007A 	 flds s15,[r3]
 963 00f4 B0EE007A 	 fconsts s14,#0
 964 00f8 C7EE877A 	 fdivs s15,s15,s14
 965 00fc 17EE900A 	 fmrs r0,s15
 966 0100 FFF7FEFF 	 bl __aeabi_f2d
 967 0104 0446     	 mov r4,r0
 968 0106 0D46     	 mov r5,r1
 969 0108 324B     	 ldr r3,.L25
 970 010a 1B68     	 ldr r3,[r3]
 971 010c 1846     	 mov r0,r3
 972 010e FFF7FEFF 	 bl __aeabi_f2d
 973 0112 8046     	 mov r8,r0
 974 0114 8946     	 mov r9,r1
 975 0116 7B68     	 ldr r3,[r7,#4]
 976 0118 5B6C     	 ldr r3,[r3,#68]
 977 011a 1846     	 mov r0,r3
 978 011c FFF7FEFF 	 bl __aeabi_f2d
 979 0120 0246     	 mov r2,r0
 980 0122 0B46     	 mov r3,r1
 981 0124 1046     	 mov r0,r2
 982 0126 1946     	 mov r1,r3
 983 0128 FFF7FEFF 	 bl sin
 984 012c 0246     	 mov r2,r0
 985 012e 0B46     	 mov r3,r1
 986 0130 4046     	 mov r0,r8
 987 0132 4946     	 mov r1,r9
 988 0134 FFF7FEFF 	 bl __aeabi_dmul
 989 0138 0246     	 mov r2,r0
 990 013a 0B46     	 mov r3,r1
 991 013c 2046     	 mov r0,r4
 992 013e 2946     	 mov r1,r5
 993 0140 FFF7FEFF 	 bl __aeabi_dsub
 994 0144 0246     	 mov r2,r0
 995 0146 0B46     	 mov r3,r1
 996 0148 1446     	 mov r4,r2
 997 014a 1D46     	 mov r5,r3
 998 014c 7869     	 ldr r0,[r7,#20]
 999 014e FFF7FEFF 	 bl cosf
 1000 0152 07EE100A 	 fmsr s14,r0
 1001 0156 214B     	 ldr r3,.L25+8
 1002 0158 D3ED007A 	 flds s15,[r3]
 1003 015c 67EE277A 	 fmuls s15,s14,s15
 1004 0160 17EE900A 	 fmrs r0,s15
 1005 0164 FFF7FEFF 	 bl __aeabi_f2d
 1006 0168 0246     	 mov r2,r0
 1007 016a 0B46     	 mov r3,r1
 1008 016c 2046     	 mov r0,r4
 1009 016e 2946     	 mov r1,r5
 1010 0170 FFF7FEFF 	 bl __aeabi_dadd
 1011 0174 0246     	 mov r2,r0
 1012 0176 0B46     	 mov r3,r1
 1013 0178 1046     	 mov r0,r2
 1014 017a 1946     	 mov r1,r3
 1015 017c FFF7FEFF 	 bl __aeabi_d2f
 1016 0180 0346     	 mov r3,r0
 1017 0182 FB60     	 str r3,[r7,#12]
  39:../kinematics.h **** 	xy.y = l1*cosf(n->teta[0]) + l2* cosf(psi);
 1018              	 .loc 5 39 0
 1019 0184 7B68     	 ldr r3,[r7,#4]
 1020 0186 5B6C     	 ldr r3,[r3,#68]
 1021 0188 1846     	 mov r0,r3
 1022 018a FFF7FEFF 	 bl cosf
 1023 018e 07EE100A 	 fmsr s14,r0
 1024 0192 104B     	 ldr r3,.L25
 1025 0194 D3ED007A 	 flds s15,[r3]
 1026 0198 27EE278A 	 fmuls s16,s14,s15
 1027 019c 7869     	 ldr r0,[r7,#20]
 1028 019e FFF7FEFF 	 bl cosf
 1029 01a2 07EE100A 	 fmsr s14,r0
 1030 01a6 0D4B     	 ldr r3,.L25+8
 1031 01a8 D3ED007A 	 flds s15,[r3]
 1032 01ac 67EE277A 	 fmuls s15,s14,s15
 1033 01b0 78EE277A 	 fadds s15,s16,s15
 1034 01b4 C7ED047A 	 fsts s15,[r7,#16]
  40:../kinematics.h **** 	n->stopa = xy;
 1035              	 .loc 5 40 0
 1036 01b8 7B68     	 ldr r3,[r7,#4]
 1037 01ba 3C33     	 adds r3,r3,#60
 1038 01bc 07F10C02 	 add r2,r7,#12
 1039 01c0 92E80300 	 ldmia r2,{r0,r1}
 1040 01c4 83E80300 	 stmia r3,{r0,r1}
  41:../kinematics.h **** }
 1041              	 .loc 5 41 0
 1042 01c8 3037     	 adds r7,r7,#48
 1043              	.LCFI63:
 1044              	 .cfi_def_cfa_offset 32
 1045 01ca BD46     	 mov sp,r7
 1046              	.LCFI64:
 1047              	 .cfi_def_cfa_register 13
 1048              	 
 1049 01cc BDEC028B 	 fldmfdd sp!,{d8}
 1050              	.LCFI65:
 1051              	 .cfi_restore 80
 1052              	 .cfi_restore 81
 1053              	 .cfi_def_cfa_offset 24
 1054 01d0 BDE8B083 	 pop {r4,r5,r7,r8,r9,pc}
 1055              	.L26:
 1056              	 .align 2
 1057              	.L25:
 1058 01d4 00000000 	 .word l1
 1059 01d8 00000000 	 .word d
 1060 01dc 00000000 	 .word l2
 1061 01e0 00000000 	 .word pi
 1062              	 .cfi_endproc
 1063              	.LFE326:
 1065              	 .section .text.update,"ax",%progbits
 1066              	 .align 2
 1067              	 .global update
 1068              	 .thumb
 1069              	 .thumb_func
 1071              	update:
 1072              	.LFB327:
  42:../kinematics.h **** void update(struct Leg *n)
  43:../kinematics.h **** {
 1073              	 .loc 5 43 0
 1074              	 .cfi_startproc
 1075              	 
 1076              	 
 1077 0000 80B5     	 push {r7,lr}
 1078              	.LCFI66:
 1079              	 .cfi_def_cfa_offset 8
 1080              	 .cfi_offset 7,-8
 1081              	 .cfi_offset 14,-4
 1082 0002 82B0     	 sub sp,sp,#8
 1083              	.LCFI67:
 1084              	 .cfi_def_cfa_offset 16
 1085 0004 00AF     	 add r7,sp,#0
 1086              	.LCFI68:
 1087              	 .cfi_def_cfa_register 7
 1088 0006 7860     	 str r0,[r7,#4]
  44:../kinematics.h **** 	n->kat_abs_poprzedni[0] = n->kat_abs_rad[0];
 1089              	 .loc 5 44 0
 1090 0008 7B68     	 ldr r3,[r7,#4]
 1091 000a 5A6D     	 ldr r2,[r3,#84]
 1092 000c 7B68     	 ldr r3,[r7,#4]
 1093 000e 5A61     	 str r2,[r3,#20]
  45:../kinematics.h **** 	n->kat_abs_poprzedni[1] = n->kat_abs_rad[1];
 1094              	 .loc 5 45 0
 1095 0010 7B68     	 ldr r3,[r7,#4]
 1096 0012 9A6D     	 ldr r2,[r3,#88]
 1097 0014 7B68     	 ldr r3,[r7,#4]
 1098 0016 9A61     	 str r2,[r3,#24]
  46:../kinematics.h **** 	n->kat_abs_rad[0] = (float)n->kat_abs[0] * pi / 32767.0f;;
 1099              	 .loc 5 46 0
 1100 0018 7B68     	 ldr r3,[r7,#4]
 1101 001a DB68     	 ldr r3,[r3,#12]
 1102 001c 07EE903A 	 fmsr s15,r3
 1103 0020 B8EEE77A 	 fsitos s14,s15
 1104 0024 2E4B     	 ldr r3,.L28
 1105 0026 D3ED007A 	 flds s15,[r3]
 1106 002a 67EE277A 	 fmuls s15,s14,s15
 1107 002e 9FED2D7A 	 flds s14,.L28+4
 1108 0032 C7EE877A 	 fdivs s15,s15,s14
 1109 0036 7B68     	 ldr r3,[r7,#4]
 1110 0038 C3ED157A 	 fsts s15,[r3,#84]
  47:../kinematics.h **** 	n->kat_abs_rad[1] = (float)n->kat_abs[1]  * pi / 32767.0f;;
 1111              	 .loc 5 47 0
 1112 003c 7B68     	 ldr r3,[r7,#4]
 1113 003e 1B69     	 ldr r3,[r3,#16]
 1114 0040 07EE903A 	 fmsr s15,r3
 1115 0044 B8EEE77A 	 fsitos s14,s15
 1116 0048 254B     	 ldr r3,.L28
 1117 004a D3ED007A 	 flds s15,[r3]
 1118 004e 67EE277A 	 fmuls s15,s14,s15
 1119 0052 9FED247A 	 flds s14,.L28+4
 1120 0056 C7EE877A 	 fdivs s15,s15,s14
 1121 005a 7B68     	 ldr r3,[r7,#4]
 1122 005c C3ED167A 	 fsts s15,[r3,#88]
  48:../kinematics.h **** 	n->predkosc_silnika[0] =(n->predkosc_silnika[0] * 0.4f) + ((n->kat_abs_rad[0] - n->kat_abs_poprzed
 1123              	 .loc 5 48 0
 1124 0060 7B68     	 ldr r3,[r7,#4]
 1125 0062 D3ED077A 	 flds s15,[r3,#28]
 1126 0066 9FED207A 	 flds s14,.L28+8
 1127 006a 27EE877A 	 fmuls s14,s15,s14
 1128 006e 7B68     	 ldr r3,[r7,#4]
 1129 0070 D3ED156A 	 flds s13,[r3,#84]
 1130 0074 7B68     	 ldr r3,[r7,#4]
 1131 0076 D3ED057A 	 flds s15,[r3,#20]
 1132 007a 76EEE76A 	 fsubs s13,s13,s15
 1133 007e 1B4B     	 ldr r3,.L28+12
 1134 0080 D3ED007A 	 flds s15,[r3]
 1135 0084 C6EEA77A 	 fdivs s15,s13,s15
 1136 0088 DFED196A 	 flds s13,.L28+16
 1137 008c 67EEA67A 	 fmuls s15,s15,s13
 1138 0090 77EE277A 	 fadds s15,s14,s15
 1139 0094 7B68     	 ldr r3,[r7,#4]
 1140 0096 C3ED077A 	 fsts s15,[r3,#28]
  49:../kinematics.h **** 	n->predkosc_silnika[1] =(n->predkosc_silnika[0] * 0.4f) + ((n->kat_abs_rad[1] - n->kat_abs_poprzed
 1141              	 .loc 5 49 0
 1142 009a 7B68     	 ldr r3,[r7,#4]
 1143 009c D3ED077A 	 flds s15,[r3,#28]
 1144 00a0 9FED117A 	 flds s14,.L28+8
 1145 00a4 27EE877A 	 fmuls s14,s15,s14
 1146 00a8 7B68     	 ldr r3,[r7,#4]
 1147 00aa D3ED166A 	 flds s13,[r3,#88]
 1148 00ae 7B68     	 ldr r3,[r7,#4]
 1149 00b0 D3ED067A 	 flds s15,[r3,#24]
 1150 00b4 76EEE76A 	 fsubs s13,s13,s15
 1151 00b8 0C4B     	 ldr r3,.L28+12
 1152 00ba D3ED007A 	 flds s15,[r3]
 1153 00be C6EEA77A 	 fdivs s15,s13,s15
 1154 00c2 DFED0B6A 	 flds s13,.L28+16
 1155 00c6 67EEA67A 	 fmuls s15,s15,s13
 1156 00ca 77EE277A 	 fadds s15,s14,s15
 1157 00ce 7B68     	 ldr r3,[r7,#4]
 1158 00d0 C3ED087A 	 fsts s15,[r3,#32]
  50:../kinematics.h **** 	Ik(n);
 1159              	 .loc 5 50 0
 1160 00d4 7868     	 ldr r0,[r7,#4]
 1161 00d6 FFF7FEFF 	 bl Ik
  51:../kinematics.h **** }
 1162              	 .loc 5 51 0
 1163 00da 0837     	 adds r7,r7,#8
 1164              	.LCFI69:
 1165              	 .cfi_def_cfa_offset 8
 1166 00dc BD46     	 mov sp,r7
 1167              	.LCFI70:
 1168              	 .cfi_def_cfa_register 13
 1169              	 
 1170 00de 80BD     	 pop {r7,pc}
 1171              	.L29:
 1172              	 .align 2
 1173              	.L28:
 1174 00e0 00000000 	 .word pi
 1175 00e4 00FEFF46 	 .word 1191181824
 1176 00e8 CDCCCC3E 	 .word 1053609165
 1177 00ec 00000000 	 .word dt
 1178 00f0 9A99193F 	 .word 1058642330
 1179              	 .cfi_endproc
 1180              	.LFE327:
 1182              	 .section .text.Spring,"ax",%progbits
 1183              	 .align 2
 1184              	 .global Spring
 1185              	 .thumb
 1186              	 .thumb_func
 1188              	Spring:
 1189              	.LFB328:
  52:../kinematics.h **** void Spring(struct Leg *n)
  53:../kinematics.h **** {
 1190              	 .loc 5 53 0
 1191              	 .cfi_startproc
 1192              	 
 1193              	 
 1194              	 
 1195 0000 80B4     	 push {r7}
 1196              	.LCFI71:
 1197              	 .cfi_def_cfa_offset 4
 1198              	 .cfi_offset 7,-4
 1199 0002 83B0     	 sub sp,sp,#12
 1200              	.LCFI72:
 1201              	 .cfi_def_cfa_offset 16
 1202 0004 00AF     	 add r7,sp,#0
 1203              	.LCFI73:
 1204              	 .cfi_def_cfa_register 7
 1205 0006 7860     	 str r0,[r7,#4]
  54:../kinematics.h **** 	n->poz_zad[0] = n->teta[0] * INT16_MAX / pi;
 1206              	 .loc 5 54 0
 1207 0008 7B68     	 ldr r3,[r7,#4]
 1208 000a D3ED117A 	 flds s15,[r3,#68]
 1209 000e 9FED157A 	 flds s14,.L31
 1210 0012 27EE877A 	 fmuls s14,s15,s14
 1211 0016 144B     	 ldr r3,.L31+4
 1212 0018 D3ED007A 	 flds s15,[r3]
 1213 001c C7EE277A 	 fdivs s15,s14,s15
 1214 0020 FDEEE77A 	 ftosizs s15,s15
 1215 0024 C7ED007A 	 fsts s15,[r7]
 1216 0028 3B88     	 ldrh r3,[r7]
 1217 002a 9AB2     	 uxth r2,r3
 1218 002c 7B68     	 ldr r3,[r7,#4]
 1219 002e 1A87     	 strh r2,[r3,#56]
  55:../kinematics.h **** 	n->poz_zad[1] = n->teta[1] * INT16_MAX / pi;
 1220              	 .loc 5 55 0
 1221 0030 7B68     	 ldr r3,[r7,#4]
 1222 0032 D3ED127A 	 flds s15,[r3,#72]
 1223 0036 9FED0B7A 	 flds s14,.L31
 1224 003a 27EE877A 	 fmuls s14,s15,s14
 1225 003e 0A4B     	 ldr r3,.L31+4
 1226 0040 D3ED007A 	 flds s15,[r3]
 1227 0044 C7EE277A 	 fdivs s15,s14,s15
 1228 0048 FDEEE77A 	 ftosizs s15,s15
 1229 004c C7ED007A 	 fsts s15,[r7]
 1230 0050 3B88     	 ldrh r3,[r7]
 1231 0052 9AB2     	 uxth r2,r3
 1232 0054 7B68     	 ldr r3,[r7,#4]
 1233 0056 5A87     	 strh r2,[r3,#58]
  56:../kinematics.h **** }
 1234              	 .loc 5 56 0
 1235 0058 0C37     	 adds r7,r7,#12
 1236              	.LCFI74:
 1237              	 .cfi_def_cfa_offset 4
 1238 005a BD46     	 mov sp,r7
 1239              	.LCFI75:
 1240              	 .cfi_def_cfa_register 13
 1241              	 
 1242 005c 5DF8047B 	 ldr r7,[sp],#4
 1243              	.LCFI76:
 1244              	 .cfi_restore 7
 1245              	 .cfi_def_cfa_offset 0
 1246 0060 7047     	 bx lr
 1247              	.L32:
 1248 0062 00BF     	 .align 2
 1249              	.L31:
 1250 0064 00FEFF46 	 .word 1191181824
 1251 0068 00000000 	 .word pi
 1252              	 .cfi_endproc
 1253              	.LFE328:
 1255              	 .section .text.XMC_Init,"ax",%progbits
 1256              	 .align 2
 1257              	 .global XMC_Init
 1258              	 .thumb
 1259              	 .thumb_func
 1261              	XMC_Init:
 1262              	.LFB329:
 1263              	 .file 6 "../communications.h"
   1:../communications.h **** /*
   2:../communications.h ****  * communications.h
   3:../communications.h ****  *
   4:../communications.h ****  *  Created on: 11 Jan 2018
   5:../communications.h ****  *      Author: Mafish
   6:../communications.h ****  */
   7:../communications.h **** 
   8:../communications.h **** int XMC_Init();
   9:../communications.h **** void XMC_Check();
  10:../communications.h **** void eorx();
  11:../communications.h **** void Message_interpreter();
  12:../communications.h **** void Send(uint8_t);
  13:../communications.h **** void Send_Leg(struct Leg *n);
  14:../communications.h **** 
  15:../communications.h **** int XMC_Init()
  16:../communications.h **** {
 1264              	 .loc 6 16 0
 1265              	 .cfi_startproc
 1266              	 
 1267              	 
 1268 0000 80B5     	 push {r7,lr}
 1269              	.LCFI77:
 1270              	 .cfi_def_cfa_offset 8
 1271              	 .cfi_offset 7,-8
 1272              	 .cfi_offset 14,-4
 1273 0002 82B0     	 sub sp,sp,#8
 1274              	.LCFI78:
 1275              	 .cfi_def_cfa_offset 16
 1276 0004 00AF     	 add r7,sp,#0
 1277              	.LCFI79:
 1278              	 .cfi_def_cfa_register 7
  17:../communications.h **** 	init = 1;
 1279              	 .loc 6 17 0
 1280 0006 114B     	 ldr r3,.L37
 1281 0008 0122     	 movs r2,#1
 1282 000a 1A70     	 strb r2,[r3]
 1283              	.LBB3:
  18:../communications.h **** 	for(uint8_t i = 0; i < 8; i++)
 1284              	 .loc 6 18 0
 1285 000c 0023     	 movs r3,#0
 1286 000e FB71     	 strb r3,[r7,#7]
 1287 0010 14E0     	 b .L34
 1288              	.L35:
  19:../communications.h **** 	{
  20:../communications.h **** 		txData[1] = 0x10 + i;
 1289              	 .loc 6 20 0 discriminator 3
 1290 0012 FB79     	 ldrb r3,[r7,#7]
 1291 0014 1033     	 adds r3,r3,#16
 1292 0016 DAB2     	 uxtb r2,r3
 1293 0018 0D4B     	 ldr r3,.L37+4
 1294 001a 5A70     	 strb r2,[r3,#1]
  21:../communications.h **** 		txData[2] = 0xA1;
 1295              	 .loc 6 21 0 discriminator 3
 1296 001c 0C4B     	 ldr r3,.L37+4
 1297 001e A122     	 movs r2,#161
 1298 0020 9A70     	 strb r2,[r3,#2]
  22:../communications.h **** 		txData[3] = EOF;
 1299              	 .loc 6 22 0 discriminator 3
 1300 0022 0B4B     	 ldr r3,.L37+4
 1301 0024 DD22     	 movs r2,#221
 1302 0026 DA70     	 strb r2,[r3,#3]
  23:../communications.h **** 		Send(4);
 1303              	 .loc 6 23 0 discriminator 3
 1304 0028 0420     	 movs r0,#4
 1305 002a FFF7FEFF 	 bl Send
  24:../communications.h **** 		delay(300);
 1306              	 .loc 6 24 0 discriminator 3
 1307 002e 4FF49670 	 mov r0,#300
 1308 0032 FFF7FEFF 	 bl delay
  18:../communications.h **** 	{
 1309              	 .loc 6 18 0 discriminator 3
 1310 0036 FB79     	 ldrb r3,[r7,#7]
 1311 0038 0133     	 adds r3,r3,#1
 1312 003a FB71     	 strb r3,[r7,#7]
 1313              	.L34:
  18:../communications.h **** 	{
 1314              	 .loc 6 18 0 is_stmt 0 discriminator 1
 1315 003c FB79     	 ldrb r3,[r7,#7]
 1316 003e 072B     	 cmp r3,#7
 1317 0040 E7D9     	 bls .L35
 1318              	.LBE3:
  25:../communications.h **** 	}
  26:../communications.h **** 	return 0;
 1319              	 .loc 6 26 0 is_stmt 1
 1320 0042 0023     	 movs r3,#0
  27:../communications.h **** }
 1321              	 .loc 6 27 0
 1322 0044 1846     	 mov r0,r3
 1323 0046 0837     	 adds r7,r7,#8
 1324              	.LCFI80:
 1325              	 .cfi_def_cfa_offset 8
 1326 0048 BD46     	 mov sp,r7
 1327              	.LCFI81:
 1328              	 .cfi_def_cfa_register 13
 1329              	 
 1330 004a 80BD     	 pop {r7,pc}
 1331              	.L38:
 1332              	 .align 2
 1333              	.L37:
 1334 004c 00000000 	 .word init
 1335 0050 00000000 	 .word txData
 1336              	 .cfi_endproc
 1337              	.LFE329:
 1339              	 .section .text.XMC_Check,"ax",%progbits
 1340              	 .align 2
 1341              	 .global XMC_Check
 1342              	 .thumb
 1343              	 .thumb_func
 1345              	XMC_Check:
 1346              	.LFB330:
  28:../communications.h **** void XMC_Check()
  29:../communications.h **** {
 1347              	 .loc 6 29 0
 1348              	 .cfi_startproc
 1349              	 
 1350              	 
 1351 0000 80B5     	 push {r7,lr}
 1352              	.LCFI82:
 1353              	 .cfi_def_cfa_offset 8
 1354              	 .cfi_offset 7,-8
 1355              	 .cfi_offset 14,-4
 1356 0002 82B0     	 sub sp,sp,#8
 1357              	.LCFI83:
 1358              	 .cfi_def_cfa_offset 16
 1359 0004 00AF     	 add r7,sp,#0
 1360              	.LCFI84:
 1361              	 .cfi_def_cfa_register 7
 1362              	.LBB4:
  30:../communications.h **** 	for(uint8_t i = 0; i < 8; i++)
 1363              	 .loc 6 30 0
 1364 0006 0023     	 movs r3,#0
 1365 0008 FB71     	 strb r3,[r7,#7]
 1366 000a 1AE0     	 b .L40
 1367              	.L41:
  31:../communications.h **** 	{
  32:../communications.h **** 		DIGITAL_IO_SetOutputHigh(&LED1);
 1368              	 .loc 6 32 0 discriminator 3
 1369 000c 1048     	 ldr r0,.L42
 1370 000e FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
  33:../communications.h **** 		txData[1] = 0x10 + i;
 1371              	 .loc 6 33 0 discriminator 3
 1372 0012 FB79     	 ldrb r3,[r7,#7]
 1373 0014 1033     	 adds r3,r3,#16
 1374 0016 DAB2     	 uxtb r2,r3
 1375 0018 0E4B     	 ldr r3,.L42+4
 1376 001a 5A70     	 strb r2,[r3,#1]
  34:../communications.h **** 		txData[2] = 0xA3;
 1377              	 .loc 6 34 0 discriminator 3
 1378 001c 0D4B     	 ldr r3,.L42+4
 1379 001e A322     	 movs r2,#163
 1380 0020 9A70     	 strb r2,[r3,#2]
  35:../communications.h **** 		txData[3] = EOF;
 1381              	 .loc 6 35 0 discriminator 3
 1382 0022 0C4B     	 ldr r3,.L42+4
 1383 0024 DD22     	 movs r2,#221
 1384 0026 DA70     	 strb r2,[r3,#3]
  36:../communications.h **** 		Send(4);
 1385              	 .loc 6 36 0 discriminator 3
 1386 0028 0420     	 movs r0,#4
 1387 002a FFF7FEFF 	 bl Send
  37:../communications.h **** 		delay(300);
 1388              	 .loc 6 37 0 discriminator 3
 1389 002e 4FF49670 	 mov r0,#300
 1390 0032 FFF7FEFF 	 bl delay
  38:../communications.h **** 		DIGITAL_IO_SetOutputLow((&LED1));
 1391              	 .loc 6 38 0 discriminator 3
 1392 0036 0648     	 ldr r0,.L42
 1393 0038 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
  30:../communications.h **** 	{
 1394              	 .loc 6 30 0 discriminator 3
 1395 003c FB79     	 ldrb r3,[r7,#7]
 1396 003e 0133     	 adds r3,r3,#1
 1397 0040 FB71     	 strb r3,[r7,#7]
 1398              	.L40:
  30:../communications.h **** 	{
 1399              	 .loc 6 30 0 is_stmt 0 discriminator 1
 1400 0042 FB79     	 ldrb r3,[r7,#7]
 1401 0044 072B     	 cmp r3,#7
 1402 0046 E1D9     	 bls .L41
 1403              	.LBE4:
  39:../communications.h **** 	}
  40:../communications.h **** }
 1404              	 .loc 6 40 0 is_stmt 1
 1405 0048 0837     	 adds r7,r7,#8
 1406              	.LCFI85:
 1407              	 .cfi_def_cfa_offset 8
 1408 004a BD46     	 mov sp,r7
 1409              	.LCFI86:
 1410              	 .cfi_def_cfa_register 13
 1411              	 
 1412 004c 80BD     	 pop {r7,pc}
 1413              	.L43:
 1414 004e 00BF     	 .align 2
 1415              	.L42:
 1416 0050 00000000 	 .word LED1
 1417 0054 00000000 	 .word txData
 1418              	 .cfi_endproc
 1419              	.LFE330:
 1421              	 .section .text.eorx,"ax",%progbits
 1422              	 .align 2
 1423              	 .global eorx
 1424              	 .thumb
 1425              	 .thumb_func
 1427              	eorx:
 1428              	.LFB331:
  41:../communications.h **** void eorx()
  42:../communications.h **** {
 1429              	 .loc 6 42 0
 1430              	 .cfi_startproc
 1431              	 
 1432              	 
 1433 0000 80B5     	 push {r7,lr}
 1434              	.LCFI87:
 1435              	 .cfi_def_cfa_offset 8
 1436              	 .cfi_offset 7,-8
 1437              	 .cfi_offset 14,-4
 1438 0002 00AF     	 add r7,sp,#0
 1439              	.LCFI88:
 1440              	 .cfi_def_cfa_register 7
  43:../communications.h **** 
  44:../communications.h **** 	if(rxByte == SOF)
 1441              	 .loc 6 44 0
 1442 0004 1A4B     	 ldr r3,.L48
 1443 0006 1B78     	 ldrb r3,[r3]
 1444 0008 CC2B     	 cmp r3,#204
 1445 000a 07D1     	 bne .L45
  45:../communications.h **** 	{
  46:../communications.h **** 		rxData[0] = rxByte;
 1446              	 .loc 6 46 0
 1447 000c 184B     	 ldr r3,.L48
 1448 000e 1A78     	 ldrb r2,[r3]
 1449 0010 184B     	 ldr r3,.L48+4
 1450 0012 1A70     	 strb r2,[r3]
  47:../communications.h **** 		iterator_wiadomosci = 1;
 1451              	 .loc 6 47 0
 1452 0014 184B     	 ldr r3,.L48+8
 1453 0016 0122     	 movs r2,#1
 1454 0018 1A70     	 strb r2,[r3]
 1455 001a 23E0     	 b .L46
 1456              	.L45:
  48:../communications.h **** 	}
  49:../communications.h **** 	else if (rxByte == EOF)
 1457              	 .loc 6 49 0
 1458 001c 144B     	 ldr r3,.L48
 1459 001e 1B78     	 ldrb r3,[r3]
 1460 0020 DD2B     	 cmp r3,#221
 1461 0022 0ED1     	 bne .L47
  50:../communications.h **** 	{
  51:../communications.h **** 		rxData[iterator_wiadomosci +1] = EOF;
 1462              	 .loc 6 51 0
 1463 0024 144B     	 ldr r3,.L48+8
 1464 0026 1B78     	 ldrb r3,[r3]
 1465 0028 0133     	 adds r3,r3,#1
 1466 002a 124A     	 ldr r2,.L48+4
 1467 002c DD21     	 movs r1,#221
 1468 002e D154     	 strb r1,[r2,r3]
  52:../communications.h **** 		iterator_wiadomosci++;
 1469              	 .loc 6 52 0
 1470 0030 114B     	 ldr r3,.L48+8
 1471 0032 1B78     	 ldrb r3,[r3]
 1472 0034 0133     	 adds r3,r3,#1
 1473 0036 DAB2     	 uxtb r2,r3
 1474 0038 0F4B     	 ldr r3,.L48+8
 1475 003a 1A70     	 strb r2,[r3]
  53:../communications.h **** 		Message_interpreter();
 1476              	 .loc 6 53 0
 1477 003c FFF7FEFF 	 bl Message_interpreter
 1478 0040 10E0     	 b .L46
 1479              	.L47:
  54:../communications.h **** 	}
  55:../communications.h **** 	else if ( iterator_wiadomosci < 9)
 1480              	 .loc 6 55 0
 1481 0042 0D4B     	 ldr r3,.L48+8
 1482 0044 1B78     	 ldrb r3,[r3]
 1483 0046 082B     	 cmp r3,#8
 1484 0048 0CD8     	 bhi .L46
  56:../communications.h **** 	{
  57:../communications.h **** 		rxData[iterator_wiadomosci] =rxByte;
 1485              	 .loc 6 57 0
 1486 004a 0B4B     	 ldr r3,.L48+8
 1487 004c 1B78     	 ldrb r3,[r3]
 1488 004e 1A46     	 mov r2,r3
 1489 0050 074B     	 ldr r3,.L48
 1490 0052 1978     	 ldrb r1,[r3]
 1491 0054 074B     	 ldr r3,.L48+4
 1492 0056 9954     	 strb r1,[r3,r2]
  58:../communications.h **** 		iterator_wiadomosci++;
 1493              	 .loc 6 58 0
 1494 0058 074B     	 ldr r3,.L48+8
 1495 005a 1B78     	 ldrb r3,[r3]
 1496 005c 0133     	 adds r3,r3,#1
 1497 005e DAB2     	 uxtb r2,r3
 1498 0060 054B     	 ldr r3,.L48+8
 1499 0062 1A70     	 strb r2,[r3]
 1500              	.L46:
  59:../communications.h **** 	}
  60:../communications.h **** 	UART_Receive(&RS, &rxByte,1);
 1501              	 .loc 6 60 0
 1502 0064 0548     	 ldr r0,.L48+12
 1503 0066 0249     	 ldr r1,.L48
 1504 0068 0122     	 movs r2,#1
 1505 006a FFF7FEFF 	 bl UART_Receive
  61:../communications.h **** }
 1506              	 .loc 6 61 0
 1507 006e 80BD     	 pop {r7,pc}
 1508              	.L49:
 1509              	 .align 2
 1510              	.L48:
 1511 0070 00000000 	 .word rxByte
 1512 0074 00000000 	 .word rxData
 1513 0078 00000000 	 .word iterator_wiadomosci
 1514 007c 00000000 	 .word RS
 1515              	 .cfi_endproc
 1516              	.LFE331:
 1518              	 .section .text.eotx,"ax",%progbits
 1519              	 .align 2
 1520              	 .global eotx
 1521              	 .thumb
 1522              	 .thumb_func
 1524              	eotx:
 1525              	.LFB332:
  62:../communications.h **** void eotx()
  63:../communications.h **** {
 1526              	 .loc 6 63 0
 1527              	 .cfi_startproc
 1528              	 
 1529              	 
 1530              	 
 1531 0000 80B4     	 push {r7}
 1532              	.LCFI89:
 1533              	 .cfi_def_cfa_offset 4
 1534              	 .cfi_offset 7,-4
 1535 0002 00AF     	 add r7,sp,#0
 1536              	.LCFI90:
 1537              	 .cfi_def_cfa_register 7
  64:../communications.h **** 
  65:../communications.h **** }
 1538              	 .loc 6 65 0
 1539 0004 BD46     	 mov sp,r7
 1540              	.LCFI91:
 1541              	 .cfi_def_cfa_register 13
 1542              	 
 1543 0006 5DF8047B 	 ldr r7,[sp],#4
 1544              	.LCFI92:
 1545              	 .cfi_restore 7
 1546              	 .cfi_def_cfa_offset 0
 1547 000a 7047     	 bx lr
 1548              	 .cfi_endproc
 1549              	.LFE332:
 1551              	 .section .text.Message_interpreter,"ax",%progbits
 1552              	 .align 2
 1553              	 .global Message_interpreter
 1554              	 .thumb
 1555              	 .thumb_func
 1557              	Message_interpreter:
 1558              	.LFB333:
  66:../communications.h **** void Message_interpreter()
  67:../communications.h **** {
 1559              	 .loc 6 67 0
 1560              	 .cfi_startproc
 1561              	 
 1562              	 
 1563              	 
 1564 0000 80B4     	 push {r7}
 1565              	.LCFI93:
 1566              	 .cfi_def_cfa_offset 4
 1567              	 .cfi_offset 7,-4
 1568 0002 83B0     	 sub sp,sp,#12
 1569              	.LCFI94:
 1570              	 .cfi_def_cfa_offset 16
 1571 0004 00AF     	 add r7,sp,#0
 1572              	.LCFI95:
 1573              	 .cfi_def_cfa_register 7
  68:../communications.h **** 
  69:../communications.h **** 	if(rxData[0] == SOF && rxData[1] == adress)
 1574              	 .loc 6 69 0
 1575 0006 294B     	 ldr r3,.L55
 1576 0008 1B78     	 ldrb r3,[r3]
 1577 000a CC2B     	 cmp r3,#204
 1578 000c 49D1     	 bne .L51
 1579              	 .loc 6 69 0 is_stmt 0 discriminator 1
 1580 000e 274B     	 ldr r3,.L55
 1581 0010 5A78     	 ldrb r2,[r3,#1]
 1582 0012 274B     	 ldr r3,.L55+4
 1583 0014 1B78     	 ldrb r3,[r3]
 1584 0016 9A42     	 cmp r2,r3
 1585 0018 43D1     	 bne .L51
 1586              	.LBB5:
  70:../communications.h **** 	{
  71:../communications.h **** 		uint8_t numer_silnika;
  72:../communications.h **** 		numer_silnika = rxData[2] - 0x10;
 1587              	 .loc 6 72 0 is_stmt 1
 1588 001a 244B     	 ldr r3,.L55
 1589 001c 9B78     	 ldrb r3,[r3,#2]
 1590 001e 103B     	 subs r3,r3,#16
 1591 0020 FB71     	 strb r3,[r7,#7]
  73:../communications.h **** 		if(rxData[3] == INIT)
 1592              	 .loc 6 73 0
 1593 0022 224B     	 ldr r3,.L55
 1594 0024 DB78     	 ldrb r3,[r3,#3]
 1595 0026 A12B     	 cmp r3,#161
 1596 0028 07D1     	 bne .L53
  74:../communications.h **** 			stanowisko.silnik_start[numer_silnika] = rxData[4];
 1597              	 .loc 6 74 0
 1598 002a FB79     	 ldrb r3,[r7,#7]
 1599 002c 1F4A     	 ldr r2,.L55
 1600 002e 1179     	 ldrb r1,[r2,#4]
 1601 0030 204A     	 ldr r2,.L55+8
 1602 0032 1344     	 add r3,r3,r2
 1603 0034 0A46     	 mov r2,r1
 1604 0036 9A70     	 strb r2,[r3,#2]
 1605 0038 33E0     	 b .L51
 1606              	.L53:
  75:../communications.h **** 		else if(rxData[3] == CHECK)
 1607              	 .loc 6 75 0
 1608 003a 1C4B     	 ldr r3,.L55
 1609 003c DB78     	 ldrb r3,[r3,#3]
 1610 003e A32B     	 cmp r3,#163
 1611 0040 0CD1     	 bne .L54
  76:../communications.h **** 		{
  77:../communications.h **** 			stanowisko.silnik_start[numer_silnika] = rxData[4];
 1612              	 .loc 6 77 0
 1613 0042 FB79     	 ldrb r3,[r7,#7]
 1614 0044 194A     	 ldr r2,.L55
 1615 0046 1179     	 ldrb r1,[r2,#4]
 1616 0048 1A4A     	 ldr r2,.L55+8
 1617 004a 1344     	 add r3,r3,r2
 1618 004c 0A46     	 mov r2,r1
 1619 004e 9A70     	 strb r2,[r3,#2]
  78:../communications.h **** 			stanowisko.silnik_numer[numer_silnika] = rxData[5];
 1620              	 .loc 6 78 0
 1621 0050 FB79     	 ldrb r3,[r7,#7]
 1622 0052 164A     	 ldr r2,.L55
 1623 0054 5179     	 ldrb r1,[r2,#5]
 1624 0056 174A     	 ldr r2,.L55+8
 1625 0058 D154     	 strb r1,[r2,r3]
 1626 005a 22E0     	 b .L51
 1627              	.L54:
  79:../communications.h **** 		}
  80:../communications.h **** 		else
  81:../communications.h **** 		{
  82:../communications.h **** 			stanowisko.i_net[numer_silnika] =rxData[3] << 8 | rxData[4];
 1628              	 .loc 6 82 0
 1629 005c FB79     	 ldrb r3,[r7,#7]
 1630 005e 134A     	 ldr r2,.L55
 1631 0060 D278     	 ldrb r2,[r2,#3]
 1632 0062 1202     	 lsls r2,r2,#8
 1633 0064 91B2     	 uxth r1,r2
 1634 0066 114A     	 ldr r2,.L55
 1635 0068 1279     	 ldrb r2,[r2,#4]
 1636 006a 92B2     	 uxth r2,r2
 1637 006c 0A43     	 orrs r2,r2,r1
 1638 006e 91B2     	 uxth r1,r2
 1639 0070 104A     	 ldr r2,.L55+8
 1640 0072 5B00     	 lsls r3,r3,#1
 1641 0074 1344     	 add r3,r3,r2
 1642 0076 0A46     	 mov r2,r1
 1643 0078 DA80     	 strh r2,[r3,#6]
  83:../communications.h **** 			stanowisko.kat_abs[numer_silnika] = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[
 1644              	 .loc 6 83 0
 1645 007a FB79     	 ldrb r3,[r7,#7]
 1646 007c 0B4A     	 ldr r2,.L55
 1647 007e 5279     	 ldrb r2,[r2,#5]
 1648 0080 1106     	 lsls r1,r2,#24
 1649 0082 0A4A     	 ldr r2,.L55
 1650 0084 9279     	 ldrb r2,[r2,#6]
 1651 0086 1204     	 lsls r2,r2,#16
 1652 0088 1143     	 orrs r1,r1,r2
 1653 008a 084A     	 ldr r2,.L55
 1654 008c D279     	 ldrb r2,[r2,#7]
 1655 008e 1202     	 lsls r2,r2,#8
 1656 0090 0A43     	 orrs r2,r2,r1
 1657 0092 0649     	 ldr r1,.L55
 1658 0094 097A     	 ldrb r1,[r1,#8]
 1659 0096 0A43     	 orrs r2,r2,r1
 1660 0098 0649     	 ldr r1,.L55+8
 1661 009a 0233     	 adds r3,r3,#2
 1662 009c 9B00     	 lsls r3,r3,#2
 1663 009e 0B44     	 add r3,r3,r1
 1664 00a0 5A60     	 str r2,[r3,#4]
 1665              	.L51:
 1666              	.LBE5:
  84:../communications.h **** 		}
  85:../communications.h **** 	}
  86:../communications.h **** 
  87:../communications.h **** }
 1667              	 .loc 6 87 0
 1668 00a2 0C37     	 adds r7,r7,#12
 1669              	.LCFI96:
 1670              	 .cfi_def_cfa_offset 4
 1671 00a4 BD46     	 mov sp,r7
 1672              	.LCFI97:
 1673              	 .cfi_def_cfa_register 13
 1674              	 
 1675 00a6 5DF8047B 	 ldr r7,[sp],#4
 1676              	.LCFI98:
 1677              	 .cfi_restore 7
 1678              	 .cfi_def_cfa_offset 0
 1679 00aa 7047     	 bx lr
 1680              	.L56:
 1681              	 .align 2
 1682              	.L55:
 1683 00ac 00000000 	 .word rxData
 1684 00b0 00000000 	 .word adress
 1685 00b4 00000000 	 .word stanowisko
 1686              	 .cfi_endproc
 1687              	.LFE333:
 1689              	 .section .text.Send_Leg,"ax",%progbits
 1690              	 .align 2
 1691              	 .global Send_Leg
 1692              	 .thumb
 1693              	 .thumb_func
 1695              	Send_Leg:
 1696              	.LFB334:
  88:../communications.h **** void Send_Leg(struct Leg *n)
  89:../communications.h **** {
 1697              	 .loc 6 89 0
 1698              	 .cfi_startproc
 1699              	 
 1700              	 
 1701 0000 80B5     	 push {r7,lr}
 1702              	.LCFI99:
 1703              	 .cfi_def_cfa_offset 8
 1704              	 .cfi_offset 7,-8
 1705              	 .cfi_offset 14,-4
 1706 0002 82B0     	 sub sp,sp,#8
 1707              	.LCFI100:
 1708              	 .cfi_def_cfa_offset 16
 1709 0004 00AF     	 add r7,sp,#0
 1710              	.LCFI101:
 1711              	 .cfi_def_cfa_register 7
 1712 0006 7860     	 str r0,[r7,#4]
  90:../communications.h **** 	  txData[1] = n->adresy[0];
 1713              	 .loc 6 90 0
 1714 0008 7B68     	 ldr r3,[r7,#4]
 1715 000a 1A79     	 ldrb r2,[r3,#4]
 1716 000c 194B     	 ldr r3,.L58
 1717 000e 5A70     	 strb r2,[r3,#1]
  91:../communications.h **** 	  txData[2] = n->poz_zad[0] >> 8;
 1718              	 .loc 6 91 0
 1719 0010 7B68     	 ldr r3,[r7,#4]
 1720 0012 1B8F     	 ldrh r3,[r3,#56]
 1721 0014 1BB2     	 sxth r3,r3
 1722 0016 1B12     	 asrs r3,r3,#8
 1723 0018 9BB2     	 uxth r3,r3
 1724 001a DAB2     	 uxtb r2,r3
 1725 001c 154B     	 ldr r3,.L58
 1726 001e 9A70     	 strb r2,[r3,#2]
  92:../communications.h **** 	  txData[3] = n->poz_zad[0];
 1727              	 .loc 6 92 0
 1728 0020 7B68     	 ldr r3,[r7,#4]
 1729 0022 1B8F     	 ldrh r3,[r3,#56]
 1730 0024 DAB2     	 uxtb r2,r3
 1731 0026 134B     	 ldr r3,.L58
 1732 0028 DA70     	 strb r2,[r3,#3]
  93:../communications.h **** 	  txData[4] = EOF;
 1733              	 .loc 6 93 0
 1734 002a 124B     	 ldr r3,.L58
 1735 002c DD22     	 movs r2,#221
 1736 002e 1A71     	 strb r2,[r3,#4]
  94:../communications.h **** 	  Send(5);
 1737              	 .loc 6 94 0
 1738 0030 0520     	 movs r0,#5
 1739 0032 FFF7FEFF 	 bl Send
  95:../communications.h **** 	  delay(500);
 1740              	 .loc 6 95 0
 1741 0036 4FF4FA70 	 mov r0,#500
 1742 003a FFF7FEFF 	 bl delay
  96:../communications.h **** 	  txData[1] = n->adresy[1];
 1743              	 .loc 6 96 0
 1744 003e 7B68     	 ldr r3,[r7,#4]
 1745 0040 5A79     	 ldrb r2,[r3,#5]
 1746 0042 0C4B     	 ldr r3,.L58
 1747 0044 5A70     	 strb r2,[r3,#1]
  97:../communications.h **** 	  txData[2] = n->poz_zad[1] >> 8;
 1748              	 .loc 6 97 0
 1749 0046 7B68     	 ldr r3,[r7,#4]
 1750 0048 5B8F     	 ldrh r3,[r3,#58]
 1751 004a 1BB2     	 sxth r3,r3
 1752 004c 1B12     	 asrs r3,r3,#8
 1753 004e 9BB2     	 uxth r3,r3
 1754 0050 DAB2     	 uxtb r2,r3
 1755 0052 084B     	 ldr r3,.L58
 1756 0054 9A70     	 strb r2,[r3,#2]
  98:../communications.h **** 	  txData[3] = n->poz_zad[1];
 1757              	 .loc 6 98 0
 1758 0056 7B68     	 ldr r3,[r7,#4]
 1759 0058 5B8F     	 ldrh r3,[r3,#58]
 1760 005a DAB2     	 uxtb r2,r3
 1761 005c 054B     	 ldr r3,.L58
 1762 005e DA70     	 strb r2,[r3,#3]
  99:../communications.h **** 	  Send(5);
 1763              	 .loc 6 99 0
 1764 0060 0520     	 movs r0,#5
 1765 0062 FFF7FEFF 	 bl Send
 100:../communications.h **** 	  delay(500);
 1766              	 .loc 6 100 0
 1767 0066 4FF4FA70 	 mov r0,#500
 1768 006a FFF7FEFF 	 bl delay
 101:../communications.h **** }
 1769              	 .loc 6 101 0
 1770 006e 0837     	 adds r7,r7,#8
 1771              	.LCFI102:
 1772              	 .cfi_def_cfa_offset 8
 1773 0070 BD46     	 mov sp,r7
 1774              	.LCFI103:
 1775              	 .cfi_def_cfa_register 13
 1776              	 
 1777 0072 80BD     	 pop {r7,pc}
 1778              	.L59:
 1779              	 .align 2
 1780              	.L58:
 1781 0074 00000000 	 .word txData
 1782              	 .cfi_endproc
 1783              	.LFE334:
 1785              	 .section .text.Send,"ax",%progbits
 1786              	 .align 2
 1787              	 .global Send
 1788              	 .thumb
 1789              	 .thumb_func
 1791              	Send:
 1792              	.LFB335:
 102:../communications.h **** void Send(uint8_t size )
 103:../communications.h **** {
 1793              	 .loc 6 103 0
 1794              	 .cfi_startproc
 1795              	 
 1796              	 
 1797 0000 80B5     	 push {r7,lr}
 1798              	.LCFI104:
 1799              	 .cfi_def_cfa_offset 8
 1800              	 .cfi_offset 7,-8
 1801              	 .cfi_offset 14,-4
 1802 0002 82B0     	 sub sp,sp,#8
 1803              	.LCFI105:
 1804              	 .cfi_def_cfa_offset 16
 1805 0004 00AF     	 add r7,sp,#0
 1806              	.LCFI106:
 1807              	 .cfi_def_cfa_register 7
 1808 0006 0346     	 mov r3,r0
 1809 0008 FB71     	 strb r3,[r7,#7]
 104:../communications.h **** 	UART_Transmit(&RS, txData, size);
 1810              	 .loc 6 104 0
 1811 000a FB79     	 ldrb r3,[r7,#7]
 1812 000c 0948     	 ldr r0,.L62
 1813 000e 0A49     	 ldr r1,.L62+4
 1814 0010 1A46     	 mov r2,r3
 1815 0012 FFF7FEFF 	 bl UART_Transmit
 105:../communications.h **** 	while(UART_IsTxBusy(&RS));
 1816              	 .loc 6 105 0
 1817 0016 00BF     	 nop
 1818              	.L61:
 1819              	 .loc 6 105 0 is_stmt 0 discriminator 1
 1820 0018 0648     	 ldr r0,.L62
 1821 001a FFF7FEFF 	 bl UART_IsTxBusy
 1822 001e 0346     	 mov r3,r0
 1823 0020 002B     	 cmp r3,#0
 1824 0022 F9D1     	 bne .L61
 106:../communications.h **** 	UART_Receive(&RS, &rxByte, 1);
 1825              	 .loc 6 106 0 is_stmt 1
 1826 0024 0348     	 ldr r0,.L62
 1827 0026 0549     	 ldr r1,.L62+8
 1828 0028 0122     	 movs r2,#1
 1829 002a FFF7FEFF 	 bl UART_Receive
 107:../communications.h **** }
 1830              	 .loc 6 107 0
 1831 002e 0837     	 adds r7,r7,#8
 1832              	.LCFI107:
 1833              	 .cfi_def_cfa_offset 8
 1834 0030 BD46     	 mov sp,r7
 1835              	.LCFI108:
 1836              	 .cfi_def_cfa_register 13
 1837              	 
 1838 0032 80BD     	 pop {r7,pc}
 1839              	.L63:
 1840              	 .align 2
 1841              	.L62:
 1842 0034 00000000 	 .word RS
 1843 0038 00000000 	 .word txData
 1844 003c 00000000 	 .word rxByte
 1845              	 .cfi_endproc
 1846              	.LFE335:
 1848              	 .section .text.main,"ax",%progbits
 1849              	 .align 2
 1850              	 .global main
 1851              	 .thumb
 1852              	 .thumb_func
 1854              	main:
 1855              	.LFB336:
 1856              	 .file 7 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** #include <DAVE.h>
   3:../main.c     **** #include <math.h>
   4:../main.c     **** #include "variables.h"
   5:../main.c     **** #include "kinematics.h"
   6:../main.c     **** #include "communications.h"
   7:../main.c     **** 
   8:../main.c     **** 
   9:../main.c     **** 
  10:../main.c     **** 
  11:../main.c     **** int main(void)
  12:../main.c     **** {
 1857              	 .loc 7 12 0
 1858              	 .cfi_startproc
 1859              	 
 1860              	 
 1861 0000 80B5     	 push {r7,lr}
 1862              	.LCFI109:
 1863              	 .cfi_def_cfa_offset 8
 1864              	 .cfi_offset 7,-8
 1865              	 .cfi_offset 14,-4
 1866 0002 82B0     	 sub sp,sp,#8
 1867              	.LCFI110:
 1868              	 .cfi_def_cfa_offset 16
 1869 0004 00AF     	 add r7,sp,#0
 1870              	.LCFI111:
 1871              	 .cfi_def_cfa_register 7
  13:../main.c     ****   DAVE_STATUS_t status;
  14:../main.c     ****   status = DAVE_Init();
 1872              	 .loc 7 14 0
 1873 0006 FFF7FEFF 	 bl DAVE_Init
 1874 000a 0346     	 mov r3,r0
 1875 000c FB71     	 strb r3,[r7,#7]
  15:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 1876              	 .loc 7 15 0
 1877 000e 05E0     	 b .L65
 1878              	.L66:
  16:../main.c     ****   {
  17:../main.c     **** 	  delay(100000);
 1879              	 .loc 7 17 0
 1880 0010 1948     	 ldr r0,.L69
 1881 0012 FFF7FEFF 	 bl delay
  18:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
 1882              	 .loc 7 18 0
 1883 0016 1948     	 ldr r0,.L69+4
 1884 0018 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 1885              	.L65:
  15:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 1886              	 .loc 7 15 0
 1887 001c FB79     	 ldrb r3,[r7,#7]
 1888 001e 012B     	 cmp r3,#1
 1889 0020 F6D0     	 beq .L66
  19:../main.c     ****   }
  20:../main.c     **** 
  21:../main.c     ****   while(init == 0);
 1890              	 .loc 7 21 0
 1891 0022 00BF     	 nop
 1892              	.L67:
 1893              	 .loc 7 21 0 is_stmt 0 discriminator 1
 1894 0024 164B     	 ldr r3,.L69+8
 1895 0026 1B78     	 ldrb r3,[r3]
 1896 0028 002B     	 cmp r3,#0
 1897 002a FBD0     	 beq .L67
  22:../main.c     ****   Init();
 1898              	 .loc 7 22 0 is_stmt 1
 1899 002c FFF7FEFF 	 bl Init
  23:../main.c     ****   delay(2500);
 1900              	 .loc 7 23 0
 1901 0030 40F6C410 	 movw r0,#2500
 1902 0034 FFF7FEFF 	 bl delay
  24:../main.c     ****   XMC_Check();
 1903              	 .loc 7 24 0
 1904 0038 FFF7FEFF 	 bl XMC_Check
  25:../main.c     ****   XMC_Init();
 1905              	 .loc 7 25 0
 1906 003c FFF7FEFF 	 bl XMC_Init
  26:../main.c     ****   XMC_Check();
 1907              	 .loc 7 26 0
 1908 0040 FFF7FEFF 	 bl XMC_Check
 1909              	.L68:
  27:../main.c     **** 
  28:../main.c     **** 
  29:../main.c     ****   while(1)
  30:../main.c     ****   {
  31:../main.c     **** 	  update(&stanowisko);
 1910              	 .loc 7 31 0 discriminator 1
 1911 0044 0F48     	 ldr r0,.L69+12
 1912 0046 FFF7FEFF 	 bl update
  32:../main.c     **** 	  Spring(&stanowisko);
 1913              	 .loc 7 32 0 discriminator 1
 1914 004a 0E48     	 ldr r0,.L69+12
 1915 004c FFF7FEFF 	 bl Spring
  33:../main.c     **** 	  Send_Leg(&stanowisko);
 1916              	 .loc 7 33 0 discriminator 1
 1917 0050 0C48     	 ldr r0,.L69+12
 1918 0052 FFF7FEFF 	 bl Send_Leg
  34:../main.c     **** 	  t+= dt;
 1919              	 .loc 7 34 0 discriminator 1
 1920 0056 0C4B     	 ldr r3,.L69+16
 1921 0058 93ED007A 	 flds s14,[r3]
 1922 005c 0B4B     	 ldr r3,.L69+20
 1923 005e D3ED007A 	 flds s15,[r3]
 1924 0062 77EE277A 	 fadds s15,s14,s15
 1925 0066 084B     	 ldr r3,.L69+16
 1926 0068 C3ED007A 	 fsts s15,[r3]
  35:../main.c     **** 	  delay(2000);
 1927              	 .loc 7 35 0 discriminator 1
 1928 006c 4FF4FA60 	 mov r0,#2000
 1929 0070 FFF7FEFF 	 bl delay
  36:../main.c     ****   }
 1930              	 .loc 7 36 0 discriminator 1
 1931 0074 E6E7     	 b .L68
 1932              	.L70:
 1933 0076 00BF     	 .align 2
 1934              	.L69:
 1935 0078 A0860100 	 .word 100000
 1936 007c 00000000 	 .word LED1
 1937 0080 00000000 	 .word init
 1938 0084 00000000 	 .word stanowisko
 1939 0088 00000000 	 .word t
 1940 008c 00000000 	 .word dt
 1941              	 .cfi_endproc
 1942              	.LFE336:
 1944              	 .text
 1945              	.Letext0:
 1946              	 .file 8 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1947              	 .file 9 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1948              	 .file 10 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1949              	 .file 11 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
 1950              	 .file 12 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_gpio.h"
 1951              	 .file 13 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_usic.h"
 1952              	 .file 14 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_uart.h"
 1953              	 .file 15 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
 1954              	 .file 16 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 1955              	 .file 17 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer.h"
 1956              	 .file 18 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DAVE.h"
 1957              	 .file 19 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Include/core_cm4.h"
 1958              	 .file 20 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 1959              	 .file 21 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 1960              	 .file 22 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer_extern.h"
 1961              	 .file 23 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_ToggleOutput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_ToggleOutput:00000000 XMC_GPIO_ToggleOutput
    {standard input}:162    .text.UART_IsTxBusy:00000000 $t
    {standard input}:166    .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:208    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:212    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:252    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:256    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:295    .text.DIGITAL_IO_ToggleOutput:00000000 $t
    {standard input}:299    .text.DIGITAL_IO_ToggleOutput:00000000 DIGITAL_IO_ToggleOutput
    {standard input}:342    .data.pi:00000000 pi
    {standard input}:339    .data.pi:00000000 $d
    {standard input}:349    .data.l1:00000000 l1
    {standard input}:346    .data.l1:00000000 $d
    {standard input}:356    .data.l2:00000000 l2
    {standard input}:353    .data.l2:00000000 $d
    {standard input}:363    .data.d:00000000 d
    {standard input}:360    .data.d:00000000 $d
    {standard input}:370    .bss.t:00000000 t
    {standard input}:367    .bss.t:00000000 $d
    {standard input}:377    .data.dt:00000000 dt
    {standard input}:374    .data.dt:00000000 $d
                            *COM*:0000000a rxData
                            *COM*:0000000a txData
    {standard input}:385    .data.adress:00000000 adress
    {standard input}:391    .bss.rxByte:00000000 rxByte
    {standard input}:392    .bss.rxByte:00000000 $d
    {standard input}:397    .bss.iterator_wiadomosci:00000000 iterator_wiadomosci
    {standard input}:398    .bss.iterator_wiadomosci:00000000 $d
    {standard input}:403    .data.is_delay:00000000 is_delay
    {standard input}:409    .bss.init:00000000 init
    {standard input}:410    .bss.init:00000000 $d
                            *COM*:0000005c stanowisko
    {standard input}:413    .text.delay:00000000 $t
    {standard input}:418    .text.delay:00000000 delay
    {standard input}:476    .text.delay:0000003c $d
    {standard input}:482    .text.Init:00000000 $t
    {standard input}:487    .text.Init:00000000 Init
    {standard input}:618    .text.Init:000000b0 $d
    {standard input}:625    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:630    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:661    .text.CCU43_1_IRQHandler:00000014 $d
    {standard input}:666    .text.Ik:00000000 $t
    {standard input}:671    .text.Ik:00000000 Ik
    {standard input}:842    .text.Ik:000001d0 $d
    {standard input}:854    .text.Fk:00000000 $t
    {standard input}:859    .text.Fk:00000000 Fk
    {standard input}:1058   .text.Fk:000001d4 $d
    {standard input}:1066   .text.update:00000000 $t
    {standard input}:1071   .text.update:00000000 update
    {standard input}:1174   .text.update:000000e0 $d
    {standard input}:1183   .text.Spring:00000000 $t
    {standard input}:1188   .text.Spring:00000000 Spring
    {standard input}:1250   .text.Spring:00000064 $d
    {standard input}:1256   .text.XMC_Init:00000000 $t
    {standard input}:1261   .text.XMC_Init:00000000 XMC_Init
    {standard input}:1791   .text.Send:00000000 Send
    {standard input}:1334   .text.XMC_Init:0000004c $d
    {standard input}:1340   .text.XMC_Check:00000000 $t
    {standard input}:1345   .text.XMC_Check:00000000 XMC_Check
    {standard input}:1416   .text.XMC_Check:00000050 $d
    {standard input}:1422   .text.eorx:00000000 $t
    {standard input}:1427   .text.eorx:00000000 eorx
    {standard input}:1557   .text.Message_interpreter:00000000 Message_interpreter
    {standard input}:1511   .text.eorx:00000070 $d
    {standard input}:1519   .text.eotx:00000000 $t
    {standard input}:1524   .text.eotx:00000000 eotx
    {standard input}:1552   .text.Message_interpreter:00000000 $t
    {standard input}:1683   .text.Message_interpreter:000000ac $d
    {standard input}:1690   .text.Send_Leg:00000000 $t
    {standard input}:1695   .text.Send_Leg:00000000 Send_Leg
    {standard input}:1781   .text.Send_Leg:00000074 $d
    {standard input}:1786   .text.Send:00000000 $t
    {standard input}:1842   .text.Send:00000034 $d
    {standard input}:1849   .text.main:00000000 $t
    {standard input}:1854   .text.main:00000000 main
    {standard input}:1935   .text.main:00000078 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIMER_SetTimeInterval
TIMER_Start
TIMER_Stop
DELAY
sqrtf
acosf
asinf
__aeabi_f2d
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_d2f
sinf
cosf
atan2f
sin
LED1
UART_Receive
RS
UART_Transmit
DAVE_Init
