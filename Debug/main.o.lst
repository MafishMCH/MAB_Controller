   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.XMC_GPIO_ToggleOutput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_ToggleOutput:
 120              	.LFB166:
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 309 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 139              	 .loc 1 312 0
 140 000c FB78     	 ldrb r3,[r7,#3]
 141 000e 4FF00112 	 mov r2,#65537
 142 0012 9A40     	 lsls r2,r2,r3
 143 0014 7B68     	 ldr r3,[r7,#4]
 144 0016 5A60     	 str r2,[r3,#4]
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 313 0
 146 0018 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001a BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001c 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0020 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE166:
 161 0022 00BF     	 .section .text.UART_IsTxBusy,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	UART_IsTxBusy:
 167              	.LFB267:
 168              	 .file 2 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 169              	 .loc 2 2117 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
 185              	 .loc 2 2119 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 9B68     	 ldr r3,[r3,#8]
 188 000c 1B7E     	 ldrb r3,[r3,#24]
 189 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
 190              	 .loc 2 2120 0
 191 0010 1846     	 mov r0,r3
 192 0012 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0014 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 0016 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001a 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE267:
 207              	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	DIGITAL_IO_SetOutputHigh:
 213              	.LFB269:
 214              	 .file 3 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 215              	 .loc 3 269 0
 216              	 .cfi_startproc
 217              	 
 218              	 
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI25:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI26:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 231              	 .loc 3 271 0
 232 0008 7B68     	 ldr r3,[r7,#4]
 233 000a 1A68     	 ldr r2,[r3]
 234 000c 7B68     	 ldr r3,[r7,#4]
 235 000e 1B7C     	 ldrb r3,[r3,#16]
 236 0010 1046     	 mov r0,r2
 237 0012 1946     	 mov r1,r3
 238 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 239              	 .loc 3 272 0
 240 0018 0837     	 adds r7,r7,#8
 241              	.LCFI27:
 242              	 .cfi_def_cfa_offset 8
 243 001a BD46     	 mov sp,r7
 244              	.LCFI28:
 245              	 .cfi_def_cfa_register 13
 246              	 
 247 001c 80BD     	 pop {r7,pc}
 248              	 .cfi_endproc
 249              	.LFE269:
 251 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 252              	 .align 2
 253              	 .thumb
 254              	 .thumb_func
 256              	DIGITAL_IO_SetOutputLow:
 257              	.LFB270:
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 258              	 .loc 3 316 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 80B5     	 push {r7,lr}
 263              	.LCFI29:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 82B0     	 sub sp,sp,#8
 268              	.LCFI30:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI31:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 274              	 .loc 3 318 0
 275 0008 7B68     	 ldr r3,[r7,#4]
 276 000a 1A68     	 ldr r2,[r3]
 277 000c 7B68     	 ldr r3,[r7,#4]
 278 000e 1B7C     	 ldrb r3,[r3,#16]
 279 0010 1046     	 mov r0,r2
 280 0012 1946     	 mov r1,r3
 281 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 282              	 .loc 3 319 0
 283 0018 0837     	 adds r7,r7,#8
 284              	.LCFI32:
 285              	 .cfi_def_cfa_offset 8
 286 001a BD46     	 mov sp,r7
 287              	.LCFI33:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 001c 80BD     	 pop {r7,pc}
 291              	 .cfi_endproc
 292              	.LFE270:
 294 001e 00BF     	 .section .text.DIGITAL_IO_ToggleOutput,"ax",%progbits
 295              	 .align 2
 296              	 .thumb
 297              	 .thumb_func
 299              	DIGITAL_IO_ToggleOutput:
 300              	.LFB271:
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to Toggle port pin.
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to toggle port pin.
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputLow(), DIGITAL_IO_SetOutputHigh()
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   uint32_t delay_count;;
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 1 -> 0 (if initial output level is logic
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 0 -> 1
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 301              	 .loc 3 368 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305 0000 80B5     	 push {r7,lr}
 306              	.LCFI34:
 307              	 .cfi_def_cfa_offset 8
 308              	 .cfi_offset 7,-8
 309              	 .cfi_offset 14,-4
 310 0002 82B0     	 sub sp,sp,#8
 311              	.LCFI35:
 312              	 .cfi_def_cfa_offset 16
 313 0004 00AF     	 add r7,sp,#0
 314              	.LCFI36:
 315              	 .cfi_def_cfa_register 7
 316 0006 7860     	 str r0,[r7,#4]
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 317              	 .loc 3 370 0
 318 0008 7B68     	 ldr r3,[r7,#4]
 319 000a 1A68     	 ldr r2,[r3]
 320 000c 7B68     	 ldr r3,[r7,#4]
 321 000e 1B7C     	 ldrb r3,[r3,#16]
 322 0010 1046     	 mov r0,r2
 323 0012 1946     	 mov r1,r3
 324 0014 FFF7FEFF 	 bl XMC_GPIO_ToggleOutput
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 325              	 .loc 3 371 0
 326 0018 0837     	 adds r7,r7,#8
 327              	.LCFI37:
 328              	 .cfi_def_cfa_offset 8
 329 001a BD46     	 mov sp,r7
 330              	.LCFI38:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 001c 80BD     	 pop {r7,pc}
 334              	 .cfi_endproc
 335              	.LFE271:
 337              	 .global pi
 338 001e 00BF     	 .section .data.pi,"aw",%progbits
 339              	 .align 2
 342              	pi:
 343 0000 D00F4940 	 .word 1078530000
 344              	 .global l1
 345              	 .section .data.l1,"aw",%progbits
 346              	 .align 2
 349              	l1:
 350 0000 0000C842 	 .word 1120403456
 351              	 .global l2
 352              	 .section .data.l2,"aw",%progbits
 353              	 .align 2
 356              	l2:
 357 0000 00004843 	 .word 1128792064
 358              	 .global d
 359              	 .section .data.d,"aw",%progbits
 360              	 .align 2
 363              	d:
 364 0000 0000B242 	 .word 1118961664
 365              	 .global t
 366              	 .section .bss.t,"aw",%nobits
 367              	 .align 2
 370              	t:
 371 0000 00000000 	 .space 4
 372              	 .global dt
 373              	 .section .data.dt,"aw",%progbits
 374              	 .align 2
 377              	dt:
 378 0000 9A9919BE 	 .word -1105618534
 379              	 .comm rxData,10,4
 380              	 .comm txData,10,4
 381              	 .global adress
 382              	 .section .data.adress,"aw",%progbits
 385              	adress:
 386 0000 EE       	 .byte -18
 387              	 .global rxByte
 388              	 .section .bss.rxByte,"aw",%nobits
 391              	rxByte:
 392 0000 00       	 .space 1
 393              	 .global iterator_wiadomosci
 394              	 .section .bss.iterator_wiadomosci,"aw",%nobits
 397              	iterator_wiadomosci:
 398 0000 00       	 .space 1
 399              	 .global is_delay
 400              	 .section .data.is_delay,"aw",%progbits
 403              	is_delay:
 404 0000 01       	 .byte 1
 405              	 .global init
 406              	 .section .bss.init,"aw",%nobits
 409              	init:
 410 0000 00       	 .space 1
 411              	 .global motors_go
 412              	 .section .bss.motors_go,"aw",%nobits
 415              	motors_go:
 416 0000 00       	 .space 1
 417              	 .comm stanowisko,96,4
 418              	 .section .text.delay,"ax",%progbits
 419              	 .align 2
 420              	 .global delay
 421              	 .thumb
 422              	 .thumb_func
 424              	delay:
 425              	.LFB322:
 426              	 .file 4 "../variables.h"
   1:../variables.h **** #define SOF 0xCC			//start of message
   2:../variables.h **** #define EOF 0xDD			//end of message
   3:../variables.h **** #define INIT 0xA1			//init message
   4:../variables.h **** #define CHECK 0xA3		//go no go message
   5:../variables.h **** 
   6:../variables.h **** // kinematics vars
   7:../variables.h **** float pi = 3.14159f;
   8:../variables.h **** float l1 =100;					//length of thight
   9:../variables.h **** float l2 =200;					//length of tibia
  10:../variables.h **** float d =89;					//distance between motors
  11:../variables.h **** float t = 0.0f;					//time of execution
  12:../variables.h **** float dt = -0.15;				//delta t
  13:../variables.h **** 
  14:../variables.h **** //communication vars
  15:../variables.h **** uint8_t rxData[10];								//buffer for incoming messages
  16:../variables.h **** uint8_t txData[10];								//buffer for outgoing messages
  17:../variables.h **** uint8_t adress =0xEE;						//adress of Controller device
  18:../variables.h **** uint8_t rxByte = 0;								//temprorary incoming byte holder
  19:../variables.h **** uint8_t iterator_wiadomosci = 0;	//message iterator
  20:../variables.h **** 
  21:../variables.h **** //other vars
  22:../variables.h **** uint8_t is_delay = 1;							//is on active delay
  23:../variables.h **** uint8_t init = 0;									//is initiated
  24:../variables.h **** uint8_t motors_go = 0;						//are all motors go
  25:../variables.h **** 
  26:../variables.h **** struct vec2										//floating point 2d vector
  27:../variables.h **** {
  28:../variables.h **** 	float x;
  29:../variables.h **** 	float y;
  30:../variables.h **** };
  31:../variables.h **** struct vec3										//floating point 3d vector
  32:../variables.h **** {
  33:../variables.h **** 	float x;
  34:../variables.h **** 	float y;
  35:../variables.h **** 	float z;
  36:../variables.h **** };
  37:../variables.h **** struct Leg											//structure holding leg parameters
  38:../variables.h **** {
  39:../variables.h **** 	uint8_t motor_n[2];						//driver numbers
  40:../variables.h **** 	uint8_t motor_go[2];					//is motor go
  41:../variables.h **** 	uint8_t adresy[2];							//adresses
  42:../variables.h **** 	int16_t i_net[2];								//summarized current
  43:../variables.h **** 	int32_t ang_abs[2];						//absolute angle of the motor
  44:../variables.h **** 	float ang_abs_poprzedni[2];		//last absolute angle of the motor
  45:../variables.h **** 	float predkosc_silnika[2];			//motor speed
  46:../variables.h **** 	uint16_t ks;										//virtal spring strength
  47:../variables.h **** 	uint16_t kd;										//virtual damper strength
  48:../variables.h **** 	int32_t teta_int[2];							//commanded motor angle as 32bit integer
  49:../variables.h **** 	uint16_t poz_zad[2];						//commanded motor angle as 16bit unsigned integer
  50:../variables.h **** 	struct vec2 foot;							//commanded foot position in milimeters in x-y reference frame
  51:../variables.h **** 	float teta[2];									//commanded motor angle in radaians
  52:../variables.h **** 	float ang_abs_rad[2];					//current motor angle in radians
  53:../variables.h **** 	struct vec2 eF;								//estimated Forces on the foot
  54:../variables.h **** 	float torque[2];								//measured Torque on the motors
  55:../variables.h **** 	uint8_t  skoki;;
  56:../variables.h **** };
  57:../variables.h **** struct Leg stanowisko;					//struct for test stand , a single leg
  58:../variables.h **** 
  59:../variables.h **** 
  60:../variables.h **** void delay(uint32_t us)					//active delay
  61:../variables.h **** {
 427              	 .loc 4 61 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431 0000 80B5     	 push {r7,lr}
 432              	.LCFI39:
 433              	 .cfi_def_cfa_offset 8
 434              	 .cfi_offset 7,-8
 435              	 .cfi_offset 14,-4
 436 0002 82B0     	 sub sp,sp,#8
 437              	.LCFI40:
 438              	 .cfi_def_cfa_offset 16
 439 0004 00AF     	 add r7,sp,#0
 440              	.LCFI41:
 441              	 .cfi_def_cfa_register 7
 442 0006 7860     	 str r0,[r7,#4]
  62:../variables.h **** 	us *= 100;
 443              	 .loc 4 62 0
 444 0008 7B68     	 ldr r3,[r7,#4]
 445 000a 6422     	 movs r2,#100
 446 000c 02FB03F3 	 mul r3,r2,r3
 447 0010 7B60     	 str r3,[r7,#4]
  63:../variables.h **** 	is_delay = 1;
 448              	 .loc 4 63 0
 449 0012 0A4B     	 ldr r3,.L11
 450 0014 0122     	 movs r2,#1
 451 0016 1A70     	 strb r2,[r3]
  64:../variables.h **** 	TIMER_SetTimeInterval(&DELAY, us);
 452              	 .loc 4 64 0
 453 0018 0948     	 ldr r0,.L11+4
 454 001a 7968     	 ldr r1,[r7,#4]
 455 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
  65:../variables.h **** 	TIMER_Start(&DELAY);
 456              	 .loc 4 65 0
 457 0020 0748     	 ldr r0,.L11+4
 458 0022 FFF7FEFF 	 bl TIMER_Start
  66:../variables.h **** 	while(is_delay);
 459              	 .loc 4 66 0
 460 0026 00BF     	 nop
 461              	.L10:
 462              	 .loc 4 66 0 is_stmt 0 discriminator 1
 463 0028 044B     	 ldr r3,.L11
 464 002a 1B78     	 ldrb r3,[r3]
 465 002c 002B     	 cmp r3,#0
 466 002e FBD1     	 bne .L10
  67:../variables.h **** 	TIMER_Stop(&DELAY);
 467              	 .loc 4 67 0 is_stmt 1
 468 0030 0348     	 ldr r0,.L11+4
 469 0032 FFF7FEFF 	 bl TIMER_Stop
  68:../variables.h **** }
 470              	 .loc 4 68 0
 471 0036 0837     	 adds r7,r7,#8
 472              	.LCFI42:
 473              	 .cfi_def_cfa_offset 8
 474 0038 BD46     	 mov sp,r7
 475              	.LCFI43:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 003a 80BD     	 pop {r7,pc}
 479              	.L12:
 480              	 .align 2
 481              	.L11:
 482 003c 00000000 	 .word is_delay
 483 0040 00000000 	 .word DELAY
 484              	 .cfi_endproc
 485              	.LFE322:
 487              	 .section .text.Init,"ax",%progbits
 488              	 .align 2
 489              	 .global Init
 490              	 .thumb
 491              	 .thumb_func
 493              	Init:
 494              	.LFB323:
  69:../variables.h **** 
  70:../variables.h **** void Init()			//initialization function for test stand
  71:../variables.h **** {
 495              	 .loc 4 71 0
 496              	 .cfi_startproc
 497              	 
 498              	 
 499              	 
 500 0000 80B4     	 push {r7}
 501              	.LCFI44:
 502              	 .cfi_def_cfa_offset 4
 503              	 .cfi_offset 7,-4
 504 0002 83B0     	 sub sp,sp,#12
 505              	.LCFI45:
 506              	 .cfi_def_cfa_offset 16
 507 0004 00AF     	 add r7,sp,#0
 508              	.LCFI46:
 509              	 .cfi_def_cfa_register 7
  72:../variables.h **** 	txData[0] = SOF;
 510              	 .loc 4 72 0
 511 0006 284B     	 ldr r3,.L16
 512 0008 CC22     	 movs r2,#204
 513 000a 1A70     	 strb r2,[r3]
  73:../variables.h **** 	stanowisko.adresy[0] = 0x10;
 514              	 .loc 4 73 0
 515 000c 274B     	 ldr r3,.L16+4
 516 000e 1022     	 movs r2,#16
 517 0010 1A71     	 strb r2,[r3,#4]
  74:../variables.h **** 	stanowisko.adresy[1] = 0x11;
 518              	 .loc 4 74 0
 519 0012 264B     	 ldr r3,.L16+4
 520 0014 1122     	 movs r2,#17
 521 0016 5A71     	 strb r2,[r3,#5]
 522              	.LBB2:
  75:../variables.h **** 	for(uint8_t i = 0 ; i < 2; i++)
 523              	 .loc 4 75 0
 524 0018 0023     	 movs r3,#0
 525 001a FB71     	 strb r3,[r7,#7]
 526 001c 28E0     	 b .L14
 527              	.L15:
  76:../variables.h **** 	{
  77:../variables.h **** 		stanowisko.i_net[i] = 0;
 528              	 .loc 4 77 0 discriminator 3
 529 001e FB79     	 ldrb r3,[r7,#7]
 530 0020 224A     	 ldr r2,.L16+4
 531 0022 5B00     	 lsls r3,r3,#1
 532 0024 1344     	 add r3,r3,r2
 533 0026 0022     	 movs r2,#0
 534 0028 DA80     	 strh r2,[r3,#6]
  78:../variables.h **** 		stanowisko.ang_abs[i] = 0;
 535              	 .loc 4 78 0 discriminator 3
 536 002a FB79     	 ldrb r3,[r7,#7]
 537 002c 1F4A     	 ldr r2,.L16+4
 538 002e 0233     	 adds r3,r3,#2
 539 0030 9B00     	 lsls r3,r3,#2
 540 0032 1344     	 add r3,r3,r2
 541 0034 0022     	 movs r2,#0
 542 0036 5A60     	 str r2,[r3,#4]
  79:../variables.h **** 		stanowisko.ang_abs_poprzedni[i] = 0;
 543              	 .loc 4 79 0 discriminator 3
 544 0038 FB79     	 ldrb r3,[r7,#7]
 545 003a 1C4A     	 ldr r2,.L16+4
 546 003c 0433     	 adds r3,r3,#4
 547 003e 9B00     	 lsls r3,r3,#2
 548 0040 1344     	 add r3,r3,r2
 549 0042 4FF00002 	 mov r2,#0
 550 0046 5A60     	 str r2,[r3,#4]
  80:../variables.h **** 		stanowisko.predkosc_silnika[i] = 0;
 551              	 .loc 4 80 0 discriminator 3
 552 0048 FB79     	 ldrb r3,[r7,#7]
 553 004a 184A     	 ldr r2,.L16+4
 554 004c 0633     	 adds r3,r3,#6
 555 004e 9B00     	 lsls r3,r3,#2
 556 0050 1344     	 add r3,r3,r2
 557 0052 4FF00002 	 mov r2,#0
 558 0056 5A60     	 str r2,[r3,#4]
  81:../variables.h **** 		stanowisko.motor_go[i]  =0;
 559              	 .loc 4 81 0 discriminator 3
 560 0058 FB79     	 ldrb r3,[r7,#7]
 561 005a 144A     	 ldr r2,.L16+4
 562 005c 1344     	 add r3,r3,r2
 563 005e 0022     	 movs r2,#0
 564 0060 9A70     	 strb r2,[r3,#2]
  82:../variables.h **** 		stanowisko.motor_n[i] = 0;
 565              	 .loc 4 82 0 discriminator 3
 566 0062 FB79     	 ldrb r3,[r7,#7]
 567 0064 114A     	 ldr r2,.L16+4
 568 0066 0021     	 movs r1,#0
 569 0068 D154     	 strb r1,[r2,r3]
  75:../variables.h **** 	{
 570              	 .loc 4 75 0 discriminator 3
 571 006a FB79     	 ldrb r3,[r7,#7]
 572 006c 0133     	 adds r3,r3,#1
 573 006e FB71     	 strb r3,[r7,#7]
 574              	.L14:
  75:../variables.h **** 	{
 575              	 .loc 4 75 0 is_stmt 0 discriminator 1
 576 0070 FB79     	 ldrb r3,[r7,#7]
 577 0072 012B     	 cmp r3,#1
 578 0074 D3D9     	 bls .L15
 579              	.LBE2:
  83:../variables.h **** 	}
  84:../variables.h **** 	stanowisko.ks = 550;
 580              	 .loc 4 84 0 is_stmt 1
 581 0076 0D4B     	 ldr r3,.L16+4
 582 0078 40F22622 	 movw r2,#550
 583 007c 9A84     	 strh r2,[r3,#36]
  85:../variables.h **** 	stanowisko.kd = 600;
 584              	 .loc 4 85 0
 585 007e 0B4B     	 ldr r3,.L16+4
 586 0080 4FF41672 	 mov r2,#600
 587 0084 DA84     	 strh r2,[r3,#38]
  86:../variables.h **** 	stanowisko.foot.x = 0;
 588              	 .loc 4 86 0
 589 0086 094B     	 ldr r3,.L16+4
 590 0088 4FF00002 	 mov r2,#0
 591 008c 5A63     	 str r2,[r3,#52]
  87:../variables.h **** 	stanowisko.foot.y = 200;
 592              	 .loc 4 87 0
 593 008e 074B     	 ldr r3,.L16+4
 594 0090 074A     	 ldr r2,.L16+8
 595 0092 9A63     	 str r2,[r3,#56]
  88:../variables.h **** 	stanowisko.skoki = 0;
 596              	 .loc 4 88 0
 597 0094 054B     	 ldr r3,.L16+4
 598 0096 0022     	 movs r2,#0
 599 0098 83F85C20 	 strb r2,[r3,#92]
  89:../variables.h **** }
 600              	 .loc 4 89 0
 601 009c 0C37     	 adds r7,r7,#12
 602              	.LCFI47:
 603              	 .cfi_def_cfa_offset 4
 604 009e BD46     	 mov sp,r7
 605              	.LCFI48:
 606              	 .cfi_def_cfa_register 13
 607              	 
 608 00a0 5DF8047B 	 ldr r7,[sp],#4
 609              	.LCFI49:
 610              	 .cfi_restore 7
 611              	 .cfi_def_cfa_offset 0
 612 00a4 7047     	 bx lr
 613              	.L17:
 614 00a6 00BF     	 .align 2
 615              	.L16:
 616 00a8 00000000 	 .word txData
 617 00ac 00000000 	 .word stanowisko
 618 00b0 00004843 	 .word 1128792064
 619              	 .cfi_endproc
 620              	.LFE323:
 622              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 623              	 .align 2
 624              	 .global CCU43_1_IRQHandler
 625              	 .thumb
 626              	 .thumb_func
 628              	CCU43_1_IRQHandler:
 629              	.LFB324:
  90:../variables.h **** void TIMER_IRQ()				//delay interrupt
  91:../variables.h **** {
 630              	 .loc 4 91 0
 631              	 .cfi_startproc
 632              	 
 633              	 
 634              	 
 635 0000 80B4     	 push {r7}
 636              	.LCFI50:
 637              	 .cfi_def_cfa_offset 4
 638              	 .cfi_offset 7,-4
 639 0002 00AF     	 add r7,sp,#0
 640              	.LCFI51:
 641              	 .cfi_def_cfa_register 7
  92:../variables.h **** 	is_delay = 0;
 642              	 .loc 4 92 0
 643 0004 034B     	 ldr r3,.L19
 644 0006 0022     	 movs r2,#0
 645 0008 1A70     	 strb r2,[r3]
  93:../variables.h **** }
 646              	 .loc 4 93 0
 647 000a BD46     	 mov sp,r7
 648              	.LCFI52:
 649              	 .cfi_def_cfa_register 13
 650              	 
 651 000c 5DF8047B 	 ldr r7,[sp],#4
 652              	.LCFI53:
 653              	 .cfi_restore 7
 654              	 .cfi_def_cfa_offset 0
 655 0010 7047     	 bx lr
 656              	.L20:
 657 0012 00BF     	 .align 2
 658              	.L19:
 659 0014 00000000 	 .word is_delay
 660              	 .cfi_endproc
 661              	.LFE324:
 663              	 .section .text.Ik,"ax",%progbits
 664              	 .align 2
 665              	 .global Ik
 666              	 .thumb
 667              	 .thumb_func
 669              	Ik:
 670              	.LFB325:
 671              	 .file 5 "../kinematics.h"
   1:../kinematics.h **** /*
   2:../kinematics.h ****  * kinematics.h
   3:../kinematics.h ****  *
   4:../kinematics.h ****  *  Created on: 11 Jan 2018
   5:../kinematics.h ****  *      Author: Mafish
   6:../kinematics.h ****  */
   7:../kinematics.h **** 
   8:../kinematics.h **** void Ik(struct Leg *n);		//Inverse kinematics
   9:../kinematics.h **** void Fk(struct Leg *n);	//Forward kinematics
  10:../kinematics.h **** void Update(struct Leg *n);	//Update floating numbers from raw data from motor drivers
  11:../kinematics.h **** void Trajectory(struct Leg *n);		//calculate trajectory for selected leg
  12:../kinematics.h **** 
  13:../kinematics.h **** void Ik(struct Leg *n)		//Inverse kinematics for (Leg)
  14:../kinematics.h **** {
 672              	 .loc 5 14 0
 673              	 .cfi_startproc
 674              	 
 675              	 
 676 0000 80B5     	 push {r7,lr}
 677              	.LCFI54:
 678              	 .cfi_def_cfa_offset 8
 679              	 .cfi_offset 7,-8
 680              	 .cfi_offset 14,-4
 681 0002 8AB0     	 sub sp,sp,#40
 682              	.LCFI55:
 683              	 .cfi_def_cfa_offset 48
 684 0004 00AF     	 add r7,sp,#0
 685              	.LCFI56:
 686              	 .cfi_def_cfa_register 7
 687 0006 7860     	 str r0,[r7,#4]
  15:../kinematics.h **** 	float x = n->foot.x;
 688              	 .loc 5 15 0
 689 0008 7B68     	 ldr r3,[r7,#4]
 690 000a 5B6B     	 ldr r3,[r3,#52]
 691 000c 7B62     	 str r3,[r7,#36]
  16:../kinematics.h **** 	float y = n->foot.y;
 692              	 .loc 5 16 0
 693 000e 7B68     	 ldr r3,[r7,#4]
 694 0010 9B6B     	 ldr r3,[r3,#56]
 695 0012 3B62     	 str r3,[r7,#32]
  17:../kinematics.h **** 	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 696              	 .loc 5 17 0
 697 0014 6E4B     	 ldr r3,.L22
 698 0016 D3ED007A 	 flds s15,[r3]
 699 001a B0EE007A 	 fconsts s14,#0
 700 001e 87EE877A 	 fdivs s14,s15,s14
 701 0022 D7ED097A 	 flds s15,[r7,#36]
 702 0026 37EE677A 	 fsubs s14,s14,s15
 703 002a 694B     	 ldr r3,.L22
 704 002c D3ED007A 	 flds s15,[r3]
 705 0030 F0EE006A 	 fconsts s13,#0
 706 0034 C7EEA66A 	 fdivs s13,s15,s13
 707 0038 D7ED097A 	 flds s15,[r7,#36]
 708 003c 76EEE77A 	 fsubs s15,s13,s15
 709 0040 27EE277A 	 fmuls s14,s14,s15
 710 0044 D7ED086A 	 flds s13,[r7,#32]
 711 0048 D7ED087A 	 flds s15,[r7,#32]
 712 004c 66EEA77A 	 fmuls s15,s13,s15
 713 0050 77EE277A 	 fadds s15,s14,s15
 714 0054 17EE900A 	 fmrs r0,s15
 715 0058 FFF7FEFF 	 bl sqrtf
 716 005c F861     	 str r0,[r7,#28]
  18:../kinematics.h **** 	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 717              	 .loc 5 18 0
 718 005e 5C4B     	 ldr r3,.L22
 719 0060 D3ED007A 	 flds s15,[r3]
 720 0064 B0EE007A 	 fconsts s14,#0
 721 0068 87EE877A 	 fdivs s14,s15,s14
 722 006c D7ED097A 	 flds s15,[r7,#36]
 723 0070 37EE277A 	 fadds s14,s14,s15
 724 0074 564B     	 ldr r3,.L22
 725 0076 D3ED007A 	 flds s15,[r3]
 726 007a F0EE006A 	 fconsts s13,#0
 727 007e C7EEA66A 	 fdivs s13,s15,s13
 728 0082 D7ED097A 	 flds s15,[r7,#36]
 729 0086 76EEA77A 	 fadds s15,s13,s15
 730 008a 27EE277A 	 fmuls s14,s14,s15
 731 008e D7ED086A 	 flds s13,[r7,#32]
 732 0092 D7ED087A 	 flds s15,[r7,#32]
 733 0096 66EEA77A 	 fmuls s15,s13,s15
 734 009a 77EE277A 	 fadds s15,s14,s15
 735 009e 17EE900A 	 fmrs r0,s15
 736 00a2 FFF7FEFF 	 bl sqrtf
 737 00a6 B861     	 str r0,[r7,#24]
  19:../kinematics.h **** 	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 738              	 .loc 5 19 0
 739 00a8 4A4B     	 ldr r3,.L22+4
 740 00aa 93ED007A 	 flds s14,[r3]
 741 00ae 494B     	 ldr r3,.L22+4
 742 00b0 D3ED007A 	 flds s15,[r3]
 743 00b4 27EE277A 	 fmuls s14,s14,s15
 744 00b8 D7ED076A 	 flds s13,[r7,#28]
 745 00bc D7ED077A 	 flds s15,[r7,#28]
 746 00c0 66EEA77A 	 fmuls s15,s13,s15
 747 00c4 37EE277A 	 fadds s14,s14,s15
 748 00c8 434B     	 ldr r3,.L22+8
 749 00ca D3ED006A 	 flds s13,[r3]
 750 00ce 424B     	 ldr r3,.L22+8
 751 00d0 D3ED007A 	 flds s15,[r3]
 752 00d4 66EEA77A 	 fmuls s15,s13,s15
 753 00d8 37EE677A 	 fsubs s14,s14,s15
 754 00dc 3D4B     	 ldr r3,.L22+4
 755 00de D3ED007A 	 flds s15,[r3]
 756 00e2 77EEA76A 	 fadds s13,s15,s15
 757 00e6 D7ED077A 	 flds s15,[r7,#28]
 758 00ea 66EEA77A 	 fmuls s15,s13,s15
 759 00ee C7EE277A 	 fdivs s15,s14,s15
 760 00f2 C7ED057A 	 fsts s15,[r7,#20]
  20:../kinematics.h **** 	fi1 = acosf(fi1);
 761              	 .loc 5 20 0
 762 00f6 7869     	 ldr r0,[r7,#20]
 763 00f8 FFF7FEFF 	 bl acosf
 764 00fc 7861     	 str r0,[r7,#20]
  21:../kinematics.h **** 	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 765              	 .loc 5 21 0
 766 00fe 354B     	 ldr r3,.L22+4
 767 0100 93ED007A 	 flds s14,[r3]
 768 0104 334B     	 ldr r3,.L22+4
 769 0106 D3ED007A 	 flds s15,[r3]
 770 010a 27EE277A 	 fmuls s14,s14,s15
 771 010e D7ED066A 	 flds s13,[r7,#24]
 772 0112 D7ED067A 	 flds s15,[r7,#24]
 773 0116 66EEA77A 	 fmuls s15,s13,s15
 774 011a 37EE277A 	 fadds s14,s14,s15
 775 011e 2E4B     	 ldr r3,.L22+8
 776 0120 D3ED006A 	 flds s13,[r3]
 777 0124 2C4B     	 ldr r3,.L22+8
 778 0126 D3ED007A 	 flds s15,[r3]
 779 012a 66EEA77A 	 fmuls s15,s13,s15
 780 012e 37EE677A 	 fsubs s14,s14,s15
 781 0132 284B     	 ldr r3,.L22+4
 782 0134 D3ED007A 	 flds s15,[r3]
 783 0138 77EEA76A 	 fadds s13,s15,s15
 784 013c D7ED067A 	 flds s15,[r7,#24]
 785 0140 66EEA77A 	 fmuls s15,s13,s15
 786 0144 C7EE277A 	 fdivs s15,s14,s15
 787 0148 C7ED047A 	 fsts s15,[r7,#16]
  22:../kinematics.h **** 	fi2 = acosf(fi2);
 788              	 .loc 5 22 0
 789 014c 3869     	 ldr r0,[r7,#16]
 790 014e FFF7FEFF 	 bl acosf
 791 0152 3861     	 str r0,[r7,#16]
  23:../kinematics.h **** 	float psi1 = asinf(((d/2)-x)/La);
 792              	 .loc 5 23 0
 793 0154 1E4B     	 ldr r3,.L22
 794 0156 D3ED007A 	 flds s15,[r3]
 795 015a B0EE007A 	 fconsts s14,#0
 796 015e 87EE877A 	 fdivs s14,s15,s14
 797 0162 D7ED097A 	 flds s15,[r7,#36]
 798 0166 37EE677A 	 fsubs s14,s14,s15
 799 016a D7ED077A 	 flds s15,[r7,#28]
 800 016e C7EE277A 	 fdivs s15,s14,s15
 801 0172 17EE900A 	 fmrs r0,s15
 802 0176 FFF7FEFF 	 bl asinf
 803 017a F860     	 str r0,[r7,#12]
  24:../kinematics.h **** 	float psi2 = asinf(((d/2)+x)/Lb);
 804              	 .loc 5 24 0
 805 017c 144B     	 ldr r3,.L22
 806 017e D3ED007A 	 flds s15,[r3]
 807 0182 B0EE007A 	 fconsts s14,#0
 808 0186 87EE877A 	 fdivs s14,s15,s14
 809 018a D7ED097A 	 flds s15,[r7,#36]
 810 018e 37EE277A 	 fadds s14,s14,s15
 811 0192 D7ED067A 	 flds s15,[r7,#24]
 812 0196 C7EE277A 	 fdivs s15,s14,s15
 813 019a 17EE900A 	 fmrs r0,s15
 814 019e FFF7FEFF 	 bl asinf
 815 01a2 B860     	 str r0,[r7,#8]
  25:../kinematics.h **** 
  26:../kinematics.h **** 	n->teta[0] = fi1 - psi1;
 816              	 .loc 5 26 0
 817 01a4 97ED057A 	 flds s14,[r7,#20]
 818 01a8 D7ED037A 	 flds s15,[r7,#12]
 819 01ac 77EE677A 	 fsubs s15,s14,s15
 820 01b0 7B68     	 ldr r3,[r7,#4]
 821 01b2 C3ED0F7A 	 fsts s15,[r3,#60]
  27:../kinematics.h **** 	n->teta[1] = fi2 - psi2;
 822              	 .loc 5 27 0
 823 01b6 97ED047A 	 flds s14,[r7,#16]
 824 01ba D7ED027A 	 flds s15,[r7,#8]
 825 01be 77EE677A 	 fsubs s15,s14,s15
 826 01c2 7B68     	 ldr r3,[r7,#4]
 827 01c4 C3ED107A 	 fsts s15,[r3,#64]
  28:../kinematics.h **** }
 828              	 .loc 5 28 0
 829 01c8 2837     	 adds r7,r7,#40
 830              	.LCFI57:
 831              	 .cfi_def_cfa_offset 8
 832 01ca BD46     	 mov sp,r7
 833              	.LCFI58:
 834              	 .cfi_def_cfa_register 13
 835              	 
 836 01cc 80BD     	 pop {r7,pc}
 837              	.L23:
 838 01ce 00BF     	 .align 2
 839              	.L22:
 840 01d0 00000000 	 .word d
 841 01d4 00000000 	 .word l1
 842 01d8 00000000 	 .word l2
 843              	 .cfi_endproc
 844              	.LFE325:
 846              	 .section .text.Fk,"ax",%progbits
 847              	 .align 2
 848              	 .global Fk
 849              	 .thumb
 850              	 .thumb_func
 852              	Fk:
 853              	.LFB326:
  29:../kinematics.h **** void Fk(struct Leg *n)		//Forward kinematics for (Leg)
  30:../kinematics.h **** {
 854              	 .loc 5 30 0
 855              	 .cfi_startproc
 856              	 
 857              	 
 858 0000 80B5     	 push {r7,lr}
 859              	.LCFI59:
 860              	 .cfi_def_cfa_offset 8
 861              	 .cfi_offset 7,-8
 862              	 .cfi_offset 14,-4
 863 0002 2DED028B 	 fstmfdd sp!,{d8}
 864              	.LCFI60:
 865              	 .cfi_def_cfa_offset 16
 866              	 .cfi_offset 80,-16
 867              	 .cfi_offset 81,-12
 868 0006 98B0     	 sub sp,sp,#96
 869              	.LCFI61:
 870              	 .cfi_def_cfa_offset 112
 871 0008 00AF     	 add r7,sp,#0
 872              	.LCFI62:
 873              	 .cfi_def_cfa_register 7
 874 000a 7860     	 str r0,[r7,#4]
  31:../kinematics.h **** 	float a = d+l1*(sinf(n->teta[0])+sinf(n->teta[1]));
 875              	 .loc 5 31 0
 876 000c 7B68     	 ldr r3,[r7,#4]
 877 000e DB6B     	 ldr r3,[r3,#60]
 878 0010 1846     	 mov r0,r3
 879 0012 FFF7FEFF 	 bl sinf
 880 0016 08EE100A 	 fmsr s16,r0
 881 001a 7B68     	 ldr r3,[r7,#4]
 882 001c 1B6C     	 ldr r3,[r3,#64]
 883 001e 1846     	 mov r0,r3
 884 0020 FFF7FEFF 	 bl sinf
 885 0024 07EE900A 	 fmsr s15,r0
 886 0028 38EE277A 	 fadds s14,s16,s15
 887 002c D94B     	 ldr r3,.L25
 888 002e D3ED007A 	 flds s15,[r3]
 889 0032 27EE277A 	 fmuls s14,s14,s15
 890 0036 D84B     	 ldr r3,.L25+4
 891 0038 D3ED007A 	 flds s15,[r3]
 892 003c 77EE277A 	 fadds s15,s14,s15
 893 0040 C7ED177A 	 fsts s15,[r7,#92]
  32:../kinematics.h **** 	float b = l1*(cosf(n->teta[1])-cosf(n->teta[0]));
 894              	 .loc 5 32 0
 895 0044 7B68     	 ldr r3,[r7,#4]
 896 0046 1B6C     	 ldr r3,[r3,#64]
 897 0048 1846     	 mov r0,r3
 898 004a FFF7FEFF 	 bl cosf
 899 004e 08EE100A 	 fmsr s16,r0
 900 0052 7B68     	 ldr r3,[r7,#4]
 901 0054 DB6B     	 ldr r3,[r3,#60]
 902 0056 1846     	 mov r0,r3
 903 0058 FFF7FEFF 	 bl cosf
 904 005c 07EE900A 	 fmsr s15,r0
 905 0060 38EE677A 	 fsubs s14,s16,s15
 906 0064 CB4B     	 ldr r3,.L25
 907 0066 D3ED007A 	 flds s15,[r3]
 908 006a 67EE277A 	 fmuls s15,s14,s15
 909 006e C7ED167A 	 fsts s15,[r7,#88]
  33:../kinematics.h **** 	float p = sqrtf(a*a+b*b);
 910              	 .loc 5 33 0
 911 0072 97ED177A 	 flds s14,[r7,#92]
 912 0076 D7ED177A 	 flds s15,[r7,#92]
 913 007a 27EE277A 	 fmuls s14,s14,s15
 914 007e D7ED166A 	 flds s13,[r7,#88]
 915 0082 D7ED167A 	 flds s15,[r7,#88]
 916 0086 66EEA77A 	 fmuls s15,s13,s15
 917 008a 77EE277A 	 fadds s15,s14,s15
 918 008e 17EE900A 	 fmrs r0,s15
 919 0092 FFF7FEFF 	 bl sqrtf
 920 0096 7865     	 str r0,[r7,#84]
  34:../kinematics.h **** 	float fi = atan2f(b,a);
 921              	 .loc 5 34 0
 922 0098 B86D     	 ldr r0,[r7,#88]
 923 009a F96D     	 ldr r1,[r7,#92]
 924 009c FFF7FEFF 	 bl atan2f
 925 00a0 3865     	 str r0,[r7,#80]
  35:../kinematics.h **** 	float theta = asinf(p/(2*l2));
 926              	 .loc 5 35 0
 927 00a2 BE4B     	 ldr r3,.L25+8
 928 00a4 D3ED007A 	 flds s15,[r3]
 929 00a8 77EEA77A 	 fadds s15,s15,s15
 930 00ac 97ED157A 	 flds s14,[r7,#84]
 931 00b0 C7EE277A 	 fdivs s15,s14,s15
 932 00b4 17EE900A 	 fmrs r0,s15
 933 00b8 FFF7FEFF 	 bl asinf
 934 00bc F864     	 str r0,[r7,#76]
  36:../kinematics.h **** 	float gama = (pi/2)-theta;
 935              	 .loc 5 36 0
 936 00be B84B     	 ldr r3,.L25+12
 937 00c0 D3ED007A 	 flds s15,[r3]
 938 00c4 B0EE007A 	 fconsts s14,#0
 939 00c8 87EE877A 	 fdivs s14,s15,s14
 940 00cc D7ED137A 	 flds s15,[r7,#76]
 941 00d0 77EE677A 	 fsubs s15,s14,s15
 942 00d4 C7ED127A 	 fsts s15,[r7,#72]
  37:../kinematics.h **** 	float psi = gama+fi;
 943              	 .loc 5 37 0
 944 00d8 97ED127A 	 flds s14,[r7,#72]
 945 00dc D7ED147A 	 flds s15,[r7,#80]
 946 00e0 77EE277A 	 fadds s15,s14,s15
 947 00e4 C7ED117A 	 fsts s15,[r7,#68]
  38:../kinematics.h **** 		  			//kinematyka prosta
  39:../kinematics.h **** 	float X = -(d/2) - l1*sinf(n->teta[0]) + l2*cosf(psi);
 948              	 .loc 5 39 0
 949 00e8 AB4B     	 ldr r3,.L25+4
 950 00ea D3ED007A 	 flds s15,[r3]
 951 00ee B0EE007A 	 fconsts s14,#0
 952 00f2 C7EE877A 	 fdivs s15,s15,s14
 953 00f6 B1EE678A 	 fnegs s16,s15
 954 00fa 7B68     	 ldr r3,[r7,#4]
 955 00fc DB6B     	 ldr r3,[r3,#60]
 956 00fe 1846     	 mov r0,r3
 957 0100 FFF7FEFF 	 bl sinf
 958 0104 07EE100A 	 fmsr s14,r0
 959 0108 A24B     	 ldr r3,.L25
 960 010a D3ED007A 	 flds s15,[r3]
 961 010e 67EE277A 	 fmuls s15,s14,s15
 962 0112 38EE678A 	 fsubs s16,s16,s15
 963 0116 786C     	 ldr r0,[r7,#68]
 964 0118 FFF7FEFF 	 bl cosf
 965 011c 07EE100A 	 fmsr s14,r0
 966 0120 9E4B     	 ldr r3,.L25+8
 967 0122 D3ED007A 	 flds s15,[r3]
 968 0126 67EE277A 	 fmuls s15,s14,s15
 969 012a 78EE277A 	 fadds s15,s16,s15
 970 012e C7ED107A 	 fsts s15,[r7,#64]
  40:../kinematics.h **** 	float Y = l1*cosf(n->teta[0]) + l2*sinf(psi);
 971              	 .loc 5 40 0
 972 0132 7B68     	 ldr r3,[r7,#4]
 973 0134 DB6B     	 ldr r3,[r3,#60]
 974 0136 1846     	 mov r0,r3
 975 0138 FFF7FEFF 	 bl cosf
 976 013c 07EE100A 	 fmsr s14,r0
 977 0140 944B     	 ldr r3,.L25
 978 0142 D3ED007A 	 flds s15,[r3]
 979 0146 27EE278A 	 fmuls s16,s14,s15
 980 014a 786C     	 ldr r0,[r7,#68]
 981 014c FFF7FEFF 	 bl sinf
 982 0150 07EE100A 	 fmsr s14,r0
 983 0154 914B     	 ldr r3,.L25+8
 984 0156 D3ED007A 	 flds s15,[r3]
 985 015a 67EE277A 	 fmuls s15,s14,s15
 986 015e 78EE277A 	 fadds s15,s16,s15
 987 0162 C7ED0F7A 	 fsts s15,[r7,#60]
  41:../kinematics.h **** 	float A = a*cosf(n->teta[0])+b*sinf(n->teta[0]);
 988              	 .loc 5 41 0
 989 0166 7B68     	 ldr r3,[r7,#4]
 990 0168 DB6B     	 ldr r3,[r3,#60]
 991 016a 1846     	 mov r0,r3
 992 016c FFF7FEFF 	 bl cosf
 993 0170 07EE100A 	 fmsr s14,r0
 994 0174 D7ED177A 	 flds s15,[r7,#92]
 995 0178 27EE278A 	 fmuls s16,s14,s15
 996 017c 7B68     	 ldr r3,[r7,#4]
 997 017e DB6B     	 ldr r3,[r3,#60]
 998 0180 1846     	 mov r0,r3
 999 0182 FFF7FEFF 	 bl sinf
 1000 0186 07EE100A 	 fmsr s14,r0
 1001 018a D7ED167A 	 flds s15,[r7,#88]
 1002 018e 67EE277A 	 fmuls s15,s14,s15
 1003 0192 78EE277A 	 fadds s15,s16,s15
 1004 0196 C7ED0E7A 	 fsts s15,[r7,#56]
  42:../kinematics.h **** 	float B = sqrtf((a*a+b*b)*(4*l2*l2-p*p));
 1005              	 .loc 5 42 0
 1006 019a 97ED177A 	 flds s14,[r7,#92]
 1007 019e D7ED177A 	 flds s15,[r7,#92]
 1008 01a2 27EE277A 	 fmuls s14,s14,s15
 1009 01a6 D7ED166A 	 flds s13,[r7,#88]
 1010 01aa D7ED167A 	 flds s15,[r7,#88]
 1011 01ae 66EEA77A 	 fmuls s15,s13,s15
 1012 01b2 37EE277A 	 fadds s14,s14,s15
 1013 01b6 794B     	 ldr r3,.L25+8
 1014 01b8 D3ED007A 	 flds s15,[r3]
 1015 01bc F1EE006A 	 fconsts s13,#16
 1016 01c0 67EEA66A 	 fmuls s13,s15,s13
 1017 01c4 754B     	 ldr r3,.L25+8
 1018 01c6 D3ED007A 	 flds s15,[r3]
 1019 01ca 66EEA76A 	 fmuls s13,s13,s15
 1020 01ce 97ED156A 	 flds s12,[r7,#84]
 1021 01d2 D7ED157A 	 flds s15,[r7,#84]
 1022 01d6 66EE277A 	 fmuls s15,s12,s15
 1023 01da 76EEE77A 	 fsubs s15,s13,s15
 1024 01de 67EE277A 	 fmuls s15,s14,s15
 1025 01e2 17EE900A 	 fmrs r0,s15
 1026 01e6 FFF7FEFF 	 bl sqrtf
 1027 01ea 7863     	 str r0,[r7,#52]
  43:../kinematics.h **** 	float C = a*sinf(n->teta[0])-b*cosf(n->teta[0]);
 1028              	 .loc 5 43 0
 1029 01ec 7B68     	 ldr r3,[r7,#4]
 1030 01ee DB6B     	 ldr r3,[r3,#60]
 1031 01f0 1846     	 mov r0,r3
 1032 01f2 FFF7FEFF 	 bl sinf
 1033 01f6 07EE100A 	 fmsr s14,r0
 1034 01fa D7ED177A 	 flds s15,[r7,#92]
 1035 01fe 27EE278A 	 fmuls s16,s14,s15
 1036 0202 7B68     	 ldr r3,[r7,#4]
 1037 0204 DB6B     	 ldr r3,[r3,#60]
 1038 0206 1846     	 mov r0,r3
 1039 0208 FFF7FEFF 	 bl cosf
 1040 020c 07EE100A 	 fmsr s14,r0
 1041 0210 D7ED167A 	 flds s15,[r7,#88]
 1042 0214 67EE277A 	 fmuls s15,s14,s15
 1043 0218 78EE677A 	 fsubs s15,s16,s15
 1044 021c C7ED0C7A 	 fsts s15,[r7,#48]
  44:../kinematics.h **** 	float D = a*a+b*b; //pomocnicze dx/dtheta1
 1045              	 .loc 5 44 0
 1046 0220 97ED177A 	 flds s14,[r7,#92]
 1047 0224 D7ED177A 	 flds s15,[r7,#92]
 1048 0228 27EE277A 	 fmuls s14,s14,s15
 1049 022c D7ED166A 	 flds s13,[r7,#88]
 1050 0230 D7ED167A 	 flds s15,[r7,#88]
 1051 0234 66EEA77A 	 fmuls s15,s13,s15
 1052 0238 77EE277A 	 fadds s15,s14,s15
 1053 023c C7ED0B7A 	 fsts s15,[r7,#44]
  45:../kinematics.h **** 	float E = a*cosf(n->teta[1])-b*sinf(n->teta[1]);
 1054              	 .loc 5 45 0
 1055 0240 7B68     	 ldr r3,[r7,#4]
 1056 0242 1B6C     	 ldr r3,[r3,#64]
 1057 0244 1846     	 mov r0,r3
 1058 0246 FFF7FEFF 	 bl cosf
 1059 024a 07EE100A 	 fmsr s14,r0
 1060 024e D7ED177A 	 flds s15,[r7,#92]
 1061 0252 27EE278A 	 fmuls s16,s14,s15
 1062 0256 7B68     	 ldr r3,[r7,#4]
 1063 0258 1B6C     	 ldr r3,[r3,#64]
 1064 025a 1846     	 mov r0,r3
 1065 025c FFF7FEFF 	 bl sinf
 1066 0260 07EE100A 	 fmsr s14,r0
 1067 0264 D7ED167A 	 flds s15,[r7,#88]
 1068 0268 67EE277A 	 fmuls s15,s14,s15
 1069 026c 78EE677A 	 fsubs s15,s16,s15
 1070 0270 C7ED0A7A 	 fsts s15,[r7,#40]
  46:../kinematics.h **** 	float F = a*sinf(n->teta[1])+b*cosf(n->teta[1]); //pomocnicze dx/dtheta2
 1071              	 .loc 5 46 0
 1072 0274 7B68     	 ldr r3,[r7,#4]
 1073 0276 1B6C     	 ldr r3,[r3,#64]
 1074 0278 1846     	 mov r0,r3
 1075 027a FFF7FEFF 	 bl sinf
 1076 027e 07EE100A 	 fmsr s14,r0
 1077 0282 D7ED177A 	 flds s15,[r7,#92]
 1078 0286 27EE278A 	 fmuls s16,s14,s15
 1079 028a 7B68     	 ldr r3,[r7,#4]
 1080 028c 1B6C     	 ldr r3,[r3,#64]
 1081 028e 1846     	 mov r0,r3
 1082 0290 FFF7FEFF 	 bl cosf
 1083 0294 07EE100A 	 fmsr s14,r0
 1084 0298 D7ED167A 	 flds s15,[r7,#88]
 1085 029c 67EE277A 	 fmuls s15,s14,s15
 1086 02a0 78EE277A 	 fadds s15,s16,s15
 1087 02a4 C7ED097A 	 fsts s15,[r7,#36]
  47:../kinematics.h **** 	float Jt11 = -l1*l2*sinf(psi)*(-(A/B)+(C/D))-l1*cosf(n->teta[0]);
 1088              	 .loc 5 47 0
 1089 02a8 3A4B     	 ldr r3,.L25
 1090 02aa D3ED007A 	 flds s15,[r3]
 1091 02ae B1EE677A 	 fnegs s14,s15
 1092 02b2 3A4B     	 ldr r3,.L25+8
 1093 02b4 D3ED007A 	 flds s15,[r3]
 1094 02b8 27EE278A 	 fmuls s16,s14,s15
 1095 02bc 786C     	 ldr r0,[r7,#68]
 1096 02be FFF7FEFF 	 bl sinf
 1097 02c2 07EE900A 	 fmsr s15,r0
 1098 02c6 28EE277A 	 fmuls s14,s16,s15
 1099 02ca D7ED0C6A 	 flds s13,[r7,#48]
 1100 02ce D7ED0B7A 	 flds s15,[r7,#44]
 1101 02d2 C6EEA76A 	 fdivs s13,s13,s15
 1102 02d6 97ED0E6A 	 flds s12,[r7,#56]
 1103 02da D7ED0D7A 	 flds s15,[r7,#52]
 1104 02de C6EE277A 	 fdivs s15,s12,s15
 1105 02e2 76EEE77A 	 fsubs s15,s13,s15
 1106 02e6 27EE278A 	 fmuls s16,s14,s15
 1107 02ea 7B68     	 ldr r3,[r7,#4]
 1108 02ec DB6B     	 ldr r3,[r3,#60]
 1109 02ee 1846     	 mov r0,r3
 1110 02f0 FFF7FEFF 	 bl cosf
 1111 02f4 07EE100A 	 fmsr s14,r0
 1112 02f8 264B     	 ldr r3,.L25
 1113 02fa D3ED007A 	 flds s15,[r3]
 1114 02fe 67EE277A 	 fmuls s15,s14,s15
 1115 0302 78EE677A 	 fsubs s15,s16,s15
 1116 0306 C7ED087A 	 fsts s15,[r7,#32]
  48:../kinematics.h **** 	float Jt12 = -l1*cosf(n->teta[0])+l1*l2*cosf(psi)*(-(A/B)+(C/D));
 1117              	 .loc 5 48 0
 1118 030a 224B     	 ldr r3,.L25
 1119 030c D3ED007A 	 flds s15,[r3]
 1120 0310 B1EE678A 	 fnegs s16,s15
 1121 0314 7B68     	 ldr r3,[r7,#4]
 1122 0316 DB6B     	 ldr r3,[r3,#60]
 1123 0318 1846     	 mov r0,r3
 1124 031a FFF7FEFF 	 bl cosf
 1125 031e 07EE900A 	 fmsr s15,r0
 1126 0322 28EE278A 	 fmuls s16,s16,s15
 1127 0326 1B4B     	 ldr r3,.L25
 1128 0328 93ED007A 	 flds s14,[r3]
 1129 032c 1B4B     	 ldr r3,.L25+8
 1130 032e D3ED007A 	 flds s15,[r3]
 1131 0332 67EE278A 	 fmuls s17,s14,s15
 1132 0336 786C     	 ldr r0,[r7,#68]
 1133 0338 FFF7FEFF 	 bl cosf
 1134 033c 07EE900A 	 fmsr s15,r0
 1135 0340 28EEA77A 	 fmuls s14,s17,s15
 1136 0344 D7ED0C6A 	 flds s13,[r7,#48]
 1137 0348 D7ED0B7A 	 flds s15,[r7,#44]
 1138 034c C6EEA76A 	 fdivs s13,s13,s15
 1139 0350 97ED0E6A 	 flds s12,[r7,#56]
 1140 0354 D7ED0D7A 	 flds s15,[r7,#52]
 1141 0358 C6EE277A 	 fdivs s15,s12,s15
 1142 035c 76EEE77A 	 fsubs s15,s13,s15
 1143 0360 67EE277A 	 fmuls s15,s14,s15
 1144 0364 78EE277A 	 fadds s15,s16,s15
 1145 0368 C7ED077A 	 fsts s15,[r7,#28]
  49:../kinematics.h **** 	float Jt21 = -l1*l2*sinf(psi)*(-(E/B)+(F/D));
 1146              	 .loc 5 49 0
 1147 036c 094B     	 ldr r3,.L25
 1148 036e D3ED007A 	 flds s15,[r3]
 1149 0372 B1EE677A 	 fnegs s14,s15
 1150 0376 094B     	 ldr r3,.L25+8
 1151 0378 D3ED007A 	 flds s15,[r3]
 1152 037c 27EE278A 	 fmuls s16,s14,s15
 1153 0380 786C     	 ldr r0,[r7,#68]
 1154 0382 FFF7FEFF 	 bl sinf
 1155 0386 07EE900A 	 fmsr s15,r0
 1156 038a 28EE277A 	 fmuls s14,s16,s15
 1157 038e D7ED096A 	 flds s13,[r7,#36]
 1158 0392 07E0     	 b .L26
 1159              	.L27:
 1160              	 .align 2
 1161              	.L25:
 1162 0394 00000000 	 .word l1
 1163 0398 00000000 	 .word d
 1164 039c 00000000 	 .word l2
 1165 03a0 00000000 	 .word pi
 1166              	.L26:
 1167 03a4 D7ED0B7A 	 flds s15,[r7,#44]
 1168 03a8 C6EEA76A 	 fdivs s13,s13,s15
 1169 03ac 97ED0A6A 	 flds s12,[r7,#40]
 1170 03b0 D7ED0D7A 	 flds s15,[r7,#52]
 1171 03b4 C6EE277A 	 fdivs s15,s12,s15
 1172 03b8 76EEE77A 	 fsubs s15,s13,s15
 1173 03bc 67EE277A 	 fmuls s15,s14,s15
 1174 03c0 C7ED067A 	 fsts s15,[r7,#24]
  50:../kinematics.h **** 	float Jt22 = l1*l2*sinf(psi)*(-(E/B)+(F/D));
 1175              	 .loc 5 50 0
 1176 03c4 354B     	 ldr r3,.L28
 1177 03c6 93ED007A 	 flds s14,[r3]
 1178 03ca 354B     	 ldr r3,.L28+4
 1179 03cc D3ED007A 	 flds s15,[r3]
 1180 03d0 27EE278A 	 fmuls s16,s14,s15
 1181 03d4 786C     	 ldr r0,[r7,#68]
 1182 03d6 FFF7FEFF 	 bl sinf
 1183 03da 07EE900A 	 fmsr s15,r0
 1184 03de 28EE277A 	 fmuls s14,s16,s15
 1185 03e2 D7ED096A 	 flds s13,[r7,#36]
 1186 03e6 D7ED0B7A 	 flds s15,[r7,#44]
 1187 03ea C6EEA76A 	 fdivs s13,s13,s15
 1188 03ee 97ED0A6A 	 flds s12,[r7,#40]
 1189 03f2 D7ED0D7A 	 flds s15,[r7,#52]
 1190 03f6 C6EE277A 	 fdivs s15,s12,s15
 1191 03fa 76EEE77A 	 fsubs s15,s13,s15
 1192 03fe 67EE277A 	 fmuls s15,s14,s15
 1193 0402 C7ED057A 	 fsts s15,[r7,#20]
  51:../kinematics.h ****   	float mianownik = Jt11*Jt22 - Jt12*Jt21;
 1194              	 .loc 5 51 0
 1195 0406 97ED087A 	 flds s14,[r7,#32]
 1196 040a D7ED057A 	 flds s15,[r7,#20]
 1197 040e 27EE277A 	 fmuls s14,s14,s15
 1198 0412 D7ED076A 	 flds s13,[r7,#28]
 1199 0416 D7ED067A 	 flds s15,[r7,#24]
 1200 041a 66EEA77A 	 fmuls s15,s13,s15
 1201 041e 77EE677A 	 fsubs s15,s14,s15
 1202 0422 C7ED047A 	 fsts s15,[r7,#16]
  52:../kinematics.h ****   	float H = Jt22*n->torque[0] - Jt12*n->torque[1] ;
 1203              	 .loc 5 52 0
 1204 0426 7B68     	 ldr r3,[r7,#4]
 1205 0428 93ED157A 	 flds s14,[r3,#84]
 1206 042c D7ED057A 	 flds s15,[r7,#20]
 1207 0430 27EE277A 	 fmuls s14,s14,s15
 1208 0434 7B68     	 ldr r3,[r7,#4]
 1209 0436 D3ED166A 	 flds s13,[r3,#88]
 1210 043a D7ED077A 	 flds s15,[r7,#28]
 1211 043e 66EEA77A 	 fmuls s15,s13,s15
 1212 0442 77EE677A 	 fsubs s15,s14,s15
 1213 0446 C7ED037A 	 fsts s15,[r7,#12]
  53:../kinematics.h ****   	float I = Jt11 * n->torque[1]  - Jt21 * n->torque[0] ;
 1214              	 .loc 5 53 0
 1215 044a 7B68     	 ldr r3,[r7,#4]
 1216 044c 93ED167A 	 flds s14,[r3,#88]
 1217 0450 D7ED087A 	 flds s15,[r7,#32]
 1218 0454 27EE277A 	 fmuls s14,s14,s15
 1219 0458 7B68     	 ldr r3,[r7,#4]
 1220 045a D3ED156A 	 flds s13,[r3,#84]
 1221 045e D7ED067A 	 flds s15,[r7,#24]
 1222 0462 66EEA77A 	 fmuls s15,s13,s15
 1223 0466 77EE677A 	 fsubs s15,s14,s15
 1224 046a C7ED027A 	 fsts s15,[r7,#8]
  54:../kinematics.h **** 
  55:../kinematics.h ****   	n->eF.x = H/mianownik;
 1225              	 .loc 5 55 0
 1226 046e 97ED037A 	 flds s14,[r7,#12]
 1227 0472 D7ED047A 	 flds s15,[r7,#16]
 1228 0476 C7EE277A 	 fdivs s15,s14,s15
 1229 047a 7B68     	 ldr r3,[r7,#4]
 1230 047c C3ED137A 	 fsts s15,[r3,#76]
  56:../kinematics.h ****   	n->eF.y = I/mianownik;
 1231              	 .loc 5 56 0
 1232 0480 97ED027A 	 flds s14,[r7,#8]
 1233 0484 D7ED047A 	 flds s15,[r7,#16]
 1234 0488 C7EE277A 	 fdivs s15,s14,s15
 1235 048c 7B68     	 ldr r3,[r7,#4]
 1236 048e C3ED147A 	 fsts s15,[r3,#80]
  57:../kinematics.h **** 
  58:../kinematics.h **** }
 1237              	 .loc 5 58 0
 1238 0492 6037     	 adds r7,r7,#96
 1239              	.LCFI63:
 1240              	 .cfi_def_cfa_offset 16
 1241 0494 BD46     	 mov sp,r7
 1242              	.LCFI64:
 1243              	 .cfi_def_cfa_register 13
 1244              	 
 1245 0496 BDEC028B 	 fldmfdd sp!,{d8}
 1246              	.LCFI65:
 1247              	 .cfi_restore 80
 1248              	 .cfi_restore 81
 1249              	 .cfi_def_cfa_offset 8
 1250 049a 80BD     	 pop {r7,pc}
 1251              	.L29:
 1252              	 .align 2
 1253              	.L28:
 1254 049c 00000000 	 .word l1
 1255 04a0 00000000 	 .word l2
 1256              	 .cfi_endproc
 1257              	.LFE326:
 1259              	 .section .text.Update,"ax",%progbits
 1260              	 .align 2
 1261              	 .global Update
 1262              	 .thumb
 1263              	 .thumb_func
 1265              	Update:
 1266              	.LFB327:
  59:../kinematics.h **** void Update(struct Leg *n)		//Update floating numbers from raw data from motor drivers
  60:../kinematics.h **** {
 1267              	 .loc 5 60 0
 1268              	 .cfi_startproc
 1269              	 
 1270              	 
 1271              	 
 1272 0000 80B4     	 push {r7}
 1273              	.LCFI66:
 1274              	 .cfi_def_cfa_offset 4
 1275              	 .cfi_offset 7,-4
 1276 0002 83B0     	 sub sp,sp,#12
 1277              	.LCFI67:
 1278              	 .cfi_def_cfa_offset 16
 1279 0004 00AF     	 add r7,sp,#0
 1280              	.LCFI68:
 1281              	 .cfi_def_cfa_register 7
 1282 0006 7860     	 str r0,[r7,#4]
  61:../kinematics.h **** 	n->ang_abs_poprzedni[0] = n->ang_abs_rad[0];
 1283              	 .loc 5 61 0
 1284 0008 7B68     	 ldr r3,[r7,#4]
 1285 000a 5A6C     	 ldr r2,[r3,#68]
 1286 000c 7B68     	 ldr r3,[r7,#4]
 1287 000e 5A61     	 str r2,[r3,#20]
  62:../kinematics.h **** 	n->ang_abs_poprzedni[1] = n->ang_abs_rad[1];
 1288              	 .loc 5 62 0
 1289 0010 7B68     	 ldr r3,[r7,#4]
 1290 0012 9A6C     	 ldr r2,[r3,#72]
 1291 0014 7B68     	 ldr r3,[r7,#4]
 1292 0016 9A61     	 str r2,[r3,#24]
  63:../kinematics.h **** 	n->ang_abs_rad[0] = (float)n->ang_abs[0] * pi / 32767.0f;;
 1293              	 .loc 5 63 0
 1294 0018 7B68     	 ldr r3,[r7,#4]
 1295 001a DB68     	 ldr r3,[r3,#12]
 1296 001c 07EE903A 	 fmsr s15,r3
 1297 0020 B8EEE77A 	 fsitos s14,s15
 1298 0024 424B     	 ldr r3,.L31
 1299 0026 D3ED007A 	 flds s15,[r3]
 1300 002a 67EE277A 	 fmuls s15,s14,s15
 1301 002e 9FED417A 	 flds s14,.L31+4
 1302 0032 C7EE877A 	 fdivs s15,s15,s14
 1303 0036 7B68     	 ldr r3,[r7,#4]
 1304 0038 C3ED117A 	 fsts s15,[r3,#68]
  64:../kinematics.h **** 	n->ang_abs_rad[1] = (float)n->ang_abs[1]  * pi / 32767.0f;;
 1305              	 .loc 5 64 0
 1306 003c 7B68     	 ldr r3,[r7,#4]
 1307 003e 1B69     	 ldr r3,[r3,#16]
 1308 0040 07EE903A 	 fmsr s15,r3
 1309 0044 B8EEE77A 	 fsitos s14,s15
 1310 0048 394B     	 ldr r3,.L31
 1311 004a D3ED007A 	 flds s15,[r3]
 1312 004e 67EE277A 	 fmuls s15,s14,s15
 1313 0052 9FED387A 	 flds s14,.L31+4
 1314 0056 C7EE877A 	 fdivs s15,s15,s14
 1315 005a 7B68     	 ldr r3,[r7,#4]
 1316 005c C3ED127A 	 fsts s15,[r3,#72]
  65:../kinematics.h **** 	n->predkosc_silnika[0] =(n->predkosc_silnika[0] * 0.4f) + ((n->ang_abs_rad[0] - n->ang_abs_poprzed
 1317              	 .loc 5 65 0
 1318 0060 7B68     	 ldr r3,[r7,#4]
 1319 0062 D3ED077A 	 flds s15,[r3,#28]
 1320 0066 9FED347A 	 flds s14,.L31+8
 1321 006a 27EE877A 	 fmuls s14,s15,s14
 1322 006e 7B68     	 ldr r3,[r7,#4]
 1323 0070 D3ED116A 	 flds s13,[r3,#68]
 1324 0074 7B68     	 ldr r3,[r7,#4]
 1325 0076 D3ED057A 	 flds s15,[r3,#20]
 1326 007a 76EEE76A 	 fsubs s13,s13,s15
 1327 007e 2F4B     	 ldr r3,.L31+12
 1328 0080 D3ED007A 	 flds s15,[r3]
 1329 0084 C6EEA77A 	 fdivs s15,s13,s15
 1330 0088 DFED2D6A 	 flds s13,.L31+16
 1331 008c 67EEA67A 	 fmuls s15,s15,s13
 1332 0090 77EE277A 	 fadds s15,s14,s15
 1333 0094 7B68     	 ldr r3,[r7,#4]
 1334 0096 C3ED077A 	 fsts s15,[r3,#28]
  66:../kinematics.h **** 	n->predkosc_silnika[1] =(n->predkosc_silnika[0] * 0.4f) + ((n->ang_abs_rad[1] - n->ang_abs_poprzed
 1335              	 .loc 5 66 0
 1336 009a 7B68     	 ldr r3,[r7,#4]
 1337 009c D3ED077A 	 flds s15,[r3,#28]
 1338 00a0 9FED257A 	 flds s14,.L31+8
 1339 00a4 27EE877A 	 fmuls s14,s15,s14
 1340 00a8 7B68     	 ldr r3,[r7,#4]
 1341 00aa D3ED126A 	 flds s13,[r3,#72]
 1342 00ae 7B68     	 ldr r3,[r7,#4]
 1343 00b0 D3ED067A 	 flds s15,[r3,#24]
 1344 00b4 76EEE76A 	 fsubs s13,s13,s15
 1345 00b8 204B     	 ldr r3,.L31+12
 1346 00ba D3ED007A 	 flds s15,[r3]
 1347 00be C6EEA77A 	 fdivs s15,s13,s15
 1348 00c2 DFED1F6A 	 flds s13,.L31+16
 1349 00c6 67EEA67A 	 fmuls s15,s15,s13
 1350 00ca 77EE277A 	 fadds s15,s14,s15
 1351 00ce 7B68     	 ldr r3,[r7,#4]
 1352 00d0 C3ED087A 	 fsts s15,[r3,#32]
  67:../kinematics.h **** 	n->poz_zad[0] = n->teta[0] * INT16_MAX / pi;
 1353              	 .loc 5 67 0
 1354 00d4 7B68     	 ldr r3,[r7,#4]
 1355 00d6 D3ED0F7A 	 flds s15,[r3,#60]
 1356 00da 9FED167A 	 flds s14,.L31+4
 1357 00de 27EE877A 	 fmuls s14,s15,s14
 1358 00e2 134B     	 ldr r3,.L31
 1359 00e4 D3ED007A 	 flds s15,[r3]
 1360 00e8 C7EE277A 	 fdivs s15,s14,s15
 1361 00ec FCEEE77A 	 ftouizs s15,s15
 1362 00f0 C7ED007A 	 fsts s15,[r7]
 1363 00f4 3B88     	 ldrh r3,[r7]
 1364 00f6 9AB2     	 uxth r2,r3
 1365 00f8 7B68     	 ldr r3,[r7,#4]
 1366 00fa 1A86     	 strh r2,[r3,#48]
  68:../kinematics.h **** 	n->poz_zad[1] = n->teta[1] * INT16_MAX / pi;
 1367              	 .loc 5 68 0
 1368 00fc 7B68     	 ldr r3,[r7,#4]
 1369 00fe D3ED107A 	 flds s15,[r3,#64]
 1370 0102 9FED0C7A 	 flds s14,.L31+4
 1371 0106 27EE877A 	 fmuls s14,s15,s14
 1372 010a 094B     	 ldr r3,.L31
 1373 010c D3ED007A 	 flds s15,[r3]
 1374 0110 C7EE277A 	 fdivs s15,s14,s15
 1375 0114 FCEEE77A 	 ftouizs s15,s15
 1376 0118 C7ED007A 	 fsts s15,[r7]
 1377 011c 3B88     	 ldrh r3,[r7]
 1378 011e 9AB2     	 uxth r2,r3
 1379 0120 7B68     	 ldr r3,[r7,#4]
 1380 0122 5A86     	 strh r2,[r3,#50]
  69:../kinematics.h **** }
 1381              	 .loc 5 69 0
 1382 0124 0C37     	 adds r7,r7,#12
 1383              	.LCFI69:
 1384              	 .cfi_def_cfa_offset 4
 1385 0126 BD46     	 mov sp,r7
 1386              	.LCFI70:
 1387              	 .cfi_def_cfa_register 13
 1388              	 
 1389 0128 5DF8047B 	 ldr r7,[sp],#4
 1390              	.LCFI71:
 1391              	 .cfi_restore 7
 1392              	 .cfi_def_cfa_offset 0
 1393 012c 7047     	 bx lr
 1394              	.L32:
 1395 012e 00BF     	 .align 2
 1396              	.L31:
 1397 0130 00000000 	 .word pi
 1398 0134 00FEFF46 	 .word 1191181824
 1399 0138 CDCCCC3E 	 .word 1053609165
 1400 013c 00000000 	 .word dt
 1401 0140 9A99193F 	 .word 1058642330
 1402              	 .cfi_endproc
 1403              	.LFE327:
 1405              	 .section .text.Trajectory,"ax",%progbits
 1406              	 .align 2
 1407              	 .global Trajectory
 1408              	 .thumb
 1409              	 .thumb_func
 1411              	Trajectory:
 1412              	.LFB328:
  70:../kinematics.h **** void Trajectory(struct Leg *n)		//calculate trajectory for selected leg
  71:../kinematics.h **** {
 1413              	 .loc 5 71 0
 1414              	 .cfi_startproc
 1415              	 
 1416              	 
 1417              	 
 1418 0000 80B4     	 push {r7}
 1419              	.LCFI72:
 1420              	 .cfi_def_cfa_offset 4
 1421              	 .cfi_offset 7,-4
 1422 0002 83B0     	 sub sp,sp,#12
 1423              	.LCFI73:
 1424              	 .cfi_def_cfa_offset 16
 1425 0004 00AF     	 add r7,sp,#0
 1426              	.LCFI74:
 1427              	 .cfi_def_cfa_register 7
 1428 0006 7860     	 str r0,[r7,#4]
  72:../kinematics.h **** 	//circle
  73:../kinematics.h **** 	//n->foot.x = sinf(t) * 40.0f;
  74:../kinematics.h **** 	//n->foot.y =180.0f + cosf(t) * 80.0f;
  75:../kinematics.h **** 	if(n->skoki == 1)
 1429              	 .loc 5 75 0
 1430 0008 7B68     	 ldr r3,[r7,#4]
 1431 000a 93F85C30 	 ldrb r3,[r3,#92]
 1432 000e 012B     	 cmp r3,#1
 1433 0010 03D1     	 bne .L34
  76:../kinematics.h **** 		n->foot.y = 280;
 1434              	 .loc 5 76 0
 1435 0012 7B68     	 ldr r3,[r7,#4]
 1436 0014 0D4A     	 ldr r2,.L38
 1437 0016 9A63     	 str r2,[r3,#56]
 1438 0018 13E0     	 b .L33
 1439              	.L34:
  77:../kinematics.h **** 	else
  78:../kinematics.h **** 	{
  79:../kinematics.h **** 		if(n->foot.y > 100)
 1440              	 .loc 5 79 0
 1441 001a 7B68     	 ldr r3,[r7,#4]
 1442 001c D3ED0E7A 	 flds s15,[r3,#56]
 1443 0020 9FED0B7A 	 flds s14,.L38+4
 1444 0024 F4EEC77A 	 fcmpes s15,s14
 1445 0028 F1EE10FA 	 fmstat
 1446 002c 09DD     	 ble .L33
  80:../kinematics.h **** 			n->foot.y -= 2;
 1447              	 .loc 5 80 0
 1448 002e 7B68     	 ldr r3,[r7,#4]
 1449 0030 D3ED0E7A 	 flds s15,[r3,#56]
 1450 0034 B0EE007A 	 fconsts s14,#0
 1451 0038 77EEC77A 	 fsubs s15,s15,s14
 1452 003c 7B68     	 ldr r3,[r7,#4]
 1453 003e C3ED0E7A 	 fsts s15,[r3,#56]
 1454              	.L33:
  81:../kinematics.h **** 	}
  82:../kinematics.h **** }
 1455              	 .loc 5 82 0
 1456 0042 0C37     	 adds r7,r7,#12
 1457              	.LCFI75:
 1458              	 .cfi_def_cfa_offset 4
 1459 0044 BD46     	 mov sp,r7
 1460              	.LCFI76:
 1461              	 .cfi_def_cfa_register 13
 1462              	 
 1463 0046 5DF8047B 	 ldr r7,[sp],#4
 1464              	.LCFI77:
 1465              	 .cfi_restore 7
 1466              	 .cfi_def_cfa_offset 0
 1467 004a 7047     	 bx lr
 1468              	.L39:
 1469              	 .align 2
 1470              	.L38:
 1471 004c 00008C43 	 .word 1133248512
 1472 0050 0000C842 	 .word 1120403456
 1473              	 .cfi_endproc
 1474              	.LFE328:
 1476              	 .section .text.XMC_Init,"ax",%progbits
 1477              	 .align 2
 1478              	 .global XMC_Init
 1479              	 .thumb
 1480              	 .thumb_func
 1482              	XMC_Init:
 1483              	.LFB329:
 1484              	 .file 6 "../communications.h"
   1:../communications.h **** /*
   2:../communications.h ****  * communications.h
   3:../communications.h ****  *
   4:../communications.h ****  *  Created on: 11 Jan 2018
   5:../communications.h ****  *      Author: Mafish
   6:../communications.h ****  */
   7:../communications.h **** 
   8:../communications.h **** uint8_t  XMC_Init(uint8_t);			//initialize driver (n). n=10 for all drivers
   9:../communications.h **** void XMC_Check();						//check state all drivers
  10:../communications.h **** void eorx();									//end of receive interrupt
  11:../communications.h **** void Message_interpreter();		//read last message
  12:../communications.h **** void Send(uint8_t);						// Send (n) bytes of data via half-duplex uart
  13:../communications.h **** void Send_Leg(struct Leg *n);	//Send regular command string to both of legs drivers
  14:../communications.h **** 
  15:../communications.h **** uint8_t  XMC_Init(uint8_t n)	//initialize driver (n). n=10 for all drivers
  16:../communications.h **** {
 1485              	 .loc 6 16 0
 1486              	 .cfi_startproc
 1487              	 
 1488              	 
 1489 0000 80B5     	 push {r7,lr}
 1490              	.LCFI78:
 1491              	 .cfi_def_cfa_offset 8
 1492              	 .cfi_offset 7,-8
 1493              	 .cfi_offset 14,-4
 1494 0002 84B0     	 sub sp,sp,#16
 1495              	.LCFI79:
 1496              	 .cfi_def_cfa_offset 24
 1497 0004 00AF     	 add r7,sp,#0
 1498              	.LCFI80:
 1499              	 .cfi_def_cfa_register 7
 1500 0006 0346     	 mov r3,r0
 1501 0008 FB71     	 strb r3,[r7,#7]
  17:../communications.h **** 	if(n == 10)							//if n = 10 then init all drivers
 1502              	 .loc 6 17 0
 1503 000a FB79     	 ldrb r3,[r7,#7]
 1504 000c 0A2B     	 cmp r3,#10
 1505 000e 1BD1     	 bne .L41
 1506              	.LBB3:
  18:../communications.h **** 		for(uint8_t i = 0; i < 8; i++)
 1507              	 .loc 6 18 0
 1508 0010 0023     	 movs r3,#0
 1509 0012 FB73     	 strb r3,[r7,#15]
 1510 0014 14E0     	 b .L42
 1511              	.L43:
  19:../communications.h **** 		{
  20:../communications.h **** 			txData[1] = 0x10 + i;
 1512              	 .loc 6 20 0 discriminator 3
 1513 0016 FB7B     	 ldrb r3,[r7,#15]
 1514 0018 1033     	 adds r3,r3,#16
 1515 001a DAB2     	 uxtb r2,r3
 1516 001c 164B     	 ldr r3,.L46
 1517 001e 5A70     	 strb r2,[r3,#1]
  21:../communications.h **** 			txData[2] = 0xA1;
 1518              	 .loc 6 21 0 discriminator 3
 1519 0020 154B     	 ldr r3,.L46
 1520 0022 A122     	 movs r2,#161
 1521 0024 9A70     	 strb r2,[r3,#2]
  22:../communications.h **** 			txData[3] = EOF;
 1522              	 .loc 6 22 0 discriminator 3
 1523 0026 144B     	 ldr r3,.L46
 1524 0028 DD22     	 movs r2,#221
 1525 002a DA70     	 strb r2,[r3,#3]
  23:../communications.h **** 			Send(4);
 1526              	 .loc 6 23 0 discriminator 3
 1527 002c 0420     	 movs r0,#4
 1528 002e FFF7FEFF 	 bl Send
  24:../communications.h **** 			delay(1100);
 1529              	 .loc 6 24 0 discriminator 3
 1530 0032 40F24C40 	 movw r0,#1100
 1531 0036 FFF7FEFF 	 bl delay
  18:../communications.h **** 		{
 1532              	 .loc 6 18 0 discriminator 3
 1533 003a FB7B     	 ldrb r3,[r7,#15]
 1534 003c 0133     	 adds r3,r3,#1
 1535 003e FB73     	 strb r3,[r7,#15]
 1536              	.L42:
  18:../communications.h **** 		{
 1537              	 .loc 6 18 0 is_stmt 0 discriminator 1
 1538 0040 FB7B     	 ldrb r3,[r7,#15]
 1539 0042 072B     	 cmp r3,#7
 1540 0044 E7D9     	 bls .L43
 1541              	.LBE3:
 1542 0046 04E0     	 b .L44
 1543              	.L41:
  25:../communications.h **** 		}
  26:../communications.h **** 	else										//init single driver (n)
  27:../communications.h **** 		txData[1] = 0x10 + n;
 1544              	 .loc 6 27 0 is_stmt 1
 1545 0048 FB79     	 ldrb r3,[r7,#7]
 1546 004a 1033     	 adds r3,r3,#16
 1547 004c DAB2     	 uxtb r2,r3
 1548 004e 0A4B     	 ldr r3,.L46
 1549 0050 5A70     	 strb r2,[r3,#1]
 1550              	.L44:
  28:../communications.h **** 		txData[2] = 0xA1;
 1551              	 .loc 6 28 0
 1552 0052 094B     	 ldr r3,.L46
 1553 0054 A122     	 movs r2,#161
 1554 0056 9A70     	 strb r2,[r3,#2]
  29:../communications.h **** 		txData[3] = EOF;
 1555              	 .loc 6 29 0
 1556 0058 074B     	 ldr r3,.L46
 1557 005a DD22     	 movs r2,#221
 1558 005c DA70     	 strb r2,[r3,#3]
  30:../communications.h **** 		Send(4);
 1559              	 .loc 6 30 0
 1560 005e 0420     	 movs r0,#4
 1561 0060 FFF7FEFF 	 bl Send
  31:../communications.h **** 		delay(1100);
 1562              	 .loc 6 31 0
 1563 0064 40F24C40 	 movw r0,#1100
 1564 0068 FFF7FEFF 	 bl delay
  32:../communications.h **** 
  33:../communications.h **** 	return 0;
 1565              	 .loc 6 33 0
 1566 006c 0023     	 movs r3,#0
  34:../communications.h **** }
 1567              	 .loc 6 34 0
 1568 006e 1846     	 mov r0,r3
 1569 0070 1037     	 adds r7,r7,#16
 1570              	.LCFI81:
 1571              	 .cfi_def_cfa_offset 8
 1572 0072 BD46     	 mov sp,r7
 1573              	.LCFI82:
 1574              	 .cfi_def_cfa_register 13
 1575              	 
 1576 0074 80BD     	 pop {r7,pc}
 1577              	.L47:
 1578 0076 00BF     	 .align 2
 1579              	.L46:
 1580 0078 00000000 	 .word txData
 1581              	 .cfi_endproc
 1582              	.LFE329:
 1584              	 .section .text.XMC_Check,"ax",%progbits
 1585              	 .align 2
 1586              	 .global XMC_Check
 1587              	 .thumb
 1588              	 .thumb_func
 1590              	XMC_Check:
 1591              	.LFB330:
  35:../communications.h **** void XMC_Check()	//check state all drivers
  36:../communications.h **** {
 1592              	 .loc 6 36 0
 1593              	 .cfi_startproc
 1594              	 
 1595              	 
 1596 0000 80B5     	 push {r7,lr}
 1597              	.LCFI83:
 1598              	 .cfi_def_cfa_offset 8
 1599              	 .cfi_offset 7,-8
 1600              	 .cfi_offset 14,-4
 1601 0002 82B0     	 sub sp,sp,#8
 1602              	.LCFI84:
 1603              	 .cfi_def_cfa_offset 16
 1604 0004 00AF     	 add r7,sp,#0
 1605              	.LCFI85:
 1606              	 .cfi_def_cfa_register 7
 1607              	.LBB4:
  37:../communications.h **** 	for(uint8_t i = 0; i < 8; i++)		//iterate to check state of all drivers
 1608              	 .loc 6 37 0
 1609 0006 0023     	 movs r3,#0
 1610 0008 FB71     	 strb r3,[r7,#7]
 1611 000a 1AE0     	 b .L49
 1612              	.L50:
  38:../communications.h **** 	{
  39:../communications.h **** 		DIGITAL_IO_SetOutputHigh(&LED1);
 1613              	 .loc 6 39 0 discriminator 3
 1614 000c 1048     	 ldr r0,.L51
 1615 000e FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
  40:../communications.h **** 		txData[1] = 0x10 + i;
 1616              	 .loc 6 40 0 discriminator 3
 1617 0012 FB79     	 ldrb r3,[r7,#7]
 1618 0014 1033     	 adds r3,r3,#16
 1619 0016 DAB2     	 uxtb r2,r3
 1620 0018 0E4B     	 ldr r3,.L51+4
 1621 001a 5A70     	 strb r2,[r3,#1]
  41:../communications.h **** 		txData[2] = 0xA3;
 1622              	 .loc 6 41 0 discriminator 3
 1623 001c 0D4B     	 ldr r3,.L51+4
 1624 001e A322     	 movs r2,#163
 1625 0020 9A70     	 strb r2,[r3,#2]
  42:../communications.h **** 		txData[3] = EOF;
 1626              	 .loc 6 42 0 discriminator 3
 1627 0022 0C4B     	 ldr r3,.L51+4
 1628 0024 DD22     	 movs r2,#221
 1629 0026 DA70     	 strb r2,[r3,#3]
  43:../communications.h **** 		Send(4);
 1630              	 .loc 6 43 0 discriminator 3
 1631 0028 0420     	 movs r0,#4
 1632 002a FFF7FEFF 	 bl Send
  44:../communications.h **** 		delay(1100);
 1633              	 .loc 6 44 0 discriminator 3
 1634 002e 40F24C40 	 movw r0,#1100
 1635 0032 FFF7FEFF 	 bl delay
  45:../communications.h **** 		DIGITAL_IO_SetOutputLow((&LED1));
 1636              	 .loc 6 45 0 discriminator 3
 1637 0036 0648     	 ldr r0,.L51
 1638 0038 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
  37:../communications.h **** 	{
 1639              	 .loc 6 37 0 discriminator 3
 1640 003c FB79     	 ldrb r3,[r7,#7]
 1641 003e 0133     	 adds r3,r3,#1
 1642 0040 FB71     	 strb r3,[r7,#7]
 1643              	.L49:
  37:../communications.h **** 	{
 1644              	 .loc 6 37 0 is_stmt 0 discriminator 1
 1645 0042 FB79     	 ldrb r3,[r7,#7]
 1646 0044 072B     	 cmp r3,#7
 1647 0046 E1D9     	 bls .L50
 1648              	.LBE4:
  46:../communications.h **** 	}
  47:../communications.h **** }
 1649              	 .loc 6 47 0 is_stmt 1
 1650 0048 0837     	 adds r7,r7,#8
 1651              	.LCFI86:
 1652              	 .cfi_def_cfa_offset 8
 1653 004a BD46     	 mov sp,r7
 1654              	.LCFI87:
 1655              	 .cfi_def_cfa_register 13
 1656              	 
 1657 004c 80BD     	 pop {r7,pc}
 1658              	.L52:
 1659 004e 00BF     	 .align 2
 1660              	.L51:
 1661 0050 00000000 	 .word LED1
 1662 0054 00000000 	 .word txData
 1663              	 .cfi_endproc
 1664              	.LFE330:
 1666              	 .section .text.eorx,"ax",%progbits
 1667              	 .align 2
 1668              	 .global eorx
 1669              	 .thumb
 1670              	 .thumb_func
 1672              	eorx:
 1673              	.LFB331:
  48:../communications.h **** void eorx()		//end of receive interrupt
  49:../communications.h **** {
 1674              	 .loc 6 49 0
 1675              	 .cfi_startproc
 1676              	 
 1677              	 
 1678 0000 80B5     	 push {r7,lr}
 1679              	.LCFI88:
 1680              	 .cfi_def_cfa_offset 8
 1681              	 .cfi_offset 7,-8
 1682              	 .cfi_offset 14,-4
 1683 0002 00AF     	 add r7,sp,#0
 1684              	.LCFI89:
 1685              	 .cfi_def_cfa_register 7
  50:../communications.h **** 	if(rxByte == SOF)
 1686              	 .loc 6 50 0
 1687 0004 1A4B     	 ldr r3,.L57
 1688 0006 1B78     	 ldrb r3,[r3]
 1689 0008 CC2B     	 cmp r3,#204
 1690 000a 07D1     	 bne .L54
  51:../communications.h **** 	{
  52:../communications.h **** 		rxData[0] = rxByte;
 1691              	 .loc 6 52 0
 1692 000c 184B     	 ldr r3,.L57
 1693 000e 1A78     	 ldrb r2,[r3]
 1694 0010 184B     	 ldr r3,.L57+4
 1695 0012 1A70     	 strb r2,[r3]
  53:../communications.h **** 		iterator_wiadomosci = 1;
 1696              	 .loc 6 53 0
 1697 0014 184B     	 ldr r3,.L57+8
 1698 0016 0122     	 movs r2,#1
 1699 0018 1A70     	 strb r2,[r3]
 1700 001a 23E0     	 b .L55
 1701              	.L54:
  54:../communications.h **** 	}
  55:../communications.h **** 	else if (rxByte == EOF)
 1702              	 .loc 6 55 0
 1703 001c 144B     	 ldr r3,.L57
 1704 001e 1B78     	 ldrb r3,[r3]
 1705 0020 DD2B     	 cmp r3,#221
 1706 0022 0ED1     	 bne .L56
  56:../communications.h **** 	{
  57:../communications.h **** 		rxData[iterator_wiadomosci +1] = EOF;
 1707              	 .loc 6 57 0
 1708 0024 144B     	 ldr r3,.L57+8
 1709 0026 1B78     	 ldrb r3,[r3]
 1710 0028 0133     	 adds r3,r3,#1
 1711 002a 124A     	 ldr r2,.L57+4
 1712 002c DD21     	 movs r1,#221
 1713 002e D154     	 strb r1,[r2,r3]
  58:../communications.h **** 		iterator_wiadomosci++;
 1714              	 .loc 6 58 0
 1715 0030 114B     	 ldr r3,.L57+8
 1716 0032 1B78     	 ldrb r3,[r3]
 1717 0034 0133     	 adds r3,r3,#1
 1718 0036 DAB2     	 uxtb r2,r3
 1719 0038 0F4B     	 ldr r3,.L57+8
 1720 003a 1A70     	 strb r2,[r3]
  59:../communications.h **** 		Message_interpreter();
 1721              	 .loc 6 59 0
 1722 003c FFF7FEFF 	 bl Message_interpreter
 1723 0040 10E0     	 b .L55
 1724              	.L56:
  60:../communications.h **** 	}
  61:../communications.h **** 	else if ( iterator_wiadomosci < 9)
 1725              	 .loc 6 61 0
 1726 0042 0D4B     	 ldr r3,.L57+8
 1727 0044 1B78     	 ldrb r3,[r3]
 1728 0046 082B     	 cmp r3,#8
 1729 0048 0CD8     	 bhi .L55
  62:../communications.h **** 	{
  63:../communications.h **** 		rxData[iterator_wiadomosci] =rxByte;
 1730              	 .loc 6 63 0
 1731 004a 0B4B     	 ldr r3,.L57+8
 1732 004c 1B78     	 ldrb r3,[r3]
 1733 004e 1A46     	 mov r2,r3
 1734 0050 074B     	 ldr r3,.L57
 1735 0052 1978     	 ldrb r1,[r3]
 1736 0054 074B     	 ldr r3,.L57+4
 1737 0056 9954     	 strb r1,[r3,r2]
  64:../communications.h **** 		iterator_wiadomosci++;
 1738              	 .loc 6 64 0
 1739 0058 074B     	 ldr r3,.L57+8
 1740 005a 1B78     	 ldrb r3,[r3]
 1741 005c 0133     	 adds r3,r3,#1
 1742 005e DAB2     	 uxtb r2,r3
 1743 0060 054B     	 ldr r3,.L57+8
 1744 0062 1A70     	 strb r2,[r3]
 1745              	.L55:
  65:../communications.h **** 	}
  66:../communications.h **** 	UART_Receive(&RS, &rxByte,1);
 1746              	 .loc 6 66 0
 1747 0064 0548     	 ldr r0,.L57+12
 1748 0066 0249     	 ldr r1,.L57
 1749 0068 0122     	 movs r2,#1
 1750 006a FFF7FEFF 	 bl UART_Receive
  67:../communications.h **** }
 1751              	 .loc 6 67 0
 1752 006e 80BD     	 pop {r7,pc}
 1753              	.L58:
 1754              	 .align 2
 1755              	.L57:
 1756 0070 00000000 	 .word rxByte
 1757 0074 00000000 	 .word rxData
 1758 0078 00000000 	 .word iterator_wiadomosci
 1759 007c 00000000 	 .word RS
 1760              	 .cfi_endproc
 1761              	.LFE331:
 1763              	 .section .text.eotx,"ax",%progbits
 1764              	 .align 2
 1765              	 .global eotx
 1766              	 .thumb
 1767              	 .thumb_func
 1769              	eotx:
 1770              	.LFB332:
  68:../communications.h **** void eotx()
  69:../communications.h **** {
 1771              	 .loc 6 69 0
 1772              	 .cfi_startproc
 1773              	 
 1774              	 
 1775              	 
 1776 0000 80B4     	 push {r7}
 1777              	.LCFI90:
 1778              	 .cfi_def_cfa_offset 4
 1779              	 .cfi_offset 7,-4
 1780 0002 00AF     	 add r7,sp,#0
 1781              	.LCFI91:
 1782              	 .cfi_def_cfa_register 7
  70:../communications.h **** 
  71:../communications.h **** }
 1783              	 .loc 6 71 0
 1784 0004 BD46     	 mov sp,r7
 1785              	.LCFI92:
 1786              	 .cfi_def_cfa_register 13
 1787              	 
 1788 0006 5DF8047B 	 ldr r7,[sp],#4
 1789              	.LCFI93:
 1790              	 .cfi_restore 7
 1791              	 .cfi_def_cfa_offset 0
 1792 000a 7047     	 bx lr
 1793              	 .cfi_endproc
 1794              	.LFE332:
 1796              	 .section .text.Message_interpreter,"ax",%progbits
 1797              	 .align 2
 1798              	 .global Message_interpreter
 1799              	 .thumb
 1800              	 .thumb_func
 1802              	Message_interpreter:
 1803              	.LFB333:
  72:../communications.h **** void Message_interpreter()		//read last message
  73:../communications.h **** {
 1804              	 .loc 6 73 0
 1805              	 .cfi_startproc
 1806              	 
 1807              	 
 1808              	 
 1809 0000 80B4     	 push {r7}
 1810              	.LCFI94:
 1811              	 .cfi_def_cfa_offset 4
 1812              	 .cfi_offset 7,-4
 1813 0002 83B0     	 sub sp,sp,#12
 1814              	.LCFI95:
 1815              	 .cfi_def_cfa_offset 16
 1816 0004 00AF     	 add r7,sp,#0
 1817              	.LCFI96:
 1818              	 .cfi_def_cfa_register 7
  74:../communications.h **** 
  75:../communications.h **** 	if(rxData[0] == SOF && rxData[1] == adress)
 1819              	 .loc 6 75 0
 1820 0006 294B     	 ldr r3,.L64
 1821 0008 1B78     	 ldrb r3,[r3]
 1822 000a CC2B     	 cmp r3,#204
 1823 000c 49D1     	 bne .L60
 1824              	 .loc 6 75 0 is_stmt 0 discriminator 1
 1825 000e 274B     	 ldr r3,.L64
 1826 0010 5A78     	 ldrb r2,[r3,#1]
 1827 0012 274B     	 ldr r3,.L64+4
 1828 0014 1B78     	 ldrb r3,[r3]
 1829 0016 9A42     	 cmp r2,r3
 1830 0018 43D1     	 bne .L60
 1831              	.LBB5:
  76:../communications.h **** 	{
  77:../communications.h **** 		uint8_t numer_silnika;
  78:../communications.h **** 		numer_silnika = rxData[2] - 0x10;
 1832              	 .loc 6 78 0 is_stmt 1
 1833 001a 244B     	 ldr r3,.L64
 1834 001c 9B78     	 ldrb r3,[r3,#2]
 1835 001e 103B     	 subs r3,r3,#16
 1836 0020 FB71     	 strb r3,[r7,#7]
  79:../communications.h **** 		if(rxData[3] == INIT)
 1837              	 .loc 6 79 0
 1838 0022 224B     	 ldr r3,.L64
 1839 0024 DB78     	 ldrb r3,[r3,#3]
 1840 0026 A12B     	 cmp r3,#161
 1841 0028 07D1     	 bne .L62
  80:../communications.h **** 			stanowisko.motor_go[numer_silnika] = rxData[4];
 1842              	 .loc 6 80 0
 1843 002a FB79     	 ldrb r3,[r7,#7]
 1844 002c 1F4A     	 ldr r2,.L64
 1845 002e 1179     	 ldrb r1,[r2,#4]
 1846 0030 204A     	 ldr r2,.L64+8
 1847 0032 1344     	 add r3,r3,r2
 1848 0034 0A46     	 mov r2,r1
 1849 0036 9A70     	 strb r2,[r3,#2]
 1850 0038 33E0     	 b .L60
 1851              	.L62:
  81:../communications.h **** 		else if(rxData[3] == CHECK)
 1852              	 .loc 6 81 0
 1853 003a 1C4B     	 ldr r3,.L64
 1854 003c DB78     	 ldrb r3,[r3,#3]
 1855 003e A32B     	 cmp r3,#163
 1856 0040 0CD1     	 bne .L63
  82:../communications.h **** 		{
  83:../communications.h **** 			stanowisko.motor_go[numer_silnika] = rxData[4];
 1857              	 .loc 6 83 0
 1858 0042 FB79     	 ldrb r3,[r7,#7]
 1859 0044 194A     	 ldr r2,.L64
 1860 0046 1179     	 ldrb r1,[r2,#4]
 1861 0048 1A4A     	 ldr r2,.L64+8
 1862 004a 1344     	 add r3,r3,r2
 1863 004c 0A46     	 mov r2,r1
 1864 004e 9A70     	 strb r2,[r3,#2]
  84:../communications.h **** 			stanowisko.motor_n[numer_silnika] = rxData[5];
 1865              	 .loc 6 84 0
 1866 0050 FB79     	 ldrb r3,[r7,#7]
 1867 0052 164A     	 ldr r2,.L64
 1868 0054 5179     	 ldrb r1,[r2,#5]
 1869 0056 174A     	 ldr r2,.L64+8
 1870 0058 D154     	 strb r1,[r2,r3]
 1871 005a 22E0     	 b .L60
 1872              	.L63:
  85:../communications.h **** 		}
  86:../communications.h **** 		else
  87:../communications.h **** 		{
  88:../communications.h **** 			stanowisko.i_net[numer_silnika] =rxData[3] << 8 | rxData[4];
 1873              	 .loc 6 88 0
 1874 005c FB79     	 ldrb r3,[r7,#7]
 1875 005e 134A     	 ldr r2,.L64
 1876 0060 D278     	 ldrb r2,[r2,#3]
 1877 0062 1202     	 lsls r2,r2,#8
 1878 0064 91B2     	 uxth r1,r2
 1879 0066 114A     	 ldr r2,.L64
 1880 0068 1279     	 ldrb r2,[r2,#4]
 1881 006a 92B2     	 uxth r2,r2
 1882 006c 0A43     	 orrs r2,r2,r1
 1883 006e 91B2     	 uxth r1,r2
 1884 0070 104A     	 ldr r2,.L64+8
 1885 0072 5B00     	 lsls r3,r3,#1
 1886 0074 1344     	 add r3,r3,r2
 1887 0076 0A46     	 mov r2,r1
 1888 0078 DA80     	 strh r2,[r3,#6]
  89:../communications.h **** 			stanowisko.ang_abs[numer_silnika] = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[
 1889              	 .loc 6 89 0
 1890 007a FB79     	 ldrb r3,[r7,#7]
 1891 007c 0B4A     	 ldr r2,.L64
 1892 007e 5279     	 ldrb r2,[r2,#5]
 1893 0080 1106     	 lsls r1,r2,#24
 1894 0082 0A4A     	 ldr r2,.L64
 1895 0084 9279     	 ldrb r2,[r2,#6]
 1896 0086 1204     	 lsls r2,r2,#16
 1897 0088 1143     	 orrs r1,r1,r2
 1898 008a 084A     	 ldr r2,.L64
 1899 008c D279     	 ldrb r2,[r2,#7]
 1900 008e 1202     	 lsls r2,r2,#8
 1901 0090 0A43     	 orrs r2,r2,r1
 1902 0092 0649     	 ldr r1,.L64
 1903 0094 097A     	 ldrb r1,[r1,#8]
 1904 0096 0A43     	 orrs r2,r2,r1
 1905 0098 0649     	 ldr r1,.L64+8
 1906 009a 0233     	 adds r3,r3,#2
 1907 009c 9B00     	 lsls r3,r3,#2
 1908 009e 0B44     	 add r3,r3,r1
 1909 00a0 5A60     	 str r2,[r3,#4]
 1910              	.L60:
 1911              	.LBE5:
  90:../communications.h **** 		}
  91:../communications.h **** 	}
  92:../communications.h **** 
  93:../communications.h **** }
 1912              	 .loc 6 93 0
 1913 00a2 0C37     	 adds r7,r7,#12
 1914              	.LCFI97:
 1915              	 .cfi_def_cfa_offset 4
 1916 00a4 BD46     	 mov sp,r7
 1917              	.LCFI98:
 1918              	 .cfi_def_cfa_register 13
 1919              	 
 1920 00a6 5DF8047B 	 ldr r7,[sp],#4
 1921              	.LCFI99:
 1922              	 .cfi_restore 7
 1923              	 .cfi_def_cfa_offset 0
 1924 00aa 7047     	 bx lr
 1925              	.L65:
 1926              	 .align 2
 1927              	.L64:
 1928 00ac 00000000 	 .word rxData
 1929 00b0 00000000 	 .word adress
 1930 00b4 00000000 	 .word stanowisko
 1931              	 .cfi_endproc
 1932              	.LFE333:
 1934              	 .section .text.Send_Leg,"ax",%progbits
 1935              	 .align 2
 1936              	 .global Send_Leg
 1937              	 .thumb
 1938              	 .thumb_func
 1940              	Send_Leg:
 1941              	.LFB334:
  94:../communications.h **** void Send_Leg(struct Leg *n)	//Send regular command string to both of legs drivers
  95:../communications.h **** {
 1942              	 .loc 6 95 0
 1943              	 .cfi_startproc
 1944              	 
 1945              	 
 1946 0000 80B5     	 push {r7,lr}
 1947              	.LCFI100:
 1948              	 .cfi_def_cfa_offset 8
 1949              	 .cfi_offset 7,-8
 1950              	 .cfi_offset 14,-4
 1951 0002 82B0     	 sub sp,sp,#8
 1952              	.LCFI101:
 1953              	 .cfi_def_cfa_offset 16
 1954 0004 00AF     	 add r7,sp,#0
 1955              	.LCFI102:
 1956              	 .cfi_def_cfa_register 7
 1957 0006 7860     	 str r0,[r7,#4]
  96:../communications.h **** 	  txData[1] = n->adresy[0];
 1958              	 .loc 6 96 0
 1959 0008 7B68     	 ldr r3,[r7,#4]
 1960 000a 1A79     	 ldrb r2,[r3,#4]
 1961 000c 324B     	 ldr r3,.L67
 1962 000e 5A70     	 strb r2,[r3,#1]
  97:../communications.h **** 	  txData[2] = n->poz_zad[0] >> 8;
 1963              	 .loc 6 97 0
 1964 0010 7B68     	 ldr r3,[r7,#4]
 1965 0012 1B8E     	 ldrh r3,[r3,#48]
 1966 0014 1B0A     	 lsrs r3,r3,#8
 1967 0016 9BB2     	 uxth r3,r3
 1968 0018 DAB2     	 uxtb r2,r3
 1969 001a 2F4B     	 ldr r3,.L67
 1970 001c 9A70     	 strb r2,[r3,#2]
  98:../communications.h **** 	  txData[3] = n->poz_zad[0];
 1971              	 .loc 6 98 0
 1972 001e 7B68     	 ldr r3,[r7,#4]
 1973 0020 1B8E     	 ldrh r3,[r3,#48]
 1974 0022 DAB2     	 uxtb r2,r3
 1975 0024 2C4B     	 ldr r3,.L67
 1976 0026 DA70     	 strb r2,[r3,#3]
  99:../communications.h **** 	  txData[4] = n->ks >> 8;
 1977              	 .loc 6 99 0
 1978 0028 7B68     	 ldr r3,[r7,#4]
 1979 002a 9B8C     	 ldrh r3,[r3,#36]
 1980 002c 1B0A     	 lsrs r3,r3,#8
 1981 002e 9BB2     	 uxth r3,r3
 1982 0030 DAB2     	 uxtb r2,r3
 1983 0032 294B     	 ldr r3,.L67
 1984 0034 1A71     	 strb r2,[r3,#4]
 100:../communications.h **** 	  txData[5] = n->ks;
 1985              	 .loc 6 100 0
 1986 0036 7B68     	 ldr r3,[r7,#4]
 1987 0038 9B8C     	 ldrh r3,[r3,#36]
 1988 003a DAB2     	 uxtb r2,r3
 1989 003c 264B     	 ldr r3,.L67
 1990 003e 5A71     	 strb r2,[r3,#5]
 101:../communications.h **** 	  txData[6] = n->kd >>8;
 1991              	 .loc 6 101 0
 1992 0040 7B68     	 ldr r3,[r7,#4]
 1993 0042 DB8C     	 ldrh r3,[r3,#38]
 1994 0044 1B0A     	 lsrs r3,r3,#8
 1995 0046 9BB2     	 uxth r3,r3
 1996 0048 DAB2     	 uxtb r2,r3
 1997 004a 234B     	 ldr r3,.L67
 1998 004c 9A71     	 strb r2,[r3,#6]
 102:../communications.h **** 	  txData[7] = n->kd;
 1999              	 .loc 6 102 0
 2000 004e 7B68     	 ldr r3,[r7,#4]
 2001 0050 DB8C     	 ldrh r3,[r3,#38]
 2002 0052 DAB2     	 uxtb r2,r3
 2003 0054 204B     	 ldr r3,.L67
 2004 0056 DA71     	 strb r2,[r3,#7]
 103:../communications.h **** 	  txData[8] = EOF;
 2005              	 .loc 6 103 0
 2006 0058 1F4B     	 ldr r3,.L67
 2007 005a DD22     	 movs r2,#221
 2008 005c 1A72     	 strb r2,[r3,#8]
 104:../communications.h **** 	  Send(9);
 2009              	 .loc 6 104 0
 2010 005e 0920     	 movs r0,#9
 2011 0060 FFF7FEFF 	 bl Send
 105:../communications.h **** 	  delay(1100);
 2012              	 .loc 6 105 0
 2013 0064 40F24C40 	 movw r0,#1100
 2014 0068 FFF7FEFF 	 bl delay
 106:../communications.h **** 	  txData[1] = n->adresy[1];
 2015              	 .loc 6 106 0
 2016 006c 7B68     	 ldr r3,[r7,#4]
 2017 006e 5A79     	 ldrb r2,[r3,#5]
 2018 0070 194B     	 ldr r3,.L67
 2019 0072 5A70     	 strb r2,[r3,#1]
 107:../communications.h **** 	  txData[2] = n->poz_zad[1] >> 8;
 2020              	 .loc 6 107 0
 2021 0074 7B68     	 ldr r3,[r7,#4]
 2022 0076 5B8E     	 ldrh r3,[r3,#50]
 2023 0078 1B0A     	 lsrs r3,r3,#8
 2024 007a 9BB2     	 uxth r3,r3
 2025 007c DAB2     	 uxtb r2,r3
 2026 007e 164B     	 ldr r3,.L67
 2027 0080 9A70     	 strb r2,[r3,#2]
 108:../communications.h **** 	  txData[3] = n->poz_zad[1];
 2028              	 .loc 6 108 0
 2029 0082 7B68     	 ldr r3,[r7,#4]
 2030 0084 5B8E     	 ldrh r3,[r3,#50]
 2031 0086 DAB2     	 uxtb r2,r3
 2032 0088 134B     	 ldr r3,.L67
 2033 008a DA70     	 strb r2,[r3,#3]
 109:../communications.h **** 	  txData[4] = n->ks >> 8;
 2034              	 .loc 6 109 0
 2035 008c 7B68     	 ldr r3,[r7,#4]
 2036 008e 9B8C     	 ldrh r3,[r3,#36]
 2037 0090 1B0A     	 lsrs r3,r3,#8
 2038 0092 9BB2     	 uxth r3,r3
 2039 0094 DAB2     	 uxtb r2,r3
 2040 0096 104B     	 ldr r3,.L67
 2041 0098 1A71     	 strb r2,[r3,#4]
 110:../communications.h **** 	  txData[5] = n->ks;
 2042              	 .loc 6 110 0
 2043 009a 7B68     	 ldr r3,[r7,#4]
 2044 009c 9B8C     	 ldrh r3,[r3,#36]
 2045 009e DAB2     	 uxtb r2,r3
 2046 00a0 0D4B     	 ldr r3,.L67
 2047 00a2 5A71     	 strb r2,[r3,#5]
 111:../communications.h **** 	  txData[6] = n->kd >>8;
 2048              	 .loc 6 111 0
 2049 00a4 7B68     	 ldr r3,[r7,#4]
 2050 00a6 DB8C     	 ldrh r3,[r3,#38]
 2051 00a8 1B0A     	 lsrs r3,r3,#8
 2052 00aa 9BB2     	 uxth r3,r3
 2053 00ac DAB2     	 uxtb r2,r3
 2054 00ae 0A4B     	 ldr r3,.L67
 2055 00b0 9A71     	 strb r2,[r3,#6]
 112:../communications.h **** 	  txData[7] = n->kd;
 2056              	 .loc 6 112 0
 2057 00b2 7B68     	 ldr r3,[r7,#4]
 2058 00b4 DB8C     	 ldrh r3,[r3,#38]
 2059 00b6 DAB2     	 uxtb r2,r3
 2060 00b8 074B     	 ldr r3,.L67
 2061 00ba DA71     	 strb r2,[r3,#7]
 113:../communications.h **** 	  txData[8] = EOF;
 2062              	 .loc 6 113 0
 2063 00bc 064B     	 ldr r3,.L67
 2064 00be DD22     	 movs r2,#221
 2065 00c0 1A72     	 strb r2,[r3,#8]
 114:../communications.h **** 	  Send(9);
 2066              	 .loc 6 114 0
 2067 00c2 0920     	 movs r0,#9
 2068 00c4 FFF7FEFF 	 bl Send
 115:../communications.h **** 	  delay(1100);
 2069              	 .loc 6 115 0
 2070 00c8 40F24C40 	 movw r0,#1100
 2071 00cc FFF7FEFF 	 bl delay
 116:../communications.h **** }
 2072              	 .loc 6 116 0
 2073 00d0 0837     	 adds r7,r7,#8
 2074              	.LCFI103:
 2075              	 .cfi_def_cfa_offset 8
 2076 00d2 BD46     	 mov sp,r7
 2077              	.LCFI104:
 2078              	 .cfi_def_cfa_register 13
 2079              	 
 2080 00d4 80BD     	 pop {r7,pc}
 2081              	.L68:
 2082 00d6 00BF     	 .align 2
 2083              	.L67:
 2084 00d8 00000000 	 .word txData
 2085              	 .cfi_endproc
 2086              	.LFE334:
 2088              	 .section .text.Send,"ax",%progbits
 2089              	 .align 2
 2090              	 .global Send
 2091              	 .thumb
 2092              	 .thumb_func
 2094              	Send:
 2095              	.LFB335:
 117:../communications.h **** void Send(uint8_t size )	// Send (n) bytes of data via half-duplex uart
 118:../communications.h **** {
 2096              	 .loc 6 118 0
 2097              	 .cfi_startproc
 2098              	 
 2099              	 
 2100 0000 80B5     	 push {r7,lr}
 2101              	.LCFI105:
 2102              	 .cfi_def_cfa_offset 8
 2103              	 .cfi_offset 7,-8
 2104              	 .cfi_offset 14,-4
 2105 0002 82B0     	 sub sp,sp,#8
 2106              	.LCFI106:
 2107              	 .cfi_def_cfa_offset 16
 2108 0004 00AF     	 add r7,sp,#0
 2109              	.LCFI107:
 2110              	 .cfi_def_cfa_register 7
 2111 0006 0346     	 mov r3,r0
 2112 0008 FB71     	 strb r3,[r7,#7]
 119:../communications.h **** 	UART_Transmit(&RS, txData, size);
 2113              	 .loc 6 119 0
 2114 000a FB79     	 ldrb r3,[r7,#7]
 2115 000c 0948     	 ldr r0,.L71
 2116 000e 0A49     	 ldr r1,.L71+4
 2117 0010 1A46     	 mov r2,r3
 2118 0012 FFF7FEFF 	 bl UART_Transmit
 120:../communications.h **** 	while(UART_IsTxBusy(&RS));
 2119              	 .loc 6 120 0
 2120 0016 00BF     	 nop
 2121              	.L70:
 2122              	 .loc 6 120 0 is_stmt 0 discriminator 1
 2123 0018 0648     	 ldr r0,.L71
 2124 001a FFF7FEFF 	 bl UART_IsTxBusy
 2125 001e 0346     	 mov r3,r0
 2126 0020 002B     	 cmp r3,#0
 2127 0022 F9D1     	 bne .L70
 121:../communications.h **** 	UART_Receive(&RS, &rxByte, 1);
 2128              	 .loc 6 121 0 is_stmt 1
 2129 0024 0348     	 ldr r0,.L71
 2130 0026 0549     	 ldr r1,.L71+8
 2131 0028 0122     	 movs r2,#1
 2132 002a FFF7FEFF 	 bl UART_Receive
 122:../communications.h **** }
 2133              	 .loc 6 122 0
 2134 002e 0837     	 adds r7,r7,#8
 2135              	.LCFI108:
 2136              	 .cfi_def_cfa_offset 8
 2137 0030 BD46     	 mov sp,r7
 2138              	.LCFI109:
 2139              	 .cfi_def_cfa_register 13
 2140              	 
 2141 0032 80BD     	 pop {r7,pc}
 2142              	.L72:
 2143              	 .align 2
 2144              	.L71:
 2145 0034 00000000 	 .word RS
 2146 0038 00000000 	 .word txData
 2147 003c 00000000 	 .word rxByte
 2148              	 .cfi_endproc
 2149              	.LFE335:
 2151              	 .section .text.TorqueFromInet,"ax",%progbits
 2152              	 .align 2
 2153              	 .global TorqueFromInet
 2154              	 .thumb
 2155              	 .thumb_func
 2157              	TorqueFromInet:
 2158              	.LFB336:
 2159              	 .file 7 "../dynamics.h"
   1:../dynamics.h **** /*
   2:../dynamics.h ****  * dynamics.h
   3:../dynamics.h ****  *
   4:../dynamics.h ****  *  Created on: 13 Jan 2018
   5:../dynamics.h ****  *      Author: Mafish
   6:../dynamics.h ****  */
   7:../dynamics.h **** 
   8:../dynamics.h **** float TorqueFromInet(uint16_t i_net);
   9:../dynamics.h **** uint16_t  VrefFromTorque(float torque);
  10:../dynamics.h **** 
  11:../dynamics.h **** float TorqueFromInet(uint16_t i_net)		//Input : I_net[mA] , returns estimated Torque in [Nmm]
  12:../dynamics.h **** {
 2160              	 .loc 7 12 0
 2161              	 .cfi_startproc
 2162              	 
 2163              	 
 2164              	 
 2165 0000 80B4     	 push {r7}
 2166              	.LCFI110:
 2167              	 .cfi_def_cfa_offset 4
 2168              	 .cfi_offset 7,-4
 2169 0002 85B0     	 sub sp,sp,#20
 2170              	.LCFI111:
 2171              	 .cfi_def_cfa_offset 24
 2172 0004 00AF     	 add r7,sp,#0
 2173              	.LCFI112:
 2174              	 .cfi_def_cfa_register 7
 2175 0006 0346     	 mov r3,r0
 2176 0008 FB80     	 strh r3,[r7,#6]
  13:../dynamics.h **** 	float result = 0;
 2177              	 .loc 7 13 0
 2178 000a 4FF00003 	 mov r3,#0
 2179 000e FB60     	 str r3,[r7,#12]
  14:../dynamics.h **** 	if(i_net < 22000)
 2180              	 .loc 7 14 0
 2181 0010 FB88     	 ldrh r3,[r7,#6]
 2182 0012 45F2EF52 	 movw r2,#21999
 2183 0016 9342     	 cmp r3,r2
 2184 0018 0FD8     	 bhi .L74
  15:../dynamics.h **** 		result = 0.05445f * i_net + 51.66269f;
 2185              	 .loc 7 15 0
 2186 001a FB88     	 ldrh r3,[r7,#6]
 2187 001c 07EE903A 	 fmsr s15,r3
 2188 0020 F8EEE77A 	 fsitos s15,s15
 2189 0024 9FED107A 	 flds s14,.L77
 2190 0028 67EE877A 	 fmuls s15,s15,s14
 2191 002c 9FED0F7A 	 flds s14,.L77+4
 2192 0030 77EE877A 	 fadds s15,s15,s14
 2193 0034 C7ED037A 	 fsts s15,[r7,#12]
 2194 0038 0EE0     	 b .L75
 2195              	.L74:
  16:../dynamics.h **** 	else
  17:../dynamics.h **** 		result = 0.02978f * i_net + 588.051f;
 2196              	 .loc 7 17 0
 2197 003a FB88     	 ldrh r3,[r7,#6]
 2198 003c 07EE903A 	 fmsr s15,r3
 2199 0040 F8EEE77A 	 fsitos s15,s15
 2200 0044 9FED0A7A 	 flds s14,.L77+8
 2201 0048 67EE877A 	 fmuls s15,s15,s14
 2202 004c 9FED097A 	 flds s14,.L77+12
 2203 0050 77EE877A 	 fadds s15,s15,s14
 2204 0054 C7ED037A 	 fsts s15,[r7,#12]
 2205              	.L75:
  18:../dynamics.h **** 	return result;
 2206              	 .loc 7 18 0
 2207 0058 FB68     	 ldr r3,[r7,#12]
  19:../dynamics.h **** }
 2208              	 .loc 7 19 0
 2209 005a 1846     	 mov r0,r3
 2210 005c 1437     	 adds r7,r7,#20
 2211              	.LCFI113:
 2212              	 .cfi_def_cfa_offset 4
 2213 005e BD46     	 mov sp,r7
 2214              	.LCFI114:
 2215              	 .cfi_def_cfa_register 13
 2216              	 
 2217 0060 5DF8047B 	 ldr r7,[sp],#4
 2218              	.LCFI115:
 2219              	 .cfi_restore 7
 2220              	 .cfi_def_cfa_offset 0
 2221 0064 7047     	 bx lr
 2222              	.L78:
 2223 0066 00BF     	 .align 2
 2224              	.L77:
 2225 0068 F7065F3D 	 .word 1029637879
 2226 006c 98A64E42 	 .word 1112450712
 2227 0070 30F5F33C 	 .word 1022620976
 2228 0074 44031344 	 .word 1142096708
 2229              	 .cfi_endproc
 2230              	.LFE336:
 2232              	 .global __aeabi_f2d
 2233              	 .global __aeabi_dadd
 2234              	 .global __aeabi_d2f
 2235              	 .section .text.VrefFromTorque,"ax",%progbits
 2236              	 .align 2
 2237              	 .global VrefFromTorque
 2238              	 .thumb
 2239              	 .thumb_func
 2241              	VrefFromTorque:
 2242              	.LFB337:
  20:../dynamics.h **** uint16_t VrefFromTorque(float torque)		//input Torque [Nmm], returns corresponding V_ref
  21:../dynamics.h **** {
 2243              	 .loc 7 21 0
 2244              	 .cfi_startproc
 2245              	 
 2246              	 
 2247 0000 80B5     	 push {r7,lr}
 2248              	.LCFI116:
 2249              	 .cfi_def_cfa_offset 8
 2250              	 .cfi_offset 7,-8
 2251              	 .cfi_offset 14,-4
 2252 0002 82B0     	 sub sp,sp,#8
 2253              	.LCFI117:
 2254              	 .cfi_def_cfa_offset 16
 2255 0004 00AF     	 add r7,sp,#0
 2256              	.LCFI118:
 2257              	 .cfi_def_cfa_register 7
 2258 0006 7860     	 str r0,[r7,#4]
  22:../dynamics.h **** 	if(torque < 0)
 2259              	 .loc 7 22 0
 2260 0008 D7ED017A 	 flds s15,[r7,#4]
 2261 000c F5EEC07A 	 fcmpezs s15
 2262 0010 F1EE10FA 	 fmstat
 2263 0014 05D5     	 bpl .L80
  23:../dynamics.h **** 		torque = -torque;
 2264              	 .loc 7 23 0
 2265 0016 D7ED017A 	 flds s15,[r7,#4]
 2266 001a F1EE677A 	 fnegs s15,s15
 2267 001e C7ED017A 	 fsts s15,[r7,#4]
 2268              	.L80:
  24:../dynamics.h **** 	if(torque < 1400)
 2269              	 .loc 7 24 0
 2270 0022 D7ED017A 	 flds s15,[r7,#4]
 2271 0026 9FED207A 	 flds s14,.L89+8
 2272 002a F4EEC77A 	 fcmpes s15,s14
 2273 002e F1EE10FA 	 fmstat
 2274 0032 1BD5     	 bpl .L88
  25:../dynamics.h **** 		torque = 2.7541f * torque + 125.34;
 2275              	 .loc 7 25 0
 2276 0034 D7ED017A 	 flds s15,[r7,#4]
 2277 0038 9FED1C7A 	 flds s14,.L89+12
 2278 003c 67EE877A 	 fmuls s15,s15,s14
 2279 0040 17EE900A 	 fmrs r0,s15
 2280 0044 FFF7FEFF 	 bl __aeabi_f2d
 2281 0048 0246     	 mov r2,r0
 2282 004a 0B46     	 mov r3,r1
 2283 004c 1046     	 mov r0,r2
 2284 004e 1946     	 mov r1,r3
 2285 0050 13A3     	 adr r3,.L89
 2286 0052 D3E90023 	 ldrd r2,[r3]
 2287 0056 FFF7FEFF 	 bl __aeabi_dadd
 2288 005a 0246     	 mov r2,r0
 2289 005c 0B46     	 mov r3,r1
 2290 005e 1046     	 mov r0,r2
 2291 0060 1946     	 mov r1,r3
 2292 0062 FFF7FEFF 	 bl __aeabi_d2f
 2293 0066 0346     	 mov r3,r0
 2294 0068 7B60     	 str r3,[r7,#4]
 2295 006a 0BE0     	 b .L84
 2296              	.L88:
  26:../dynamics.h **** 	else
  27:../dynamics.h **** 		torque =4.8671f * torque - 2698.687f;
 2297              	 .loc 7 27 0
 2298 006c D7ED017A 	 flds s15,[r7,#4]
 2299 0070 9FED0F7A 	 flds s14,.L89+16
 2300 0074 67EE877A 	 fmuls s15,s15,s14
 2301 0078 9FED0E7A 	 flds s14,.L89+20
 2302 007c 77EEC77A 	 fsubs s15,s15,s14
 2303 0080 C7ED017A 	 fsts s15,[r7,#4]
 2304              	.L84:
  28:../dynamics.h **** 	return (uint16_t)torque;
 2305              	 .loc 7 28 0
 2306 0084 D7ED017A 	 flds s15,[r7,#4]
 2307 0088 FCEEE77A 	 ftouizs s15,s15
 2308 008c C7ED007A 	 fsts s15,[r7]
 2309 0090 3B88     	 ldrh r3,[r7]
 2310 0092 9BB2     	 uxth r3,r3
  29:../dynamics.h **** }
 2311              	 .loc 7 29 0
 2312 0094 1846     	 mov r0,r3
 2313 0096 0837     	 adds r7,r7,#8
 2314              	.LCFI119:
 2315              	 .cfi_def_cfa_offset 8
 2316 0098 BD46     	 mov sp,r7
 2317              	.LCFI120:
 2318              	 .cfi_def_cfa_register 13
 2319              	 
 2320 009a 80BD     	 pop {r7,pc}
 2321              	.L90:
 2322 009c AFF30080 	 .align 3
 2323              	.L89:
 2324 00a0 F6285C8F 	 .word -1889785610
 2325 00a4 C2555F40 	 .word 1079989698
 2326 00a8 0000AF44 	 .word 1152319488
 2327 00ac 2D433040 	 .word 1076904749
 2328 00b0 48BF9B40 	 .word 1083948872
 2329 00b4 FEAA2845 	 .word 1160293118
 2330              	 .cfi_endproc
 2331              	.LFE337:
 2333              	 .section .text.main,"ax",%progbits
 2334              	 .align 2
 2335              	 .global main
 2336              	 .thumb
 2337              	 .thumb_func
 2339              	main:
 2340              	.LFB338:
 2341              	 .file 8 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** #include <DAVE.h>
   3:../main.c     **** #include <math.h>
   4:../main.c     **** #include "variables.h"
   5:../main.c     **** #include "kinematics.h"
   6:../main.c     **** #include "communications.h"
   7:../main.c     **** #include "dynamics.h"
   8:../main.c     **** 
   9:../main.c     **** uint8_t Motors_go_nogo();
  10:../main.c     **** 
  11:../main.c     **** int main(void)
  12:../main.c     **** {
 2342              	 .loc 8 12 0
 2343              	 .cfi_startproc
 2344              	 
 2345              	 
 2346 0000 80B5     	 push {r7,lr}
 2347              	.LCFI121:
 2348              	 .cfi_def_cfa_offset 8
 2349              	 .cfi_offset 7,-8
 2350              	 .cfi_offset 14,-4
 2351 0002 82B0     	 sub sp,sp,#8
 2352              	.LCFI122:
 2353              	 .cfi_def_cfa_offset 16
 2354 0004 00AF     	 add r7,sp,#0
 2355              	.LCFI123:
 2356              	 .cfi_def_cfa_register 7
  13:../main.c     ****   DAVE_STATUS_t status;
  14:../main.c     ****   status = DAVE_Init();
 2357              	 .loc 8 14 0
 2358 0006 FFF7FEFF 	 bl DAVE_Init
 2359 000a 0346     	 mov r3,r0
 2360 000c FB71     	 strb r3,[r7,#7]
  15:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 2361              	 .loc 8 15 0
 2362 000e 06E0     	 b .L92
 2363              	.L93:
  16:../main.c     ****   {
  17:../main.c     **** 	  delay(50000);
 2364              	 .loc 8 17 0
 2365 0010 4CF25030 	 movw r0,#50000
 2366 0014 FFF7FEFF 	 bl delay
  18:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
 2367              	 .loc 8 18 0
 2368 0018 2148     	 ldr r0,.L95
 2369 001a FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 2370              	.L92:
  15:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 2371              	 .loc 8 15 0
 2372 001e FB79     	 ldrb r3,[r7,#7]
 2373 0020 012B     	 cmp r3,#1
 2374 0022 F5D0     	 beq .L93
  19:../main.c     ****   }
  20:../main.c     ****   delay(250000);
 2375              	 .loc 8 20 0
 2376 0024 1F48     	 ldr r0,.L95+4
 2377 0026 FFF7FEFF 	 bl delay
  21:../main.c     ****   Init();
 2378              	 .loc 8 21 0
 2379 002a FFF7FEFF 	 bl Init
  22:../main.c     ****  /*
  23:../main.c     ****   while(init == 0)							//wait for input from PC
  24:../main.c     ****   {
  25:../main.c     **** 	  delay(500000);
  26:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
  27:../main.c     ****   }
  28:../main.c     ****   */
  29:../main.c     **** 
  30:../main.c     ****   XMC_Init(10);
 2380              	 .loc 8 30 0
 2381 002e 0A20     	 movs r0,#10
 2382 0030 FFF7FEFF 	 bl XMC_Init
 2383              	.L94:
  31:../main.c     **** 
  32:../main.c     **** /*
  33:../main.c     ****   while(motors_go == 0)				//Procedure to check if all motors are go
  34:../main.c     ****   {
  35:../main.c     **** 	  XMC_Check();
  36:../main.c     **** 	  if(Motors_go_nogo() == 0)
  37:../main.c     **** 		  XMC_Init(10);
  38:../main.c     ****   }
  39:../main.c     **** */
  40:../main.c     ****   while(1)
  41:../main.c     ****   {
  42:../main.c     **** 	  Ik(&stanowisko);
 2384              	 .loc 8 42 0 discriminator 1
 2385 0034 1C48     	 ldr r0,.L95+8
 2386 0036 FFF7FEFF 	 bl Ik
  43:../main.c     **** 	  Update(&stanowisko);
 2387              	 .loc 8 43 0 discriminator 1
 2388 003a 1B48     	 ldr r0,.L95+8
 2389 003c FFF7FEFF 	 bl Update
  44:../main.c     **** 	  Send_Leg(&stanowisko);
 2390              	 .loc 8 44 0 discriminator 1
 2391 0040 1948     	 ldr r0,.L95+8
 2392 0042 FFF7FEFF 	 bl Send_Leg
  45:../main.c     **** 
  46:../main.c     **** 	 stanowisko.torque[0] = -TorqueFromInet(stanowisko.i_net[0]);
 2393              	 .loc 8 46 0 discriminator 1
 2394 0046 184B     	 ldr r3,.L95+8
 2395 0048 DB88     	 ldrh r3,[r3,#6]
 2396 004a 9BB2     	 uxth r3,r3
 2397 004c 1846     	 mov r0,r3
 2398 004e FFF7FEFF 	 bl TorqueFromInet
 2399 0052 0346     	 mov r3,r0
 2400 0054 07EE903A 	 fmsr s15,r3
 2401 0058 F1EE677A 	 fnegs s15,s15
 2402 005c 124B     	 ldr r3,.L95+8
 2403 005e C3ED157A 	 fsts s15,[r3,#84]
  47:../main.c     **** 	 stanowisko.torque[1] = TorqueFromInet(stanowisko.i_net[1]);
 2404              	 .loc 8 47 0 discriminator 1
 2405 0062 114B     	 ldr r3,.L95+8
 2406 0064 1B89     	 ldrh r3,[r3,#8]
 2407 0066 9BB2     	 uxth r3,r3
 2408 0068 1846     	 mov r0,r3
 2409 006a FFF7FEFF 	 bl TorqueFromInet
 2410 006e 0246     	 mov r2,r0
 2411 0070 0D4B     	 ldr r3,.L95+8
 2412 0072 9A65     	 str r2,[r3,#88]
  48:../main.c     **** 	 Fk(&stanowisko);
 2413              	 .loc 8 48 0 discriminator 1
 2414 0074 0C48     	 ldr r0,.L95+8
 2415 0076 FFF7FEFF 	 bl Fk
  49:../main.c     **** 
  50:../main.c     **** 	  t+= dt;
 2416              	 .loc 8 50 0 discriminator 1
 2417 007a 0C4B     	 ldr r3,.L95+12
 2418 007c 93ED007A 	 flds s14,[r3]
 2419 0080 0B4B     	 ldr r3,.L95+16
 2420 0082 D3ED007A 	 flds s15,[r3]
 2421 0086 77EE277A 	 fadds s15,s14,s15
 2422 008a 084B     	 ldr r3,.L95+12
 2423 008c C3ED007A 	 fsts s15,[r3]
  51:../main.c     **** 
  52:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 2424              	 .loc 8 52 0 discriminator 1
 2425 0090 0348     	 ldr r0,.L95
 2426 0092 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
  53:../main.c     **** 	  delay(30000);
 2427              	 .loc 8 53 0 discriminator 1
 2428 0096 47F23050 	 movw r0,#30000
 2429 009a FFF7FEFF 	 bl delay
  54:../main.c     ****   }
 2430              	 .loc 8 54 0 discriminator 1
 2431 009e C9E7     	 b .L94
 2432              	.L96:
 2433              	 .align 2
 2434              	.L95:
 2435 00a0 00000000 	 .word LED1
 2436 00a4 90D00300 	 .word 250000
 2437 00a8 00000000 	 .word stanowisko
 2438 00ac 00000000 	 .word t
 2439 00b0 00000000 	 .word dt
 2440              	 .cfi_endproc
 2441              	.LFE338:
 2443              	 .section .text.Motors_go_nogo,"ax",%progbits
 2444              	 .align 2
 2445              	 .global Motors_go_nogo
 2446              	 .thumb
 2447              	 .thumb_func
 2449              	Motors_go_nogo:
 2450              	.LFB339:
  55:../main.c     **** }
  56:../main.c     **** 
  57:../main.c     **** uint8_t Motors_go_nogo()			//Chceck if all motor are initialized properly and ready to be driven TO
  58:../main.c     **** {
 2451              	 .loc 8 58 0
 2452              	 .cfi_startproc
 2453              	 
 2454              	 
 2455              	 
 2456 0000 80B4     	 push {r7}
 2457              	.LCFI124:
 2458              	 .cfi_def_cfa_offset 4
 2459              	 .cfi_offset 7,-4
 2460 0002 83B0     	 sub sp,sp,#12
 2461              	.LCFI125:
 2462              	 .cfi_def_cfa_offset 16
 2463 0004 00AF     	 add r7,sp,#0
 2464              	.LCFI126:
 2465              	 .cfi_def_cfa_register 7
 2466              	.LBB6:
  59:../main.c     **** 	for(uint8_t i =0; i < 2; i++)
 2467              	 .loc 8 59 0
 2468 0006 0023     	 movs r3,#0
 2469 0008 FB71     	 strb r3,[r7,#7]
 2470 000a 0BE0     	 b .L98
 2471              	.L100:
  60:../main.c     **** 	{
  61:../main.c     **** 		if(stanowisko.motor_go[i] == 0)
 2472              	 .loc 8 61 0
 2473 000c FB79     	 ldrb r3,[r7,#7]
 2474 000e 0D4A     	 ldr r2,.L103
 2475 0010 1344     	 add r3,r3,r2
 2476 0012 9B78     	 ldrb r3,[r3,#2]
 2477 0014 002B     	 cmp r3,#0
 2478 0016 02D1     	 bne .L99
  62:../main.c     **** 			motors_go = 0;
 2479              	 .loc 8 62 0
 2480 0018 0B4B     	 ldr r3,.L103+4
 2481 001a 0022     	 movs r2,#0
 2482 001c 1A70     	 strb r2,[r3]
 2483              	.L99:
  59:../main.c     **** 	for(uint8_t i =0; i < 2; i++)
 2484              	 .loc 8 59 0 discriminator 2
 2485 001e FB79     	 ldrb r3,[r7,#7]
 2486 0020 0133     	 adds r3,r3,#1
 2487 0022 FB71     	 strb r3,[r7,#7]
 2488              	.L98:
  59:../main.c     **** 	for(uint8_t i =0; i < 2; i++)
 2489              	 .loc 8 59 0 is_stmt 0 discriminator 1
 2490 0024 FB79     	 ldrb r3,[r7,#7]
 2491 0026 012B     	 cmp r3,#1
 2492 0028 F0D9     	 bls .L100
 2493              	.LBE6:
  63:../main.c     **** 	}
  64:../main.c     **** 	if(motors_go == 1)
 2494              	 .loc 8 64 0 is_stmt 1
 2495 002a 074B     	 ldr r3,.L103+4
 2496 002c 1B78     	 ldrb r3,[r3]
 2497 002e 012B     	 cmp r3,#1
 2498 0030 01D1     	 bne .L101
  65:../main.c     **** 		return 1;
 2499              	 .loc 8 65 0
 2500 0032 0123     	 movs r3,#1
 2501 0034 00E0     	 b .L102
 2502              	.L101:
  66:../main.c     **** 	else
  67:../main.c     **** 		return 0;
 2503              	 .loc 8 67 0
 2504 0036 0023     	 movs r3,#0
 2505              	.L102:
  68:../main.c     **** }
 2506              	 .loc 8 68 0
 2507 0038 1846     	 mov r0,r3
 2508 003a 0C37     	 adds r7,r7,#12
 2509              	.LCFI127:
 2510              	 .cfi_def_cfa_offset 4
 2511 003c BD46     	 mov sp,r7
 2512              	.LCFI128:
 2513              	 .cfi_def_cfa_register 13
 2514              	 
 2515 003e 5DF8047B 	 ldr r7,[sp],#4
 2516              	.LCFI129:
 2517              	 .cfi_restore 7
 2518              	 .cfi_def_cfa_offset 0
 2519 0042 7047     	 bx lr
 2520              	.L104:
 2521              	 .align 2
 2522              	.L103:
 2523 0044 00000000 	 .word stanowisko
 2524 0048 00000000 	 .word motors_go
 2525              	 .cfi_endproc
 2526              	.LFE339:
 2528              	 .text
 2529              	.Letext0:
 2530              	 .file 9 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2531              	 .file 10 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2532              	 .file 11 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2533              	 .file 12 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
 2534              	 .file 13 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_gpio.h"
 2535              	 .file 14 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_usic.h"
 2536              	 .file 15 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_uart.h"
 2537              	 .file 16 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
 2538              	 .file 17 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 2539              	 .file 18 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer.h"
 2540              	 .file 19 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DAVE.h"
 2541              	 .file 20 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Include/core_cm4.h"
 2542              	 .file 21 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 2543              	 .file 22 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 2544              	 .file 23 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer_extern.h"
 2545              	 .file 24 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_ToggleOutput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_ToggleOutput:00000000 XMC_GPIO_ToggleOutput
    {standard input}:162    .text.UART_IsTxBusy:00000000 $t
    {standard input}:166    .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:208    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:212    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:252    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:256    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:295    .text.DIGITAL_IO_ToggleOutput:00000000 $t
    {standard input}:299    .text.DIGITAL_IO_ToggleOutput:00000000 DIGITAL_IO_ToggleOutput
    {standard input}:342    .data.pi:00000000 pi
    {standard input}:339    .data.pi:00000000 $d
    {standard input}:349    .data.l1:00000000 l1
    {standard input}:346    .data.l1:00000000 $d
    {standard input}:356    .data.l2:00000000 l2
    {standard input}:353    .data.l2:00000000 $d
    {standard input}:363    .data.d:00000000 d
    {standard input}:360    .data.d:00000000 $d
    {standard input}:370    .bss.t:00000000 t
    {standard input}:367    .bss.t:00000000 $d
    {standard input}:377    .data.dt:00000000 dt
    {standard input}:374    .data.dt:00000000 $d
                            *COM*:0000000a rxData
                            *COM*:0000000a txData
    {standard input}:385    .data.adress:00000000 adress
    {standard input}:391    .bss.rxByte:00000000 rxByte
    {standard input}:392    .bss.rxByte:00000000 $d
    {standard input}:397    .bss.iterator_wiadomosci:00000000 iterator_wiadomosci
    {standard input}:398    .bss.iterator_wiadomosci:00000000 $d
    {standard input}:403    .data.is_delay:00000000 is_delay
    {standard input}:409    .bss.init:00000000 init
    {standard input}:410    .bss.init:00000000 $d
    {standard input}:415    .bss.motors_go:00000000 motors_go
    {standard input}:416    .bss.motors_go:00000000 $d
                            *COM*:00000060 stanowisko
    {standard input}:419    .text.delay:00000000 $t
    {standard input}:424    .text.delay:00000000 delay
    {standard input}:482    .text.delay:0000003c $d
    {standard input}:488    .text.Init:00000000 $t
    {standard input}:493    .text.Init:00000000 Init
    {standard input}:616    .text.Init:000000a8 $d
    {standard input}:623    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:628    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:659    .text.CCU43_1_IRQHandler:00000014 $d
    {standard input}:664    .text.Ik:00000000 $t
    {standard input}:669    .text.Ik:00000000 Ik
    {standard input}:840    .text.Ik:000001d0 $d
    {standard input}:847    .text.Fk:00000000 $t
    {standard input}:852    .text.Fk:00000000 Fk
    {standard input}:1162   .text.Fk:00000394 $d
    {standard input}:1167   .text.Fk:000003a4 $t
    {standard input}:1254   .text.Fk:0000049c $d
    {standard input}:1260   .text.Update:00000000 $t
    {standard input}:1265   .text.Update:00000000 Update
    {standard input}:1397   .text.Update:00000130 $d
    {standard input}:1406   .text.Trajectory:00000000 $t
    {standard input}:1411   .text.Trajectory:00000000 Trajectory
    {standard input}:1471   .text.Trajectory:0000004c $d
    {standard input}:1477   .text.XMC_Init:00000000 $t
    {standard input}:1482   .text.XMC_Init:00000000 XMC_Init
    {standard input}:2094   .text.Send:00000000 Send
    {standard input}:1580   .text.XMC_Init:00000078 $d
    {standard input}:1585   .text.XMC_Check:00000000 $t
    {standard input}:1590   .text.XMC_Check:00000000 XMC_Check
    {standard input}:1661   .text.XMC_Check:00000050 $d
    {standard input}:1667   .text.eorx:00000000 $t
    {standard input}:1672   .text.eorx:00000000 eorx
    {standard input}:1802   .text.Message_interpreter:00000000 Message_interpreter
    {standard input}:1756   .text.eorx:00000070 $d
    {standard input}:1764   .text.eotx:00000000 $t
    {standard input}:1769   .text.eotx:00000000 eotx
    {standard input}:1797   .text.Message_interpreter:00000000 $t
    {standard input}:1928   .text.Message_interpreter:000000ac $d
    {standard input}:1935   .text.Send_Leg:00000000 $t
    {standard input}:1940   .text.Send_Leg:00000000 Send_Leg
    {standard input}:2084   .text.Send_Leg:000000d8 $d
    {standard input}:2089   .text.Send:00000000 $t
    {standard input}:2145   .text.Send:00000034 $d
    {standard input}:2152   .text.TorqueFromInet:00000000 $t
    {standard input}:2157   .text.TorqueFromInet:00000000 TorqueFromInet
    {standard input}:2225   .text.TorqueFromInet:00000068 $d
    {standard input}:2236   .text.VrefFromTorque:00000000 $t
    {standard input}:2241   .text.VrefFromTorque:00000000 VrefFromTorque
    {standard input}:2324   .text.VrefFromTorque:000000a0 $d
    {standard input}:2334   .text.main:00000000 $t
    {standard input}:2339   .text.main:00000000 main
    {standard input}:2435   .text.main:000000a0 $d
    {standard input}:2444   .text.Motors_go_nogo:00000000 $t
    {standard input}:2449   .text.Motors_go_nogo:00000000 Motors_go_nogo
    {standard input}:2523   .text.Motors_go_nogo:00000044 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIMER_SetTimeInterval
TIMER_Start
TIMER_Stop
DELAY
sqrtf
acosf
asinf
sinf
cosf
atan2f
LED1
UART_Receive
RS
UART_Transmit
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
DAVE_Init
