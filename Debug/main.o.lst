   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.XMC_GPIO_ToggleOutput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_ToggleOutput:
 120              	.LFB166:
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 309 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 139              	 .loc 1 312 0
 140 000c FB78     	 ldrb r3,[r7,#3]
 141 000e 4FF00112 	 mov r2,#65537
 142 0012 9A40     	 lsls r2,r2,r3
 143 0014 7B68     	 ldr r3,[r7,#4]
 144 0016 5A60     	 str r2,[r3,#4]
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 313 0
 146 0018 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001a BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001c 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0020 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE166:
 161 0022 00BF     	 .section .text.UART_IsTxBusy,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	UART_IsTxBusy:
 167              	.LFB267:
 168              	 .file 2 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 169              	 .loc 2 2117 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
 185              	 .loc 2 2119 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 9B68     	 ldr r3,[r3,#8]
 188 000c 1B7E     	 ldrb r3,[r3,#24]
 189 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
 190              	 .loc 2 2120 0
 191 0010 1846     	 mov r0,r3
 192 0012 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0014 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 0016 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001a 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE267:
 207              	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	DIGITAL_IO_SetOutputHigh:
 213              	.LFB269:
 214              	 .file 3 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 215              	 .loc 3 269 0
 216              	 .cfi_startproc
 217              	 
 218              	 
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI25:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI26:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 231              	 .loc 3 271 0
 232 0008 7B68     	 ldr r3,[r7,#4]
 233 000a 1A68     	 ldr r2,[r3]
 234 000c 7B68     	 ldr r3,[r7,#4]
 235 000e 1B7C     	 ldrb r3,[r3,#16]
 236 0010 1046     	 mov r0,r2
 237 0012 1946     	 mov r1,r3
 238 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 239              	 .loc 3 272 0
 240 0018 0837     	 adds r7,r7,#8
 241              	.LCFI27:
 242              	 .cfi_def_cfa_offset 8
 243 001a BD46     	 mov sp,r7
 244              	.LCFI28:
 245              	 .cfi_def_cfa_register 13
 246              	 
 247 001c 80BD     	 pop {r7,pc}
 248              	 .cfi_endproc
 249              	.LFE269:
 251 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 252              	 .align 2
 253              	 .thumb
 254              	 .thumb_func
 256              	DIGITAL_IO_SetOutputLow:
 257              	.LFB270:
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 258              	 .loc 3 316 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 80B5     	 push {r7,lr}
 263              	.LCFI29:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 82B0     	 sub sp,sp,#8
 268              	.LCFI30:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI31:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 274              	 .loc 3 318 0
 275 0008 7B68     	 ldr r3,[r7,#4]
 276 000a 1A68     	 ldr r2,[r3]
 277 000c 7B68     	 ldr r3,[r7,#4]
 278 000e 1B7C     	 ldrb r3,[r3,#16]
 279 0010 1046     	 mov r0,r2
 280 0012 1946     	 mov r1,r3
 281 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 282              	 .loc 3 319 0
 283 0018 0837     	 adds r7,r7,#8
 284              	.LCFI32:
 285              	 .cfi_def_cfa_offset 8
 286 001a BD46     	 mov sp,r7
 287              	.LCFI33:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 001c 80BD     	 pop {r7,pc}
 291              	 .cfi_endproc
 292              	.LFE270:
 294 001e 00BF     	 .section .text.DIGITAL_IO_ToggleOutput,"ax",%progbits
 295              	 .align 2
 296              	 .thumb
 297              	 .thumb_func
 299              	DIGITAL_IO_ToggleOutput:
 300              	.LFB271:
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to Toggle port pin.
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to toggle port pin.
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputLow(), DIGITAL_IO_SetOutputHigh()
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   uint32_t delay_count;;
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 1 -> 0 (if initial output level is logic
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 0 -> 1
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 301              	 .loc 3 368 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305 0000 80B5     	 push {r7,lr}
 306              	.LCFI34:
 307              	 .cfi_def_cfa_offset 8
 308              	 .cfi_offset 7,-8
 309              	 .cfi_offset 14,-4
 310 0002 82B0     	 sub sp,sp,#8
 311              	.LCFI35:
 312              	 .cfi_def_cfa_offset 16
 313 0004 00AF     	 add r7,sp,#0
 314              	.LCFI36:
 315              	 .cfi_def_cfa_register 7
 316 0006 7860     	 str r0,[r7,#4]
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 317              	 .loc 3 370 0
 318 0008 7B68     	 ldr r3,[r7,#4]
 319 000a 1A68     	 ldr r2,[r3]
 320 000c 7B68     	 ldr r3,[r7,#4]
 321 000e 1B7C     	 ldrb r3,[r3,#16]
 322 0010 1046     	 mov r0,r2
 323 0012 1946     	 mov r1,r3
 324 0014 FFF7FEFF 	 bl XMC_GPIO_ToggleOutput
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 325              	 .loc 3 371 0
 326 0018 0837     	 adds r7,r7,#8
 327              	.LCFI37:
 328              	 .cfi_def_cfa_offset 8
 329 001a BD46     	 mov sp,r7
 330              	.LCFI38:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 001c 80BD     	 pop {r7,pc}
 334              	 .cfi_endproc
 335              	.LFE271:
 337              	 .global pi
 338 001e 00BF     	 .section .data.pi,"aw",%progbits
 339              	 .align 2
 342              	pi:
 343 0000 D00F4940 	 .word 1078530000
 344              	 .global l1
 345              	 .section .data.l1,"aw",%progbits
 346              	 .align 2
 349              	l1:
 350 0000 0000C842 	 .word 1120403456
 351              	 .global l2
 352              	 .section .data.l2,"aw",%progbits
 353              	 .align 2
 356              	l2:
 357 0000 00004843 	 .word 1128792064
 358              	 .global d
 359              	 .section .data.d,"aw",%progbits
 360              	 .align 2
 363              	d:
 364 0000 0000B242 	 .word 1118961664
 365              	 .global t
 366              	 .section .bss.t,"aw",%nobits
 367              	 .align 2
 370              	t:
 371 0000 00000000 	 .space 4
 372              	 .global dt
 373              	 .section .data.dt,"aw",%progbits
 374              	 .align 2
 377              	dt:
 378 0000 9A9919BE 	 .word -1105618534
 379              	 .comm rxData,10,4
 380              	 .comm txData,10,4
 381              	 .global adress
 382              	 .section .data.adress,"aw",%progbits
 385              	adress:
 386 0000 EE       	 .byte -18
 387              	 .global rxByte
 388              	 .section .bss.rxByte,"aw",%nobits
 391              	rxByte:
 392 0000 00       	 .space 1
 393              	 .global iterator_wiadomosci
 394              	 .section .bss.iterator_wiadomosci,"aw",%nobits
 397              	iterator_wiadomosci:
 398 0000 00       	 .space 1
 399              	 .global is_delay
 400              	 .section .data.is_delay,"aw",%progbits
 403              	is_delay:
 404 0000 01       	 .byte 1
 405              	 .global init
 406              	 .section .bss.init,"aw",%nobits
 409              	init:
 410 0000 00       	 .space 1
 411              	 .global motors_go
 412              	 .section .bss.motors_go,"aw",%nobits
 415              	motors_go:
 416 0000 00       	 .space 1
 417              	 .comm stanowisko,168,4
 418              	 .section .text.delay,"ax",%progbits
 419              	 .align 2
 420              	 .global delay
 421              	 .thumb
 422              	 .thumb_func
 424              	delay:
 425              	.LFB322:
 426              	 .file 4 "../variables.h"
   1:../variables.h **** #define SOF 0xCC			//start of message
   2:../variables.h **** #define EOF 0xDD			//end of message
   3:../variables.h **** #define INIT 0xA1			//init message
   4:../variables.h **** #define CHECK 0xA3		//go no go message
   5:../variables.h **** 
   6:../variables.h **** // kinematics vars
   7:../variables.h **** float pi = 3.14159f;
   8:../variables.h **** float l1 =100;					//length of thight
   9:../variables.h **** float l2 =200;					//length of tibia
  10:../variables.h **** float d =89;					//distance between motors
  11:../variables.h **** float t = 0.0f;					//time of execution
  12:../variables.h **** float dt = -0.15;				//delta t
  13:../variables.h **** 
  14:../variables.h **** //communication vars
  15:../variables.h **** uint8_t rxData[10];								//buffer for incoming messages
  16:../variables.h **** uint8_t txData[10];								//buffer for outgoing messages
  17:../variables.h **** uint8_t adress =0xEE;						//adress of Controller device
  18:../variables.h **** uint8_t rxByte = 0;								//temprorary incoming byte holder
  19:../variables.h **** uint8_t iterator_wiadomosci = 0;	//message iterator
  20:../variables.h **** 
  21:../variables.h **** //other vars
  22:../variables.h **** uint8_t is_delay = 1;							//is on active delay
  23:../variables.h **** uint8_t init = 0;									//is initiated
  24:../variables.h **** uint8_t motors_go = 0;						//are all motors go
  25:../variables.h **** 
  26:../variables.h **** struct vec2										//floating point 2d vector
  27:../variables.h **** {
  28:../variables.h **** 	float x;
  29:../variables.h **** 	float y;
  30:../variables.h **** };
  31:../variables.h **** struct vec3										//floating point 3d vector
  32:../variables.h **** {
  33:../variables.h **** 	float x;
  34:../variables.h **** 	float y;
  35:../variables.h **** 	float z;
  36:../variables.h **** };
  37:../variables.h **** struct Leg											//structure holding leg parameters
  38:../variables.h **** {
  39:../variables.h **** 	uint8_t motor_n[2];						//driver numbers
  40:../variables.h **** 	uint8_t motor_go[2];					//is motor go
  41:../variables.h **** 	uint8_t adresy[2];							//adresses
  42:../variables.h **** 	int16_t i_net[2];								//summarized current
  43:../variables.h **** 	int32_t ang_abs[2];						//absolute angle of the motor
  44:../variables.h **** 	float ang_abs_poprzedni[2];		//last absolute angle of the motor
  45:../variables.h **** 	float predkosc_silnika[2];			//motor speed
  46:../variables.h **** 	uint16_t ks[2];										//virtal spring strength
  47:../variables.h **** 	uint16_t kd[2];									//virtual damper strength
  48:../variables.h **** 	int32_t teta_int[2];							//commanded motor angle as 32bit integer
  49:../variables.h **** 	uint16_t poz_zad[2];						//commanded motor angle as 16bit unsigned integer
  50:../variables.h **** 	struct vec2 foot;							//commanded foot position in milimeters in x-y reference frame
  51:../variables.h **** 	struct vec2 real_foot;					//measured foot position in milimeters in x-y reference frame
  52:../variables.h **** 	struct vec2 real_speed;				//measured speed of the foot in x-y referance frame
  53:../variables.h **** 	float teta[2];									//commanded motor angle in radaians
  54:../variables.h **** 	float ang_abs_rad[2];					//current motor angle in radians
  55:../variables.h **** 	struct vec2 eF;								//estimated Forces on the foot
  56:../variables.h **** 	float eFY_buffer[5];						// buffer for filtering estimated Y forces
  57:../variables.h **** 	float torque[2];								//measured Torque on the motors
  58:../variables.h **** 	float r0;											//base virtual spring length for Reiberts Hopper
  59:../variables.h **** 	float r0_angle;								//motor  angle in radians to achive r0 position for  Reiberts Hopper
  60:../variables.h **** 	float ksr;											//virtual spring stiffness cooefficient for Reiberts Hopper
  61:../variables.h **** 	float kdr;										//virtual spring damping cooefficient for Reiberts Hopper
  62:../variables.h **** 	float J[2][2];									//Jackobian
  63:../variables.h **** 	uint8_t  skoki;;
  64:../variables.h **** };
  65:../variables.h **** struct Leg stanowisko;					//struct for test stand , a single leg
  66:../variables.h **** 
  67:../variables.h **** 
  68:../variables.h **** void delay(uint32_t us)					//active delay
  69:../variables.h **** {
 427              	 .loc 4 69 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431 0000 80B5     	 push {r7,lr}
 432              	.LCFI39:
 433              	 .cfi_def_cfa_offset 8
 434              	 .cfi_offset 7,-8
 435              	 .cfi_offset 14,-4
 436 0002 82B0     	 sub sp,sp,#8
 437              	.LCFI40:
 438              	 .cfi_def_cfa_offset 16
 439 0004 00AF     	 add r7,sp,#0
 440              	.LCFI41:
 441              	 .cfi_def_cfa_register 7
 442 0006 7860     	 str r0,[r7,#4]
  70:../variables.h **** 	us *= 100;
 443              	 .loc 4 70 0
 444 0008 7B68     	 ldr r3,[r7,#4]
 445 000a 6422     	 movs r2,#100
 446 000c 02FB03F3 	 mul r3,r2,r3
 447 0010 7B60     	 str r3,[r7,#4]
  71:../variables.h **** 	is_delay = 1;
 448              	 .loc 4 71 0
 449 0012 0A4B     	 ldr r3,.L11
 450 0014 0122     	 movs r2,#1
 451 0016 1A70     	 strb r2,[r3]
  72:../variables.h **** 	TIMER_SetTimeInterval(&DELAY, us);
 452              	 .loc 4 72 0
 453 0018 0948     	 ldr r0,.L11+4
 454 001a 7968     	 ldr r1,[r7,#4]
 455 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
  73:../variables.h **** 	TIMER_Start(&DELAY);
 456              	 .loc 4 73 0
 457 0020 0748     	 ldr r0,.L11+4
 458 0022 FFF7FEFF 	 bl TIMER_Start
  74:../variables.h **** 	while(is_delay);
 459              	 .loc 4 74 0
 460 0026 00BF     	 nop
 461              	.L10:
 462              	 .loc 4 74 0 is_stmt 0 discriminator 1
 463 0028 044B     	 ldr r3,.L11
 464 002a 1B78     	 ldrb r3,[r3]
 465 002c 002B     	 cmp r3,#0
 466 002e FBD1     	 bne .L10
  75:../variables.h **** 	TIMER_Stop(&DELAY);
 467              	 .loc 4 75 0 is_stmt 1
 468 0030 0348     	 ldr r0,.L11+4
 469 0032 FFF7FEFF 	 bl TIMER_Stop
  76:../variables.h **** }
 470              	 .loc 4 76 0
 471 0036 0837     	 adds r7,r7,#8
 472              	.LCFI42:
 473              	 .cfi_def_cfa_offset 8
 474 0038 BD46     	 mov sp,r7
 475              	.LCFI43:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 003a 80BD     	 pop {r7,pc}
 479              	.L12:
 480              	 .align 2
 481              	.L11:
 482 003c 00000000 	 .word is_delay
 483 0040 00000000 	 .word DELAY
 484              	 .cfi_endproc
 485              	.LFE322:
 487              	 .section .text.Init,"ax",%progbits
 488              	 .align 2
 489              	 .global Init
 490              	 .thumb
 491              	 .thumb_func
 493              	Init:
 494              	.LFB323:
  77:../variables.h **** 
  78:../variables.h **** void Init()			//initialization function for test stand
  79:../variables.h **** {
 495              	 .loc 4 79 0
 496              	 .cfi_startproc
 497              	 
 498              	 
 499              	 
 500 0000 80B4     	 push {r7}
 501              	.LCFI44:
 502              	 .cfi_def_cfa_offset 4
 503              	 .cfi_offset 7,-4
 504 0002 83B0     	 sub sp,sp,#12
 505              	.LCFI45:
 506              	 .cfi_def_cfa_offset 16
 507 0004 00AF     	 add r7,sp,#0
 508              	.LCFI46:
 509              	 .cfi_def_cfa_register 7
  80:../variables.h **** 
  81:../variables.h **** 	stanowisko.adresy[0] = 0x10;
 510              	 .loc 4 81 0
 511 0006 364B     	 ldr r3,.L16
 512 0008 1022     	 movs r2,#16
 513 000a 1A71     	 strb r2,[r3,#4]
  82:../variables.h **** 	stanowisko.adresy[1] = 0x11;
 514              	 .loc 4 82 0
 515 000c 344B     	 ldr r3,.L16
 516 000e 1122     	 movs r2,#17
 517 0010 5A71     	 strb r2,[r3,#5]
 518              	.LBB2:
  83:../variables.h **** 	for(uint8_t i = 0 ; i < 2; i++)
 519              	 .loc 4 83 0
 520 0012 0023     	 movs r3,#0
 521 0014 FB71     	 strb r3,[r7,#7]
 522 0016 28E0     	 b .L14
 523              	.L15:
  84:../variables.h **** 	{
  85:../variables.h **** 		stanowisko.i_net[i] = 0;
 524              	 .loc 4 85 0 discriminator 3
 525 0018 FB79     	 ldrb r3,[r7,#7]
 526 001a 314A     	 ldr r2,.L16
 527 001c 5B00     	 lsls r3,r3,#1
 528 001e 1344     	 add r3,r3,r2
 529 0020 0022     	 movs r2,#0
 530 0022 DA80     	 strh r2,[r3,#6]
  86:../variables.h **** 		stanowisko.ang_abs[i] = 0;
 531              	 .loc 4 86 0 discriminator 3
 532 0024 FB79     	 ldrb r3,[r7,#7]
 533 0026 2E4A     	 ldr r2,.L16
 534 0028 0233     	 adds r3,r3,#2
 535 002a 9B00     	 lsls r3,r3,#2
 536 002c 1344     	 add r3,r3,r2
 537 002e 0022     	 movs r2,#0
 538 0030 5A60     	 str r2,[r3,#4]
  87:../variables.h **** 		stanowisko.ang_abs_poprzedni[i] = 0;
 539              	 .loc 4 87 0 discriminator 3
 540 0032 FB79     	 ldrb r3,[r7,#7]
 541 0034 2A4A     	 ldr r2,.L16
 542 0036 0433     	 adds r3,r3,#4
 543 0038 9B00     	 lsls r3,r3,#2
 544 003a 1344     	 add r3,r3,r2
 545 003c 4FF00002 	 mov r2,#0
 546 0040 5A60     	 str r2,[r3,#4]
  88:../variables.h **** 		stanowisko.predkosc_silnika[i] = 0;
 547              	 .loc 4 88 0 discriminator 3
 548 0042 FB79     	 ldrb r3,[r7,#7]
 549 0044 264A     	 ldr r2,.L16
 550 0046 0633     	 adds r3,r3,#6
 551 0048 9B00     	 lsls r3,r3,#2
 552 004a 1344     	 add r3,r3,r2
 553 004c 4FF00002 	 mov r2,#0
 554 0050 5A60     	 str r2,[r3,#4]
  89:../variables.h **** 		stanowisko.motor_go[i]  =0;
 555              	 .loc 4 89 0 discriminator 3
 556 0052 FB79     	 ldrb r3,[r7,#7]
 557 0054 224A     	 ldr r2,.L16
 558 0056 1344     	 add r3,r3,r2
 559 0058 0022     	 movs r2,#0
 560 005a 9A70     	 strb r2,[r3,#2]
  90:../variables.h **** 		stanowisko.motor_n[i] = 0;
 561              	 .loc 4 90 0 discriminator 3
 562 005c FB79     	 ldrb r3,[r7,#7]
 563 005e 204A     	 ldr r2,.L16
 564 0060 0021     	 movs r1,#0
 565 0062 D154     	 strb r1,[r2,r3]
  83:../variables.h **** 	{
 566              	 .loc 4 83 0 discriminator 3
 567 0064 FB79     	 ldrb r3,[r7,#7]
 568 0066 0133     	 adds r3,r3,#1
 569 0068 FB71     	 strb r3,[r7,#7]
 570              	.L14:
  83:../variables.h **** 	{
 571              	 .loc 4 83 0 is_stmt 0 discriminator 1
 572 006a FB79     	 ldrb r3,[r7,#7]
 573 006c 012B     	 cmp r3,#1
 574 006e D3D9     	 bls .L15
 575              	.LBE2:
  91:../variables.h **** 	}
  92:../variables.h **** 
  93:../variables.h **** 	stanowisko.r0 = 130;
 576              	 .loc 4 93 0 is_stmt 1
 577 0070 1B4B     	 ldr r3,.L16
 578 0072 1C4A     	 ldr r2,.L16+4
 579 0074 C3F88420 	 str r2,[r3,#132]
  94:../variables.h **** 	stanowisko.foot.x = 0;
 580              	 .loc 4 94 0
 581 0078 194B     	 ldr r3,.L16
 582 007a 4FF00002 	 mov r2,#0
 583 007e 9A63     	 str r2,[r3,#56]
  95:../variables.h **** 	stanowisko.foot.y = stanowisko.r0;
 584              	 .loc 4 95 0
 585 0080 174B     	 ldr r3,.L16
 586 0082 D3F88430 	 ldr r3,[r3,#132]
 587 0086 164A     	 ldr r2,.L16
 588 0088 D363     	 str r3,[r2,#60]
  96:../variables.h **** 	//Ik(&stanowisko);
  97:../variables.h **** 	stanowisko.r0_angle = stanowisko.teta[0];
 589              	 .loc 4 97 0
 590 008a 154B     	 ldr r3,.L16
 591 008c 1B6D     	 ldr r3,[r3,#80]
 592 008e 144A     	 ldr r2,.L16
 593 0090 C2F88830 	 str r3,[r2,#136]
  98:../variables.h **** 
  99:../variables.h **** 	stanowisko.ks[0] = 180;
 594              	 .loc 4 99 0
 595 0094 124B     	 ldr r3,.L16
 596 0096 B422     	 movs r2,#180
 597 0098 9A84     	 strh r2,[r3,#36]
 100:../variables.h **** 	stanowisko.kd[0] = 800;
 598              	 .loc 4 100 0
 599 009a 114B     	 ldr r3,.L16
 600 009c 4FF44872 	 mov r2,#800
 601 00a0 1A85     	 strh r2,[r3,#40]
 101:../variables.h **** 	stanowisko.ks[1] = 180;
 602              	 .loc 4 101 0
 603 00a2 0F4B     	 ldr r3,.L16
 604 00a4 B422     	 movs r2,#180
 605 00a6 DA84     	 strh r2,[r3,#38]
 102:../variables.h **** 	stanowisko.kd[1] = 800;
 606              	 .loc 4 102 0
 607 00a8 0D4B     	 ldr r3,.L16
 608 00aa 4FF44872 	 mov r2,#800
 609 00ae 5A85     	 strh r2,[r3,#42]
 103:../variables.h **** 
 104:../variables.h **** 	stanowisko.foot.y = 200;
 610              	 .loc 4 104 0
 611 00b0 0B4B     	 ldr r3,.L16
 612 00b2 0D4A     	 ldr r2,.L16+8
 613 00b4 DA63     	 str r2,[r3,#60]
 105:../variables.h **** 	stanowisko.skoki = 0;
 614              	 .loc 4 105 0
 615 00b6 0A4B     	 ldr r3,.L16
 616 00b8 0022     	 movs r2,#0
 617 00ba 83F8A420 	 strb r2,[r3,#164]
 106:../variables.h **** 	stanowisko.ksr = 2;
 618              	 .loc 4 106 0
 619 00be 084B     	 ldr r3,.L16
 620 00c0 4FF08042 	 mov r2,#1073741824
 621 00c4 C3F88C20 	 str r2,[r3,#140]
 107:../variables.h **** 	stanowisko.kdr = 5;
 622              	 .loc 4 107 0
 623 00c8 054B     	 ldr r3,.L16
 624 00ca 084A     	 ldr r2,.L16+12
 625 00cc C3F89020 	 str r2,[r3,#144]
 108:../variables.h **** 	txData[0] = SOF;
 626              	 .loc 4 108 0
 627 00d0 074B     	 ldr r3,.L16+16
 628 00d2 CC22     	 movs r2,#204
 629 00d4 1A70     	 strb r2,[r3]
 109:../variables.h **** }
 630              	 .loc 4 109 0
 631 00d6 0C37     	 adds r7,r7,#12
 632              	.LCFI47:
 633              	 .cfi_def_cfa_offset 4
 634 00d8 BD46     	 mov sp,r7
 635              	.LCFI48:
 636              	 .cfi_def_cfa_register 13
 637              	 
 638 00da 5DF8047B 	 ldr r7,[sp],#4
 639              	.LCFI49:
 640              	 .cfi_restore 7
 641              	 .cfi_def_cfa_offset 0
 642 00de 7047     	 bx lr
 643              	.L17:
 644              	 .align 2
 645              	.L16:
 646 00e0 00000000 	 .word stanowisko
 647 00e4 00000243 	 .word 1124204544
 648 00e8 00004843 	 .word 1128792064
 649 00ec 0000A040 	 .word 1084227584
 650 00f0 00000000 	 .word txData
 651              	 .cfi_endproc
 652              	.LFE323:
 654              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 655              	 .align 2
 656              	 .global CCU43_1_IRQHandler
 657              	 .thumb
 658              	 .thumb_func
 660              	CCU43_1_IRQHandler:
 661              	.LFB324:
 110:../variables.h **** void TIMER_IRQ()				//delay interrupt
 111:../variables.h **** {
 662              	 .loc 4 111 0
 663              	 .cfi_startproc
 664              	 
 665              	 
 666              	 
 667 0000 80B4     	 push {r7}
 668              	.LCFI50:
 669              	 .cfi_def_cfa_offset 4
 670              	 .cfi_offset 7,-4
 671 0002 00AF     	 add r7,sp,#0
 672              	.LCFI51:
 673              	 .cfi_def_cfa_register 7
 112:../variables.h **** 	is_delay = 0;
 674              	 .loc 4 112 0
 675 0004 034B     	 ldr r3,.L19
 676 0006 0022     	 movs r2,#0
 677 0008 1A70     	 strb r2,[r3]
 113:../variables.h **** }
 678              	 .loc 4 113 0
 679 000a BD46     	 mov sp,r7
 680              	.LCFI52:
 681              	 .cfi_def_cfa_register 13
 682              	 
 683 000c 5DF8047B 	 ldr r7,[sp],#4
 684              	.LCFI53:
 685              	 .cfi_restore 7
 686              	 .cfi_def_cfa_offset 0
 687 0010 7047     	 bx lr
 688              	.L20:
 689 0012 00BF     	 .align 2
 690              	.L19:
 691 0014 00000000 	 .word is_delay
 692              	 .cfi_endproc
 693              	.LFE324:
 695              	 .section .text.Ik,"ax",%progbits
 696              	 .align 2
 697              	 .global Ik
 698              	 .thumb
 699              	 .thumb_func
 701              	Ik:
 702              	.LFB325:
 703              	 .file 5 "../kinematics.h"
   1:../kinematics.h **** /*
   2:../kinematics.h ****  * kinematics.h
   3:../kinematics.h ****  *
   4:../kinematics.h ****  *  Created on: 11 Jan 2018
   5:../kinematics.h ****  *      Author: Mafish
   6:../kinematics.h ****  */
   7:../kinematics.h **** 
   8:../kinematics.h **** void Ik(struct Leg *n);		//Inverse kinematics
   9:../kinematics.h **** void Fk(struct Leg *n);	//Forward kinematics
  10:../kinematics.h **** void Update(struct Leg *n);	//Update floating numbers from raw data from motor drivers
  11:../kinematics.h **** void Trajectory(struct Leg *n);		//calculate trajectory for selected leg
  12:../kinematics.h **** 
  13:../kinematics.h **** void Ik(struct Leg *n)		//Inverse kinematics for (Leg)
  14:../kinematics.h **** {
 704              	 .loc 5 14 0
 705              	 .cfi_startproc
 706              	 
 707              	 
 708 0000 80B5     	 push {r7,lr}
 709              	.LCFI54:
 710              	 .cfi_def_cfa_offset 8
 711              	 .cfi_offset 7,-8
 712              	 .cfi_offset 14,-4
 713 0002 8AB0     	 sub sp,sp,#40
 714              	.LCFI55:
 715              	 .cfi_def_cfa_offset 48
 716 0004 00AF     	 add r7,sp,#0
 717              	.LCFI56:
 718              	 .cfi_def_cfa_register 7
 719 0006 7860     	 str r0,[r7,#4]
  15:../kinematics.h **** 	float x = n->foot.x;
 720              	 .loc 5 15 0
 721 0008 7B68     	 ldr r3,[r7,#4]
 722 000a 9B6B     	 ldr r3,[r3,#56]
 723 000c 7B62     	 str r3,[r7,#36]
  16:../kinematics.h **** 	float y = n->foot.y;
 724              	 .loc 5 16 0
 725 000e 7B68     	 ldr r3,[r7,#4]
 726 0010 DB6B     	 ldr r3,[r3,#60]
 727 0012 3B62     	 str r3,[r7,#32]
  17:../kinematics.h **** 	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 728              	 .loc 5 17 0
 729 0014 6E4B     	 ldr r3,.L22
 730 0016 D3ED007A 	 flds s15,[r3]
 731 001a B0EE007A 	 fconsts s14,#0
 732 001e 87EE877A 	 fdivs s14,s15,s14
 733 0022 D7ED097A 	 flds s15,[r7,#36]
 734 0026 37EE677A 	 fsubs s14,s14,s15
 735 002a 694B     	 ldr r3,.L22
 736 002c D3ED007A 	 flds s15,[r3]
 737 0030 F0EE006A 	 fconsts s13,#0
 738 0034 C7EEA66A 	 fdivs s13,s15,s13
 739 0038 D7ED097A 	 flds s15,[r7,#36]
 740 003c 76EEE77A 	 fsubs s15,s13,s15
 741 0040 27EE277A 	 fmuls s14,s14,s15
 742 0044 D7ED086A 	 flds s13,[r7,#32]
 743 0048 D7ED087A 	 flds s15,[r7,#32]
 744 004c 66EEA77A 	 fmuls s15,s13,s15
 745 0050 77EE277A 	 fadds s15,s14,s15
 746 0054 17EE900A 	 fmrs r0,s15
 747 0058 FFF7FEFF 	 bl sqrtf
 748 005c F861     	 str r0,[r7,#28]
  18:../kinematics.h **** 	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 749              	 .loc 5 18 0
 750 005e 5C4B     	 ldr r3,.L22
 751 0060 D3ED007A 	 flds s15,[r3]
 752 0064 B0EE007A 	 fconsts s14,#0
 753 0068 87EE877A 	 fdivs s14,s15,s14
 754 006c D7ED097A 	 flds s15,[r7,#36]
 755 0070 37EE277A 	 fadds s14,s14,s15
 756 0074 564B     	 ldr r3,.L22
 757 0076 D3ED007A 	 flds s15,[r3]
 758 007a F0EE006A 	 fconsts s13,#0
 759 007e C7EEA66A 	 fdivs s13,s15,s13
 760 0082 D7ED097A 	 flds s15,[r7,#36]
 761 0086 76EEA77A 	 fadds s15,s13,s15
 762 008a 27EE277A 	 fmuls s14,s14,s15
 763 008e D7ED086A 	 flds s13,[r7,#32]
 764 0092 D7ED087A 	 flds s15,[r7,#32]
 765 0096 66EEA77A 	 fmuls s15,s13,s15
 766 009a 77EE277A 	 fadds s15,s14,s15
 767 009e 17EE900A 	 fmrs r0,s15
 768 00a2 FFF7FEFF 	 bl sqrtf
 769 00a6 B861     	 str r0,[r7,#24]
  19:../kinematics.h **** 	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 770              	 .loc 5 19 0
 771 00a8 4A4B     	 ldr r3,.L22+4
 772 00aa 93ED007A 	 flds s14,[r3]
 773 00ae 494B     	 ldr r3,.L22+4
 774 00b0 D3ED007A 	 flds s15,[r3]
 775 00b4 27EE277A 	 fmuls s14,s14,s15
 776 00b8 D7ED076A 	 flds s13,[r7,#28]
 777 00bc D7ED077A 	 flds s15,[r7,#28]
 778 00c0 66EEA77A 	 fmuls s15,s13,s15
 779 00c4 37EE277A 	 fadds s14,s14,s15
 780 00c8 434B     	 ldr r3,.L22+8
 781 00ca D3ED006A 	 flds s13,[r3]
 782 00ce 424B     	 ldr r3,.L22+8
 783 00d0 D3ED007A 	 flds s15,[r3]
 784 00d4 66EEA77A 	 fmuls s15,s13,s15
 785 00d8 37EE677A 	 fsubs s14,s14,s15
 786 00dc 3D4B     	 ldr r3,.L22+4
 787 00de D3ED007A 	 flds s15,[r3]
 788 00e2 77EEA76A 	 fadds s13,s15,s15
 789 00e6 D7ED077A 	 flds s15,[r7,#28]
 790 00ea 66EEA77A 	 fmuls s15,s13,s15
 791 00ee C7EE277A 	 fdivs s15,s14,s15
 792 00f2 C7ED057A 	 fsts s15,[r7,#20]
  20:../kinematics.h **** 	fi1 = acosf(fi1);
 793              	 .loc 5 20 0
 794 00f6 7869     	 ldr r0,[r7,#20]
 795 00f8 FFF7FEFF 	 bl acosf
 796 00fc 7861     	 str r0,[r7,#20]
  21:../kinematics.h **** 	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 797              	 .loc 5 21 0
 798 00fe 354B     	 ldr r3,.L22+4
 799 0100 93ED007A 	 flds s14,[r3]
 800 0104 334B     	 ldr r3,.L22+4
 801 0106 D3ED007A 	 flds s15,[r3]
 802 010a 27EE277A 	 fmuls s14,s14,s15
 803 010e D7ED066A 	 flds s13,[r7,#24]
 804 0112 D7ED067A 	 flds s15,[r7,#24]
 805 0116 66EEA77A 	 fmuls s15,s13,s15
 806 011a 37EE277A 	 fadds s14,s14,s15
 807 011e 2E4B     	 ldr r3,.L22+8
 808 0120 D3ED006A 	 flds s13,[r3]
 809 0124 2C4B     	 ldr r3,.L22+8
 810 0126 D3ED007A 	 flds s15,[r3]
 811 012a 66EEA77A 	 fmuls s15,s13,s15
 812 012e 37EE677A 	 fsubs s14,s14,s15
 813 0132 284B     	 ldr r3,.L22+4
 814 0134 D3ED007A 	 flds s15,[r3]
 815 0138 77EEA76A 	 fadds s13,s15,s15
 816 013c D7ED067A 	 flds s15,[r7,#24]
 817 0140 66EEA77A 	 fmuls s15,s13,s15
 818 0144 C7EE277A 	 fdivs s15,s14,s15
 819 0148 C7ED047A 	 fsts s15,[r7,#16]
  22:../kinematics.h **** 	fi2 = acosf(fi2);
 820              	 .loc 5 22 0
 821 014c 3869     	 ldr r0,[r7,#16]
 822 014e FFF7FEFF 	 bl acosf
 823 0152 3861     	 str r0,[r7,#16]
  23:../kinematics.h **** 	float psi1 = asinf(((d/2)-x)/La);
 824              	 .loc 5 23 0
 825 0154 1E4B     	 ldr r3,.L22
 826 0156 D3ED007A 	 flds s15,[r3]
 827 015a B0EE007A 	 fconsts s14,#0
 828 015e 87EE877A 	 fdivs s14,s15,s14
 829 0162 D7ED097A 	 flds s15,[r7,#36]
 830 0166 37EE677A 	 fsubs s14,s14,s15
 831 016a D7ED077A 	 flds s15,[r7,#28]
 832 016e C7EE277A 	 fdivs s15,s14,s15
 833 0172 17EE900A 	 fmrs r0,s15
 834 0176 FFF7FEFF 	 bl asinf
 835 017a F860     	 str r0,[r7,#12]
  24:../kinematics.h **** 	float psi2 = asinf(((d/2)+x)/Lb);
 836              	 .loc 5 24 0
 837 017c 144B     	 ldr r3,.L22
 838 017e D3ED007A 	 flds s15,[r3]
 839 0182 B0EE007A 	 fconsts s14,#0
 840 0186 87EE877A 	 fdivs s14,s15,s14
 841 018a D7ED097A 	 flds s15,[r7,#36]
 842 018e 37EE277A 	 fadds s14,s14,s15
 843 0192 D7ED067A 	 flds s15,[r7,#24]
 844 0196 C7EE277A 	 fdivs s15,s14,s15
 845 019a 17EE900A 	 fmrs r0,s15
 846 019e FFF7FEFF 	 bl asinf
 847 01a2 B860     	 str r0,[r7,#8]
  25:../kinematics.h **** 
  26:../kinematics.h **** 	n->teta[0] = fi1 - psi1;
 848              	 .loc 5 26 0
 849 01a4 97ED057A 	 flds s14,[r7,#20]
 850 01a8 D7ED037A 	 flds s15,[r7,#12]
 851 01ac 77EE677A 	 fsubs s15,s14,s15
 852 01b0 7B68     	 ldr r3,[r7,#4]
 853 01b2 C3ED147A 	 fsts s15,[r3,#80]
  27:../kinematics.h **** 	n->teta[1] = fi2 - psi2;
 854              	 .loc 5 27 0
 855 01b6 97ED047A 	 flds s14,[r7,#16]
 856 01ba D7ED027A 	 flds s15,[r7,#8]
 857 01be 77EE677A 	 fsubs s15,s14,s15
 858 01c2 7B68     	 ldr r3,[r7,#4]
 859 01c4 C3ED157A 	 fsts s15,[r3,#84]
  28:../kinematics.h **** }
 860              	 .loc 5 28 0
 861 01c8 2837     	 adds r7,r7,#40
 862              	.LCFI57:
 863              	 .cfi_def_cfa_offset 8
 864 01ca BD46     	 mov sp,r7
 865              	.LCFI58:
 866              	 .cfi_def_cfa_register 13
 867              	 
 868 01cc 80BD     	 pop {r7,pc}
 869              	.L23:
 870 01ce 00BF     	 .align 2
 871              	.L22:
 872 01d0 00000000 	 .word d
 873 01d4 00000000 	 .word l1
 874 01d8 00000000 	 .word l2
 875              	 .cfi_endproc
 876              	.LFE325:
 878              	 .section .text.Fk,"ax",%progbits
 879              	 .align 2
 880              	 .global Fk
 881              	 .thumb
 882              	 .thumb_func
 884              	Fk:
 885              	.LFB326:
  29:../kinematics.h **** void Fk(struct Leg *n)		//Forward kinematics for (Leg)
  30:../kinematics.h **** {
 886              	 .loc 5 30 0
 887              	 .cfi_startproc
 888              	 
 889              	 
 890 0000 80B5     	 push {r7,lr}
 891              	.LCFI59:
 892              	 .cfi_def_cfa_offset 8
 893              	 .cfi_offset 7,-8
 894              	 .cfi_offset 14,-4
 895 0002 2DED028B 	 fstmfdd sp!,{d8}
 896              	.LCFI60:
 897              	 .cfi_def_cfa_offset 16
 898              	 .cfi_offset 80,-16
 899              	 .cfi_offset 81,-12
 900 0006 94B0     	 sub sp,sp,#80
 901              	.LCFI61:
 902              	 .cfi_def_cfa_offset 96
 903 0008 00AF     	 add r7,sp,#0
 904              	.LCFI62:
 905              	 .cfi_def_cfa_register 7
 906 000a 7860     	 str r0,[r7,#4]
  31:../kinematics.h **** 	float a = d+l1*(sinf(n->teta[0])+sinf(n->teta[1]));
 907              	 .loc 5 31 0
 908 000c 7B68     	 ldr r3,[r7,#4]
 909 000e 1B6D     	 ldr r3,[r3,#80]
 910 0010 1846     	 mov r0,r3
 911 0012 FFF7FEFF 	 bl sinf
 912 0016 08EE100A 	 fmsr s16,r0
 913 001a 7B68     	 ldr r3,[r7,#4]
 914 001c 5B6D     	 ldr r3,[r3,#84]
 915 001e 1846     	 mov r0,r3
 916 0020 FFF7FEFF 	 bl sinf
 917 0024 07EE900A 	 fmsr s15,r0
 918 0028 38EE277A 	 fadds s14,s16,s15
 919 002c D74B     	 ldr r3,.L27
 920 002e D3ED007A 	 flds s15,[r3]
 921 0032 27EE277A 	 fmuls s14,s14,s15
 922 0036 D64B     	 ldr r3,.L27+4
 923 0038 D3ED007A 	 flds s15,[r3]
 924 003c 77EE277A 	 fadds s15,s14,s15
 925 0040 C7ED127A 	 fsts s15,[r7,#72]
  32:../kinematics.h **** 	float b = l1*(cosf(n->teta[1])-cosf(n->teta[0]));
 926              	 .loc 5 32 0
 927 0044 7B68     	 ldr r3,[r7,#4]
 928 0046 5B6D     	 ldr r3,[r3,#84]
 929 0048 1846     	 mov r0,r3
 930 004a FFF7FEFF 	 bl cosf
 931 004e 08EE100A 	 fmsr s16,r0
 932 0052 7B68     	 ldr r3,[r7,#4]
 933 0054 1B6D     	 ldr r3,[r3,#80]
 934 0056 1846     	 mov r0,r3
 935 0058 FFF7FEFF 	 bl cosf
 936 005c 07EE900A 	 fmsr s15,r0
 937 0060 38EE677A 	 fsubs s14,s16,s15
 938 0064 C94B     	 ldr r3,.L27
 939 0066 D3ED007A 	 flds s15,[r3]
 940 006a 67EE277A 	 fmuls s15,s14,s15
 941 006e C7ED117A 	 fsts s15,[r7,#68]
  33:../kinematics.h **** 	float p = sqrtf(a*a+b*b);
 942              	 .loc 5 33 0
 943 0072 97ED127A 	 flds s14,[r7,#72]
 944 0076 D7ED127A 	 flds s15,[r7,#72]
 945 007a 27EE277A 	 fmuls s14,s14,s15
 946 007e D7ED116A 	 flds s13,[r7,#68]
 947 0082 D7ED117A 	 flds s15,[r7,#68]
 948 0086 66EEA77A 	 fmuls s15,s13,s15
 949 008a 77EE277A 	 fadds s15,s14,s15
 950 008e 17EE900A 	 fmrs r0,s15
 951 0092 FFF7FEFF 	 bl sqrtf
 952 0096 3864     	 str r0,[r7,#64]
  34:../kinematics.h **** 	float fi = atan2f(b,a);
 953              	 .loc 5 34 0
 954 0098 786C     	 ldr r0,[r7,#68]
 955 009a B96C     	 ldr r1,[r7,#72]
 956 009c FFF7FEFF 	 bl atan2f
 957 00a0 F863     	 str r0,[r7,#60]
  35:../kinematics.h **** 	float theta = asinf(p/(2*l2));
 958              	 .loc 5 35 0
 959 00a2 BC4B     	 ldr r3,.L27+8
 960 00a4 D3ED007A 	 flds s15,[r3]
 961 00a8 77EEA77A 	 fadds s15,s15,s15
 962 00ac 97ED107A 	 flds s14,[r7,#64]
 963 00b0 C7EE277A 	 fdivs s15,s14,s15
 964 00b4 17EE900A 	 fmrs r0,s15
 965 00b8 FFF7FEFF 	 bl asinf
 966 00bc B863     	 str r0,[r7,#56]
  36:../kinematics.h **** 	float gama = (pi/2)-theta;
 967              	 .loc 5 36 0
 968 00be B64B     	 ldr r3,.L27+12
 969 00c0 D3ED007A 	 flds s15,[r3]
 970 00c4 B0EE007A 	 fconsts s14,#0
 971 00c8 87EE877A 	 fdivs s14,s15,s14
 972 00cc D7ED0E7A 	 flds s15,[r7,#56]
 973 00d0 77EE677A 	 fsubs s15,s14,s15
 974 00d4 C7ED0D7A 	 fsts s15,[r7,#52]
  37:../kinematics.h **** 	float psi = gama+fi;
 975              	 .loc 5 37 0
 976 00d8 97ED0D7A 	 flds s14,[r7,#52]
 977 00dc D7ED0F7A 	 flds s15,[r7,#60]
 978 00e0 77EE277A 	 fadds s15,s14,s15
 979 00e4 C7ED0C7A 	 fsts s15,[r7,#48]
  38:../kinematics.h **** 
  39:../kinematics.h **** 	n->real_foot.x = -(d/2) - l1*sinf(n->ang_abs_rad[0]) + l2*cosf(psi);	//Forward kinematics
 980              	 .loc 5 39 0
 981 00e8 A94B     	 ldr r3,.L27+4
 982 00ea D3ED007A 	 flds s15,[r3]
 983 00ee B0EE007A 	 fconsts s14,#0
 984 00f2 C7EE877A 	 fdivs s15,s15,s14
 985 00f6 B1EE678A 	 fnegs s16,s15
 986 00fa 7B68     	 ldr r3,[r7,#4]
 987 00fc 9B6D     	 ldr r3,[r3,#88]
 988 00fe 1846     	 mov r0,r3
 989 0100 FFF7FEFF 	 bl sinf
 990 0104 07EE100A 	 fmsr s14,r0
 991 0108 A04B     	 ldr r3,.L27
 992 010a D3ED007A 	 flds s15,[r3]
 993 010e 67EE277A 	 fmuls s15,s14,s15
 994 0112 38EE678A 	 fsubs s16,s16,s15
 995 0116 386B     	 ldr r0,[r7,#48]
 996 0118 FFF7FEFF 	 bl cosf
 997 011c 07EE100A 	 fmsr s14,r0
 998 0120 9C4B     	 ldr r3,.L27+8
 999 0122 D3ED007A 	 flds s15,[r3]
 1000 0126 67EE277A 	 fmuls s15,s14,s15
 1001 012a 78EE277A 	 fadds s15,s16,s15
 1002 012e 7B68     	 ldr r3,[r7,#4]
 1003 0130 C3ED107A 	 fsts s15,[r3,#64]
  40:../kinematics.h **** 	n->real_foot.y = l1*cosf(n->ang_abs_rad[0]) + l2*sinf(psi);
 1004              	 .loc 5 40 0
 1005 0134 7B68     	 ldr r3,[r7,#4]
 1006 0136 9B6D     	 ldr r3,[r3,#88]
 1007 0138 1846     	 mov r0,r3
 1008 013a FFF7FEFF 	 bl cosf
 1009 013e 07EE100A 	 fmsr s14,r0
 1010 0142 924B     	 ldr r3,.L27
 1011 0144 D3ED007A 	 flds s15,[r3]
 1012 0148 27EE278A 	 fmuls s16,s14,s15
 1013 014c 386B     	 ldr r0,[r7,#48]
 1014 014e FFF7FEFF 	 bl sinf
 1015 0152 07EE100A 	 fmsr s14,r0
 1016 0156 8F4B     	 ldr r3,.L27+8
 1017 0158 D3ED007A 	 flds s15,[r3]
 1018 015c 67EE277A 	 fmuls s15,s14,s15
 1019 0160 78EE277A 	 fadds s15,s16,s15
 1020 0164 7B68     	 ldr r3,[r7,#4]
 1021 0166 C3ED117A 	 fsts s15,[r3,#68]
  41:../kinematics.h **** 
  42:../kinematics.h **** 	float A = a*cosf(n->teta[0])+b*sinf(n->teta[0]);
 1022              	 .loc 5 42 0
 1023 016a 7B68     	 ldr r3,[r7,#4]
 1024 016c 1B6D     	 ldr r3,[r3,#80]
 1025 016e 1846     	 mov r0,r3
 1026 0170 FFF7FEFF 	 bl cosf
 1027 0174 07EE100A 	 fmsr s14,r0
 1028 0178 D7ED127A 	 flds s15,[r7,#72]
 1029 017c 27EE278A 	 fmuls s16,s14,s15
 1030 0180 7B68     	 ldr r3,[r7,#4]
 1031 0182 1B6D     	 ldr r3,[r3,#80]
 1032 0184 1846     	 mov r0,r3
 1033 0186 FFF7FEFF 	 bl sinf
 1034 018a 07EE100A 	 fmsr s14,r0
 1035 018e D7ED117A 	 flds s15,[r7,#68]
 1036 0192 67EE277A 	 fmuls s15,s14,s15
 1037 0196 78EE277A 	 fadds s15,s16,s15
 1038 019a C7ED0B7A 	 fsts s15,[r7,#44]
  43:../kinematics.h **** 	float B = sqrtf((a*a+b*b)*(4*l2*l2-p*p));
 1039              	 .loc 5 43 0
 1040 019e 97ED127A 	 flds s14,[r7,#72]
 1041 01a2 D7ED127A 	 flds s15,[r7,#72]
 1042 01a6 27EE277A 	 fmuls s14,s14,s15
 1043 01aa D7ED116A 	 flds s13,[r7,#68]
 1044 01ae D7ED117A 	 flds s15,[r7,#68]
 1045 01b2 66EEA77A 	 fmuls s15,s13,s15
 1046 01b6 37EE277A 	 fadds s14,s14,s15
 1047 01ba 764B     	 ldr r3,.L27+8
 1048 01bc D3ED007A 	 flds s15,[r3]
 1049 01c0 F1EE006A 	 fconsts s13,#16
 1050 01c4 67EEA66A 	 fmuls s13,s15,s13
 1051 01c8 724B     	 ldr r3,.L27+8
 1052 01ca D3ED007A 	 flds s15,[r3]
 1053 01ce 66EEA76A 	 fmuls s13,s13,s15
 1054 01d2 97ED106A 	 flds s12,[r7,#64]
 1055 01d6 D7ED107A 	 flds s15,[r7,#64]
 1056 01da 66EE277A 	 fmuls s15,s12,s15
 1057 01de 76EEE77A 	 fsubs s15,s13,s15
 1058 01e2 67EE277A 	 fmuls s15,s14,s15
 1059 01e6 17EE900A 	 fmrs r0,s15
 1060 01ea FFF7FEFF 	 bl sqrtf
 1061 01ee B862     	 str r0,[r7,#40]
  44:../kinematics.h **** 	float C = a*sinf(n->teta[0])-b*cosf(n->teta[0]);
 1062              	 .loc 5 44 0
 1063 01f0 7B68     	 ldr r3,[r7,#4]
 1064 01f2 1B6D     	 ldr r3,[r3,#80]
 1065 01f4 1846     	 mov r0,r3
 1066 01f6 FFF7FEFF 	 bl sinf
 1067 01fa 07EE100A 	 fmsr s14,r0
 1068 01fe D7ED127A 	 flds s15,[r7,#72]
 1069 0202 27EE278A 	 fmuls s16,s14,s15
 1070 0206 7B68     	 ldr r3,[r7,#4]
 1071 0208 1B6D     	 ldr r3,[r3,#80]
 1072 020a 1846     	 mov r0,r3
 1073 020c FFF7FEFF 	 bl cosf
 1074 0210 07EE100A 	 fmsr s14,r0
 1075 0214 D7ED117A 	 flds s15,[r7,#68]
 1076 0218 67EE277A 	 fmuls s15,s14,s15
 1077 021c 78EE677A 	 fsubs s15,s16,s15
 1078 0220 C7ED097A 	 fsts s15,[r7,#36]
  45:../kinematics.h **** 	float D = a*a+b*b;
 1079              	 .loc 5 45 0
 1080 0224 97ED127A 	 flds s14,[r7,#72]
 1081 0228 D7ED127A 	 flds s15,[r7,#72]
 1082 022c 27EE277A 	 fmuls s14,s14,s15
 1083 0230 D7ED116A 	 flds s13,[r7,#68]
 1084 0234 D7ED117A 	 flds s15,[r7,#68]
 1085 0238 66EEA77A 	 fmuls s15,s13,s15
 1086 023c 77EE277A 	 fadds s15,s14,s15
 1087 0240 C7ED087A 	 fsts s15,[r7,#32]
  46:../kinematics.h **** 	float E = a*cosf(n->teta[1])-b*sinf(n->teta[1]);
 1088              	 .loc 5 46 0
 1089 0244 7B68     	 ldr r3,[r7,#4]
 1090 0246 5B6D     	 ldr r3,[r3,#84]
 1091 0248 1846     	 mov r0,r3
 1092 024a FFF7FEFF 	 bl cosf
 1093 024e 07EE100A 	 fmsr s14,r0
 1094 0252 D7ED127A 	 flds s15,[r7,#72]
 1095 0256 27EE278A 	 fmuls s16,s14,s15
 1096 025a 7B68     	 ldr r3,[r7,#4]
 1097 025c 5B6D     	 ldr r3,[r3,#84]
 1098 025e 1846     	 mov r0,r3
 1099 0260 FFF7FEFF 	 bl sinf
 1100 0264 07EE100A 	 fmsr s14,r0
 1101 0268 D7ED117A 	 flds s15,[r7,#68]
 1102 026c 67EE277A 	 fmuls s15,s14,s15
 1103 0270 78EE677A 	 fsubs s15,s16,s15
 1104 0274 C7ED077A 	 fsts s15,[r7,#28]
  47:../kinematics.h **** 	float F = a*sinf(n->teta[1])+b*cosf(n->teta[1]);
 1105              	 .loc 5 47 0
 1106 0278 7B68     	 ldr r3,[r7,#4]
 1107 027a 5B6D     	 ldr r3,[r3,#84]
 1108 027c 1846     	 mov r0,r3
 1109 027e FFF7FEFF 	 bl sinf
 1110 0282 07EE100A 	 fmsr s14,r0
 1111 0286 D7ED127A 	 flds s15,[r7,#72]
 1112 028a 27EE278A 	 fmuls s16,s14,s15
 1113 028e 7B68     	 ldr r3,[r7,#4]
 1114 0290 5B6D     	 ldr r3,[r3,#84]
 1115 0292 1846     	 mov r0,r3
 1116 0294 FFF7FEFF 	 bl cosf
 1117 0298 07EE100A 	 fmsr s14,r0
 1118 029c D7ED117A 	 flds s15,[r7,#68]
 1119 02a0 67EE277A 	 fmuls s15,s14,s15
 1120 02a4 78EE277A 	 fadds s15,s16,s15
 1121 02a8 C7ED067A 	 fsts s15,[r7,#24]
  48:../kinematics.h ****   	n->J[0][0] = -l1*l2*sinf(psi)*(-(A/B)+(C/D))-l1*cosf(n->teta[0]);
 1122              	 .loc 5 48 0
 1123 02ac 374B     	 ldr r3,.L27
 1124 02ae D3ED007A 	 flds s15,[r3]
 1125 02b2 B1EE677A 	 fnegs s14,s15
 1126 02b6 374B     	 ldr r3,.L27+8
 1127 02b8 D3ED007A 	 flds s15,[r3]
 1128 02bc 27EE278A 	 fmuls s16,s14,s15
 1129 02c0 386B     	 ldr r0,[r7,#48]
 1130 02c2 FFF7FEFF 	 bl sinf
 1131 02c6 07EE900A 	 fmsr s15,r0
 1132 02ca 28EE277A 	 fmuls s14,s16,s15
 1133 02ce D7ED096A 	 flds s13,[r7,#36]
 1134 02d2 D7ED087A 	 flds s15,[r7,#32]
 1135 02d6 C6EEA76A 	 fdivs s13,s13,s15
 1136 02da 97ED0B6A 	 flds s12,[r7,#44]
 1137 02de D7ED0A7A 	 flds s15,[r7,#40]
 1138 02e2 C6EE277A 	 fdivs s15,s12,s15
 1139 02e6 76EEE77A 	 fsubs s15,s13,s15
 1140 02ea 27EE278A 	 fmuls s16,s14,s15
 1141 02ee 7B68     	 ldr r3,[r7,#4]
 1142 02f0 1B6D     	 ldr r3,[r3,#80]
 1143 02f2 1846     	 mov r0,r3
 1144 02f4 FFF7FEFF 	 bl cosf
 1145 02f8 07EE100A 	 fmsr s14,r0
 1146 02fc 234B     	 ldr r3,.L27
 1147 02fe D3ED007A 	 flds s15,[r3]
 1148 0302 67EE277A 	 fmuls s15,s14,s15
 1149 0306 78EE677A 	 fsubs s15,s16,s15
 1150 030a 7B68     	 ldr r3,[r7,#4]
 1151 030c C3ED257A 	 fsts s15,[r3,#148]
  49:../kinematics.h ****   	n->J[0][1] = -l1*cosf(n->teta[0])+l1*l2*cosf(psi)*(-(A/B)+(C/D));
 1152              	 .loc 5 49 0
 1153 0310 1E4B     	 ldr r3,.L27
 1154 0312 D3ED007A 	 flds s15,[r3]
 1155 0316 B1EE678A 	 fnegs s16,s15
 1156 031a 7B68     	 ldr r3,[r7,#4]
 1157 031c 1B6D     	 ldr r3,[r3,#80]
 1158 031e 1846     	 mov r0,r3
 1159 0320 FFF7FEFF 	 bl cosf
 1160 0324 07EE900A 	 fmsr s15,r0
 1161 0328 28EE278A 	 fmuls s16,s16,s15
 1162 032c 174B     	 ldr r3,.L27
 1163 032e 93ED007A 	 flds s14,[r3]
 1164 0332 184B     	 ldr r3,.L27+8
 1165 0334 D3ED007A 	 flds s15,[r3]
 1166 0338 67EE278A 	 fmuls s17,s14,s15
 1167 033c 386B     	 ldr r0,[r7,#48]
 1168 033e FFF7FEFF 	 bl cosf
 1169 0342 07EE900A 	 fmsr s15,r0
 1170 0346 28EEA77A 	 fmuls s14,s17,s15
 1171 034a D7ED096A 	 flds s13,[r7,#36]
 1172 034e D7ED087A 	 flds s15,[r7,#32]
 1173 0352 C6EEA76A 	 fdivs s13,s13,s15
 1174 0356 97ED0B6A 	 flds s12,[r7,#44]
 1175 035a D7ED0A7A 	 flds s15,[r7,#40]
 1176 035e C6EE277A 	 fdivs s15,s12,s15
 1177 0362 76EEE77A 	 fsubs s15,s13,s15
 1178 0366 67EE277A 	 fmuls s15,s14,s15
 1179 036a 78EE277A 	 fadds s15,s16,s15
 1180 036e 7B68     	 ldr r3,[r7,#4]
 1181 0370 C3ED267A 	 fsts s15,[r3,#152]
  50:../kinematics.h ****   	n->J[1][0] = -l1*l2*sinf(psi)*(-(E/B)+(F/D));
 1182              	 .loc 5 50 0
 1183 0374 054B     	 ldr r3,.L27
 1184 0376 D3ED007A 	 flds s15,[r3]
 1185 037a B1EE677A 	 fnegs s14,s15
 1186 037e 054B     	 ldr r3,.L27+8
 1187 0380 D3ED007A 	 flds s15,[r3]
 1188 0384 27EE278A 	 fmuls s16,s14,s15
 1189 0388 386B     	 ldr r0,[r7,#48]
 1190 038a 07E0     	 b .L28
 1191              	.L29:
 1192              	 .align 2
 1193              	.L27:
 1194 038c 00000000 	 .word l1
 1195 0390 00000000 	 .word d
 1196 0394 00000000 	 .word l2
 1197 0398 00000000 	 .word pi
 1198              	.L28:
 1199 039c FFF7FEFF 	 bl sinf
 1200 03a0 07EE900A 	 fmsr s15,r0
 1201 03a4 28EE277A 	 fmuls s14,s16,s15
 1202 03a8 D7ED066A 	 flds s13,[r7,#24]
 1203 03ac D7ED087A 	 flds s15,[r7,#32]
 1204 03b0 C6EEA76A 	 fdivs s13,s13,s15
 1205 03b4 97ED076A 	 flds s12,[r7,#28]
 1206 03b8 D7ED0A7A 	 flds s15,[r7,#40]
 1207 03bc C6EE277A 	 fdivs s15,s12,s15
 1208 03c0 76EEE77A 	 fsubs s15,s13,s15
 1209 03c4 67EE277A 	 fmuls s15,s14,s15
 1210 03c8 7B68     	 ldr r3,[r7,#4]
 1211 03ca C3ED277A 	 fsts s15,[r3,#156]
  51:../kinematics.h ****   	n->J[1][1] = l1*l2*sinf(psi)*(-(E/B)+(F/D));
 1212              	 .loc 5 51 0
 1213 03ce 5F4B     	 ldr r3,.L30
 1214 03d0 93ED007A 	 flds s14,[r3]
 1215 03d4 5E4B     	 ldr r3,.L30+4
 1216 03d6 D3ED007A 	 flds s15,[r3]
 1217 03da 27EE278A 	 fmuls s16,s14,s15
 1218 03de 386B     	 ldr r0,[r7,#48]
 1219 03e0 FFF7FEFF 	 bl sinf
 1220 03e4 07EE900A 	 fmsr s15,r0
 1221 03e8 28EE277A 	 fmuls s14,s16,s15
 1222 03ec D7ED066A 	 flds s13,[r7,#24]
 1223 03f0 D7ED087A 	 flds s15,[r7,#32]
 1224 03f4 C6EEA76A 	 fdivs s13,s13,s15
 1225 03f8 97ED076A 	 flds s12,[r7,#28]
 1226 03fc D7ED0A7A 	 flds s15,[r7,#40]
 1227 0400 C6EE277A 	 fdivs s15,s12,s15
 1228 0404 76EEE77A 	 fsubs s15,s13,s15
 1229 0408 67EE277A 	 fmuls s15,s14,s15
 1230 040c 7B68     	 ldr r3,[r7,#4]
 1231 040e C3ED287A 	 fsts s15,[r3,#160]
  52:../kinematics.h **** 
  53:../kinematics.h ****   	float mianownik = n->J[0][0]*n->J[1][1] - n->J[0][1]*n->J[1][0];
 1232              	 .loc 5 53 0
 1233 0412 7B68     	 ldr r3,[r7,#4]
 1234 0414 93ED257A 	 flds s14,[r3,#148]
 1235 0418 7B68     	 ldr r3,[r7,#4]
 1236 041a D3ED287A 	 flds s15,[r3,#160]
 1237 041e 27EE277A 	 fmuls s14,s14,s15
 1238 0422 7B68     	 ldr r3,[r7,#4]
 1239 0424 D3ED266A 	 flds s13,[r3,#152]
 1240 0428 7B68     	 ldr r3,[r7,#4]
 1241 042a D3ED277A 	 flds s15,[r3,#156]
 1242 042e 66EEA77A 	 fmuls s15,s13,s15
 1243 0432 77EE677A 	 fsubs s15,s14,s15
 1244 0436 C7ED057A 	 fsts s15,[r7,#20]
  54:../kinematics.h ****   	float H = n->J[1][1]*n->torque[0] - n->J[0][1]*n->torque[1];
 1245              	 .loc 5 54 0
 1246 043a 7B68     	 ldr r3,[r7,#4]
 1247 043c 93ED287A 	 flds s14,[r3,#160]
 1248 0440 7B68     	 ldr r3,[r7,#4]
 1249 0442 D3ED1F7A 	 flds s15,[r3,#124]
 1250 0446 27EE277A 	 fmuls s14,s14,s15
 1251 044a 7B68     	 ldr r3,[r7,#4]
 1252 044c D3ED266A 	 flds s13,[r3,#152]
 1253 0450 7B68     	 ldr r3,[r7,#4]
 1254 0452 D3ED207A 	 flds s15,[r3,#128]
 1255 0456 66EEA77A 	 fmuls s15,s13,s15
 1256 045a 77EE677A 	 fsubs s15,s14,s15
 1257 045e C7ED047A 	 fsts s15,[r7,#16]
  55:../kinematics.h ****   	float I = n->J[0][0] * n->torque[1] - n->J[1][0] * n->torque[0];
 1258              	 .loc 5 55 0
 1259 0462 7B68     	 ldr r3,[r7,#4]
 1260 0464 93ED257A 	 flds s14,[r3,#148]
 1261 0468 7B68     	 ldr r3,[r7,#4]
 1262 046a D3ED207A 	 flds s15,[r3,#128]
 1263 046e 27EE277A 	 fmuls s14,s14,s15
 1264 0472 7B68     	 ldr r3,[r7,#4]
 1265 0474 D3ED276A 	 flds s13,[r3,#156]
 1266 0478 7B68     	 ldr r3,[r7,#4]
 1267 047a D3ED1F7A 	 flds s15,[r3,#124]
 1268 047e 66EEA77A 	 fmuls s15,s13,s15
 1269 0482 77EE677A 	 fsubs s15,s14,s15
 1270 0486 C7ED037A 	 fsts s15,[r7,#12]
  56:../kinematics.h **** 
  57:../kinematics.h **** 
  58:../kinematics.h ****   	n->real_speed.x = n->J[0][0] * n->predkosc_silnika[0] + n->J[0][1] * n->predkosc_silnika[1];
 1271              	 .loc 5 58 0
 1272 048a 7B68     	 ldr r3,[r7,#4]
 1273 048c 93ED257A 	 flds s14,[r3,#148]
 1274 0490 7B68     	 ldr r3,[r7,#4]
 1275 0492 D3ED077A 	 flds s15,[r3,#28]
 1276 0496 27EE277A 	 fmuls s14,s14,s15
 1277 049a 7B68     	 ldr r3,[r7,#4]
 1278 049c D3ED266A 	 flds s13,[r3,#152]
 1279 04a0 7B68     	 ldr r3,[r7,#4]
 1280 04a2 D3ED087A 	 flds s15,[r3,#32]
 1281 04a6 66EEA77A 	 fmuls s15,s13,s15
 1282 04aa 77EE277A 	 fadds s15,s14,s15
 1283 04ae 7B68     	 ldr r3,[r7,#4]
 1284 04b0 C3ED127A 	 fsts s15,[r3,#72]
  59:../kinematics.h ****   	n->real_speed.y = n-> J[1][0] * n->predkosc_silnika[0] + n->J[1][1] * n->predkosc_silnika[1];
 1285              	 .loc 5 59 0
 1286 04b4 7B68     	 ldr r3,[r7,#4]
 1287 04b6 93ED277A 	 flds s14,[r3,#156]
 1288 04ba 7B68     	 ldr r3,[r7,#4]
 1289 04bc D3ED077A 	 flds s15,[r3,#28]
 1290 04c0 27EE277A 	 fmuls s14,s14,s15
 1291 04c4 7B68     	 ldr r3,[r7,#4]
 1292 04c6 D3ED286A 	 flds s13,[r3,#160]
 1293 04ca 7B68     	 ldr r3,[r7,#4]
 1294 04cc D3ED087A 	 flds s15,[r3,#32]
 1295 04d0 66EEA77A 	 fmuls s15,s13,s15
 1296 04d4 77EE277A 	 fadds s15,s14,s15
 1297 04d8 7B68     	 ldr r3,[r7,#4]
 1298 04da C3ED137A 	 fsts s15,[r3,#76]
 1299              	.LBB3:
  60:../kinematics.h **** 
  61:../kinematics.h ****   	for(uint8_t i = 4; i >0; i--)								//moving eFy_buffer to make space for new value
 1300              	 .loc 5 61 0
 1301 04de 0423     	 movs r3,#4
 1302 04e0 87F84F30 	 strb r3,[r7,#79]
 1303 04e4 13E0     	 b .L25
 1304              	.L26:
  62:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 1305              	 .loc 5 62 0 discriminator 3
 1306 04e6 97F84F30 	 ldrb r3,[r7,#79]
 1307 04ea 97F84F20 	 ldrb r2,[r7,#79]
 1308 04ee 013A     	 subs r2,r2,#1
 1309 04f0 7968     	 ldr r1,[r7,#4]
 1310 04f2 1A32     	 adds r2,r2,#26
 1311 04f4 9200     	 lsls r2,r2,#2
 1312 04f6 0A44     	 add r2,r2,r1
 1313 04f8 1268     	 ldr r2,[r2]
 1314 04fa 7968     	 ldr r1,[r7,#4]
 1315 04fc 1A33     	 adds r3,r3,#26
 1316 04fe 9B00     	 lsls r3,r3,#2
 1317 0500 0B44     	 add r3,r3,r1
 1318 0502 1A60     	 str r2,[r3]
  61:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 1319              	 .loc 5 61 0 discriminator 3
 1320 0504 97F84F30 	 ldrb r3,[r7,#79]
 1321 0508 013B     	 subs r3,r3,#1
 1322 050a 87F84F30 	 strb r3,[r7,#79]
 1323              	.L25:
  61:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 1324              	 .loc 5 61 0 is_stmt 0 discriminator 1
 1325 050e 97F84F30 	 ldrb r3,[r7,#79]
 1326 0512 002B     	 cmp r3,#0
 1327 0514 E7D1     	 bne .L26
 1328              	.LBE3:
  63:../kinematics.h **** 
  64:../kinematics.h ****   	n->eF.x = H/mianownik;
 1329              	 .loc 5 64 0 is_stmt 1
 1330 0516 97ED047A 	 flds s14,[r7,#16]
 1331 051a D7ED057A 	 flds s15,[r7,#20]
 1332 051e C7EE277A 	 fdivs s15,s14,s15
 1333 0522 7B68     	 ldr r3,[r7,#4]
 1334 0524 C3ED187A 	 fsts s15,[r3,#96]
  65:../kinematics.h ****   	n->eF.y = I/mianownik;
 1335              	 .loc 5 65 0
 1336 0528 97ED037A 	 flds s14,[r7,#12]
 1337 052c D7ED057A 	 flds s15,[r7,#20]
 1338 0530 C7EE277A 	 fdivs s15,s14,s15
 1339 0534 7B68     	 ldr r3,[r7,#4]
 1340 0536 C3ED197A 	 fsts s15,[r3,#100]
  66:../kinematics.h **** 
  67:../kinematics.h ****   	n->eFY_buffer[0] = n->eF.y;							//filling buffer with newest data
 1341              	 .loc 5 67 0
 1342 053a 7B68     	 ldr r3,[r7,#4]
 1343 053c 5A6E     	 ldr r2,[r3,#100]
 1344 053e 7B68     	 ldr r3,[r7,#4]
 1345 0540 9A66     	 str r2,[r3,#104]
  68:../kinematics.h **** }
 1346              	 .loc 5 68 0
 1347 0542 5037     	 adds r7,r7,#80
 1348              	.LCFI63:
 1349              	 .cfi_def_cfa_offset 16
 1350 0544 BD46     	 mov sp,r7
 1351              	.LCFI64:
 1352              	 .cfi_def_cfa_register 13
 1353              	 
 1354 0546 BDEC028B 	 fldmfdd sp!,{d8}
 1355              	.LCFI65:
 1356              	 .cfi_restore 80
 1357              	 .cfi_restore 81
 1358              	 .cfi_def_cfa_offset 8
 1359 054a 80BD     	 pop {r7,pc}
 1360              	.L31:
 1361              	 .align 2
 1362              	.L30:
 1363 054c 00000000 	 .word l1
 1364 0550 00000000 	 .word l2
 1365              	 .cfi_endproc
 1366              	.LFE326:
 1368              	 .section .text.Update,"ax",%progbits
 1369              	 .align 2
 1370              	 .global Update
 1371              	 .thumb
 1372              	 .thumb_func
 1374              	Update:
 1375              	.LFB327:
  69:../kinematics.h **** void Update(struct Leg *n)		//Update floating numbers from raw data from motor drivers
  70:../kinematics.h **** {
 1376              	 .loc 5 70 0
 1377              	 .cfi_startproc
 1378              	 
 1379              	 
 1380              	 
 1381 0000 80B4     	 push {r7}
 1382              	.LCFI66:
 1383              	 .cfi_def_cfa_offset 4
 1384              	 .cfi_offset 7,-4
 1385 0002 83B0     	 sub sp,sp,#12
 1386              	.LCFI67:
 1387              	 .cfi_def_cfa_offset 16
 1388 0004 00AF     	 add r7,sp,#0
 1389              	.LCFI68:
 1390              	 .cfi_def_cfa_register 7
 1391 0006 7860     	 str r0,[r7,#4]
  71:../kinematics.h **** 	n->ang_abs_poprzedni[0] = n->ang_abs_rad[0];
 1392              	 .loc 5 71 0
 1393 0008 7B68     	 ldr r3,[r7,#4]
 1394 000a 9A6D     	 ldr r2,[r3,#88]
 1395 000c 7B68     	 ldr r3,[r7,#4]
 1396 000e 5A61     	 str r2,[r3,#20]
  72:../kinematics.h **** 	n->ang_abs_poprzedni[1] = n->ang_abs_rad[1];
 1397              	 .loc 5 72 0
 1398 0010 7B68     	 ldr r3,[r7,#4]
 1399 0012 DA6D     	 ldr r2,[r3,#92]
 1400 0014 7B68     	 ldr r3,[r7,#4]
 1401 0016 9A61     	 str r2,[r3,#24]
  73:../kinematics.h **** 	n->ang_abs_rad[0] = (float)n->ang_abs[0] * pi / 32767.0f;;
 1402              	 .loc 5 73 0
 1403 0018 7B68     	 ldr r3,[r7,#4]
 1404 001a DB68     	 ldr r3,[r3,#12]
 1405 001c 07EE903A 	 fmsr s15,r3
 1406 0020 B8EEE77A 	 fsitos s14,s15
 1407 0024 2E4B     	 ldr r3,.L33
 1408 0026 D3ED007A 	 flds s15,[r3]
 1409 002a 67EE277A 	 fmuls s15,s14,s15
 1410 002e 9FED2D7A 	 flds s14,.L33+4
 1411 0032 C7EE877A 	 fdivs s15,s15,s14
 1412 0036 7B68     	 ldr r3,[r7,#4]
 1413 0038 C3ED167A 	 fsts s15,[r3,#88]
  74:../kinematics.h **** 	n->ang_abs_rad[1] = (float)n->ang_abs[1]  * pi / 32767.0f;;
 1414              	 .loc 5 74 0
 1415 003c 7B68     	 ldr r3,[r7,#4]
 1416 003e 1B69     	 ldr r3,[r3,#16]
 1417 0040 07EE903A 	 fmsr s15,r3
 1418 0044 B8EEE77A 	 fsitos s14,s15
 1419 0048 254B     	 ldr r3,.L33
 1420 004a D3ED007A 	 flds s15,[r3]
 1421 004e 67EE277A 	 fmuls s15,s14,s15
 1422 0052 9FED247A 	 flds s14,.L33+4
 1423 0056 C7EE877A 	 fdivs s15,s15,s14
 1424 005a 7B68     	 ldr r3,[r7,#4]
 1425 005c C3ED177A 	 fsts s15,[r3,#92]
  75:../kinematics.h **** 	n->predkosc_silnika[0] =(n->predkosc_silnika[0] * 0.4f) + ((n->ang_abs_rad[0] - n->ang_abs_poprzed
 1426              	 .loc 5 75 0
 1427 0060 7B68     	 ldr r3,[r7,#4]
 1428 0062 D3ED077A 	 flds s15,[r3,#28]
 1429 0066 9FED207A 	 flds s14,.L33+8
 1430 006a 27EE877A 	 fmuls s14,s15,s14
 1431 006e 7B68     	 ldr r3,[r7,#4]
 1432 0070 D3ED166A 	 flds s13,[r3,#88]
 1433 0074 7B68     	 ldr r3,[r7,#4]
 1434 0076 D3ED057A 	 flds s15,[r3,#20]
 1435 007a 76EEE76A 	 fsubs s13,s13,s15
 1436 007e 1B4B     	 ldr r3,.L33+12
 1437 0080 D3ED007A 	 flds s15,[r3]
 1438 0084 C6EEA77A 	 fdivs s15,s13,s15
 1439 0088 DFED196A 	 flds s13,.L33+16
 1440 008c 67EEA67A 	 fmuls s15,s15,s13
 1441 0090 77EE277A 	 fadds s15,s14,s15
 1442 0094 7B68     	 ldr r3,[r7,#4]
 1443 0096 C3ED077A 	 fsts s15,[r3,#28]
  76:../kinematics.h **** 	n->predkosc_silnika[1] =(n->predkosc_silnika[0] * 0.4f) + ((n->ang_abs_rad[1] - n->ang_abs_poprzed
 1444              	 .loc 5 76 0
 1445 009a 7B68     	 ldr r3,[r7,#4]
 1446 009c D3ED077A 	 flds s15,[r3,#28]
 1447 00a0 9FED117A 	 flds s14,.L33+8
 1448 00a4 27EE877A 	 fmuls s14,s15,s14
 1449 00a8 7B68     	 ldr r3,[r7,#4]
 1450 00aa D3ED176A 	 flds s13,[r3,#92]
 1451 00ae 7B68     	 ldr r3,[r7,#4]
 1452 00b0 D3ED067A 	 flds s15,[r3,#24]
 1453 00b4 76EEE76A 	 fsubs s13,s13,s15
 1454 00b8 0C4B     	 ldr r3,.L33+12
 1455 00ba D3ED007A 	 flds s15,[r3]
 1456 00be C6EEA77A 	 fdivs s15,s13,s15
 1457 00c2 DFED0B6A 	 flds s13,.L33+16
 1458 00c6 67EEA67A 	 fmuls s15,s15,s13
 1459 00ca 77EE277A 	 fadds s15,s14,s15
 1460 00ce 7B68     	 ldr r3,[r7,#4]
 1461 00d0 C3ED087A 	 fsts s15,[r3,#32]
  77:../kinematics.h **** 
  78:../kinematics.h **** }
 1462              	 .loc 5 78 0
 1463 00d4 0C37     	 adds r7,r7,#12
 1464              	.LCFI69:
 1465              	 .cfi_def_cfa_offset 4
 1466 00d6 BD46     	 mov sp,r7
 1467              	.LCFI70:
 1468              	 .cfi_def_cfa_register 13
 1469              	 
 1470 00d8 5DF8047B 	 ldr r7,[sp],#4
 1471              	.LCFI71:
 1472              	 .cfi_restore 7
 1473              	 .cfi_def_cfa_offset 0
 1474 00dc 7047     	 bx lr
 1475              	.L34:
 1476 00de 00BF     	 .align 2
 1477              	.L33:
 1478 00e0 00000000 	 .word pi
 1479 00e4 00FEFF46 	 .word 1191181824
 1480 00e8 CDCCCC3E 	 .word 1053609165
 1481 00ec 00000000 	 .word dt
 1482 00f0 9A99193F 	 .word 1058642330
 1483              	 .cfi_endproc
 1484              	.LFE327:
 1486              	 .section .text.Trajectory,"ax",%progbits
 1487              	 .align 2
 1488              	 .global Trajectory
 1489              	 .thumb
 1490              	 .thumb_func
 1492              	Trajectory:
 1493              	.LFB328:
  79:../kinematics.h **** void Trajectory(struct Leg *n)		//calculate trajectory for selected leg
  80:../kinematics.h **** {
 1494              	 .loc 5 80 0
 1495              	 .cfi_startproc
 1496              	 
 1497              	 
 1498              	 
 1499 0000 80B4     	 push {r7}
 1500              	.LCFI72:
 1501              	 .cfi_def_cfa_offset 4
 1502              	 .cfi_offset 7,-4
 1503 0002 83B0     	 sub sp,sp,#12
 1504              	.LCFI73:
 1505              	 .cfi_def_cfa_offset 16
 1506 0004 00AF     	 add r7,sp,#0
 1507              	.LCFI74:
 1508              	 .cfi_def_cfa_register 7
 1509 0006 7860     	 str r0,[r7,#4]
  81:../kinematics.h **** 	//circle
  82:../kinematics.h **** 	//n->foot.x = sinf(t) * 40.0f;
  83:../kinematics.h **** 	//n->foot.y =180.0f + cosf(t) * 80.0f;
  84:../kinematics.h **** 	if(n->skoki == 1)
 1510              	 .loc 5 84 0
 1511 0008 7B68     	 ldr r3,[r7,#4]
 1512 000a 93F8A430 	 ldrb r3,[r3,#164]
 1513 000e 012B     	 cmp r3,#1
 1514 0010 03D1     	 bne .L36
  85:../kinematics.h **** 		n->foot.y = 280;
 1515              	 .loc 5 85 0
 1516 0012 7B68     	 ldr r3,[r7,#4]
 1517 0014 0D4A     	 ldr r2,.L40
 1518 0016 DA63     	 str r2,[r3,#60]
 1519 0018 13E0     	 b .L35
 1520              	.L36:
  86:../kinematics.h **** 	else
  87:../kinematics.h **** 	{
  88:../kinematics.h **** 		if(n->foot.y > 100)
 1521              	 .loc 5 88 0
 1522 001a 7B68     	 ldr r3,[r7,#4]
 1523 001c D3ED0F7A 	 flds s15,[r3,#60]
 1524 0020 9FED0B7A 	 flds s14,.L40+4
 1525 0024 F4EEC77A 	 fcmpes s15,s14
 1526 0028 F1EE10FA 	 fmstat
 1527 002c 09DD     	 ble .L35
  89:../kinematics.h **** 			n->foot.y -= 2;
 1528              	 .loc 5 89 0
 1529 002e 7B68     	 ldr r3,[r7,#4]
 1530 0030 D3ED0F7A 	 flds s15,[r3,#60]
 1531 0034 B0EE007A 	 fconsts s14,#0
 1532 0038 77EEC77A 	 fsubs s15,s15,s14
 1533 003c 7B68     	 ldr r3,[r7,#4]
 1534 003e C3ED0F7A 	 fsts s15,[r3,#60]
 1535              	.L35:
  90:../kinematics.h **** 	}
  91:../kinematics.h **** }
 1536              	 .loc 5 91 0
 1537 0042 0C37     	 adds r7,r7,#12
 1538              	.LCFI75:
 1539              	 .cfi_def_cfa_offset 4
 1540 0044 BD46     	 mov sp,r7
 1541              	.LCFI76:
 1542              	 .cfi_def_cfa_register 13
 1543              	 
 1544 0046 5DF8047B 	 ldr r7,[sp],#4
 1545              	.LCFI77:
 1546              	 .cfi_restore 7
 1547              	 .cfi_def_cfa_offset 0
 1548 004a 7047     	 bx lr
 1549              	.L41:
 1550              	 .align 2
 1551              	.L40:
 1552 004c 00008C43 	 .word 1133248512
 1553 0050 0000C842 	 .word 1120403456
 1554              	 .cfi_endproc
 1555              	.LFE328:
 1557              	 .section .text.XMC_Init,"ax",%progbits
 1558              	 .align 2
 1559              	 .global XMC_Init
 1560              	 .thumb
 1561              	 .thumb_func
 1563              	XMC_Init:
 1564              	.LFB329:
 1565              	 .file 6 "../communications.h"
   1:../communications.h **** /*
   2:../communications.h ****  * communications.h
   3:../communications.h ****  *
   4:../communications.h ****  *  Created on: 11 Jan 2018
   5:../communications.h ****  *      Author: Mafish
   6:../communications.h ****  */
   7:../communications.h **** 
   8:../communications.h **** uint8_t  XMC_Init(uint8_t);			//initialize driver (n). n=10 for all drivers
   9:../communications.h **** void XMC_Check();						//check state all drivers
  10:../communications.h **** void eorx();									//end of receive interrupt
  11:../communications.h **** void Message_interpreter();		//read last message
  12:../communications.h **** void Send(uint8_t);						// Send (n) bytes of data via half-duplex uart
  13:../communications.h **** void Send_Leg(struct Leg *n);	//Send regular command string to both of legs drivers
  14:../communications.h **** 
  15:../communications.h **** uint8_t  XMC_Init(uint8_t n)	//initialize driver (n). n=10 for all drivers
  16:../communications.h **** {
 1566              	 .loc 6 16 0
 1567              	 .cfi_startproc
 1568              	 
 1569              	 
 1570 0000 80B5     	 push {r7,lr}
 1571              	.LCFI78:
 1572              	 .cfi_def_cfa_offset 8
 1573              	 .cfi_offset 7,-8
 1574              	 .cfi_offset 14,-4
 1575 0002 84B0     	 sub sp,sp,#16
 1576              	.LCFI79:
 1577              	 .cfi_def_cfa_offset 24
 1578 0004 00AF     	 add r7,sp,#0
 1579              	.LCFI80:
 1580              	 .cfi_def_cfa_register 7
 1581 0006 0346     	 mov r3,r0
 1582 0008 FB71     	 strb r3,[r7,#7]
  17:../communications.h **** 	if(n == 10)							//if n = 10 then init all drivers
 1583              	 .loc 6 17 0
 1584 000a FB79     	 ldrb r3,[r7,#7]
 1585 000c 0A2B     	 cmp r3,#10
 1586 000e 1BD1     	 bne .L43
 1587              	.LBB4:
  18:../communications.h **** 		for(uint8_t i = 0; i < 8; i++)
 1588              	 .loc 6 18 0
 1589 0010 0023     	 movs r3,#0
 1590 0012 FB73     	 strb r3,[r7,#15]
 1591 0014 14E0     	 b .L44
 1592              	.L45:
  19:../communications.h **** 		{
  20:../communications.h **** 			txData[1] = 0x10 + i;
 1593              	 .loc 6 20 0 discriminator 3
 1594 0016 FB7B     	 ldrb r3,[r7,#15]
 1595 0018 1033     	 adds r3,r3,#16
 1596 001a DAB2     	 uxtb r2,r3
 1597 001c 164B     	 ldr r3,.L48
 1598 001e 5A70     	 strb r2,[r3,#1]
  21:../communications.h **** 			txData[2] = 0xA1;
 1599              	 .loc 6 21 0 discriminator 3
 1600 0020 154B     	 ldr r3,.L48
 1601 0022 A122     	 movs r2,#161
 1602 0024 9A70     	 strb r2,[r3,#2]
  22:../communications.h **** 			txData[3] = EOF;
 1603              	 .loc 6 22 0 discriminator 3
 1604 0026 144B     	 ldr r3,.L48
 1605 0028 DD22     	 movs r2,#221
 1606 002a DA70     	 strb r2,[r3,#3]
  23:../communications.h **** 			Send(4);
 1607              	 .loc 6 23 0 discriminator 3
 1608 002c 0420     	 movs r0,#4
 1609 002e FFF7FEFF 	 bl Send
  24:../communications.h **** 			delay(1100);
 1610              	 .loc 6 24 0 discriminator 3
 1611 0032 40F24C40 	 movw r0,#1100
 1612 0036 FFF7FEFF 	 bl delay
  18:../communications.h **** 		{
 1613              	 .loc 6 18 0 discriminator 3
 1614 003a FB7B     	 ldrb r3,[r7,#15]
 1615 003c 0133     	 adds r3,r3,#1
 1616 003e FB73     	 strb r3,[r7,#15]
 1617              	.L44:
  18:../communications.h **** 		{
 1618              	 .loc 6 18 0 is_stmt 0 discriminator 1
 1619 0040 FB7B     	 ldrb r3,[r7,#15]
 1620 0042 072B     	 cmp r3,#7
 1621 0044 E7D9     	 bls .L45
 1622              	.LBE4:
 1623 0046 04E0     	 b .L46
 1624              	.L43:
  25:../communications.h **** 		}
  26:../communications.h **** 	else										//init single driver (n)
  27:../communications.h **** 		txData[1] = 0x10 + n;
 1625              	 .loc 6 27 0 is_stmt 1
 1626 0048 FB79     	 ldrb r3,[r7,#7]
 1627 004a 1033     	 adds r3,r3,#16
 1628 004c DAB2     	 uxtb r2,r3
 1629 004e 0A4B     	 ldr r3,.L48
 1630 0050 5A70     	 strb r2,[r3,#1]
 1631              	.L46:
  28:../communications.h **** 		txData[2] = 0xA1;
 1632              	 .loc 6 28 0
 1633 0052 094B     	 ldr r3,.L48
 1634 0054 A122     	 movs r2,#161
 1635 0056 9A70     	 strb r2,[r3,#2]
  29:../communications.h **** 		txData[3] = EOF;
 1636              	 .loc 6 29 0
 1637 0058 074B     	 ldr r3,.L48
 1638 005a DD22     	 movs r2,#221
 1639 005c DA70     	 strb r2,[r3,#3]
  30:../communications.h **** 		Send(4);
 1640              	 .loc 6 30 0
 1641 005e 0420     	 movs r0,#4
 1642 0060 FFF7FEFF 	 bl Send
  31:../communications.h **** 		delay(1100);
 1643              	 .loc 6 31 0
 1644 0064 40F24C40 	 movw r0,#1100
 1645 0068 FFF7FEFF 	 bl delay
  32:../communications.h **** 
  33:../communications.h **** 	return 0;
 1646              	 .loc 6 33 0
 1647 006c 0023     	 movs r3,#0
  34:../communications.h **** }
 1648              	 .loc 6 34 0
 1649 006e 1846     	 mov r0,r3
 1650 0070 1037     	 adds r7,r7,#16
 1651              	.LCFI81:
 1652              	 .cfi_def_cfa_offset 8
 1653 0072 BD46     	 mov sp,r7
 1654              	.LCFI82:
 1655              	 .cfi_def_cfa_register 13
 1656              	 
 1657 0074 80BD     	 pop {r7,pc}
 1658              	.L49:
 1659 0076 00BF     	 .align 2
 1660              	.L48:
 1661 0078 00000000 	 .word txData
 1662              	 .cfi_endproc
 1663              	.LFE329:
 1665              	 .section .text.XMC_Check,"ax",%progbits
 1666              	 .align 2
 1667              	 .global XMC_Check
 1668              	 .thumb
 1669              	 .thumb_func
 1671              	XMC_Check:
 1672              	.LFB330:
  35:../communications.h **** void XMC_Check()	//check state all drivers
  36:../communications.h **** {
 1673              	 .loc 6 36 0
 1674              	 .cfi_startproc
 1675              	 
 1676              	 
 1677 0000 80B5     	 push {r7,lr}
 1678              	.LCFI83:
 1679              	 .cfi_def_cfa_offset 8
 1680              	 .cfi_offset 7,-8
 1681              	 .cfi_offset 14,-4
 1682 0002 82B0     	 sub sp,sp,#8
 1683              	.LCFI84:
 1684              	 .cfi_def_cfa_offset 16
 1685 0004 00AF     	 add r7,sp,#0
 1686              	.LCFI85:
 1687              	 .cfi_def_cfa_register 7
 1688              	.LBB5:
  37:../communications.h **** 	for(uint8_t i = 0; i < 8; i++)		//iterate to check state of all drivers
 1689              	 .loc 6 37 0
 1690 0006 0023     	 movs r3,#0
 1691 0008 FB71     	 strb r3,[r7,#7]
 1692 000a 1AE0     	 b .L51
 1693              	.L52:
  38:../communications.h **** 	{
  39:../communications.h **** 		DIGITAL_IO_SetOutputHigh(&LED1);
 1694              	 .loc 6 39 0 discriminator 3
 1695 000c 1048     	 ldr r0,.L53
 1696 000e FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
  40:../communications.h **** 		txData[1] = 0x10 + i;
 1697              	 .loc 6 40 0 discriminator 3
 1698 0012 FB79     	 ldrb r3,[r7,#7]
 1699 0014 1033     	 adds r3,r3,#16
 1700 0016 DAB2     	 uxtb r2,r3
 1701 0018 0E4B     	 ldr r3,.L53+4
 1702 001a 5A70     	 strb r2,[r3,#1]
  41:../communications.h **** 		txData[2] = 0xA3;
 1703              	 .loc 6 41 0 discriminator 3
 1704 001c 0D4B     	 ldr r3,.L53+4
 1705 001e A322     	 movs r2,#163
 1706 0020 9A70     	 strb r2,[r3,#2]
  42:../communications.h **** 		txData[3] = EOF;
 1707              	 .loc 6 42 0 discriminator 3
 1708 0022 0C4B     	 ldr r3,.L53+4
 1709 0024 DD22     	 movs r2,#221
 1710 0026 DA70     	 strb r2,[r3,#3]
  43:../communications.h **** 		Send(4);
 1711              	 .loc 6 43 0 discriminator 3
 1712 0028 0420     	 movs r0,#4
 1713 002a FFF7FEFF 	 bl Send
  44:../communications.h **** 		delay(1100);
 1714              	 .loc 6 44 0 discriminator 3
 1715 002e 40F24C40 	 movw r0,#1100
 1716 0032 FFF7FEFF 	 bl delay
  45:../communications.h **** 		DIGITAL_IO_SetOutputLow((&LED1));
 1717              	 .loc 6 45 0 discriminator 3
 1718 0036 0648     	 ldr r0,.L53
 1719 0038 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
  37:../communications.h **** 	{
 1720              	 .loc 6 37 0 discriminator 3
 1721 003c FB79     	 ldrb r3,[r7,#7]
 1722 003e 0133     	 adds r3,r3,#1
 1723 0040 FB71     	 strb r3,[r7,#7]
 1724              	.L51:
  37:../communications.h **** 	{
 1725              	 .loc 6 37 0 is_stmt 0 discriminator 1
 1726 0042 FB79     	 ldrb r3,[r7,#7]
 1727 0044 072B     	 cmp r3,#7
 1728 0046 E1D9     	 bls .L52
 1729              	.LBE5:
  46:../communications.h **** 	}
  47:../communications.h **** }
 1730              	 .loc 6 47 0 is_stmt 1
 1731 0048 0837     	 adds r7,r7,#8
 1732              	.LCFI86:
 1733              	 .cfi_def_cfa_offset 8
 1734 004a BD46     	 mov sp,r7
 1735              	.LCFI87:
 1736              	 .cfi_def_cfa_register 13
 1737              	 
 1738 004c 80BD     	 pop {r7,pc}
 1739              	.L54:
 1740 004e 00BF     	 .align 2
 1741              	.L53:
 1742 0050 00000000 	 .word LED1
 1743 0054 00000000 	 .word txData
 1744              	 .cfi_endproc
 1745              	.LFE330:
 1747              	 .section .text.eorx,"ax",%progbits
 1748              	 .align 2
 1749              	 .global eorx
 1750              	 .thumb
 1751              	 .thumb_func
 1753              	eorx:
 1754              	.LFB331:
  48:../communications.h **** void eorx()		//end of receive interrupt
  49:../communications.h **** {
 1755              	 .loc 6 49 0
 1756              	 .cfi_startproc
 1757              	 
 1758              	 
 1759 0000 80B5     	 push {r7,lr}
 1760              	.LCFI88:
 1761              	 .cfi_def_cfa_offset 8
 1762              	 .cfi_offset 7,-8
 1763              	 .cfi_offset 14,-4
 1764 0002 00AF     	 add r7,sp,#0
 1765              	.LCFI89:
 1766              	 .cfi_def_cfa_register 7
  50:../communications.h **** 	if(rxByte == SOF)
 1767              	 .loc 6 50 0
 1768 0004 1A4B     	 ldr r3,.L59
 1769 0006 1B78     	 ldrb r3,[r3]
 1770 0008 CC2B     	 cmp r3,#204
 1771 000a 07D1     	 bne .L56
  51:../communications.h **** 	{
  52:../communications.h **** 		rxData[0] = rxByte;
 1772              	 .loc 6 52 0
 1773 000c 184B     	 ldr r3,.L59
 1774 000e 1A78     	 ldrb r2,[r3]
 1775 0010 184B     	 ldr r3,.L59+4
 1776 0012 1A70     	 strb r2,[r3]
  53:../communications.h **** 		iterator_wiadomosci = 1;
 1777              	 .loc 6 53 0
 1778 0014 184B     	 ldr r3,.L59+8
 1779 0016 0122     	 movs r2,#1
 1780 0018 1A70     	 strb r2,[r3]
 1781 001a 23E0     	 b .L57
 1782              	.L56:
  54:../communications.h **** 	}
  55:../communications.h **** 	else if (rxByte == EOF)
 1783              	 .loc 6 55 0
 1784 001c 144B     	 ldr r3,.L59
 1785 001e 1B78     	 ldrb r3,[r3]
 1786 0020 DD2B     	 cmp r3,#221
 1787 0022 0ED1     	 bne .L58
  56:../communications.h **** 	{
  57:../communications.h **** 		rxData[iterator_wiadomosci +1] = EOF;
 1788              	 .loc 6 57 0
 1789 0024 144B     	 ldr r3,.L59+8
 1790 0026 1B78     	 ldrb r3,[r3]
 1791 0028 0133     	 adds r3,r3,#1
 1792 002a 124A     	 ldr r2,.L59+4
 1793 002c DD21     	 movs r1,#221
 1794 002e D154     	 strb r1,[r2,r3]
  58:../communications.h **** 		iterator_wiadomosci++;
 1795              	 .loc 6 58 0
 1796 0030 114B     	 ldr r3,.L59+8
 1797 0032 1B78     	 ldrb r3,[r3]
 1798 0034 0133     	 adds r3,r3,#1
 1799 0036 DAB2     	 uxtb r2,r3
 1800 0038 0F4B     	 ldr r3,.L59+8
 1801 003a 1A70     	 strb r2,[r3]
  59:../communications.h **** 		Message_interpreter();
 1802              	 .loc 6 59 0
 1803 003c FFF7FEFF 	 bl Message_interpreter
 1804 0040 10E0     	 b .L57
 1805              	.L58:
  60:../communications.h **** 	}
  61:../communications.h **** 	else if ( iterator_wiadomosci < 9)
 1806              	 .loc 6 61 0
 1807 0042 0D4B     	 ldr r3,.L59+8
 1808 0044 1B78     	 ldrb r3,[r3]
 1809 0046 082B     	 cmp r3,#8
 1810 0048 0CD8     	 bhi .L57
  62:../communications.h **** 	{
  63:../communications.h **** 		rxData[iterator_wiadomosci] =rxByte;
 1811              	 .loc 6 63 0
 1812 004a 0B4B     	 ldr r3,.L59+8
 1813 004c 1B78     	 ldrb r3,[r3]
 1814 004e 1A46     	 mov r2,r3
 1815 0050 074B     	 ldr r3,.L59
 1816 0052 1978     	 ldrb r1,[r3]
 1817 0054 074B     	 ldr r3,.L59+4
 1818 0056 9954     	 strb r1,[r3,r2]
  64:../communications.h **** 		iterator_wiadomosci++;
 1819              	 .loc 6 64 0
 1820 0058 074B     	 ldr r3,.L59+8
 1821 005a 1B78     	 ldrb r3,[r3]
 1822 005c 0133     	 adds r3,r3,#1
 1823 005e DAB2     	 uxtb r2,r3
 1824 0060 054B     	 ldr r3,.L59+8
 1825 0062 1A70     	 strb r2,[r3]
 1826              	.L57:
  65:../communications.h **** 	}
  66:../communications.h **** 	UART_Receive(&RS, &rxByte,1);
 1827              	 .loc 6 66 0
 1828 0064 0548     	 ldr r0,.L59+12
 1829 0066 0249     	 ldr r1,.L59
 1830 0068 0122     	 movs r2,#1
 1831 006a FFF7FEFF 	 bl UART_Receive
  67:../communications.h **** }
 1832              	 .loc 6 67 0
 1833 006e 80BD     	 pop {r7,pc}
 1834              	.L60:
 1835              	 .align 2
 1836              	.L59:
 1837 0070 00000000 	 .word rxByte
 1838 0074 00000000 	 .word rxData
 1839 0078 00000000 	 .word iterator_wiadomosci
 1840 007c 00000000 	 .word RS
 1841              	 .cfi_endproc
 1842              	.LFE331:
 1844              	 .section .text.eotx,"ax",%progbits
 1845              	 .align 2
 1846              	 .global eotx
 1847              	 .thumb
 1848              	 .thumb_func
 1850              	eotx:
 1851              	.LFB332:
  68:../communications.h **** void eotx()
  69:../communications.h **** {
 1852              	 .loc 6 69 0
 1853              	 .cfi_startproc
 1854              	 
 1855              	 
 1856              	 
 1857 0000 80B4     	 push {r7}
 1858              	.LCFI90:
 1859              	 .cfi_def_cfa_offset 4
 1860              	 .cfi_offset 7,-4
 1861 0002 00AF     	 add r7,sp,#0
 1862              	.LCFI91:
 1863              	 .cfi_def_cfa_register 7
  70:../communications.h **** 
  71:../communications.h **** }
 1864              	 .loc 6 71 0
 1865 0004 BD46     	 mov sp,r7
 1866              	.LCFI92:
 1867              	 .cfi_def_cfa_register 13
 1868              	 
 1869 0006 5DF8047B 	 ldr r7,[sp],#4
 1870              	.LCFI93:
 1871              	 .cfi_restore 7
 1872              	 .cfi_def_cfa_offset 0
 1873 000a 7047     	 bx lr
 1874              	 .cfi_endproc
 1875              	.LFE332:
 1877              	 .section .text.Message_interpreter,"ax",%progbits
 1878              	 .align 2
 1879              	 .global Message_interpreter
 1880              	 .thumb
 1881              	 .thumb_func
 1883              	Message_interpreter:
 1884              	.LFB333:
  72:../communications.h **** void Message_interpreter()		//read last message
  73:../communications.h **** {
 1885              	 .loc 6 73 0
 1886              	 .cfi_startproc
 1887              	 
 1888              	 
 1889              	 
 1890 0000 80B4     	 push {r7}
 1891              	.LCFI94:
 1892              	 .cfi_def_cfa_offset 4
 1893              	 .cfi_offset 7,-4
 1894 0002 83B0     	 sub sp,sp,#12
 1895              	.LCFI95:
 1896              	 .cfi_def_cfa_offset 16
 1897 0004 00AF     	 add r7,sp,#0
 1898              	.LCFI96:
 1899              	 .cfi_def_cfa_register 7
  74:../communications.h **** 
  75:../communications.h **** 	if(rxData[0] == SOF && rxData[1] == adress)
 1900              	 .loc 6 75 0
 1901 0006 294B     	 ldr r3,.L66
 1902 0008 1B78     	 ldrb r3,[r3]
 1903 000a CC2B     	 cmp r3,#204
 1904 000c 49D1     	 bne .L62
 1905              	 .loc 6 75 0 is_stmt 0 discriminator 1
 1906 000e 274B     	 ldr r3,.L66
 1907 0010 5A78     	 ldrb r2,[r3,#1]
 1908 0012 274B     	 ldr r3,.L66+4
 1909 0014 1B78     	 ldrb r3,[r3]
 1910 0016 9A42     	 cmp r2,r3
 1911 0018 43D1     	 bne .L62
 1912              	.LBB6:
  76:../communications.h **** 	{
  77:../communications.h **** 		uint8_t numer_silnika;
  78:../communications.h **** 		numer_silnika = rxData[2] - 0x10;
 1913              	 .loc 6 78 0 is_stmt 1
 1914 001a 244B     	 ldr r3,.L66
 1915 001c 9B78     	 ldrb r3,[r3,#2]
 1916 001e 103B     	 subs r3,r3,#16
 1917 0020 FB71     	 strb r3,[r7,#7]
  79:../communications.h **** 		if(rxData[3] == INIT)
 1918              	 .loc 6 79 0
 1919 0022 224B     	 ldr r3,.L66
 1920 0024 DB78     	 ldrb r3,[r3,#3]
 1921 0026 A12B     	 cmp r3,#161
 1922 0028 07D1     	 bne .L64
  80:../communications.h **** 			stanowisko.motor_go[numer_silnika] = rxData[4];
 1923              	 .loc 6 80 0
 1924 002a FB79     	 ldrb r3,[r7,#7]
 1925 002c 1F4A     	 ldr r2,.L66
 1926 002e 1179     	 ldrb r1,[r2,#4]
 1927 0030 204A     	 ldr r2,.L66+8
 1928 0032 1344     	 add r3,r3,r2
 1929 0034 0A46     	 mov r2,r1
 1930 0036 9A70     	 strb r2,[r3,#2]
 1931 0038 33E0     	 b .L62
 1932              	.L64:
  81:../communications.h **** 		else if(rxData[3] == CHECK)
 1933              	 .loc 6 81 0
 1934 003a 1C4B     	 ldr r3,.L66
 1935 003c DB78     	 ldrb r3,[r3,#3]
 1936 003e A32B     	 cmp r3,#163
 1937 0040 0CD1     	 bne .L65
  82:../communications.h **** 		{
  83:../communications.h **** 			stanowisko.motor_go[numer_silnika] = rxData[4];
 1938              	 .loc 6 83 0
 1939 0042 FB79     	 ldrb r3,[r7,#7]
 1940 0044 194A     	 ldr r2,.L66
 1941 0046 1179     	 ldrb r1,[r2,#4]
 1942 0048 1A4A     	 ldr r2,.L66+8
 1943 004a 1344     	 add r3,r3,r2
 1944 004c 0A46     	 mov r2,r1
 1945 004e 9A70     	 strb r2,[r3,#2]
  84:../communications.h **** 			stanowisko.motor_n[numer_silnika] = rxData[5];
 1946              	 .loc 6 84 0
 1947 0050 FB79     	 ldrb r3,[r7,#7]
 1948 0052 164A     	 ldr r2,.L66
 1949 0054 5179     	 ldrb r1,[r2,#5]
 1950 0056 174A     	 ldr r2,.L66+8
 1951 0058 D154     	 strb r1,[r2,r3]
 1952 005a 22E0     	 b .L62
 1953              	.L65:
  85:../communications.h **** 		}
  86:../communications.h **** 		else
  87:../communications.h **** 		{
  88:../communications.h **** 			stanowisko.i_net[numer_silnika] =rxData[3] << 8 | rxData[4];
 1954              	 .loc 6 88 0
 1955 005c FB79     	 ldrb r3,[r7,#7]
 1956 005e 134A     	 ldr r2,.L66
 1957 0060 D278     	 ldrb r2,[r2,#3]
 1958 0062 1202     	 lsls r2,r2,#8
 1959 0064 91B2     	 uxth r1,r2
 1960 0066 114A     	 ldr r2,.L66
 1961 0068 1279     	 ldrb r2,[r2,#4]
 1962 006a 92B2     	 uxth r2,r2
 1963 006c 0A43     	 orrs r2,r2,r1
 1964 006e 91B2     	 uxth r1,r2
 1965 0070 104A     	 ldr r2,.L66+8
 1966 0072 5B00     	 lsls r3,r3,#1
 1967 0074 1344     	 add r3,r3,r2
 1968 0076 0A46     	 mov r2,r1
 1969 0078 DA80     	 strh r2,[r3,#6]
  89:../communications.h **** 			stanowisko.ang_abs[numer_silnika] = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[
 1970              	 .loc 6 89 0
 1971 007a FB79     	 ldrb r3,[r7,#7]
 1972 007c 0B4A     	 ldr r2,.L66
 1973 007e 5279     	 ldrb r2,[r2,#5]
 1974 0080 1106     	 lsls r1,r2,#24
 1975 0082 0A4A     	 ldr r2,.L66
 1976 0084 9279     	 ldrb r2,[r2,#6]
 1977 0086 1204     	 lsls r2,r2,#16
 1978 0088 1143     	 orrs r1,r1,r2
 1979 008a 084A     	 ldr r2,.L66
 1980 008c D279     	 ldrb r2,[r2,#7]
 1981 008e 1202     	 lsls r2,r2,#8
 1982 0090 0A43     	 orrs r2,r2,r1
 1983 0092 0649     	 ldr r1,.L66
 1984 0094 097A     	 ldrb r1,[r1,#8]
 1985 0096 0A43     	 orrs r2,r2,r1
 1986 0098 0649     	 ldr r1,.L66+8
 1987 009a 0233     	 adds r3,r3,#2
 1988 009c 9B00     	 lsls r3,r3,#2
 1989 009e 0B44     	 add r3,r3,r1
 1990 00a0 5A60     	 str r2,[r3,#4]
 1991              	.L62:
 1992              	.LBE6:
  90:../communications.h **** 		}
  91:../communications.h **** 	}
  92:../communications.h **** 
  93:../communications.h **** }
 1993              	 .loc 6 93 0
 1994 00a2 0C37     	 adds r7,r7,#12
 1995              	.LCFI97:
 1996              	 .cfi_def_cfa_offset 4
 1997 00a4 BD46     	 mov sp,r7
 1998              	.LCFI98:
 1999              	 .cfi_def_cfa_register 13
 2000              	 
 2001 00a6 5DF8047B 	 ldr r7,[sp],#4
 2002              	.LCFI99:
 2003              	 .cfi_restore 7
 2004              	 .cfi_def_cfa_offset 0
 2005 00aa 7047     	 bx lr
 2006              	.L67:
 2007              	 .align 2
 2008              	.L66:
 2009 00ac 00000000 	 .word rxData
 2010 00b0 00000000 	 .word adress
 2011 00b4 00000000 	 .word stanowisko
 2012              	 .cfi_endproc
 2013              	.LFE333:
 2015              	 .section .text.Send_Leg,"ax",%progbits
 2016              	 .align 2
 2017              	 .global Send_Leg
 2018              	 .thumb
 2019              	 .thumb_func
 2021              	Send_Leg:
 2022              	.LFB334:
  94:../communications.h **** void Send_Leg(struct Leg *n)	//Send regular command string to both of legs drivers
  95:../communications.h **** {
 2023              	 .loc 6 95 0
 2024              	 .cfi_startproc
 2025              	 
 2026              	 
 2027 0000 80B5     	 push {r7,lr}
 2028              	.LCFI100:
 2029              	 .cfi_def_cfa_offset 8
 2030              	 .cfi_offset 7,-8
 2031              	 .cfi_offset 14,-4
 2032 0002 82B0     	 sub sp,sp,#8
 2033              	.LCFI101:
 2034              	 .cfi_def_cfa_offset 16
 2035 0004 00AF     	 add r7,sp,#0
 2036              	.LCFI102:
 2037              	 .cfi_def_cfa_register 7
 2038 0006 7860     	 str r0,[r7,#4]
  96:../communications.h **** 	n->poz_zad[0] = n->teta[0] * INT16_MAX / pi;
 2039              	 .loc 6 96 0
 2040 0008 7B68     	 ldr r3,[r7,#4]
 2041 000a D3ED147A 	 flds s15,[r3,#80]
 2042 000e 9FED467A 	 flds s14,.L69
 2043 0012 27EE877A 	 fmuls s14,s15,s14
 2044 0016 454B     	 ldr r3,.L69+4
 2045 0018 D3ED007A 	 flds s15,[r3]
 2046 001c C7EE277A 	 fdivs s15,s14,s15
 2047 0020 FCEEE77A 	 ftouizs s15,s15
 2048 0024 C7ED007A 	 fsts s15,[r7]
 2049 0028 3B88     	 ldrh r3,[r7]
 2050 002a 9AB2     	 uxth r2,r3
 2051 002c 7B68     	 ldr r3,[r7,#4]
 2052 002e 9A86     	 strh r2,[r3,#52]
  97:../communications.h **** 	n->poz_zad[1] = n->teta[1] * INT16_MAX / pi;
 2053              	 .loc 6 97 0
 2054 0030 7B68     	 ldr r3,[r7,#4]
 2055 0032 D3ED157A 	 flds s15,[r3,#84]
 2056 0036 9FED3C7A 	 flds s14,.L69
 2057 003a 27EE877A 	 fmuls s14,s15,s14
 2058 003e 3B4B     	 ldr r3,.L69+4
 2059 0040 D3ED007A 	 flds s15,[r3]
 2060 0044 C7EE277A 	 fdivs s15,s14,s15
 2061 0048 FCEEE77A 	 ftouizs s15,s15
 2062 004c C7ED007A 	 fsts s15,[r7]
 2063 0050 3B88     	 ldrh r3,[r7]
 2064 0052 9AB2     	 uxth r2,r3
 2065 0054 7B68     	 ldr r3,[r7,#4]
 2066 0056 DA86     	 strh r2,[r3,#54]
  98:../communications.h **** 	  txData[1] = n->adresy[0];
 2067              	 .loc 6 98 0
 2068 0058 7B68     	 ldr r3,[r7,#4]
 2069 005a 1A79     	 ldrb r2,[r3,#4]
 2070 005c 344B     	 ldr r3,.L69+8
 2071 005e 5A70     	 strb r2,[r3,#1]
  99:../communications.h **** 	  txData[2] = n->poz_zad[0] >> 8;
 2072              	 .loc 6 99 0
 2073 0060 7B68     	 ldr r3,[r7,#4]
 2074 0062 9B8E     	 ldrh r3,[r3,#52]
 2075 0064 1B0A     	 lsrs r3,r3,#8
 2076 0066 9BB2     	 uxth r3,r3
 2077 0068 DAB2     	 uxtb r2,r3
 2078 006a 314B     	 ldr r3,.L69+8
 2079 006c 9A70     	 strb r2,[r3,#2]
 100:../communications.h **** 	  txData[3] = n->poz_zad[0];
 2080              	 .loc 6 100 0
 2081 006e 7B68     	 ldr r3,[r7,#4]
 2082 0070 9B8E     	 ldrh r3,[r3,#52]
 2083 0072 DAB2     	 uxtb r2,r3
 2084 0074 2E4B     	 ldr r3,.L69+8
 2085 0076 DA70     	 strb r2,[r3,#3]
 101:../communications.h **** 	  txData[4] = n->ks[0] >> 8;
 2086              	 .loc 6 101 0
 2087 0078 7B68     	 ldr r3,[r7,#4]
 2088 007a 9B8C     	 ldrh r3,[r3,#36]
 2089 007c 1B0A     	 lsrs r3,r3,#8
 2090 007e 9BB2     	 uxth r3,r3
 2091 0080 DAB2     	 uxtb r2,r3
 2092 0082 2B4B     	 ldr r3,.L69+8
 2093 0084 1A71     	 strb r2,[r3,#4]
 102:../communications.h **** 	  txData[5] = n->ks[0];
 2094              	 .loc 6 102 0
 2095 0086 7B68     	 ldr r3,[r7,#4]
 2096 0088 9B8C     	 ldrh r3,[r3,#36]
 2097 008a DAB2     	 uxtb r2,r3
 2098 008c 284B     	 ldr r3,.L69+8
 2099 008e 5A71     	 strb r2,[r3,#5]
 103:../communications.h **** 	  txData[6] = n->kd[0] >>8;
 2100              	 .loc 6 103 0
 2101 0090 7B68     	 ldr r3,[r7,#4]
 2102 0092 1B8D     	 ldrh r3,[r3,#40]
 2103 0094 1B0A     	 lsrs r3,r3,#8
 2104 0096 9BB2     	 uxth r3,r3
 2105 0098 DAB2     	 uxtb r2,r3
 2106 009a 254B     	 ldr r3,.L69+8
 2107 009c 9A71     	 strb r2,[r3,#6]
 104:../communications.h **** 	  txData[7] = n->kd[0];
 2108              	 .loc 6 104 0
 2109 009e 7B68     	 ldr r3,[r7,#4]
 2110 00a0 1B8D     	 ldrh r3,[r3,#40]
 2111 00a2 DAB2     	 uxtb r2,r3
 2112 00a4 224B     	 ldr r3,.L69+8
 2113 00a6 DA71     	 strb r2,[r3,#7]
 105:../communications.h **** 	  txData[8] = EOF;
 2114              	 .loc 6 105 0
 2115 00a8 214B     	 ldr r3,.L69+8
 2116 00aa DD22     	 movs r2,#221
 2117 00ac 1A72     	 strb r2,[r3,#8]
 106:../communications.h **** 	  Send(9);
 2118              	 .loc 6 106 0
 2119 00ae 0920     	 movs r0,#9
 2120 00b0 FFF7FEFF 	 bl Send
 107:../communications.h **** 	  delay(1100);
 2121              	 .loc 6 107 0
 2122 00b4 40F24C40 	 movw r0,#1100
 2123 00b8 FFF7FEFF 	 bl delay
 108:../communications.h **** 	  txData[1] = n->adresy[1];
 2124              	 .loc 6 108 0
 2125 00bc 7B68     	 ldr r3,[r7,#4]
 2126 00be 5A79     	 ldrb r2,[r3,#5]
 2127 00c0 1B4B     	 ldr r3,.L69+8
 2128 00c2 5A70     	 strb r2,[r3,#1]
 109:../communications.h **** 	  txData[2] = n->poz_zad[1] >> 8;
 2129              	 .loc 6 109 0
 2130 00c4 7B68     	 ldr r3,[r7,#4]
 2131 00c6 DB8E     	 ldrh r3,[r3,#54]
 2132 00c8 1B0A     	 lsrs r3,r3,#8
 2133 00ca 9BB2     	 uxth r3,r3
 2134 00cc DAB2     	 uxtb r2,r3
 2135 00ce 184B     	 ldr r3,.L69+8
 2136 00d0 9A70     	 strb r2,[r3,#2]
 110:../communications.h **** 	  txData[3] = n->poz_zad[1];
 2137              	 .loc 6 110 0
 2138 00d2 7B68     	 ldr r3,[r7,#4]
 2139 00d4 DB8E     	 ldrh r3,[r3,#54]
 2140 00d6 DAB2     	 uxtb r2,r3
 2141 00d8 154B     	 ldr r3,.L69+8
 2142 00da DA70     	 strb r2,[r3,#3]
 111:../communications.h **** 	  txData[4] = n->ks[1] >> 8;
 2143              	 .loc 6 111 0
 2144 00dc 7B68     	 ldr r3,[r7,#4]
 2145 00de DB8C     	 ldrh r3,[r3,#38]
 2146 00e0 1B0A     	 lsrs r3,r3,#8
 2147 00e2 9BB2     	 uxth r3,r3
 2148 00e4 DAB2     	 uxtb r2,r3
 2149 00e6 124B     	 ldr r3,.L69+8
 2150 00e8 1A71     	 strb r2,[r3,#4]
 112:../communications.h **** 	  txData[5] = n->ks[1];
 2151              	 .loc 6 112 0
 2152 00ea 7B68     	 ldr r3,[r7,#4]
 2153 00ec DB8C     	 ldrh r3,[r3,#38]
 2154 00ee DAB2     	 uxtb r2,r3
 2155 00f0 0F4B     	 ldr r3,.L69+8
 2156 00f2 5A71     	 strb r2,[r3,#5]
 113:../communications.h **** 	  txData[6] = n->kd[1] >>8;
 2157              	 .loc 6 113 0
 2158 00f4 7B68     	 ldr r3,[r7,#4]
 2159 00f6 5B8D     	 ldrh r3,[r3,#42]
 2160 00f8 1B0A     	 lsrs r3,r3,#8
 2161 00fa 9BB2     	 uxth r3,r3
 2162 00fc DAB2     	 uxtb r2,r3
 2163 00fe 0C4B     	 ldr r3,.L69+8
 2164 0100 9A71     	 strb r2,[r3,#6]
 114:../communications.h **** 	  txData[7] = n->kd[1];
 2165              	 .loc 6 114 0
 2166 0102 7B68     	 ldr r3,[r7,#4]
 2167 0104 5B8D     	 ldrh r3,[r3,#42]
 2168 0106 DAB2     	 uxtb r2,r3
 2169 0108 094B     	 ldr r3,.L69+8
 2170 010a DA71     	 strb r2,[r3,#7]
 115:../communications.h **** 	  txData[8] = EOF;
 2171              	 .loc 6 115 0
 2172 010c 084B     	 ldr r3,.L69+8
 2173 010e DD22     	 movs r2,#221
 2174 0110 1A72     	 strb r2,[r3,#8]
 116:../communications.h **** 	  Send(9);
 2175              	 .loc 6 116 0
 2176 0112 0920     	 movs r0,#9
 2177 0114 FFF7FEFF 	 bl Send
 117:../communications.h **** 	  delay(1100);
 2178              	 .loc 6 117 0
 2179 0118 40F24C40 	 movw r0,#1100
 2180 011c FFF7FEFF 	 bl delay
 118:../communications.h **** }
 2181              	 .loc 6 118 0
 2182 0120 0837     	 adds r7,r7,#8
 2183              	.LCFI103:
 2184              	 .cfi_def_cfa_offset 8
 2185 0122 BD46     	 mov sp,r7
 2186              	.LCFI104:
 2187              	 .cfi_def_cfa_register 13
 2188              	 
 2189 0124 80BD     	 pop {r7,pc}
 2190              	.L70:
 2191 0126 00BF     	 .align 2
 2192              	.L69:
 2193 0128 00FEFF46 	 .word 1191181824
 2194 012c 00000000 	 .word pi
 2195 0130 00000000 	 .word txData
 2196              	 .cfi_endproc
 2197              	.LFE334:
 2199              	 .section .text.Send,"ax",%progbits
 2200              	 .align 2
 2201              	 .global Send
 2202              	 .thumb
 2203              	 .thumb_func
 2205              	Send:
 2206              	.LFB335:
 119:../communications.h **** void Send(uint8_t size )	// Send (n) bytes of data via half-duplex uart
 120:../communications.h **** {
 2207              	 .loc 6 120 0
 2208              	 .cfi_startproc
 2209              	 
 2210              	 
 2211 0000 80B5     	 push {r7,lr}
 2212              	.LCFI105:
 2213              	 .cfi_def_cfa_offset 8
 2214              	 .cfi_offset 7,-8
 2215              	 .cfi_offset 14,-4
 2216 0002 82B0     	 sub sp,sp,#8
 2217              	.LCFI106:
 2218              	 .cfi_def_cfa_offset 16
 2219 0004 00AF     	 add r7,sp,#0
 2220              	.LCFI107:
 2221              	 .cfi_def_cfa_register 7
 2222 0006 0346     	 mov r3,r0
 2223 0008 FB71     	 strb r3,[r7,#7]
 121:../communications.h **** 
 122:../communications.h **** 	UART_Transmit(&RS, txData, size);
 2224              	 .loc 6 122 0
 2225 000a FB79     	 ldrb r3,[r7,#7]
 2226 000c 0948     	 ldr r0,.L73
 2227 000e 0A49     	 ldr r1,.L73+4
 2228 0010 1A46     	 mov r2,r3
 2229 0012 FFF7FEFF 	 bl UART_Transmit
 123:../communications.h **** 	while(UART_IsTxBusy(&RS));
 2230              	 .loc 6 123 0
 2231 0016 00BF     	 nop
 2232              	.L72:
 2233              	 .loc 6 123 0 is_stmt 0 discriminator 1
 2234 0018 0648     	 ldr r0,.L73
 2235 001a FFF7FEFF 	 bl UART_IsTxBusy
 2236 001e 0346     	 mov r3,r0
 2237 0020 002B     	 cmp r3,#0
 2238 0022 F9D1     	 bne .L72
 124:../communications.h **** 	UART_Receive(&RS, &rxByte, 1);
 2239              	 .loc 6 124 0 is_stmt 1
 2240 0024 0348     	 ldr r0,.L73
 2241 0026 0549     	 ldr r1,.L73+8
 2242 0028 0122     	 movs r2,#1
 2243 002a FFF7FEFF 	 bl UART_Receive
 125:../communications.h **** }
 2244              	 .loc 6 125 0
 2245 002e 0837     	 adds r7,r7,#8
 2246              	.LCFI108:
 2247              	 .cfi_def_cfa_offset 8
 2248 0030 BD46     	 mov sp,r7
 2249              	.LCFI109:
 2250              	 .cfi_def_cfa_register 13
 2251              	 
 2252 0032 80BD     	 pop {r7,pc}
 2253              	.L74:
 2254              	 .align 2
 2255              	.L73:
 2256 0034 00000000 	 .word RS
 2257 0038 00000000 	 .word txData
 2258 003c 00000000 	 .word rxByte
 2259              	 .cfi_endproc
 2260              	.LFE335:
 2262              	 .global hopper
 2263              	 .section .bss.hopper,"aw",%nobits
 2266              	hopper:
 2267 0000 00       	 .space 1
 2268              	 .section .text.TorqueFromInet,"ax",%progbits
 2269              	 .align 2
 2270              	 .global TorqueFromInet
 2271              	 .thumb
 2272              	 .thumb_func
 2274              	TorqueFromInet:
 2275              	.LFB336:
 2276              	 .file 7 "../dynamics.h"
   1:../dynamics.h **** /*
   2:../dynamics.h ****  * dynamics.h
   3:../dynamics.h ****  *
   4:../dynamics.h ****  *  Created on: 13 Jan 2018
   5:../dynamics.h ****  *      Author: Mafish
   6:../dynamics.h ****  */
   7:../dynamics.h **** 
   8:../dynamics.h **** float TorqueFromInet(uint16_t i_net);
   9:../dynamics.h **** uint16_t  VrefFromTorque(float torque);
  10:../dynamics.h **** uint8_t Z_score_filter(float buffer[]);
  11:../dynamics.h **** uint8_t hopper = 0;
  12:../dynamics.h **** float TorqueFromInet(uint16_t i_net)		//Input : I_net[mA] , returns estimated Torque in [Nmm]
  13:../dynamics.h **** {
 2277              	 .loc 7 13 0
 2278              	 .cfi_startproc
 2279              	 
 2280              	 
 2281              	 
 2282 0000 80B4     	 push {r7}
 2283              	.LCFI110:
 2284              	 .cfi_def_cfa_offset 4
 2285              	 .cfi_offset 7,-4
 2286 0002 85B0     	 sub sp,sp,#20
 2287              	.LCFI111:
 2288              	 .cfi_def_cfa_offset 24
 2289 0004 00AF     	 add r7,sp,#0
 2290              	.LCFI112:
 2291              	 .cfi_def_cfa_register 7
 2292 0006 0346     	 mov r3,r0
 2293 0008 FB80     	 strh r3,[r7,#6]
  14:../dynamics.h **** 	float result = 0;
 2294              	 .loc 7 14 0
 2295 000a 4FF00003 	 mov r3,#0
 2296 000e FB60     	 str r3,[r7,#12]
  15:../dynamics.h **** 	if(i_net < 22000)
 2297              	 .loc 7 15 0
 2298 0010 FB88     	 ldrh r3,[r7,#6]
 2299 0012 45F2EF52 	 movw r2,#21999
 2300 0016 9342     	 cmp r3,r2
 2301 0018 0FD8     	 bhi .L76
  16:../dynamics.h **** 		result = 0.05445f * i_net + 51.66269f;
 2302              	 .loc 7 16 0
 2303 001a FB88     	 ldrh r3,[r7,#6]
 2304 001c 07EE903A 	 fmsr s15,r3
 2305 0020 F8EEE77A 	 fsitos s15,s15
 2306 0024 9FED107A 	 flds s14,.L79
 2307 0028 67EE877A 	 fmuls s15,s15,s14
 2308 002c 9FED0F7A 	 flds s14,.L79+4
 2309 0030 77EE877A 	 fadds s15,s15,s14
 2310 0034 C7ED037A 	 fsts s15,[r7,#12]
 2311 0038 0EE0     	 b .L77
 2312              	.L76:
  17:../dynamics.h **** 	else
  18:../dynamics.h **** 		result = 0.02978f * i_net + 588.051f;
 2313              	 .loc 7 18 0
 2314 003a FB88     	 ldrh r3,[r7,#6]
 2315 003c 07EE903A 	 fmsr s15,r3
 2316 0040 F8EEE77A 	 fsitos s15,s15
 2317 0044 9FED0A7A 	 flds s14,.L79+8
 2318 0048 67EE877A 	 fmuls s15,s15,s14
 2319 004c 9FED097A 	 flds s14,.L79+12
 2320 0050 77EE877A 	 fadds s15,s15,s14
 2321 0054 C7ED037A 	 fsts s15,[r7,#12]
 2322              	.L77:
  19:../dynamics.h **** 	return result;
 2323              	 .loc 7 19 0
 2324 0058 FB68     	 ldr r3,[r7,#12]
  20:../dynamics.h **** }
 2325              	 .loc 7 20 0
 2326 005a 1846     	 mov r0,r3
 2327 005c 1437     	 adds r7,r7,#20
 2328              	.LCFI113:
 2329              	 .cfi_def_cfa_offset 4
 2330 005e BD46     	 mov sp,r7
 2331              	.LCFI114:
 2332              	 .cfi_def_cfa_register 13
 2333              	 
 2334 0060 5DF8047B 	 ldr r7,[sp],#4
 2335              	.LCFI115:
 2336              	 .cfi_restore 7
 2337              	 .cfi_def_cfa_offset 0
 2338 0064 7047     	 bx lr
 2339              	.L80:
 2340 0066 00BF     	 .align 2
 2341              	.L79:
 2342 0068 F7065F3D 	 .word 1029637879
 2343 006c 98A64E42 	 .word 1112450712
 2344 0070 30F5F33C 	 .word 1022620976
 2345 0074 44031344 	 .word 1142096708
 2346              	 .cfi_endproc
 2347              	.LFE336:
 2349              	 .global __aeabi_f2d
 2350              	 .global __aeabi_dadd
 2351              	 .global __aeabi_d2f
 2352              	 .section .text.VrefFromTorque,"ax",%progbits
 2353              	 .align 2
 2354              	 .global VrefFromTorque
 2355              	 .thumb
 2356              	 .thumb_func
 2358              	VrefFromTorque:
 2359              	.LFB337:
  21:../dynamics.h **** uint16_t VrefFromTorque(float torque)		//input Torque [Nmm], returns corresponding V_ref
  22:../dynamics.h **** {
 2360              	 .loc 7 22 0
 2361              	 .cfi_startproc
 2362              	 
 2363              	 
 2364 0000 80B5     	 push {r7,lr}
 2365              	.LCFI116:
 2366              	 .cfi_def_cfa_offset 8
 2367              	 .cfi_offset 7,-8
 2368              	 .cfi_offset 14,-4
 2369 0002 82B0     	 sub sp,sp,#8
 2370              	.LCFI117:
 2371              	 .cfi_def_cfa_offset 16
 2372 0004 00AF     	 add r7,sp,#0
 2373              	.LCFI118:
 2374              	 .cfi_def_cfa_register 7
 2375 0006 7860     	 str r0,[r7,#4]
  23:../dynamics.h **** 	if(torque < 0)
 2376              	 .loc 7 23 0
 2377 0008 D7ED017A 	 flds s15,[r7,#4]
 2378 000c F5EEC07A 	 fcmpezs s15
 2379 0010 F1EE10FA 	 fmstat
 2380 0014 05D5     	 bpl .L82
  24:../dynamics.h **** 		torque = -torque;
 2381              	 .loc 7 24 0
 2382 0016 D7ED017A 	 flds s15,[r7,#4]
 2383 001a F1EE677A 	 fnegs s15,s15
 2384 001e C7ED017A 	 fsts s15,[r7,#4]
 2385              	.L82:
  25:../dynamics.h **** 	if(torque < 1400)
 2386              	 .loc 7 25 0
 2387 0022 D7ED017A 	 flds s15,[r7,#4]
 2388 0026 9FED207A 	 flds s14,.L91+8
 2389 002a F4EEC77A 	 fcmpes s15,s14
 2390 002e F1EE10FA 	 fmstat
 2391 0032 1BD5     	 bpl .L90
  26:../dynamics.h **** 		torque = 2.7541f * torque + 125.34;
 2392              	 .loc 7 26 0
 2393 0034 D7ED017A 	 flds s15,[r7,#4]
 2394 0038 9FED1C7A 	 flds s14,.L91+12
 2395 003c 67EE877A 	 fmuls s15,s15,s14
 2396 0040 17EE900A 	 fmrs r0,s15
 2397 0044 FFF7FEFF 	 bl __aeabi_f2d
 2398 0048 0246     	 mov r2,r0
 2399 004a 0B46     	 mov r3,r1
 2400 004c 1046     	 mov r0,r2
 2401 004e 1946     	 mov r1,r3
 2402 0050 13A3     	 adr r3,.L91
 2403 0052 D3E90023 	 ldrd r2,[r3]
 2404 0056 FFF7FEFF 	 bl __aeabi_dadd
 2405 005a 0246     	 mov r2,r0
 2406 005c 0B46     	 mov r3,r1
 2407 005e 1046     	 mov r0,r2
 2408 0060 1946     	 mov r1,r3
 2409 0062 FFF7FEFF 	 bl __aeabi_d2f
 2410 0066 0346     	 mov r3,r0
 2411 0068 7B60     	 str r3,[r7,#4]
 2412 006a 0BE0     	 b .L86
 2413              	.L90:
  27:../dynamics.h **** 	else
  28:../dynamics.h **** 		torque =4.8671f * torque - 2698.687f;
 2414              	 .loc 7 28 0
 2415 006c D7ED017A 	 flds s15,[r7,#4]
 2416 0070 9FED0F7A 	 flds s14,.L91+16
 2417 0074 67EE877A 	 fmuls s15,s15,s14
 2418 0078 9FED0E7A 	 flds s14,.L91+20
 2419 007c 77EEC77A 	 fsubs s15,s15,s14
 2420 0080 C7ED017A 	 fsts s15,[r7,#4]
 2421              	.L86:
  29:../dynamics.h **** 	return (uint16_t)torque;
 2422              	 .loc 7 29 0
 2423 0084 D7ED017A 	 flds s15,[r7,#4]
 2424 0088 FCEEE77A 	 ftouizs s15,s15
 2425 008c C7ED007A 	 fsts s15,[r7]
 2426 0090 3B88     	 ldrh r3,[r7]
 2427 0092 9BB2     	 uxth r3,r3
  30:../dynamics.h **** }
 2428              	 .loc 7 30 0
 2429 0094 1846     	 mov r0,r3
 2430 0096 0837     	 adds r7,r7,#8
 2431              	.LCFI119:
 2432              	 .cfi_def_cfa_offset 8
 2433 0098 BD46     	 mov sp,r7
 2434              	.LCFI120:
 2435              	 .cfi_def_cfa_register 13
 2436              	 
 2437 009a 80BD     	 pop {r7,pc}
 2438              	.L92:
 2439 009c AFF30080 	 .align 3
 2440              	.L91:
 2441 00a0 F6285C8F 	 .word -1889785610
 2442 00a4 C2555F40 	 .word 1079989698
 2443 00a8 0000AF44 	 .word 1152319488
 2444 00ac 2D433040 	 .word 1076904749
 2445 00b0 48BF9B40 	 .word 1083948872
 2446 00b4 FEAA2845 	 .word 1160293118
 2447              	 .cfi_endproc
 2448              	.LFE337:
 2450              	 .section .text.Z_score_filter,"ax",%progbits
 2451              	 .align 2
 2452              	 .global Z_score_filter
 2453              	 .thumb
 2454              	 .thumb_func
 2456              	Z_score_filter:
 2457              	.LFB338:
  31:../dynamics.h **** uint8_t Z_score_filter(float buffer[5])		//input buffer with collected data, newest data point -- r
  32:../dynamics.h **** {
 2458              	 .loc 7 32 0
 2459              	 .cfi_startproc
 2460              	 
 2461              	 
 2462              	 
 2463 0000 80B4     	 push {r7}
 2464              	.LCFI121:
 2465              	 .cfi_def_cfa_offset 4
 2466              	 .cfi_offset 7,-4
 2467 0002 87B0     	 sub sp,sp,#28
 2468              	.LCFI122:
 2469              	 .cfi_def_cfa_offset 32
 2470 0004 00AF     	 add r7,sp,#0
 2471              	.LCFI123:
 2472              	 .cfi_def_cfa_register 7
 2473 0006 7860     	 str r0,[r7,#4]
  33:../dynamics.h **** 	float result = 0;
 2474              	 .loc 7 33 0
 2475 0008 4FF00003 	 mov r3,#0
 2476 000c 7B61     	 str r3,[r7,#20]
  34:../dynamics.h **** 	float threshhold = 5;
 2477              	 .loc 7 34 0
 2478 000e 1B4B     	 ldr r3,.L101
 2479 0010 FB60     	 str r3,[r7,#12]
 2480              	.LBB7:
  35:../dynamics.h **** 	for(uint8_t i = 0; i < 4; i++)
 2481              	 .loc 7 35 0
 2482 0012 0023     	 movs r3,#0
 2483 0014 FB74     	 strb r3,[r7,#19]
 2484 0016 0EE0     	 b .L94
 2485              	.L95:
  36:../dynamics.h **** 		result += buffer[i];
 2486              	 .loc 7 36 0 discriminator 3
 2487 0018 FB7C     	 ldrb r3,[r7,#19]
 2488 001a 9B00     	 lsls r3,r3,#2
 2489 001c 7A68     	 ldr r2,[r7,#4]
 2490 001e 1344     	 add r3,r3,r2
 2491 0020 D3ED007A 	 flds s15,[r3]
 2492 0024 97ED057A 	 flds s14,[r7,#20]
 2493 0028 77EE277A 	 fadds s15,s14,s15
 2494 002c C7ED057A 	 fsts s15,[r7,#20]
  35:../dynamics.h **** 	for(uint8_t i = 0; i < 4; i++)
 2495              	 .loc 7 35 0 discriminator 3
 2496 0030 FB7C     	 ldrb r3,[r7,#19]
 2497 0032 0133     	 adds r3,r3,#1
 2498 0034 FB74     	 strb r3,[r7,#19]
 2499              	.L94:
  35:../dynamics.h **** 	for(uint8_t i = 0; i < 4; i++)
 2500              	 .loc 7 35 0 is_stmt 0 discriminator 1
 2501 0036 FB7C     	 ldrb r3,[r7,#19]
 2502 0038 032B     	 cmp r3,#3
 2503 003a EDD9     	 bls .L95
 2504              	.LBE7:
  37:../dynamics.h **** 	result /= 4;
 2505              	 .loc 7 37 0 is_stmt 1
 2506 003c D7ED057A 	 flds s15,[r7,#20]
 2507 0040 B1EE007A 	 fconsts s14,#16
 2508 0044 C7EE877A 	 fdivs s15,s15,s14
 2509 0048 C7ED057A 	 fsts s15,[r7,#20]
  38:../dynamics.h **** 
  39:../dynamics.h **** 	if(buffer[0] > result + threshhold)
 2510              	 .loc 7 39 0
 2511 004c 7B68     	 ldr r3,[r7,#4]
 2512 004e 93ED007A 	 flds s14,[r3]
 2513 0052 D7ED056A 	 flds s13,[r7,#20]
 2514 0056 D7ED037A 	 flds s15,[r7,#12]
 2515 005a 76EEA77A 	 fadds s15,s13,s15
 2516 005e B4EEE77A 	 fcmpes s14,s15
 2517 0062 F1EE10FA 	 fmstat
 2518 0066 01DD     	 ble .L100
  40:../dynamics.h **** 		return 1;
 2519              	 .loc 7 40 0
 2520 0068 0123     	 movs r3,#1
 2521 006a 00E0     	 b .L98
 2522              	.L100:
  41:../dynamics.h **** 	else
  42:../dynamics.h **** 		return 0;
 2523              	 .loc 7 42 0
 2524 006c 0023     	 movs r3,#0
 2525              	.L98:
  43:../dynamics.h **** }
 2526              	 .loc 7 43 0
 2527 006e 1846     	 mov r0,r3
 2528 0070 1C37     	 adds r7,r7,#28
 2529              	.LCFI124:
 2530              	 .cfi_def_cfa_offset 4
 2531 0072 BD46     	 mov sp,r7
 2532              	.LCFI125:
 2533              	 .cfi_def_cfa_register 13
 2534              	 
 2535 0074 5DF8047B 	 ldr r7,[sp],#4
 2536              	.LCFI126:
 2537              	 .cfi_restore 7
 2538              	 .cfi_def_cfa_offset 0
 2539 0078 7047     	 bx lr
 2540              	.L102:
 2541 007a 00BF     	 .align 2
 2542              	.L101:
 2543 007c 0000A040 	 .word 1084227584
 2544              	 .cfi_endproc
 2545              	.LFE338:
 2547              	 .section .text.Reibert_Hopper,"ax",%progbits
 2548              	 .align 2
 2549              	 .global Reibert_Hopper
 2550              	 .thumb
 2551              	 .thumb_func
 2553              	Reibert_Hopper:
 2554              	.LFB339:
  44:../dynamics.h **** void Reibert_Hopper(struct Leg *n)
  45:../dynamics.h **** {
 2555              	 .loc 7 45 0
 2556              	 .cfi_startproc
 2557              	 
 2558              	 
 2559 0000 80B5     	 push {r7,lr}
 2560              	.LCFI127:
 2561              	 .cfi_def_cfa_offset 8
 2562              	 .cfi_offset 7,-8
 2563              	 .cfi_offset 14,-4
 2564 0002 8AB0     	 sub sp,sp,#40
 2565              	.LCFI128:
 2566              	 .cfi_def_cfa_offset 48
 2567 0004 00AF     	 add r7,sp,#0
 2568              	.LCFI129:
 2569              	 .cfi_def_cfa_register 7
 2570 0006 7860     	 str r0,[r7,#4]
  46:../dynamics.h **** 	float min_y = 110;
 2571              	 .loc 7 46 0
 2572 0008 644B     	 ldr r3,.L112
 2573 000a 7B62     	 str r3,[r7,#36]
  47:../dynamics.h **** 	Fk(n);
 2574              	 .loc 7 47 0
 2575 000c 7868     	 ldr r0,[r7,#4]
 2576 000e FFF7FEFF 	 bl Fk
  48:../dynamics.h **** 	//uint8_t touched = Z_score_filter(n->eFY_buffer);		//TODO t jest tylko poglądowe i równowazne z
  49:../dynamics.h **** 	if(t > 20 || hopper != 0)
 2577              	 .loc 7 49 0
 2578 0012 634B     	 ldr r3,.L112+4
 2579 0014 D3ED007A 	 flds s15,[r3]
 2580 0018 B3EE047A 	 fconsts s14,#52
 2581 001c F4EEC77A 	 fcmpes s15,s14
 2582 0020 F1EE10FA 	 fmstat
 2583 0024 04DC     	 bgt .L104
 2584              	 .loc 7 49 0 is_stmt 0 discriminator 1
 2585 0026 5F4B     	 ldr r3,.L112+8
 2586 0028 1B78     	 ldrb r3,[r3]
 2587 002a 002B     	 cmp r3,#0
 2588 002c 00F09B80 	 beq .L105
 2589              	.L104:
  50:../dynamics.h **** 	{
  51:../dynamics.h **** 		hopper = 1;
 2590              	 .loc 7 51 0 is_stmt 1
 2591 0030 5C4B     	 ldr r3,.L112+8
 2592 0032 0122     	 movs r2,#1
 2593 0034 1A70     	 strb r2,[r3]
  52:../dynamics.h **** 
  53:../dynamics.h **** 		if(n->foot.y < min_y)		//jump
 2594              	 .loc 7 53 0
 2595 0036 7B68     	 ldr r3,[r7,#4]
 2596 0038 93ED0F7A 	 flds s14,[r3,#60]
 2597 003c D7ED097A 	 flds s15,[r7,#36]
 2598 0040 B4EEE77A 	 fcmpes s14,s15
 2599 0044 F1EE10FA 	 fmstat
 2600 0048 17D5     	 bpl .L111
  54:../dynamics.h **** 		{
  55:../dynamics.h **** 			hopper = 2;
 2601              	 .loc 7 55 0
 2602 004a 564B     	 ldr r3,.L112+8
 2603 004c 0222     	 movs r2,#2
 2604 004e 1A70     	 strb r2,[r3]
  56:../dynamics.h **** 			n->foot.y = 280;
 2605              	 .loc 7 56 0
 2606 0050 7B68     	 ldr r3,[r7,#4]
 2607 0052 554A     	 ldr r2,.L112+12
 2608 0054 DA63     	 str r2,[r3,#60]
  57:../dynamics.h **** 			Ik(n);
 2609              	 .loc 7 57 0
 2610 0056 7868     	 ldr r0,[r7,#4]
 2611 0058 FFF7FEFF 	 bl Ik
  58:../dynamics.h **** 			n->ks[0] = 5000;
 2612              	 .loc 7 58 0
 2613 005c 7B68     	 ldr r3,[r7,#4]
 2614 005e 41F28832 	 movw r2,#5000
 2615 0062 9A84     	 strh r2,[r3,#36]
  59:../dynamics.h **** 			n->kd[0] = 0;
 2616              	 .loc 7 59 0
 2617 0064 7B68     	 ldr r3,[r7,#4]
 2618 0066 0022     	 movs r2,#0
 2619 0068 1A85     	 strh r2,[r3,#40]
  60:../dynamics.h **** 			n->ks[1] = 5000;
 2620              	 .loc 7 60 0
 2621 006a 7B68     	 ldr r3,[r7,#4]
 2622 006c 41F28832 	 movw r2,#5000
 2623 0070 DA84     	 strh r2,[r3,#38]
  61:../dynamics.h **** 			n->kd[1] = 0;
 2624              	 .loc 7 61 0
 2625 0072 7B68     	 ldr r3,[r7,#4]
 2626 0074 0022     	 movs r2,#0
 2627 0076 5A85     	 strh r2,[r3,#42]
  53:../dynamics.h **** 		{
 2628              	 .loc 7 53 0
 2629 0078 8CE0     	 b .L103
 2630              	.L111:
 2631              	.LBB8:
  62:../dynamics.h **** 		}
  63:../dynamics.h **** 		else										//landing
  64:../dynamics.h **** 		{
  65:../dynamics.h **** 			hopper = 1;
 2632              	 .loc 7 65 0
 2633 007a 4A4B     	 ldr r3,.L112+8
 2634 007c 0122     	 movs r2,#1
 2635 007e 1A70     	 strb r2,[r3]
  66:../dynamics.h **** 			float dy = n->real_foot.y - n->r0;
 2636              	 .loc 7 66 0
 2637 0080 7B68     	 ldr r3,[r7,#4]
 2638 0082 93ED117A 	 flds s14,[r3,#68]
 2639 0086 7B68     	 ldr r3,[r7,#4]
 2640 0088 D3ED217A 	 flds s15,[r3,#132]
 2641 008c 77EE677A 	 fsubs s15,s14,s15
 2642 0090 C7ED087A 	 fsts s15,[r7,#32]
  67:../dynamics.h **** 			float fy = (n->ksr*dy) - (n->kdr*n->real_speed.y);
 2643              	 .loc 7 67 0
 2644 0094 7B68     	 ldr r3,[r7,#4]
 2645 0096 93ED237A 	 flds s14,[r3,#140]
 2646 009a D7ED087A 	 flds s15,[r7,#32]
 2647 009e 27EE277A 	 fmuls s14,s14,s15
 2648 00a2 7B68     	 ldr r3,[r7,#4]
 2649 00a4 D3ED246A 	 flds s13,[r3,#144]
 2650 00a8 7B68     	 ldr r3,[r7,#4]
 2651 00aa D3ED137A 	 flds s15,[r3,#76]
 2652 00ae 66EEA77A 	 fmuls s15,s13,s15
 2653 00b2 77EE677A 	 fsubs s15,s14,s15
 2654 00b6 C7ED077A 	 fsts s15,[r7,#28]
  68:../dynamics.h **** 			float fx = 0;
 2655              	 .loc 7 68 0
 2656 00ba 4FF00003 	 mov r3,#0
 2657 00be BB61     	 str r3,[r7,#24]
  69:../dynamics.h **** 			float t1 = n->J[0][0] * fx + n->J[0][1] * fy;
 2658              	 .loc 7 69 0
 2659 00c0 7B68     	 ldr r3,[r7,#4]
 2660 00c2 93ED257A 	 flds s14,[r3,#148]
 2661 00c6 D7ED067A 	 flds s15,[r7,#24]
 2662 00ca 27EE277A 	 fmuls s14,s14,s15
 2663 00ce 7B68     	 ldr r3,[r7,#4]
 2664 00d0 D3ED266A 	 flds s13,[r3,#152]
 2665 00d4 D7ED077A 	 flds s15,[r7,#28]
 2666 00d8 66EEA77A 	 fmuls s15,s13,s15
 2667 00dc 77EE277A 	 fadds s15,s14,s15
 2668 00e0 C7ED057A 	 fsts s15,[r7,#20]
  70:../dynamics.h **** 			float t2 = n->J[1][0] * fx + n->J[1][1] * fy;
 2669              	 .loc 7 70 0
 2670 00e4 7B68     	 ldr r3,[r7,#4]
 2671 00e6 93ED277A 	 flds s14,[r3,#156]
 2672 00ea D7ED067A 	 flds s15,[r7,#24]
 2673 00ee 27EE277A 	 fmuls s14,s14,s15
 2674 00f2 7B68     	 ldr r3,[r7,#4]
 2675 00f4 D3ED286A 	 flds s13,[r3,#160]
 2676 00f8 D7ED077A 	 flds s15,[r7,#28]
 2677 00fc 66EEA77A 	 fmuls s15,s13,s15
 2678 0100 77EE277A 	 fadds s15,s14,s15
 2679 0104 C7ED047A 	 fsts s15,[r7,#16]
  71:../dynamics.h **** 			float dTeta = n->r0_angle - n->ang_abs_rad[0];
 2680              	 .loc 7 71 0
 2681 0108 7B68     	 ldr r3,[r7,#4]
 2682 010a 93ED227A 	 flds s14,[r3,#136]
 2683 010e 7B68     	 ldr r3,[r7,#4]
 2684 0110 D3ED167A 	 flds s15,[r3,#88]
 2685 0114 77EE677A 	 fsubs s15,s14,s15
 2686 0118 C7ED037A 	 fsts s15,[r7,#12]
  72:../dynamics.h **** 			dTeta = t1 / dTeta;
 2687              	 .loc 7 72 0
 2688 011c 97ED057A 	 flds s14,[r7,#20]
 2689 0120 D7ED037A 	 flds s15,[r7,#12]
 2690 0124 C7EE277A 	 fdivs s15,s14,s15
 2691 0128 C7ED037A 	 fsts s15,[r7,#12]
  73:../dynamics.h **** 			//n->ks[0] = dTeta;
  74:../dynamics.h **** 
  75:../dynamics.h **** 			dTeta = n->r0_angle - n->ang_abs_rad[1];
 2692              	 .loc 7 75 0
 2693 012c 7B68     	 ldr r3,[r7,#4]
 2694 012e 93ED227A 	 flds s14,[r3,#136]
 2695 0132 7B68     	 ldr r3,[r7,#4]
 2696 0134 D3ED177A 	 flds s15,[r3,#92]
 2697 0138 77EE677A 	 fsubs s15,s14,s15
 2698 013c C7ED037A 	 fsts s15,[r7,#12]
  76:../dynamics.h **** 			dTeta = t2 / dTeta;
 2699              	 .loc 7 76 0
 2700 0140 97ED047A 	 flds s14,[r7,#16]
 2701 0144 D7ED037A 	 flds s15,[r7,#12]
 2702 0148 C7EE277A 	 fdivs s15,s14,s15
 2703 014c C7ED037A 	 fsts s15,[r7,#12]
  77:../dynamics.h **** 			//n->ks[1] = dTeta;
  78:../dynamics.h **** 			n->teta[0] = n->r0_angle;
 2704              	 .loc 7 78 0
 2705 0150 7B68     	 ldr r3,[r7,#4]
 2706 0152 D3F88820 	 ldr r2,[r3,#136]
 2707 0156 7B68     	 ldr r3,[r7,#4]
 2708 0158 1A65     	 str r2,[r3,#80]
  79:../dynamics.h **** 			n->teta[1] = n->r0_angle;
 2709              	 .loc 7 79 0
 2710 015a 7B68     	 ldr r3,[r7,#4]
 2711 015c D3F88820 	 ldr r2,[r3,#136]
 2712 0160 7B68     	 ldr r3,[r7,#4]
 2713 0162 5A65     	 str r2,[r3,#84]
 2714              	.LBE8:
  53:../dynamics.h **** 		{
 2715              	 .loc 7 53 0
 2716 0164 16E0     	 b .L103
 2717              	.L105:
  80:../dynamics.h **** 		}
  81:../dynamics.h **** 	}
  82:../dynamics.h **** 	else			//flight
  83:../dynamics.h **** 	{
  84:../dynamics.h **** 		hopper = 0;
 2718              	 .loc 7 84 0
 2719 0166 0F4B     	 ldr r3,.L112+8
 2720 0168 0022     	 movs r2,#0
 2721 016a 1A70     	 strb r2,[r3]
  85:../dynamics.h **** 		n->foot.y = 250;
 2722              	 .loc 7 85 0
 2723 016c 7B68     	 ldr r3,[r7,#4]
 2724 016e 0F4A     	 ldr r2,.L112+16
 2725 0170 DA63     	 str r2,[r3,#60]
  86:../dynamics.h **** 		Ik(n);
 2726              	 .loc 7 86 0
 2727 0172 7868     	 ldr r0,[r7,#4]
 2728 0174 FFF7FEFF 	 bl Ik
  87:../dynamics.h **** 		n->ks[0] = 200;
 2729              	 .loc 7 87 0
 2730 0178 7B68     	 ldr r3,[r7,#4]
 2731 017a C822     	 movs r2,#200
 2732 017c 9A84     	 strh r2,[r3,#36]
  88:../dynamics.h **** 		n->ks[1] = 200;
 2733              	 .loc 7 88 0
 2734 017e 7B68     	 ldr r3,[r7,#4]
 2735 0180 C822     	 movs r2,#200
 2736 0182 DA84     	 strh r2,[r3,#38]
  89:../dynamics.h **** 		n->kd[0] = 1500;
 2737              	 .loc 7 89 0
 2738 0184 7B68     	 ldr r3,[r7,#4]
 2739 0186 40F2DC52 	 movw r2,#1500
 2740 018a 1A85     	 strh r2,[r3,#40]
  90:../dynamics.h **** 		n->kd[0] = 1500;
 2741              	 .loc 7 90 0
 2742 018c 7B68     	 ldr r3,[r7,#4]
 2743 018e 40F2DC52 	 movw r2,#1500
 2744 0192 1A85     	 strh r2,[r3,#40]
 2745              	.L103:
  91:../dynamics.h **** 	}
  92:../dynamics.h **** }
 2746              	 .loc 7 92 0
 2747 0194 2837     	 adds r7,r7,#40
 2748              	.LCFI130:
 2749              	 .cfi_def_cfa_offset 8
 2750 0196 BD46     	 mov sp,r7
 2751              	.LCFI131:
 2752              	 .cfi_def_cfa_register 13
 2753              	 
 2754 0198 80BD     	 pop {r7,pc}
 2755              	.L113:
 2756 019a 00BF     	 .align 2
 2757              	.L112:
 2758 019c 0000DC42 	 .word 1121714176
 2759 01a0 00000000 	 .word t
 2760 01a4 00000000 	 .word hopper
 2761 01a8 00008C43 	 .word 1133248512
 2762 01ac 00007A43 	 .word 1132068864
 2763              	 .cfi_endproc
 2764              	.LFE339:
 2766              	 .section .text.main,"ax",%progbits
 2767              	 .align 2
 2768              	 .global main
 2769              	 .thumb
 2770              	 .thumb_func
 2772              	main:
 2773              	.LFB340:
 2774              	 .file 8 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** #include <DAVE.h>
   3:../main.c     **** #include <math.h>
   4:../main.c     **** #include "variables.h"
   5:../main.c     **** #include "kinematics.h"
   6:../main.c     **** #include "communications.h"
   7:../main.c     **** #include "dynamics.h"
   8:../main.c     **** 
   9:../main.c     **** uint8_t Motors_go_nogo();
  10:../main.c     **** 
  11:../main.c     **** int main(void)
  12:../main.c     **** {
 2775              	 .loc 8 12 0
 2776              	 .cfi_startproc
 2777              	 
 2778              	 
 2779 0000 80B5     	 push {r7,lr}
 2780              	.LCFI132:
 2781              	 .cfi_def_cfa_offset 8
 2782              	 .cfi_offset 7,-8
 2783              	 .cfi_offset 14,-4
 2784 0002 82B0     	 sub sp,sp,#8
 2785              	.LCFI133:
 2786              	 .cfi_def_cfa_offset 16
 2787 0004 00AF     	 add r7,sp,#0
 2788              	.LCFI134:
 2789              	 .cfi_def_cfa_register 7
  13:../main.c     ****   DAVE_STATUS_t status;
  14:../main.c     ****   status = DAVE_Init();
 2790              	 .loc 8 14 0
 2791 0006 FFF7FEFF 	 bl DAVE_Init
 2792 000a 0346     	 mov r3,r0
 2793 000c FB71     	 strb r3,[r7,#7]
  15:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 2794              	 .loc 8 15 0
 2795 000e 06E0     	 b .L115
 2796              	.L116:
  16:../main.c     ****   {
  17:../main.c     **** 	  delay(50000);
 2797              	 .loc 8 17 0
 2798 0010 4CF25030 	 movw r0,#50000
 2799 0014 FFF7FEFF 	 bl delay
  18:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
 2800              	 .loc 8 18 0
 2801 0018 2648     	 ldr r0,.L118
 2802 001a FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 2803              	.L115:
  15:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 2804              	 .loc 8 15 0
 2805 001e FB79     	 ldrb r3,[r7,#7]
 2806 0020 012B     	 cmp r3,#1
 2807 0022 F5D0     	 beq .L116
  19:../main.c     ****   }
  20:../main.c     ****   delay(250000);
 2808              	 .loc 8 20 0
 2809 0024 2448     	 ldr r0,.L118+4
 2810 0026 FFF7FEFF 	 bl delay
  21:../main.c     ****   Init();
 2811              	 .loc 8 21 0
 2812 002a FFF7FEFF 	 bl Init
  22:../main.c     ****  /*
  23:../main.c     ****   while(init == 0)							//wait for input from PC
  24:../main.c     ****   {
  25:../main.c     **** 	  delay(500000);
  26:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
  27:../main.c     ****   }
  28:../main.c     ****   */
  29:../main.c     **** 
  30:../main.c     ****   XMC_Init(10);
 2813              	 .loc 8 30 0
 2814 002e 0A20     	 movs r0,#10
 2815 0030 FFF7FEFF 	 bl XMC_Init
 2816              	.L117:
  31:../main.c     **** 
  32:../main.c     **** /*
  33:../main.c     ****   while(motors_go == 0)				//Procedure to check if all motors are go
  34:../main.c     ****   {
  35:../main.c     **** 	  XMC_Check();
  36:../main.c     **** 	  if(Motors_go_nogo() == 0)
  37:../main.c     **** 		  XMC_Init(10);
  38:../main.c     ****   }
  39:../main.c     **** */
  40:../main.c     ****   while(1)
  41:../main.c     ****   {
  42:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 2817              	 .loc 8 42 0 discriminator 1
 2818 0034 1F48     	 ldr r0,.L118
 2819 0036 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
  43:../main.c     **** 	  Ik(&stanowisko);
 2820              	 .loc 8 43 0 discriminator 1
 2821 003a 2048     	 ldr r0,.L118+8
 2822 003c FFF7FEFF 	 bl Ik
  44:../main.c     **** 	  Update(&stanowisko);
 2823              	 .loc 8 44 0 discriminator 1
 2824 0040 1E48     	 ldr r0,.L118+8
 2825 0042 FFF7FEFF 	 bl Update
  45:../main.c     **** 	 stanowisko.torque[0] = -TorqueFromInet(stanowisko.i_net[0]);
 2826              	 .loc 8 45 0 discriminator 1
 2827 0046 1D4B     	 ldr r3,.L118+8
 2828 0048 DB88     	 ldrh r3,[r3,#6]
 2829 004a 9BB2     	 uxth r3,r3
 2830 004c 1846     	 mov r0,r3
 2831 004e FFF7FEFF 	 bl TorqueFromInet
 2832 0052 0346     	 mov r3,r0
 2833 0054 07EE903A 	 fmsr s15,r3
 2834 0058 F1EE677A 	 fnegs s15,s15
 2835 005c 174B     	 ldr r3,.L118+8
 2836 005e C3ED1F7A 	 fsts s15,[r3,#124]
  46:../main.c     **** 	 stanowisko.torque[1] = TorqueFromInet(stanowisko.i_net[1]);
 2837              	 .loc 8 46 0 discriminator 1
 2838 0062 164B     	 ldr r3,.L118+8
 2839 0064 1B89     	 ldrh r3,[r3,#8]
 2840 0066 9BB2     	 uxth r3,r3
 2841 0068 1846     	 mov r0,r3
 2842 006a FFF7FEFF 	 bl TorqueFromInet
 2843 006e 0246     	 mov r2,r0
 2844 0070 124B     	 ldr r3,.L118+8
 2845 0072 C3F88020 	 str r2,[r3,#128]
  47:../main.c     **** 	 t = Z_score_filter(stanowisko.eFY_buffer) * 25;
 2846              	 .loc 8 47 0 discriminator 1
 2847 0076 1248     	 ldr r0,.L118+12
 2848 0078 FFF7FEFF 	 bl Z_score_filter
 2849 007c 0346     	 mov r3,r0
 2850 007e 1A46     	 mov r2,r3
 2851 0080 1346     	 mov r3,r2
 2852 0082 9B00     	 lsls r3,r3,#2
 2853 0084 1344     	 add r3,r3,r2
 2854 0086 9A00     	 lsls r2,r3,#2
 2855 0088 1344     	 add r3,r3,r2
 2856 008a 07EE903A 	 fmsr s15,r3
 2857 008e F8EEE77A 	 fsitos s15,s15
 2858 0092 0C4B     	 ldr r3,.L118+16
 2859 0094 C3ED007A 	 fsts s15,[r3]
  48:../main.c     **** 	 //Reibert_Hopper(&stanowisko);
  49:../main.c     **** 	 Fk(&stanowisko);
 2860              	 .loc 8 49 0 discriminator 1
 2861 0098 0848     	 ldr r0,.L118+8
 2862 009a FFF7FEFF 	 bl Fk
  50:../main.c     **** 	//  t+= dt;
  51:../main.c     **** 	  Send_Leg(&stanowisko);
 2863              	 .loc 8 51 0 discriminator 1
 2864 009e 0748     	 ldr r0,.L118+8
 2865 00a0 FFF7FEFF 	 bl Send_Leg
  52:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 2866              	 .loc 8 52 0 discriminator 1
 2867 00a4 0348     	 ldr r0,.L118
 2868 00a6 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
  53:../main.c     **** 	  delay(30000);
 2869              	 .loc 8 53 0 discriminator 1
 2870 00aa 47F23050 	 movw r0,#30000
 2871 00ae FFF7FEFF 	 bl delay
  54:../main.c     ****   }
 2872              	 .loc 8 54 0 discriminator 1
 2873 00b2 BFE7     	 b .L117
 2874              	.L119:
 2875              	 .align 2
 2876              	.L118:
 2877 00b4 00000000 	 .word LED1
 2878 00b8 90D00300 	 .word 250000
 2879 00bc 00000000 	 .word stanowisko
 2880 00c0 68000000 	 .word stanowisko+104
 2881 00c4 00000000 	 .word t
 2882              	 .cfi_endproc
 2883              	.LFE340:
 2885              	 .section .text.Motors_go_nogo,"ax",%progbits
 2886              	 .align 2
 2887              	 .global Motors_go_nogo
 2888              	 .thumb
 2889              	 .thumb_func
 2891              	Motors_go_nogo:
 2892              	.LFB341:
  55:../main.c     **** }
  56:../main.c     **** 
  57:../main.c     **** uint8_t Motors_go_nogo()			//Chceck if all motor are initialized properly and ready to be driven TO
  58:../main.c     **** {
 2893              	 .loc 8 58 0
 2894              	 .cfi_startproc
 2895              	 
 2896              	 
 2897              	 
 2898 0000 80B4     	 push {r7}
 2899              	.LCFI135:
 2900              	 .cfi_def_cfa_offset 4
 2901              	 .cfi_offset 7,-4
 2902 0002 83B0     	 sub sp,sp,#12
 2903              	.LCFI136:
 2904              	 .cfi_def_cfa_offset 16
 2905 0004 00AF     	 add r7,sp,#0
 2906              	.LCFI137:
 2907              	 .cfi_def_cfa_register 7
 2908              	.LBB9:
  59:../main.c     **** 	for(uint8_t i =0; i < 2; i++)
 2909              	 .loc 8 59 0
 2910 0006 0023     	 movs r3,#0
 2911 0008 FB71     	 strb r3,[r7,#7]
 2912 000a 0BE0     	 b .L121
 2913              	.L123:
  60:../main.c     **** 	{
  61:../main.c     **** 		if(stanowisko.motor_go[i] == 0)
 2914              	 .loc 8 61 0
 2915 000c FB79     	 ldrb r3,[r7,#7]
 2916 000e 0D4A     	 ldr r2,.L126
 2917 0010 1344     	 add r3,r3,r2
 2918 0012 9B78     	 ldrb r3,[r3,#2]
 2919 0014 002B     	 cmp r3,#0
 2920 0016 02D1     	 bne .L122
  62:../main.c     **** 			motors_go = 0;
 2921              	 .loc 8 62 0
 2922 0018 0B4B     	 ldr r3,.L126+4
 2923 001a 0022     	 movs r2,#0
 2924 001c 1A70     	 strb r2,[r3]
 2925              	.L122:
  59:../main.c     **** 	for(uint8_t i =0; i < 2; i++)
 2926              	 .loc 8 59 0 discriminator 2
 2927 001e FB79     	 ldrb r3,[r7,#7]
 2928 0020 0133     	 adds r3,r3,#1
 2929 0022 FB71     	 strb r3,[r7,#7]
 2930              	.L121:
  59:../main.c     **** 	for(uint8_t i =0; i < 2; i++)
 2931              	 .loc 8 59 0 is_stmt 0 discriminator 1
 2932 0024 FB79     	 ldrb r3,[r7,#7]
 2933 0026 012B     	 cmp r3,#1
 2934 0028 F0D9     	 bls .L123
 2935              	.LBE9:
  63:../main.c     **** 	}
  64:../main.c     **** 	if(motors_go == 1)
 2936              	 .loc 8 64 0 is_stmt 1
 2937 002a 074B     	 ldr r3,.L126+4
 2938 002c 1B78     	 ldrb r3,[r3]
 2939 002e 012B     	 cmp r3,#1
 2940 0030 01D1     	 bne .L124
  65:../main.c     **** 		return 1;
 2941              	 .loc 8 65 0
 2942 0032 0123     	 movs r3,#1
 2943 0034 00E0     	 b .L125
 2944              	.L124:
  66:../main.c     **** 	else
  67:../main.c     **** 		return 0;
 2945              	 .loc 8 67 0
 2946 0036 0023     	 movs r3,#0
 2947              	.L125:
  68:../main.c     **** }
 2948              	 .loc 8 68 0
 2949 0038 1846     	 mov r0,r3
 2950 003a 0C37     	 adds r7,r7,#12
 2951              	.LCFI138:
 2952              	 .cfi_def_cfa_offset 4
 2953 003c BD46     	 mov sp,r7
 2954              	.LCFI139:
 2955              	 .cfi_def_cfa_register 13
 2956              	 
 2957 003e 5DF8047B 	 ldr r7,[sp],#4
 2958              	.LCFI140:
 2959              	 .cfi_restore 7
 2960              	 .cfi_def_cfa_offset 0
 2961 0042 7047     	 bx lr
 2962              	.L127:
 2963              	 .align 2
 2964              	.L126:
 2965 0044 00000000 	 .word stanowisko
 2966 0048 00000000 	 .word motors_go
 2967              	 .cfi_endproc
 2968              	.LFE341:
 2970              	 .text
 2971              	.Letext0:
 2972              	 .file 9 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2973              	 .file 10 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2974              	 .file 11 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2975              	 .file 12 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
 2976              	 .file 13 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_gpio.h"
 2977              	 .file 14 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_usic.h"
 2978              	 .file 15 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_uart.h"
 2979              	 .file 16 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
 2980              	 .file 17 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 2981              	 .file 18 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer.h"
 2982              	 .file 19 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DAVE.h"
 2983              	 .file 20 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Include/core_cm4.h"
 2984              	 .file 21 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 2985              	 .file 22 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 2986              	 .file 23 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer_extern.h"
 2987              	 .file 24 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_ToggleOutput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_ToggleOutput:00000000 XMC_GPIO_ToggleOutput
    {standard input}:162    .text.UART_IsTxBusy:00000000 $t
    {standard input}:166    .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:208    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:212    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:252    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:256    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:295    .text.DIGITAL_IO_ToggleOutput:00000000 $t
    {standard input}:299    .text.DIGITAL_IO_ToggleOutput:00000000 DIGITAL_IO_ToggleOutput
    {standard input}:342    .data.pi:00000000 pi
    {standard input}:339    .data.pi:00000000 $d
    {standard input}:349    .data.l1:00000000 l1
    {standard input}:346    .data.l1:00000000 $d
    {standard input}:356    .data.l2:00000000 l2
    {standard input}:353    .data.l2:00000000 $d
    {standard input}:363    .data.d:00000000 d
    {standard input}:360    .data.d:00000000 $d
    {standard input}:370    .bss.t:00000000 t
    {standard input}:367    .bss.t:00000000 $d
    {standard input}:377    .data.dt:00000000 dt
    {standard input}:374    .data.dt:00000000 $d
                            *COM*:0000000a rxData
                            *COM*:0000000a txData
    {standard input}:385    .data.adress:00000000 adress
    {standard input}:391    .bss.rxByte:00000000 rxByte
    {standard input}:392    .bss.rxByte:00000000 $d
    {standard input}:397    .bss.iterator_wiadomosci:00000000 iterator_wiadomosci
    {standard input}:398    .bss.iterator_wiadomosci:00000000 $d
    {standard input}:403    .data.is_delay:00000000 is_delay
    {standard input}:409    .bss.init:00000000 init
    {standard input}:410    .bss.init:00000000 $d
    {standard input}:415    .bss.motors_go:00000000 motors_go
    {standard input}:416    .bss.motors_go:00000000 $d
                            *COM*:000000a8 stanowisko
    {standard input}:419    .text.delay:00000000 $t
    {standard input}:424    .text.delay:00000000 delay
    {standard input}:482    .text.delay:0000003c $d
    {standard input}:488    .text.Init:00000000 $t
    {standard input}:493    .text.Init:00000000 Init
    {standard input}:646    .text.Init:000000e0 $d
    {standard input}:655    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:660    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:691    .text.CCU43_1_IRQHandler:00000014 $d
    {standard input}:696    .text.Ik:00000000 $t
    {standard input}:701    .text.Ik:00000000 Ik
    {standard input}:872    .text.Ik:000001d0 $d
    {standard input}:879    .text.Fk:00000000 $t
    {standard input}:884    .text.Fk:00000000 Fk
    {standard input}:1194   .text.Fk:0000038c $d
    {standard input}:1199   .text.Fk:0000039c $t
    {standard input}:1363   .text.Fk:0000054c $d
    {standard input}:1369   .text.Update:00000000 $t
    {standard input}:1374   .text.Update:00000000 Update
    {standard input}:1478   .text.Update:000000e0 $d
    {standard input}:1487   .text.Trajectory:00000000 $t
    {standard input}:1492   .text.Trajectory:00000000 Trajectory
    {standard input}:1552   .text.Trajectory:0000004c $d
    {standard input}:1558   .text.XMC_Init:00000000 $t
    {standard input}:1563   .text.XMC_Init:00000000 XMC_Init
    {standard input}:2205   .text.Send:00000000 Send
    {standard input}:1661   .text.XMC_Init:00000078 $d
    {standard input}:1666   .text.XMC_Check:00000000 $t
    {standard input}:1671   .text.XMC_Check:00000000 XMC_Check
    {standard input}:1742   .text.XMC_Check:00000050 $d
    {standard input}:1748   .text.eorx:00000000 $t
    {standard input}:1753   .text.eorx:00000000 eorx
    {standard input}:1883   .text.Message_interpreter:00000000 Message_interpreter
    {standard input}:1837   .text.eorx:00000070 $d
    {standard input}:1845   .text.eotx:00000000 $t
    {standard input}:1850   .text.eotx:00000000 eotx
    {standard input}:1878   .text.Message_interpreter:00000000 $t
    {standard input}:2009   .text.Message_interpreter:000000ac $d
    {standard input}:2016   .text.Send_Leg:00000000 $t
    {standard input}:2021   .text.Send_Leg:00000000 Send_Leg
    {standard input}:2193   .text.Send_Leg:00000128 $d
    {standard input}:2200   .text.Send:00000000 $t
    {standard input}:2256   .text.Send:00000034 $d
    {standard input}:2266   .bss.hopper:00000000 hopper
    {standard input}:2267   .bss.hopper:00000000 $d
    {standard input}:2269   .text.TorqueFromInet:00000000 $t
    {standard input}:2274   .text.TorqueFromInet:00000000 TorqueFromInet
    {standard input}:2342   .text.TorqueFromInet:00000068 $d
    {standard input}:2353   .text.VrefFromTorque:00000000 $t
    {standard input}:2358   .text.VrefFromTorque:00000000 VrefFromTorque
    {standard input}:2441   .text.VrefFromTorque:000000a0 $d
    {standard input}:2451   .text.Z_score_filter:00000000 $t
    {standard input}:2456   .text.Z_score_filter:00000000 Z_score_filter
    {standard input}:2543   .text.Z_score_filter:0000007c $d
    {standard input}:2548   .text.Reibert_Hopper:00000000 $t
    {standard input}:2553   .text.Reibert_Hopper:00000000 Reibert_Hopper
    {standard input}:2758   .text.Reibert_Hopper:0000019c $d
    {standard input}:2767   .text.main:00000000 $t
    {standard input}:2772   .text.main:00000000 main
    {standard input}:2877   .text.main:000000b4 $d
    {standard input}:2886   .text.Motors_go_nogo:00000000 $t
    {standard input}:2891   .text.Motors_go_nogo:00000000 Motors_go_nogo
    {standard input}:2965   .text.Motors_go_nogo:00000044 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIMER_SetTimeInterval
TIMER_Start
TIMER_Stop
DELAY
sqrtf
acosf
asinf
sinf
cosf
atan2f
LED1
UART_Receive
RS
UART_Transmit
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
DAVE_Init
