   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.XMC_GPIO_ToggleOutput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_ToggleOutput:
 120              	.LFB166:
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 309 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 139              	 .loc 1 312 0
 140 000c FB78     	 ldrb r3,[r7,#3]
 141 000e 4FF00112 	 mov r2,#65537
 142 0012 9A40     	 lsls r2,r2,r3
 143 0014 7B68     	 ldr r3,[r7,#4]
 144 0016 5A60     	 str r2,[r3,#4]
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 313 0
 146 0018 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001a BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001c 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0020 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE166:
 161 0022 00BF     	 .section .text.UART_IsTxBusy,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	UART_IsTxBusy:
 167              	.LFB267:
 168              	 .file 2 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** {
 169              	 .loc 2 2117 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
 185              	 .loc 2 2119 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 9B68     	 ldr r3,[r3,#8]
 188 000c 1B7E     	 ldrb r3,[r3,#24]
 189 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART\uart.h **** }
 190              	 .loc 2 2120 0
 191 0010 1846     	 mov r0,r3
 192 0012 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0014 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 0016 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001a 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE267:
 207              	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	DIGITAL_IO_SetOutputHigh:
 213              	.LFB269:
 214              	 .file 3 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 215              	 .loc 3 269 0
 216              	 .cfi_startproc
 217              	 
 218              	 
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI25:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI26:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 231              	 .loc 3 271 0
 232 0008 7B68     	 ldr r3,[r7,#4]
 233 000a 1A68     	 ldr r2,[r3]
 234 000c 7B68     	 ldr r3,[r7,#4]
 235 000e 1B7C     	 ldrb r3,[r3,#16]
 236 0010 1046     	 mov r0,r2
 237 0012 1946     	 mov r1,r3
 238 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 239              	 .loc 3 272 0
 240 0018 0837     	 adds r7,r7,#8
 241              	.LCFI27:
 242              	 .cfi_def_cfa_offset 8
 243 001a BD46     	 mov sp,r7
 244              	.LCFI28:
 245              	 .cfi_def_cfa_register 13
 246              	 
 247 001c 80BD     	 pop {r7,pc}
 248              	 .cfi_endproc
 249              	.LFE269:
 251 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 252              	 .align 2
 253              	 .thumb
 254              	 .thumb_func
 256              	DIGITAL_IO_SetOutputLow:
 257              	.LFB270:
 273:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 258              	 .loc 3 316 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262 0000 80B5     	 push {r7,lr}
 263              	.LCFI29:
 264              	 .cfi_def_cfa_offset 8
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 82B0     	 sub sp,sp,#8
 268              	.LCFI30:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI31:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 274              	 .loc 3 318 0
 275 0008 7B68     	 ldr r3,[r7,#4]
 276 000a 1A68     	 ldr r2,[r3]
 277 000c 7B68     	 ldr r3,[r7,#4]
 278 000e 1B7C     	 ldrb r3,[r3,#16]
 279 0010 1046     	 mov r0,r2
 280 0012 1946     	 mov r1,r3
 281 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 282              	 .loc 3 319 0
 283 0018 0837     	 adds r7,r7,#8
 284              	.LCFI32:
 285              	 .cfi_def_cfa_offset 8
 286 001a BD46     	 mov sp,r7
 287              	.LCFI33:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 001c 80BD     	 pop {r7,pc}
 291              	 .cfi_endproc
 292              	.LFE270:
 294 001e 00BF     	 .section .text.DIGITAL_IO_ToggleOutput,"ax",%progbits
 295              	 .align 2
 296              	 .thumb
 297              	 .thumb_func
 299              	DIGITAL_IO_ToggleOutput:
 300              	.LFB271:
 320:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 321:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 322:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to Toggle port pin.
 323:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 324:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 325:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 326:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 327:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to toggle port pin.
 328:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 329:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 330:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputLow(), DIGITAL_IO_SetOutputHigh()
 331:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 332:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 333:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 334:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 335:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 336:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 337:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 338:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 339:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   uint32_t delay_count;;
 340:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 341:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 342:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 343:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 344:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 345:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 346:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 347:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 348:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 349:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 350:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 351:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 352:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 353:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 354:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 355:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 1 -> 0 (if initial output level is logic
 356:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 357:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 358:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0); //toggles : 0 -> 1
 359:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      //Add application code here
 360:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *      for(delay_count = 0;delay_count<0xfffff;delay_count++);
 361:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 362:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 363:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 364:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 365:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 366:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 367:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
 368:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 301              	 .loc 3 368 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305 0000 80B5     	 push {r7,lr}
 306              	.LCFI34:
 307              	 .cfi_def_cfa_offset 8
 308              	 .cfi_offset 7,-8
 309              	 .cfi_offset 14,-4
 310 0002 82B0     	 sub sp,sp,#8
 311              	.LCFI35:
 312              	 .cfi_def_cfa_offset 16
 313 0004 00AF     	 add r7,sp,#0
 314              	.LCFI36:
 315              	 .cfi_def_cfa_register 7
 316 0006 7860     	 str r0,[r7,#4]
 369:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
 370:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 317              	 .loc 3 370 0
 318 0008 7B68     	 ldr r3,[r7,#4]
 319 000a 1A68     	 ldr r2,[r3]
 320 000c 7B68     	 ldr r3,[r7,#4]
 321 000e 1B7C     	 ldrb r3,[r3,#16]
 322 0010 1046     	 mov r0,r2
 323 0012 1946     	 mov r1,r3
 324 0014 FFF7FEFF 	 bl XMC_GPIO_ToggleOutput
 371:C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 325              	 .loc 3 371 0
 326 0018 0837     	 adds r7,r7,#8
 327              	.LCFI37:
 328              	 .cfi_def_cfa_offset 8
 329 001a BD46     	 mov sp,r7
 330              	.LCFI38:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 001c 80BD     	 pop {r7,pc}
 334              	 .cfi_endproc
 335              	.LFE271:
 337              	 .global pi
 338 001e 00BF     	 .section .data.pi,"aw",%progbits
 339              	 .align 2
 342              	pi:
 343 0000 D00F4940 	 .word 1078530000
 344              	 .global l1
 345              	 .section .data.l1,"aw",%progbits
 346              	 .align 2
 349              	l1:
 350 0000 0000C842 	 .word 1120403456
 351              	 .global l2
 352              	 .section .data.l2,"aw",%progbits
 353              	 .align 2
 356              	l2:
 357 0000 00004843 	 .word 1128792064
 358              	 .global d
 359              	 .section .data.d,"aw",%progbits
 360              	 .align 2
 363              	d:
 364 0000 0000B242 	 .word 1118961664
 365              	 .global t
 366              	 .section .bss.t,"aw",%nobits
 367              	 .align 2
 370              	t:
 371 0000 00000000 	 .space 4
 372              	 .global dt
 373              	 .section .data.dt,"aw",%progbits
 374              	 .align 2
 377              	dt:
 378 0000 0000803E 	 .word 1048576000
 379              	 .global lkroku
 380              	 .section .data.lkroku,"aw",%progbits
 381              	 .align 2
 384              	lkroku:
 385 0000 0000C841 	 .word 1103626240
 386              	 .global hkroku
 387              	 .section .data.hkroku,"aw",%progbits
 388              	 .align 2
 391              	hkroku:
 392 0000 000070C2 	 .word -1032847360
 393              	 .global h_korpus
 394              	 .section .data.h_korpus,"aw",%progbits
 395              	 .align 2
 398              	h_korpus:
 399 0000 00002043 	 .word 1126170624
 400              	 .global faza
 401              	 .section .data.faza,"aw",%progbits
 404              	faza:
 405 0000 01       	 .byte 1
 406              	 .global czas_petli
 407              	 .section .data.czas_petli,"aw",%progbits
 408              	 .align 2
 411              	czas_petli:
 412 0000 C3F5A83E 	 .word 1051260355
 413              	 .global predkosc
 414              	 .section .bss.predkosc,"aw",%nobits
 415              	 .align 2
 418              	predkosc:
 419 0000 00000000 	 .space 4
 420              	 .global dx
 421              	 .section .bss.dx,"aw",%nobits
 422              	 .align 2
 425              	dx:
 426 0000 00000000 	 .space 4
 427              	 .comm rxData,10,4
 428              	 .comm txData,10,4
 429              	 .global adress
 430              	 .section .data.adress,"aw",%progbits
 433              	adress:
 434 0000 EE       	 .byte -18
 435              	 .global rxByte
 436              	 .section .bss.rxByte,"aw",%nobits
 439              	rxByte:
 440 0000 00       	 .space 1
 441              	 .global iterator_wiadomosci
 442              	 .section .bss.iterator_wiadomosci,"aw",%nobits
 445              	iterator_wiadomosci:
 446 0000 00       	 .space 1
 447              	 .global response_delay
 448              	 .section .data.response_delay,"aw",%progbits
 449              	 .align 1
 452              	response_delay:
 453 0000 B004     	 .short 1200
 454              	 .global is_delay
 455              	 .section .data.is_delay,"aw",%progbits
 458              	is_delay:
 459 0000 01       	 .byte 1
 460              	 .global init
 461              	 .section .bss.init,"aw",%nobits
 464              	init:
 465 0000 00       	 .space 1
 466              	 .comm motors,352,4
 467              	 .comm Legs,352,4
 468              	 .section .text.delay,"ax",%progbits
 469              	 .align 2
 470              	 .global delay
 471              	 .thumb
 472              	 .thumb_func
 474              	delay:
 475              	.LFB322:
 476              	 .file 4 "../variables.h"
   1:../variables.h **** #define SOF 0xCC			//start of message
   2:../variables.h **** #define EOF 0xDD			//end of message
   3:../variables.h **** #define INIT 0xA1			//init message
   4:../variables.h **** #define CHECK 0xA3			//go no go message
   5:../variables.h **** 
   6:../variables.h **** // kinematics vars
   7:../variables.h **** float pi = 3.14159f;
   8:../variables.h **** float l1 =100;					//length of thight
   9:../variables.h **** float l2 =200;					//length of tibia
  10:../variables.h **** float d =89;					//distance between motors
  11:../variables.h **** float t = 0.0f;					//time of execution
  12:../variables.h **** float dt = 0.25;				//delta t
  13:../variables.h **** float lkroku = 25;
  14:../variables.h **** float hkroku = -60;
  15:../variables.h **** float h_korpus = 160;
  16:../variables.h **** uint8_t faza = 1;
  17:../variables.h **** float czas_petli = 0.33f;
  18:../variables.h **** float predkosc = 0;
  19:../variables.h **** float dx = 0;
  20:../variables.h **** 
  21:../variables.h **** //communication vars
  22:../variables.h **** uint8_t rxData[10];						//buffer for incoming messages
  23:../variables.h **** uint8_t txData[10];						//buffer for outgoing messages
  24:../variables.h **** uint8_t adress =0xEE;					//adress of Controller device
  25:../variables.h **** uint8_t rxByte = 0;						//temprorary incoming byte holder
  26:../variables.h **** uint8_t iterator_wiadomosci = 0;		//message iterator
  27:../variables.h **** uint16_t response_delay = 1200;			//how long to wait for a response from driver
  28:../variables.h **** //other vars
  29:../variables.h **** uint8_t is_delay = 1;					//is on active delay
  30:../variables.h **** uint8_t init = 0;						//is initiated
  31:../variables.h **** 
  32:../variables.h **** struct Motor
  33:../variables.h **** {
  34:../variables.h **** 	uint8_t motor_n;						//driver numbers
  35:../variables.h **** 	uint8_t is_go;								//is motor go
  36:../variables.h **** 	uint8_t adress;							//adresses
  37:../variables.h **** 	int16_t i_net;								//summarized current
  38:../variables.h **** 	int32_t ang_abs;						//absolute angle of the motor
  39:../variables.h **** 	float ang_abs_poprzedni;		//last absolute angle of the motor
  40:../variables.h **** 	float predkosc_silnika;			//motor speed
  41:../variables.h **** 	float ang_abs_rad;					//current motor angle in radians
  42:../variables.h **** 	uint16_t poz_zad;							//commanded motor angle as 16bit unsigned integer
  43:../variables.h **** 	uint16_t ks;										//virtal spring strength
  44:../variables.h **** 	uint16_t kd;									//virtual damper strength
  45:../variables.h **** 	float torque;								//measured Torque on the motors
  46:../variables.h **** 	int32_t teta_int;							//commanded motor angle as 32bit integer
  47:../variables.h **** 	float teta;									//commanded motor angle in radaians
  48:../variables.h **** };
  49:../variables.h **** struct Motor motors[8];
  50:../variables.h **** 
  51:../variables.h **** struct vec2										//floating point 2d vector
  52:../variables.h **** {
  53:../variables.h **** 	float x;
  54:../variables.h **** 	float y;
  55:../variables.h **** };
  56:../variables.h **** struct vec3										//floating point 3d vector
  57:../variables.h **** {
  58:../variables.h **** 	float x;
  59:../variables.h **** 	float y;
  60:../variables.h **** 	float z;
  61:../variables.h **** };
  62:../variables.h **** struct Leg											//structure holding leg parameters
  63:../variables.h **** {
  64:../variables.h **** 	uint8_t motor_L;
  65:../variables.h **** 	uint8_t motor_R;
  66:../variables.h **** 	struct vec2 foot;							//commanded foot position in milimeters in x-y reference frame
  67:../variables.h **** 	struct vec2 real_foot;					//measured foot position in milimeters in x-y reference frame
  68:../variables.h **** 	struct vec2 real_speed;				//measured speed of the foot in x-y referance frame
  69:../variables.h **** 	struct vec2 eF;								//estimated Forces on the foot
  70:../variables.h **** 	float eFY_buffer[5];						// buffer for filtering estimated Y forces
  71:../variables.h **** 	float r0;											//base virtual spring length for Reiberts Hopper
  72:../variables.h **** 	float r0_angle;								//motor  angle in radians to achive r0 position for  Reiberts Hopper
  73:../variables.h **** 	float ksr;											//virtual spring stiffness cooefficient for Reiberts Hopper
  74:../variables.h **** 	float kdr;										//virtual spring damping cooefficient for Reiberts Hopper
  75:../variables.h **** 	float J[2][2];									//Jackobian
  76:../variables.h **** };
  77:../variables.h **** struct Leg Legs[4];
  78:../variables.h **** 
  79:../variables.h **** 
  80:../variables.h **** void delay(uint32_t us)					//active delay
  81:../variables.h **** {
 477              	 .loc 4 81 0
 478              	 .cfi_startproc
 479              	 
 480              	 
 481 0000 80B5     	 push {r7,lr}
 482              	.LCFI39:
 483              	 .cfi_def_cfa_offset 8
 484              	 .cfi_offset 7,-8
 485              	 .cfi_offset 14,-4
 486 0002 82B0     	 sub sp,sp,#8
 487              	.LCFI40:
 488              	 .cfi_def_cfa_offset 16
 489 0004 00AF     	 add r7,sp,#0
 490              	.LCFI41:
 491              	 .cfi_def_cfa_register 7
 492 0006 7860     	 str r0,[r7,#4]
  82:../variables.h **** 	us *= 100;
 493              	 .loc 4 82 0
 494 0008 7B68     	 ldr r3,[r7,#4]
 495 000a 6422     	 movs r2,#100
 496 000c 02FB03F3 	 mul r3,r2,r3
 497 0010 7B60     	 str r3,[r7,#4]
  83:../variables.h **** 	is_delay = 1;
 498              	 .loc 4 83 0
 499 0012 0A4B     	 ldr r3,.L11
 500 0014 0122     	 movs r2,#1
 501 0016 1A70     	 strb r2,[r3]
  84:../variables.h **** 	TIMER_SetTimeInterval(&DELAY, us);
 502              	 .loc 4 84 0
 503 0018 0948     	 ldr r0,.L11+4
 504 001a 7968     	 ldr r1,[r7,#4]
 505 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
  85:../variables.h **** 	TIMER_Start(&DELAY);
 506              	 .loc 4 85 0
 507 0020 0748     	 ldr r0,.L11+4
 508 0022 FFF7FEFF 	 bl TIMER_Start
  86:../variables.h **** 	while(is_delay);
 509              	 .loc 4 86 0
 510 0026 00BF     	 nop
 511              	.L10:
 512              	 .loc 4 86 0 is_stmt 0 discriminator 1
 513 0028 044B     	 ldr r3,.L11
 514 002a 1B78     	 ldrb r3,[r3]
 515 002c 002B     	 cmp r3,#0
 516 002e FBD1     	 bne .L10
  87:../variables.h **** 	TIMER_Stop(&DELAY);
 517              	 .loc 4 87 0 is_stmt 1
 518 0030 0348     	 ldr r0,.L11+4
 519 0032 FFF7FEFF 	 bl TIMER_Stop
  88:../variables.h **** }
 520              	 .loc 4 88 0
 521 0036 0837     	 adds r7,r7,#8
 522              	.LCFI42:
 523              	 .cfi_def_cfa_offset 8
 524 0038 BD46     	 mov sp,r7
 525              	.LCFI43:
 526              	 .cfi_def_cfa_register 13
 527              	 
 528 003a 80BD     	 pop {r7,pc}
 529              	.L12:
 530              	 .align 2
 531              	.L11:
 532 003c 00000000 	 .word is_delay
 533 0040 00000000 	 .word DELAY
 534              	 .cfi_endproc
 535              	.LFE322:
 537              	 .section .text.Init,"ax",%progbits
 538              	 .align 2
 539              	 .global Init
 540              	 .thumb
 541              	 .thumb_func
 543              	Init:
 544              	.LFB323:
  89:../variables.h **** 
  90:../variables.h **** void Init()			//initialization function for test stand
  91:../variables.h **** {
 545              	 .loc 4 91 0
 546              	 .cfi_startproc
 547              	 
 548              	 
 549              	 
 550 0000 80B4     	 push {r7}
 551              	.LCFI44:
 552              	 .cfi_def_cfa_offset 4
 553              	 .cfi_offset 7,-4
 554 0002 85B0     	 sub sp,sp,#20
 555              	.LCFI45:
 556              	 .cfi_def_cfa_offset 24
 557 0004 00AF     	 add r7,sp,#0
 558              	.LCFI46:
 559              	 .cfi_def_cfa_register 7
 560              	.LBB2:
  92:../variables.h **** 	for(uint8_t i = 0; i < 4; i++ )
 561              	 .loc 4 92 0
 562 0006 0023     	 movs r3,#0
 563 0008 FB73     	 strb r3,[r7,#15]
 564 000a 4BE0     	 b .L14
 565              	.L15:
  93:../variables.h **** 	{
  94:../variables.h **** 			motors[i].i_net = 0;
 566              	 .loc 4 94 0 discriminator 3
 567 000c FB7B     	 ldrb r3,[r7,#15]
 568 000e 784A     	 ldr r2,.L20
 569 0010 2C21     	 movs r1,#44
 570 0012 01FB03F3 	 mul r3,r1,r3
 571 0016 1344     	 add r3,r3,r2
 572 0018 0022     	 movs r2,#0
 573 001a 9A80     	 strh r2,[r3,#4]
  95:../variables.h **** 			motors[i].ang_abs = 0;
 574              	 .loc 4 95 0 discriminator 3
 575 001c FB7B     	 ldrb r3,[r7,#15]
 576 001e 744A     	 ldr r2,.L20
 577 0020 2C21     	 movs r1,#44
 578 0022 01FB03F3 	 mul r3,r1,r3
 579 0026 1344     	 add r3,r3,r2
 580 0028 0833     	 adds r3,r3,#8
 581 002a 0022     	 movs r2,#0
 582 002c 1A60     	 str r2,[r3]
  96:../variables.h **** 			motors[i].ang_abs_poprzedni = 0;
 583              	 .loc 4 96 0 discriminator 3
 584 002e FB7B     	 ldrb r3,[r7,#15]
 585 0030 6F4A     	 ldr r2,.L20
 586 0032 2C21     	 movs r1,#44
 587 0034 01FB03F3 	 mul r3,r1,r3
 588 0038 1344     	 add r3,r3,r2
 589 003a 0833     	 adds r3,r3,#8
 590 003c 4FF00002 	 mov r2,#0
 591 0040 5A60     	 str r2,[r3,#4]
  97:../variables.h **** 			motors[i].predkosc_silnika = 0;
 592              	 .loc 4 97 0 discriminator 3
 593 0042 FB7B     	 ldrb r3,[r7,#15]
 594 0044 6A4A     	 ldr r2,.L20
 595 0046 2C21     	 movs r1,#44
 596 0048 01FB03F3 	 mul r3,r1,r3
 597 004c 1344     	 add r3,r3,r2
 598 004e 1033     	 adds r3,r3,#16
 599 0050 4FF00002 	 mov r2,#0
 600 0054 1A60     	 str r2,[r3]
  98:../variables.h **** 			motors[i].is_go  =0;
 601              	 .loc 4 98 0 discriminator 3
 602 0056 FB7B     	 ldrb r3,[r7,#15]
 603 0058 654A     	 ldr r2,.L20
 604 005a 2C21     	 movs r1,#44
 605 005c 01FB03F3 	 mul r3,r1,r3
 606 0060 1344     	 add r3,r3,r2
 607 0062 0022     	 movs r2,#0
 608 0064 5A70     	 strb r2,[r3,#1]
  99:../variables.h **** 			motors[i].motor_n = 0;
 609              	 .loc 4 99 0 discriminator 3
 610 0066 FB7B     	 ldrb r3,[r7,#15]
 611 0068 614A     	 ldr r2,.L20
 612 006a 2C21     	 movs r1,#44
 613 006c 01FB03F3 	 mul r3,r1,r3
 614 0070 1344     	 add r3,r3,r2
 615 0072 0022     	 movs r2,#0
 616 0074 1A70     	 strb r2,[r3]
 100:../variables.h **** 			motors[i].ks = 3100;
 617              	 .loc 4 100 0 discriminator 3
 618 0076 FB7B     	 ldrb r3,[r7,#15]
 619 0078 5D4A     	 ldr r2,.L20
 620 007a 2C21     	 movs r1,#44
 621 007c 01FB03F3 	 mul r3,r1,r3
 622 0080 1344     	 add r3,r3,r2
 623 0082 1833     	 adds r3,r3,#24
 624 0084 40F61C42 	 movw r2,#3100
 625 0088 5A80     	 strh r2,[r3,#2]
 101:../variables.h **** 			motors[i].kd = 10500;
 626              	 .loc 4 101 0 discriminator 3
 627 008a FB7B     	 ldrb r3,[r7,#15]
 628 008c 584A     	 ldr r2,.L20
 629 008e 2C21     	 movs r1,#44
 630 0090 01FB03F3 	 mul r3,r1,r3
 631 0094 1344     	 add r3,r3,r2
 632 0096 1833     	 adds r3,r3,#24
 633 0098 42F60412 	 movw r2,#10500
 634 009c 9A80     	 strh r2,[r3,#4]
  92:../variables.h **** 	{
 635              	 .loc 4 92 0 discriminator 3
 636 009e FB7B     	 ldrb r3,[r7,#15]
 637 00a0 0133     	 adds r3,r3,#1
 638 00a2 FB73     	 strb r3,[r7,#15]
 639              	.L14:
  92:../variables.h **** 	{
 640              	 .loc 4 92 0 is_stmt 0 discriminator 1
 641 00a4 FB7B     	 ldrb r3,[r7,#15]
 642 00a6 032B     	 cmp r3,#3
 643 00a8 B0D9     	 bls .L15
 644              	.LBE2:
 102:../variables.h **** 	}
 103:../variables.h **** 	struct vec2 zero;	zero.x = 0;	zero.y = 0;
 645              	 .loc 4 103 0 is_stmt 1
 646 00aa 4FF00003 	 mov r3,#0
 647 00ae 7B60     	 str r3,[r7,#4]
 648 00b0 4FF00003 	 mov r3,#0
 649 00b4 BB60     	 str r3,[r7,#8]
 650              	.LBB3:
 104:../variables.h **** 
 105:../variables.h **** 	for(uint8_t i = 0; i < 8; i++)
 651              	 .loc 4 105 0
 652 00b6 0023     	 movs r3,#0
 653 00b8 BB73     	 strb r3,[r7,#14]
 654 00ba 0DE0     	 b .L16
 655              	.L17:
 106:../variables.h **** 		motors[i].adress = 0x10 + i;
 656              	 .loc 4 106 0 discriminator 3
 657 00bc BB7B     	 ldrb r3,[r7,#14]
 658 00be BA7B     	 ldrb r2,[r7,#14]
 659 00c0 1032     	 adds r2,r2,#16
 660 00c2 D0B2     	 uxtb r0,r2
 661 00c4 4A4A     	 ldr r2,.L20
 662 00c6 2C21     	 movs r1,#44
 663 00c8 01FB03F3 	 mul r3,r1,r3
 664 00cc 1344     	 add r3,r3,r2
 665 00ce 0246     	 mov r2,r0
 666 00d0 9A70     	 strb r2,[r3,#2]
 105:../variables.h **** 		motors[i].adress = 0x10 + i;
 667              	 .loc 4 105 0 discriminator 3
 668 00d2 BB7B     	 ldrb r3,[r7,#14]
 669 00d4 0133     	 adds r3,r3,#1
 670 00d6 BB73     	 strb r3,[r7,#14]
 671              	.L16:
 105:../variables.h **** 		motors[i].adress = 0x10 + i;
 672              	 .loc 4 105 0 is_stmt 0 discriminator 1
 673 00d8 BB7B     	 ldrb r3,[r7,#14]
 674 00da 072B     	 cmp r3,#7
 675 00dc EED9     	 bls .L17
 676              	.LBE3:
 107:../variables.h **** 
 108:../variables.h **** 	uint8_t iterator = 0;
 677              	 .loc 4 108 0 is_stmt 1
 678 00de 0023     	 movs r3,#0
 679 00e0 7B73     	 strb r3,[r7,#13]
 680              	.LBB4:
 109:../variables.h **** 	for(uint8_t i = 0; i < 4; i++ )
 681              	 .loc 4 109 0
 682 00e2 0023     	 movs r3,#0
 683 00e4 3B73     	 strb r3,[r7,#12]
 684 00e6 78E0     	 b .L18
 685              	.L19:
 110:../variables.h **** 	{
 111:../variables.h **** 		Legs[i].motor_L = iterator;
 686              	 .loc 4 111 0 discriminator 3
 687 00e8 3B7B     	 ldrb r3,[r7,#12]
 688 00ea 424A     	 ldr r2,.L20+4
 689 00ec 5821     	 movs r1,#88
 690 00ee 01FB03F3 	 mul r3,r1,r3
 691 00f2 1344     	 add r3,r3,r2
 692 00f4 7A7B     	 ldrb r2,[r7,#13]
 693 00f6 1A70     	 strb r2,[r3]
 112:../variables.h **** 		iterator++;
 694              	 .loc 4 112 0 discriminator 3
 695 00f8 7B7B     	 ldrb r3,[r7,#13]
 696 00fa 0133     	 adds r3,r3,#1
 697 00fc 7B73     	 strb r3,[r7,#13]
 113:../variables.h **** 		Legs[i].motor_R = iterator;
 698              	 .loc 4 113 0 discriminator 3
 699 00fe 3B7B     	 ldrb r3,[r7,#12]
 700 0100 3C4A     	 ldr r2,.L20+4
 701 0102 5821     	 movs r1,#88
 702 0104 01FB03F3 	 mul r3,r1,r3
 703 0108 1344     	 add r3,r3,r2
 704 010a 7A7B     	 ldrb r2,[r7,#13]
 705 010c 5A70     	 strb r2,[r3,#1]
 114:../variables.h **** 		iterator++;
 706              	 .loc 4 114 0 discriminator 3
 707 010e 7B7B     	 ldrb r3,[r7,#13]
 708 0110 0133     	 adds r3,r3,#1
 709 0112 7B73     	 strb r3,[r7,#13]
 115:../variables.h **** 		Legs[i].eF = zero;
 710              	 .loc 4 115 0 discriminator 3
 711 0114 3B7B     	 ldrb r3,[r7,#12]
 712 0116 374A     	 ldr r2,.L20+4
 713 0118 5821     	 movs r1,#88
 714 011a 01FB03F3 	 mul r3,r1,r3
 715 011e 1344     	 add r3,r3,r2
 716 0120 1833     	 adds r3,r3,#24
 717 0122 0433     	 adds r3,r3,#4
 718 0124 3A1D     	 adds r2,r7,#4
 719 0126 92E80300 	 ldmia r2,{r0,r1}
 720 012a 83E80300 	 stmia r3,{r0,r1}
 116:../variables.h **** 		Legs[i].kdr = 0;
 721              	 .loc 4 116 0 discriminator 3
 722 012e 3B7B     	 ldrb r3,[r7,#12]
 723 0130 304A     	 ldr r2,.L20+4
 724 0132 5821     	 movs r1,#88
 725 0134 01FB03F3 	 mul r3,r1,r3
 726 0138 1344     	 add r3,r3,r2
 727 013a 4033     	 adds r3,r3,#64
 728 013c 4FF00002 	 mov r2,#0
 729 0140 5A60     	 str r2,[r3,#4]
 117:../variables.h **** 		Legs[i].ksr = 0;
 730              	 .loc 4 117 0 discriminator 3
 731 0142 3B7B     	 ldrb r3,[r7,#12]
 732 0144 2B4A     	 ldr r2,.L20+4
 733 0146 5821     	 movs r1,#88
 734 0148 01FB03F3 	 mul r3,r1,r3
 735 014c 1344     	 add r3,r3,r2
 736 014e 4033     	 adds r3,r3,#64
 737 0150 4FF00002 	 mov r2,#0
 738 0154 1A60     	 str r2,[r3]
 118:../variables.h **** 		Legs[i].r0 = 0;
 739              	 .loc 4 118 0 discriminator 3
 740 0156 3B7B     	 ldrb r3,[r7,#12]
 741 0158 264A     	 ldr r2,.L20+4
 742 015a 5821     	 movs r1,#88
 743 015c 01FB03F3 	 mul r3,r1,r3
 744 0160 1344     	 add r3,r3,r2
 745 0162 3833     	 adds r3,r3,#56
 746 0164 4FF00002 	 mov r2,#0
 747 0168 1A60     	 str r2,[r3]
 119:../variables.h **** 		Legs[i].r0_angle = 0;
 748              	 .loc 4 119 0 discriminator 3
 749 016a 3B7B     	 ldrb r3,[r7,#12]
 750 016c 214A     	 ldr r2,.L20+4
 751 016e 5821     	 movs r1,#88
 752 0170 01FB03F3 	 mul r3,r1,r3
 753 0174 1344     	 add r3,r3,r2
 754 0176 3833     	 adds r3,r3,#56
 755 0178 4FF00002 	 mov r2,#0
 756 017c 5A60     	 str r2,[r3,#4]
 120:../variables.h **** 		Legs[i].real_foot = zero;
 757              	 .loc 4 120 0 discriminator 3
 758 017e 3B7B     	 ldrb r3,[r7,#12]
 759 0180 1C4A     	 ldr r2,.L20+4
 760 0182 5821     	 movs r1,#88
 761 0184 01FB03F3 	 mul r3,r1,r3
 762 0188 1344     	 add r3,r3,r2
 763 018a 0833     	 adds r3,r3,#8
 764 018c 0433     	 adds r3,r3,#4
 765 018e 3A1D     	 adds r2,r7,#4
 766 0190 92E80300 	 ldmia r2,{r0,r1}
 767 0194 83E80300 	 stmia r3,{r0,r1}
 121:../variables.h **** 		Legs[i].foot.y = 150;
 768              	 .loc 4 121 0 discriminator 3
 769 0198 3B7B     	 ldrb r3,[r7,#12]
 770 019a 164A     	 ldr r2,.L20+4
 771 019c 5821     	 movs r1,#88
 772 019e 01FB03F3 	 mul r3,r1,r3
 773 01a2 1344     	 add r3,r3,r2
 774 01a4 144A     	 ldr r2,.L20+8
 775 01a6 9A60     	 str r2,[r3,#8]
 122:../variables.h **** 		Legs[i].foot.x = 0;
 776              	 .loc 4 122 0 discriminator 3
 777 01a8 3B7B     	 ldrb r3,[r7,#12]
 778 01aa 124A     	 ldr r2,.L20+4
 779 01ac 5821     	 movs r1,#88
 780 01ae 01FB03F3 	 mul r3,r1,r3
 781 01b2 1344     	 add r3,r3,r2
 782 01b4 4FF00002 	 mov r2,#0
 783 01b8 5A60     	 str r2,[r3,#4]
 123:../variables.h **** 		Legs[i].real_speed = zero;
 784              	 .loc 4 123 0 discriminator 3
 785 01ba 3B7B     	 ldrb r3,[r7,#12]
 786 01bc 0D4A     	 ldr r2,.L20+4
 787 01be 5821     	 movs r1,#88
 788 01c0 01FB03F3 	 mul r3,r1,r3
 789 01c4 1344     	 add r3,r3,r2
 790 01c6 1033     	 adds r3,r3,#16
 791 01c8 0433     	 adds r3,r3,#4
 792 01ca 3A1D     	 adds r2,r7,#4
 793 01cc 92E80300 	 ldmia r2,{r0,r1}
 794 01d0 83E80300 	 stmia r3,{r0,r1}
 109:../variables.h **** 	{
 795              	 .loc 4 109 0 discriminator 3
 796 01d4 3B7B     	 ldrb r3,[r7,#12]
 797 01d6 0133     	 adds r3,r3,#1
 798 01d8 3B73     	 strb r3,[r7,#12]
 799              	.L18:
 109:../variables.h **** 	{
 800              	 .loc 4 109 0 is_stmt 0 discriminator 1
 801 01da 3B7B     	 ldrb r3,[r7,#12]
 802 01dc 032B     	 cmp r3,#3
 803 01de 83D9     	 bls .L19
 804              	.LBE4:
 124:../variables.h **** 	}
 125:../variables.h **** 	txData[0] = 0xCC;
 805              	 .loc 4 125 0 is_stmt 1
 806 01e0 064B     	 ldr r3,.L20+12
 807 01e2 CC22     	 movs r2,#204
 808 01e4 1A70     	 strb r2,[r3]
 126:../variables.h **** }
 809              	 .loc 4 126 0
 810 01e6 1437     	 adds r7,r7,#20
 811              	.LCFI47:
 812              	 .cfi_def_cfa_offset 4
 813 01e8 BD46     	 mov sp,r7
 814              	.LCFI48:
 815              	 .cfi_def_cfa_register 13
 816              	 
 817 01ea 5DF8047B 	 ldr r7,[sp],#4
 818              	.LCFI49:
 819              	 .cfi_restore 7
 820              	 .cfi_def_cfa_offset 0
 821 01ee 7047     	 bx lr
 822              	.L21:
 823              	 .align 2
 824              	.L20:
 825 01f0 00000000 	 .word motors
 826 01f4 00000000 	 .word Legs
 827 01f8 00001643 	 .word 1125515264
 828 01fc 00000000 	 .word txData
 829              	 .cfi_endproc
 830              	.LFE323:
 832              	 .section .text.CCU40_2_IRQHandler,"ax",%progbits
 833              	 .align 2
 834              	 .global CCU40_2_IRQHandler
 835              	 .thumb
 836              	 .thumb_func
 838              	CCU40_2_IRQHandler:
 839              	.LFB324:
 127:../variables.h **** void TIMER_IRQ()				//delay interrupt
 128:../variables.h **** {
 840              	 .loc 4 128 0
 841              	 .cfi_startproc
 842              	 
 843              	 
 844              	 
 845 0000 80B4     	 push {r7}
 846              	.LCFI50:
 847              	 .cfi_def_cfa_offset 4
 848              	 .cfi_offset 7,-4
 849 0002 00AF     	 add r7,sp,#0
 850              	.LCFI51:
 851              	 .cfi_def_cfa_register 7
 129:../variables.h **** 	is_delay = 0;
 852              	 .loc 4 129 0
 853 0004 034B     	 ldr r3,.L23
 854 0006 0022     	 movs r2,#0
 855 0008 1A70     	 strb r2,[r3]
 130:../variables.h **** }
 856              	 .loc 4 130 0
 857 000a BD46     	 mov sp,r7
 858              	.LCFI52:
 859              	 .cfi_def_cfa_register 13
 860              	 
 861 000c 5DF8047B 	 ldr r7,[sp],#4
 862              	.LCFI53:
 863              	 .cfi_restore 7
 864              	 .cfi_def_cfa_offset 0
 865 0010 7047     	 bx lr
 866              	.L24:
 867 0012 00BF     	 .align 2
 868              	.L23:
 869 0014 00000000 	 .word is_delay
 870              	 .cfi_endproc
 871              	.LFE324:
 873              	 .section .text.XMC_Init,"ax",%progbits
 874              	 .align 2
 875              	 .global XMC_Init
 876              	 .thumb
 877              	 .thumb_func
 879              	XMC_Init:
 880              	.LFB325:
 881              	 .file 5 "../communications.h"
   1:../communications.h **** /*
   2:../communications.h ****  * communications.h
   3:../communications.h ****  *
   4:../communications.h ****  *  Created on: 11 Jan 2018
   5:../communications.h ****  *      Author: Mafish
   6:../communications.h ****  */
   7:../communications.h **** 
   8:../communications.h **** uint8_t  XMC_Init(uint8_t);			//initialize driver (n). n=10 for all drivers
   9:../communications.h **** void XMC_Check();						//check state all drivers
  10:../communications.h **** void eorx();									//end of receive interrupt
  11:../communications.h **** void Message_interpreter();		//read last message
  12:../communications.h **** void Send(uint8_t);						// Send (n) bytes of data via half-duplex uart
  13:../communications.h **** void Send_Leg(struct Leg *n);	//Send regular command string to both of legs drivers
  14:../communications.h **** uint8_t motors_go();			//go no go sequence for all motor drivers
  15:../communications.h **** 
  16:../communications.h **** uint8_t  XMC_Init(uint8_t n)	//initialize driver (n). n=10 for all drivers
  17:../communications.h **** {
 882              	 .loc 5 17 0
 883              	 .cfi_startproc
 884              	 
 885              	 
 886 0000 80B5     	 push {r7,lr}
 887              	.LCFI54:
 888              	 .cfi_def_cfa_offset 8
 889              	 .cfi_offset 7,-8
 890              	 .cfi_offset 14,-4
 891 0002 84B0     	 sub sp,sp,#16
 892              	.LCFI55:
 893              	 .cfi_def_cfa_offset 24
 894 0004 00AF     	 add r7,sp,#0
 895              	.LCFI56:
 896              	 .cfi_def_cfa_register 7
 897 0006 0346     	 mov r3,r0
 898 0008 FB71     	 strb r3,[r7,#7]
  18:../communications.h **** 	if(n == 10)							//if n = 10 then init all drivers
 899              	 .loc 5 18 0
 900 000a FB79     	 ldrb r3,[r7,#7]
 901 000c 0A2B     	 cmp r3,#10
 902 000e 1CD1     	 bne .L26
 903              	.LBB5:
  19:../communications.h **** 		for(uint8_t i = 0; i < 8; i++)
 904              	 .loc 5 19 0
 905 0010 0023     	 movs r3,#0
 906 0012 FB73     	 strb r3,[r7,#15]
 907 0014 15E0     	 b .L27
 908              	.L28:
  20:../communications.h **** 		{
  21:../communications.h **** 			txData[1] = 0x10 + i;
 909              	 .loc 5 21 0 discriminator 3
 910 0016 FB7B     	 ldrb r3,[r7,#15]
 911 0018 1033     	 adds r3,r3,#16
 912 001a DAB2     	 uxtb r2,r3
 913 001c 174B     	 ldr r3,.L31
 914 001e 5A70     	 strb r2,[r3,#1]
  22:../communications.h **** 			txData[2] = 0xA1;
 915              	 .loc 5 22 0 discriminator 3
 916 0020 164B     	 ldr r3,.L31
 917 0022 A122     	 movs r2,#161
 918 0024 9A70     	 strb r2,[r3,#2]
  23:../communications.h **** 			txData[3] = EOF;
 919              	 .loc 5 23 0 discriminator 3
 920 0026 154B     	 ldr r3,.L31
 921 0028 DD22     	 movs r2,#221
 922 002a DA70     	 strb r2,[r3,#3]
  24:../communications.h **** 			Send(4);
 923              	 .loc 5 24 0 discriminator 3
 924 002c 0420     	 movs r0,#4
 925 002e FFF7FEFF 	 bl Send
  25:../communications.h **** 			delay(response_delay);
 926              	 .loc 5 25 0 discriminator 3
 927 0032 134B     	 ldr r3,.L31+4
 928 0034 1B88     	 ldrh r3,[r3]
 929 0036 1846     	 mov r0,r3
 930 0038 FFF7FEFF 	 bl delay
  19:../communications.h **** 		{
 931              	 .loc 5 19 0 discriminator 3
 932 003c FB7B     	 ldrb r3,[r7,#15]
 933 003e 0133     	 adds r3,r3,#1
 934 0040 FB73     	 strb r3,[r7,#15]
 935              	.L27:
  19:../communications.h **** 		{
 936              	 .loc 5 19 0 is_stmt 0 discriminator 1
 937 0042 FB7B     	 ldrb r3,[r7,#15]
 938 0044 072B     	 cmp r3,#7
 939 0046 E6D9     	 bls .L28
 940              	.LBE5:
 941 0048 04E0     	 b .L29
 942              	.L26:
  26:../communications.h **** 		}
  27:../communications.h **** 	else										//init single driver (n)
  28:../communications.h **** 		txData[1] = 0x10 + n;
 943              	 .loc 5 28 0 is_stmt 1
 944 004a FB79     	 ldrb r3,[r7,#7]
 945 004c 1033     	 adds r3,r3,#16
 946 004e DAB2     	 uxtb r2,r3
 947 0050 0A4B     	 ldr r3,.L31
 948 0052 5A70     	 strb r2,[r3,#1]
 949              	.L29:
  29:../communications.h **** 		txData[2] = 0xA1;
 950              	 .loc 5 29 0
 951 0054 094B     	 ldr r3,.L31
 952 0056 A122     	 movs r2,#161
 953 0058 9A70     	 strb r2,[r3,#2]
  30:../communications.h **** 		txData[3] = EOF;
 954              	 .loc 5 30 0
 955 005a 084B     	 ldr r3,.L31
 956 005c DD22     	 movs r2,#221
 957 005e DA70     	 strb r2,[r3,#3]
  31:../communications.h **** 		Send(4);
 958              	 .loc 5 31 0
 959 0060 0420     	 movs r0,#4
 960 0062 FFF7FEFF 	 bl Send
  32:../communications.h **** 		delay(response_delay);
 961              	 .loc 5 32 0
 962 0066 064B     	 ldr r3,.L31+4
 963 0068 1B88     	 ldrh r3,[r3]
 964 006a 1846     	 mov r0,r3
 965 006c FFF7FEFF 	 bl delay
  33:../communications.h **** 
  34:../communications.h **** 	return 0;
 966              	 .loc 5 34 0
 967 0070 0023     	 movs r3,#0
  35:../communications.h **** }
 968              	 .loc 5 35 0
 969 0072 1846     	 mov r0,r3
 970 0074 1037     	 adds r7,r7,#16
 971              	.LCFI57:
 972              	 .cfi_def_cfa_offset 8
 973 0076 BD46     	 mov sp,r7
 974              	.LCFI58:
 975              	 .cfi_def_cfa_register 13
 976              	 
 977 0078 80BD     	 pop {r7,pc}
 978              	.L32:
 979 007a 00BF     	 .align 2
 980              	.L31:
 981 007c 00000000 	 .word txData
 982 0080 00000000 	 .word response_delay
 983              	 .cfi_endproc
 984              	.LFE325:
 986              	 .section .text.XMC_Check,"ax",%progbits
 987              	 .align 2
 988              	 .global XMC_Check
 989              	 .thumb
 990              	 .thumb_func
 992              	XMC_Check:
 993              	.LFB326:
  36:../communications.h **** void XMC_Check()	//check state all drivers
  37:../communications.h **** {
 994              	 .loc 5 37 0
 995              	 .cfi_startproc
 996              	 
 997              	 
 998 0000 80B5     	 push {r7,lr}
 999              	.LCFI59:
 1000              	 .cfi_def_cfa_offset 8
 1001              	 .cfi_offset 7,-8
 1002              	 .cfi_offset 14,-4
 1003 0002 82B0     	 sub sp,sp,#8
 1004              	.LCFI60:
 1005              	 .cfi_def_cfa_offset 16
 1006 0004 00AF     	 add r7,sp,#0
 1007              	.LCFI61:
 1008              	 .cfi_def_cfa_register 7
 1009              	.LBB6:
  38:../communications.h **** 	for(uint8_t i = 0; i < 8; i++)		//iterate to check state of all drivers
 1010              	 .loc 5 38 0
 1011 0006 0023     	 movs r3,#0
 1012 0008 FB71     	 strb r3,[r7,#7]
 1013 000a 1BE0     	 b .L34
 1014              	.L35:
  39:../communications.h **** 	{
  40:../communications.h **** 		DIGITAL_IO_SetOutputHigh(&LED1);
 1015              	 .loc 5 40 0 discriminator 3
 1016 000c 1048     	 ldr r0,.L36
 1017 000e FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
  41:../communications.h **** 		txData[1] = 0x10 + i;
 1018              	 .loc 5 41 0 discriminator 3
 1019 0012 FB79     	 ldrb r3,[r7,#7]
 1020 0014 1033     	 adds r3,r3,#16
 1021 0016 DAB2     	 uxtb r2,r3
 1022 0018 0E4B     	 ldr r3,.L36+4
 1023 001a 5A70     	 strb r2,[r3,#1]
  42:../communications.h **** 		txData[2] = 0xA3;
 1024              	 .loc 5 42 0 discriminator 3
 1025 001c 0D4B     	 ldr r3,.L36+4
 1026 001e A322     	 movs r2,#163
 1027 0020 9A70     	 strb r2,[r3,#2]
  43:../communications.h **** 		txData[3] = EOF;
 1028              	 .loc 5 43 0 discriminator 3
 1029 0022 0C4B     	 ldr r3,.L36+4
 1030 0024 DD22     	 movs r2,#221
 1031 0026 DA70     	 strb r2,[r3,#3]
  44:../communications.h **** 		Send(4);
 1032              	 .loc 5 44 0 discriminator 3
 1033 0028 0420     	 movs r0,#4
 1034 002a FFF7FEFF 	 bl Send
  45:../communications.h **** 		delay(response_delay);
 1035              	 .loc 5 45 0 discriminator 3
 1036 002e 0A4B     	 ldr r3,.L36+8
 1037 0030 1B88     	 ldrh r3,[r3]
 1038 0032 1846     	 mov r0,r3
 1039 0034 FFF7FEFF 	 bl delay
  46:../communications.h **** 		DIGITAL_IO_SetOutputLow((&LED1));
 1040              	 .loc 5 46 0 discriminator 3
 1041 0038 0548     	 ldr r0,.L36
 1042 003a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
  38:../communications.h **** 	{
 1043              	 .loc 5 38 0 discriminator 3
 1044 003e FB79     	 ldrb r3,[r7,#7]
 1045 0040 0133     	 adds r3,r3,#1
 1046 0042 FB71     	 strb r3,[r7,#7]
 1047              	.L34:
  38:../communications.h **** 	{
 1048              	 .loc 5 38 0 is_stmt 0 discriminator 1
 1049 0044 FB79     	 ldrb r3,[r7,#7]
 1050 0046 072B     	 cmp r3,#7
 1051 0048 E0D9     	 bls .L35
 1052              	.LBE6:
  47:../communications.h **** 	}
  48:../communications.h **** }
 1053              	 .loc 5 48 0 is_stmt 1
 1054 004a 0837     	 adds r7,r7,#8
 1055              	.LCFI62:
 1056              	 .cfi_def_cfa_offset 8
 1057 004c BD46     	 mov sp,r7
 1058              	.LCFI63:
 1059              	 .cfi_def_cfa_register 13
 1060              	 
 1061 004e 80BD     	 pop {r7,pc}
 1062              	.L37:
 1063              	 .align 2
 1064              	.L36:
 1065 0050 00000000 	 .word LED1
 1066 0054 00000000 	 .word txData
 1067 0058 00000000 	 .word response_delay
 1068              	 .cfi_endproc
 1069              	.LFE326:
 1071              	 .section .text.eorx,"ax",%progbits
 1072              	 .align 2
 1073              	 .global eorx
 1074              	 .thumb
 1075              	 .thumb_func
 1077              	eorx:
 1078              	.LFB327:
  49:../communications.h **** void eorx()		//end of receive interrupt
  50:../communications.h **** {
 1079              	 .loc 5 50 0
 1080              	 .cfi_startproc
 1081              	 
 1082              	 
 1083 0000 80B5     	 push {r7,lr}
 1084              	.LCFI64:
 1085              	 .cfi_def_cfa_offset 8
 1086              	 .cfi_offset 7,-8
 1087              	 .cfi_offset 14,-4
 1088 0002 00AF     	 add r7,sp,#0
 1089              	.LCFI65:
 1090              	 .cfi_def_cfa_register 7
  51:../communications.h **** 	if(rxByte == SOF)
 1091              	 .loc 5 51 0
 1092 0004 1A4B     	 ldr r3,.L42
 1093 0006 1B78     	 ldrb r3,[r3]
 1094 0008 CC2B     	 cmp r3,#204
 1095 000a 07D1     	 bne .L39
  52:../communications.h **** 	{
  53:../communications.h **** 		rxData[0] = rxByte;
 1096              	 .loc 5 53 0
 1097 000c 184B     	 ldr r3,.L42
 1098 000e 1A78     	 ldrb r2,[r3]
 1099 0010 184B     	 ldr r3,.L42+4
 1100 0012 1A70     	 strb r2,[r3]
  54:../communications.h **** 		iterator_wiadomosci = 1;
 1101              	 .loc 5 54 0
 1102 0014 184B     	 ldr r3,.L42+8
 1103 0016 0122     	 movs r2,#1
 1104 0018 1A70     	 strb r2,[r3]
 1105 001a 23E0     	 b .L40
 1106              	.L39:
  55:../communications.h **** 	}
  56:../communications.h **** 	else if (rxByte == EOF)
 1107              	 .loc 5 56 0
 1108 001c 144B     	 ldr r3,.L42
 1109 001e 1B78     	 ldrb r3,[r3]
 1110 0020 DD2B     	 cmp r3,#221
 1111 0022 0ED1     	 bne .L41
  57:../communications.h **** 	{
  58:../communications.h **** 		rxData[iterator_wiadomosci +1] = EOF;
 1112              	 .loc 5 58 0
 1113 0024 144B     	 ldr r3,.L42+8
 1114 0026 1B78     	 ldrb r3,[r3]
 1115 0028 0133     	 adds r3,r3,#1
 1116 002a 124A     	 ldr r2,.L42+4
 1117 002c DD21     	 movs r1,#221
 1118 002e D154     	 strb r1,[r2,r3]
  59:../communications.h **** 		iterator_wiadomosci++;
 1119              	 .loc 5 59 0
 1120 0030 114B     	 ldr r3,.L42+8
 1121 0032 1B78     	 ldrb r3,[r3]
 1122 0034 0133     	 adds r3,r3,#1
 1123 0036 DAB2     	 uxtb r2,r3
 1124 0038 0F4B     	 ldr r3,.L42+8
 1125 003a 1A70     	 strb r2,[r3]
  60:../communications.h **** 		Message_interpreter();
 1126              	 .loc 5 60 0
 1127 003c FFF7FEFF 	 bl Message_interpreter
 1128 0040 10E0     	 b .L40
 1129              	.L41:
  61:../communications.h **** 	}
  62:../communications.h **** 	else if ( iterator_wiadomosci < 9)
 1130              	 .loc 5 62 0
 1131 0042 0D4B     	 ldr r3,.L42+8
 1132 0044 1B78     	 ldrb r3,[r3]
 1133 0046 082B     	 cmp r3,#8
 1134 0048 0CD8     	 bhi .L40
  63:../communications.h **** 	{
  64:../communications.h **** 		rxData[iterator_wiadomosci] =rxByte;
 1135              	 .loc 5 64 0
 1136 004a 0B4B     	 ldr r3,.L42+8
 1137 004c 1B78     	 ldrb r3,[r3]
 1138 004e 1A46     	 mov r2,r3
 1139 0050 074B     	 ldr r3,.L42
 1140 0052 1978     	 ldrb r1,[r3]
 1141 0054 074B     	 ldr r3,.L42+4
 1142 0056 9954     	 strb r1,[r3,r2]
  65:../communications.h **** 		iterator_wiadomosci++;
 1143              	 .loc 5 65 0
 1144 0058 074B     	 ldr r3,.L42+8
 1145 005a 1B78     	 ldrb r3,[r3]
 1146 005c 0133     	 adds r3,r3,#1
 1147 005e DAB2     	 uxtb r2,r3
 1148 0060 054B     	 ldr r3,.L42+8
 1149 0062 1A70     	 strb r2,[r3]
 1150              	.L40:
  66:../communications.h **** 	}
  67:../communications.h **** 	UART_Receive(&RS, &rxByte,1);
 1151              	 .loc 5 67 0
 1152 0064 0548     	 ldr r0,.L42+12
 1153 0066 0249     	 ldr r1,.L42
 1154 0068 0122     	 movs r2,#1
 1155 006a FFF7FEFF 	 bl UART_Receive
  68:../communications.h **** }
 1156              	 .loc 5 68 0
 1157 006e 80BD     	 pop {r7,pc}
 1158              	.L43:
 1159              	 .align 2
 1160              	.L42:
 1161 0070 00000000 	 .word rxByte
 1162 0074 00000000 	 .word rxData
 1163 0078 00000000 	 .word iterator_wiadomosci
 1164 007c 00000000 	 .word RS
 1165              	 .cfi_endproc
 1166              	.LFE327:
 1168              	 .section .text.eotx,"ax",%progbits
 1169              	 .align 2
 1170              	 .global eotx
 1171              	 .thumb
 1172              	 .thumb_func
 1174              	eotx:
 1175              	.LFB328:
  69:../communications.h **** void eotx()
  70:../communications.h **** {
 1176              	 .loc 5 70 0
 1177              	 .cfi_startproc
 1178              	 
 1179              	 
 1180              	 
 1181 0000 80B4     	 push {r7}
 1182              	.LCFI66:
 1183              	 .cfi_def_cfa_offset 4
 1184              	 .cfi_offset 7,-4
 1185 0002 00AF     	 add r7,sp,#0
 1186              	.LCFI67:
 1187              	 .cfi_def_cfa_register 7
  71:../communications.h **** 
  72:../communications.h **** }
 1188              	 .loc 5 72 0
 1189 0004 BD46     	 mov sp,r7
 1190              	.LCFI68:
 1191              	 .cfi_def_cfa_register 13
 1192              	 
 1193 0006 5DF8047B 	 ldr r7,[sp],#4
 1194              	.LCFI69:
 1195              	 .cfi_restore 7
 1196              	 .cfi_def_cfa_offset 0
 1197 000a 7047     	 bx lr
 1198              	 .cfi_endproc
 1199              	.LFE328:
 1201              	 .section .text.Message_interpreter,"ax",%progbits
 1202              	 .align 2
 1203              	 .global Message_interpreter
 1204              	 .thumb
 1205              	 .thumb_func
 1207              	Message_interpreter:
 1208              	.LFB329:
  73:../communications.h **** void Message_interpreter()		//read last message
  74:../communications.h **** {
 1209              	 .loc 5 74 0
 1210              	 .cfi_startproc
 1211              	 
 1212              	 
 1213              	 
 1214 0000 80B4     	 push {r7}
 1215              	.LCFI70:
 1216              	 .cfi_def_cfa_offset 4
 1217              	 .cfi_offset 7,-4
 1218 0002 83B0     	 sub sp,sp,#12
 1219              	.LCFI71:
 1220              	 .cfi_def_cfa_offset 16
 1221 0004 00AF     	 add r7,sp,#0
 1222              	.LCFI72:
 1223              	 .cfi_def_cfa_register 7
  75:../communications.h **** 
  76:../communications.h **** 	if(rxData[0] == SOF && rxData[1] == adress)
 1224              	 .loc 5 76 0
 1225 0006 314B     	 ldr r3,.L49
 1226 0008 1B78     	 ldrb r3,[r3]
 1227 000a CC2B     	 cmp r3,#204
 1228 000c 58D1     	 bne .L45
 1229              	 .loc 5 76 0 is_stmt 0 discriminator 1
 1230 000e 2F4B     	 ldr r3,.L49
 1231 0010 5A78     	 ldrb r2,[r3,#1]
 1232 0012 2F4B     	 ldr r3,.L49+4
 1233 0014 1B78     	 ldrb r3,[r3]
 1234 0016 9A42     	 cmp r2,r3
 1235 0018 52D1     	 bne .L45
 1236              	.LBB7:
  77:../communications.h **** 	{
  78:../communications.h **** 		uint8_t numer_silnika;
  79:../communications.h **** 		numer_silnika = rxData[2] - 0x10;
 1237              	 .loc 5 79 0 is_stmt 1
 1238 001a 2C4B     	 ldr r3,.L49
 1239 001c 9B78     	 ldrb r3,[r3,#2]
 1240 001e 103B     	 subs r3,r3,#16
 1241 0020 FB71     	 strb r3,[r7,#7]
  80:../communications.h **** 		if(rxData[3] == INIT)
 1242              	 .loc 5 80 0
 1243 0022 2A4B     	 ldr r3,.L49
 1244 0024 DB78     	 ldrb r3,[r3,#3]
 1245 0026 A12B     	 cmp r3,#161
 1246 0028 0AD1     	 bne .L47
  81:../communications.h **** 			motors[numer_silnika].is_go = rxData[4];
 1247              	 .loc 5 81 0
 1248 002a FB79     	 ldrb r3,[r7,#7]
 1249 002c 274A     	 ldr r2,.L49
 1250 002e 1079     	 ldrb r0,[r2,#4]
 1251 0030 284A     	 ldr r2,.L49+8
 1252 0032 2C21     	 movs r1,#44
 1253 0034 01FB03F3 	 mul r3,r1,r3
 1254 0038 1344     	 add r3,r3,r2
 1255 003a 0246     	 mov r2,r0
 1256 003c 5A70     	 strb r2,[r3,#1]
 1257 003e 3FE0     	 b .L45
 1258              	.L47:
  82:../communications.h **** 		else if(rxData[3] == CHECK)
 1259              	 .loc 5 82 0
 1260 0040 224B     	 ldr r3,.L49
 1261 0042 DB78     	 ldrb r3,[r3,#3]
 1262 0044 A32B     	 cmp r3,#163
 1263 0046 14D1     	 bne .L48
  83:../communications.h **** 		{
  84:../communications.h **** 			motors[numer_silnika].is_go = rxData[4];
 1264              	 .loc 5 84 0
 1265 0048 FB79     	 ldrb r3,[r7,#7]
 1266 004a 204A     	 ldr r2,.L49
 1267 004c 1079     	 ldrb r0,[r2,#4]
 1268 004e 214A     	 ldr r2,.L49+8
 1269 0050 2C21     	 movs r1,#44
 1270 0052 01FB03F3 	 mul r3,r1,r3
 1271 0056 1344     	 add r3,r3,r2
 1272 0058 0246     	 mov r2,r0
 1273 005a 5A70     	 strb r2,[r3,#1]
  85:../communications.h **** 			motors[numer_silnika].motor_n = rxData[5];
 1274              	 .loc 5 85 0
 1275 005c FB79     	 ldrb r3,[r7,#7]
 1276 005e 1B4A     	 ldr r2,.L49
 1277 0060 5079     	 ldrb r0,[r2,#5]
 1278 0062 1C4A     	 ldr r2,.L49+8
 1279 0064 2C21     	 movs r1,#44
 1280 0066 01FB03F3 	 mul r3,r1,r3
 1281 006a 1344     	 add r3,r3,r2
 1282 006c 0246     	 mov r2,r0
 1283 006e 1A70     	 strb r2,[r3]
 1284 0070 26E0     	 b .L45
 1285              	.L48:
  86:../communications.h **** 		}
  87:../communications.h **** 		else
  88:../communications.h **** 		{
  89:../communications.h **** 			motors[numer_silnika].i_net =rxData[3] << 8 | rxData[4];
 1286              	 .loc 5 89 0
 1287 0072 FB79     	 ldrb r3,[r7,#7]
 1288 0074 154A     	 ldr r2,.L49
 1289 0076 D278     	 ldrb r2,[r2,#3]
 1290 0078 1202     	 lsls r2,r2,#8
 1291 007a 91B2     	 uxth r1,r2
 1292 007c 134A     	 ldr r2,.L49
 1293 007e 1279     	 ldrb r2,[r2,#4]
 1294 0080 92B2     	 uxth r2,r2
 1295 0082 0A43     	 orrs r2,r2,r1
 1296 0084 90B2     	 uxth r0,r2
 1297 0086 134A     	 ldr r2,.L49+8
 1298 0088 2C21     	 movs r1,#44
 1299 008a 01FB03F3 	 mul r3,r1,r3
 1300 008e 1344     	 add r3,r3,r2
 1301 0090 0246     	 mov r2,r0
 1302 0092 9A80     	 strh r2,[r3,#4]
  90:../communications.h **** 			motors[numer_silnika].ang_abs = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[8];
 1303              	 .loc 5 90 0
 1304 0094 FB79     	 ldrb r3,[r7,#7]
 1305 0096 0D4A     	 ldr r2,.L49
 1306 0098 5279     	 ldrb r2,[r2,#5]
 1307 009a 1106     	 lsls r1,r2,#24
 1308 009c 0B4A     	 ldr r2,.L49
 1309 009e 9279     	 ldrb r2,[r2,#6]
 1310 00a0 1204     	 lsls r2,r2,#16
 1311 00a2 1143     	 orrs r1,r1,r2
 1312 00a4 094A     	 ldr r2,.L49
 1313 00a6 D279     	 ldrb r2,[r2,#7]
 1314 00a8 1202     	 lsls r2,r2,#8
 1315 00aa 0A43     	 orrs r2,r2,r1
 1316 00ac 0749     	 ldr r1,.L49
 1317 00ae 097A     	 ldrb r1,[r1,#8]
 1318 00b0 0A43     	 orrs r2,r2,r1
 1319 00b2 0849     	 ldr r1,.L49+8
 1320 00b4 2C20     	 movs r0,#44
 1321 00b6 00FB03F3 	 mul r3,r0,r3
 1322 00ba 0B44     	 add r3,r3,r1
 1323 00bc 0833     	 adds r3,r3,#8
 1324 00be 1A60     	 str r2,[r3]
 1325              	.L45:
 1326              	.LBE7:
  91:../communications.h **** 		}
  92:../communications.h **** 	}
  93:../communications.h **** 
  94:../communications.h **** }
 1327              	 .loc 5 94 0
 1328 00c0 0C37     	 adds r7,r7,#12
 1329              	.LCFI73:
 1330              	 .cfi_def_cfa_offset 4
 1331 00c2 BD46     	 mov sp,r7
 1332              	.LCFI74:
 1333              	 .cfi_def_cfa_register 13
 1334              	 
 1335 00c4 5DF8047B 	 ldr r7,[sp],#4
 1336              	.LCFI75:
 1337              	 .cfi_restore 7
 1338              	 .cfi_def_cfa_offset 0
 1339 00c8 7047     	 bx lr
 1340              	.L50:
 1341 00ca 00BF     	 .align 2
 1342              	.L49:
 1343 00cc 00000000 	 .word rxData
 1344 00d0 00000000 	 .word adress
 1345 00d4 00000000 	 .word motors
 1346              	 .cfi_endproc
 1347              	.LFE329:
 1349              	 .section .text.Send_Leg,"ax",%progbits
 1350              	 .align 2
 1351              	 .global Send_Leg
 1352              	 .thumb
 1353              	 .thumb_func
 1355              	Send_Leg:
 1356              	.LFB330:
  95:../communications.h **** void Send_Leg(struct Leg *n)	//Send regular command string to both of legs drivers
  96:../communications.h **** {
 1357              	 .loc 5 96 0
 1358              	 .cfi_startproc
 1359              	 
 1360              	 
 1361 0000 80B5     	 push {r7,lr}
 1362              	.LCFI76:
 1363              	 .cfi_def_cfa_offset 8
 1364              	 .cfi_offset 7,-8
 1365              	 .cfi_offset 14,-4
 1366 0002 82B0     	 sub sp,sp,#8
 1367              	.LCFI77:
 1368              	 .cfi_def_cfa_offset 16
 1369 0004 00AF     	 add r7,sp,#0
 1370              	.LCFI78:
 1371              	 .cfi_def_cfa_register 7
 1372 0006 7860     	 str r0,[r7,#4]
  97:../communications.h **** 	motors[n->motor_L].poz_zad = motors[n->motor_L].teta * INT16_MAX / pi;
 1373              	 .loc 5 97 0
 1374 0008 7B68     	 ldr r3,[r7,#4]
 1375 000a 1B78     	 ldrb r3,[r3]
 1376 000c 1846     	 mov r0,r3
 1377 000e 7B68     	 ldr r3,[r7,#4]
 1378 0010 1B78     	 ldrb r3,[r3]
 1379 0012 1946     	 mov r1,r3
 1380 0014 8D4A     	 ldr r2,.L52
 1381 0016 2C23     	 movs r3,#44
 1382 0018 03FB01F3 	 mul r3,r3,r1
 1383 001c 1344     	 add r3,r3,r2
 1384 001e 2833     	 adds r3,r3,#40
 1385 0020 D3ED007A 	 flds s15,[r3]
 1386 0024 9FED8A7A 	 flds s14,.L52+4
 1387 0028 27EE877A 	 fmuls s14,s15,s14
 1388 002c 894B     	 ldr r3,.L52+8
 1389 002e D3ED007A 	 flds s15,[r3]
 1390 0032 C7EE277A 	 fdivs s15,s14,s15
 1391 0036 FCEEE77A 	 ftouizs s15,s15
 1392 003a C7ED007A 	 fsts s15,[r7]
 1393 003e 3B88     	 ldrh r3,[r7]
 1394 0040 99B2     	 uxth r1,r3
 1395 0042 824A     	 ldr r2,.L52
 1396 0044 2C23     	 movs r3,#44
 1397 0046 03FB00F3 	 mul r3,r3,r0
 1398 004a 1344     	 add r3,r3,r2
 1399 004c 1833     	 adds r3,r3,#24
 1400 004e 0A46     	 mov r2,r1
 1401 0050 1A80     	 strh r2,[r3]
  98:../communications.h **** 	motors[n->motor_R].poz_zad = motors[n->motor_R].teta * INT16_MAX / pi;
 1402              	 .loc 5 98 0
 1403 0052 7B68     	 ldr r3,[r7,#4]
 1404 0054 5B78     	 ldrb r3,[r3,#1]
 1405 0056 1846     	 mov r0,r3
 1406 0058 7B68     	 ldr r3,[r7,#4]
 1407 005a 5B78     	 ldrb r3,[r3,#1]
 1408 005c 1946     	 mov r1,r3
 1409 005e 7B4A     	 ldr r2,.L52
 1410 0060 2C23     	 movs r3,#44
 1411 0062 03FB01F3 	 mul r3,r3,r1
 1412 0066 1344     	 add r3,r3,r2
 1413 0068 2833     	 adds r3,r3,#40
 1414 006a D3ED007A 	 flds s15,[r3]
 1415 006e 9FED787A 	 flds s14,.L52+4
 1416 0072 27EE877A 	 fmuls s14,s15,s14
 1417 0076 774B     	 ldr r3,.L52+8
 1418 0078 D3ED007A 	 flds s15,[r3]
 1419 007c C7EE277A 	 fdivs s15,s14,s15
 1420 0080 FCEEE77A 	 ftouizs s15,s15
 1421 0084 C7ED007A 	 fsts s15,[r7]
 1422 0088 3B88     	 ldrh r3,[r7]
 1423 008a 99B2     	 uxth r1,r3
 1424 008c 6F4A     	 ldr r2,.L52
 1425 008e 2C23     	 movs r3,#44
 1426 0090 03FB00F3 	 mul r3,r3,r0
 1427 0094 1344     	 add r3,r3,r2
 1428 0096 1833     	 adds r3,r3,#24
 1429 0098 0A46     	 mov r2,r1
 1430 009a 1A80     	 strh r2,[r3]
  99:../communications.h **** 	 txData[1] = motors[n->motor_L].adress;
 1431              	 .loc 5 99 0
 1432 009c 7B68     	 ldr r3,[r7,#4]
 1433 009e 1B78     	 ldrb r3,[r3]
 1434 00a0 1946     	 mov r1,r3
 1435 00a2 6A4A     	 ldr r2,.L52
 1436 00a4 2C23     	 movs r3,#44
 1437 00a6 03FB01F3 	 mul r3,r3,r1
 1438 00aa 1344     	 add r3,r3,r2
 1439 00ac 9A78     	 ldrb r2,[r3,#2]
 1440 00ae 6A4B     	 ldr r3,.L52+12
 1441 00b0 5A70     	 strb r2,[r3,#1]
 100:../communications.h **** 	 txData[2] = motors[n->motor_L].poz_zad >> 8;
 1442              	 .loc 5 100 0
 1443 00b2 7B68     	 ldr r3,[r7,#4]
 1444 00b4 1B78     	 ldrb r3,[r3]
 1445 00b6 1946     	 mov r1,r3
 1446 00b8 644A     	 ldr r2,.L52
 1447 00ba 2C23     	 movs r3,#44
 1448 00bc 03FB01F3 	 mul r3,r3,r1
 1449 00c0 1344     	 add r3,r3,r2
 1450 00c2 1833     	 adds r3,r3,#24
 1451 00c4 1B88     	 ldrh r3,[r3]
 1452 00c6 1B0A     	 lsrs r3,r3,#8
 1453 00c8 9BB2     	 uxth r3,r3
 1454 00ca DAB2     	 uxtb r2,r3
 1455 00cc 624B     	 ldr r3,.L52+12
 1456 00ce 9A70     	 strb r2,[r3,#2]
 101:../communications.h **** 	 txData[3] = motors[n->motor_L].poz_zad;
 1457              	 .loc 5 101 0
 1458 00d0 7B68     	 ldr r3,[r7,#4]
 1459 00d2 1B78     	 ldrb r3,[r3]
 1460 00d4 1946     	 mov r1,r3
 1461 00d6 5D4A     	 ldr r2,.L52
 1462 00d8 2C23     	 movs r3,#44
 1463 00da 03FB01F3 	 mul r3,r3,r1
 1464 00de 1344     	 add r3,r3,r2
 1465 00e0 1833     	 adds r3,r3,#24
 1466 00e2 1B88     	 ldrh r3,[r3]
 1467 00e4 DAB2     	 uxtb r2,r3
 1468 00e6 5C4B     	 ldr r3,.L52+12
 1469 00e8 DA70     	 strb r2,[r3,#3]
 102:../communications.h **** 	 txData[4] = motors[n->motor_L].ks >> 8;
 1470              	 .loc 5 102 0
 1471 00ea 7B68     	 ldr r3,[r7,#4]
 1472 00ec 1B78     	 ldrb r3,[r3]
 1473 00ee 1946     	 mov r1,r3
 1474 00f0 564A     	 ldr r2,.L52
 1475 00f2 2C23     	 movs r3,#44
 1476 00f4 03FB01F3 	 mul r3,r3,r1
 1477 00f8 1344     	 add r3,r3,r2
 1478 00fa 1833     	 adds r3,r3,#24
 1479 00fc 5B88     	 ldrh r3,[r3,#2]
 1480 00fe 1B0A     	 lsrs r3,r3,#8
 1481 0100 9BB2     	 uxth r3,r3
 1482 0102 DAB2     	 uxtb r2,r3
 1483 0104 544B     	 ldr r3,.L52+12
 1484 0106 1A71     	 strb r2,[r3,#4]
 103:../communications.h **** 	 txData[5] = motors[n->motor_L].ks;
 1485              	 .loc 5 103 0
 1486 0108 7B68     	 ldr r3,[r7,#4]
 1487 010a 1B78     	 ldrb r3,[r3]
 1488 010c 1946     	 mov r1,r3
 1489 010e 4F4A     	 ldr r2,.L52
 1490 0110 2C23     	 movs r3,#44
 1491 0112 03FB01F3 	 mul r3,r3,r1
 1492 0116 1344     	 add r3,r3,r2
 1493 0118 1833     	 adds r3,r3,#24
 1494 011a 5B88     	 ldrh r3,[r3,#2]
 1495 011c DAB2     	 uxtb r2,r3
 1496 011e 4E4B     	 ldr r3,.L52+12
 1497 0120 5A71     	 strb r2,[r3,#5]
 104:../communications.h **** 	 txData[6] = motors[n->motor_L].kd >>8;
 1498              	 .loc 5 104 0
 1499 0122 7B68     	 ldr r3,[r7,#4]
 1500 0124 1B78     	 ldrb r3,[r3]
 1501 0126 1946     	 mov r1,r3
 1502 0128 484A     	 ldr r2,.L52
 1503 012a 2C23     	 movs r3,#44
 1504 012c 03FB01F3 	 mul r3,r3,r1
 1505 0130 1344     	 add r3,r3,r2
 1506 0132 1833     	 adds r3,r3,#24
 1507 0134 9B88     	 ldrh r3,[r3,#4]
 1508 0136 1B0A     	 lsrs r3,r3,#8
 1509 0138 9BB2     	 uxth r3,r3
 1510 013a DAB2     	 uxtb r2,r3
 1511 013c 464B     	 ldr r3,.L52+12
 1512 013e 9A71     	 strb r2,[r3,#6]
 105:../communications.h **** 	 txData[7] = motors[n->motor_L].kd;
 1513              	 .loc 5 105 0
 1514 0140 7B68     	 ldr r3,[r7,#4]
 1515 0142 1B78     	 ldrb r3,[r3]
 1516 0144 1946     	 mov r1,r3
 1517 0146 414A     	 ldr r2,.L52
 1518 0148 2C23     	 movs r3,#44
 1519 014a 03FB01F3 	 mul r3,r3,r1
 1520 014e 1344     	 add r3,r3,r2
 1521 0150 1833     	 adds r3,r3,#24
 1522 0152 9B88     	 ldrh r3,[r3,#4]
 1523 0154 DAB2     	 uxtb r2,r3
 1524 0156 404B     	 ldr r3,.L52+12
 1525 0158 DA71     	 strb r2,[r3,#7]
 106:../communications.h **** 	 txData[8] = EOF;
 1526              	 .loc 5 106 0
 1527 015a 3F4B     	 ldr r3,.L52+12
 1528 015c DD22     	 movs r2,#221
 1529 015e 1A72     	 strb r2,[r3,#8]
 107:../communications.h **** 	 Send(9);
 1530              	 .loc 5 107 0
 1531 0160 0920     	 movs r0,#9
 1532 0162 FFF7FEFF 	 bl Send
 108:../communications.h **** 	 delay(response_delay);
 1533              	 .loc 5 108 0
 1534 0166 3D4B     	 ldr r3,.L52+16
 1535 0168 1B88     	 ldrh r3,[r3]
 1536 016a 1846     	 mov r0,r3
 1537 016c FFF7FEFF 	 bl delay
 109:../communications.h **** 	 txData[1] = motors[n->motor_R].adress;
 1538              	 .loc 5 109 0
 1539 0170 7B68     	 ldr r3,[r7,#4]
 1540 0172 5B78     	 ldrb r3,[r3,#1]
 1541 0174 1946     	 mov r1,r3
 1542 0176 354A     	 ldr r2,.L52
 1543 0178 2C23     	 movs r3,#44
 1544 017a 03FB01F3 	 mul r3,r3,r1
 1545 017e 1344     	 add r3,r3,r2
 1546 0180 9A78     	 ldrb r2,[r3,#2]
 1547 0182 354B     	 ldr r3,.L52+12
 1548 0184 5A70     	 strb r2,[r3,#1]
 110:../communications.h **** 	 txData[2] = motors[n->motor_R].poz_zad >> 8;
 1549              	 .loc 5 110 0
 1550 0186 7B68     	 ldr r3,[r7,#4]
 1551 0188 5B78     	 ldrb r3,[r3,#1]
 1552 018a 1946     	 mov r1,r3
 1553 018c 2F4A     	 ldr r2,.L52
 1554 018e 2C23     	 movs r3,#44
 1555 0190 03FB01F3 	 mul r3,r3,r1
 1556 0194 1344     	 add r3,r3,r2
 1557 0196 1833     	 adds r3,r3,#24
 1558 0198 1B88     	 ldrh r3,[r3]
 1559 019a 1B0A     	 lsrs r3,r3,#8
 1560 019c 9BB2     	 uxth r3,r3
 1561 019e DAB2     	 uxtb r2,r3
 1562 01a0 2D4B     	 ldr r3,.L52+12
 1563 01a2 9A70     	 strb r2,[r3,#2]
 111:../communications.h **** 	 txData[3] = motors[n->motor_R].poz_zad;
 1564              	 .loc 5 111 0
 1565 01a4 7B68     	 ldr r3,[r7,#4]
 1566 01a6 5B78     	 ldrb r3,[r3,#1]
 1567 01a8 1946     	 mov r1,r3
 1568 01aa 284A     	 ldr r2,.L52
 1569 01ac 2C23     	 movs r3,#44
 1570 01ae 03FB01F3 	 mul r3,r3,r1
 1571 01b2 1344     	 add r3,r3,r2
 1572 01b4 1833     	 adds r3,r3,#24
 1573 01b6 1B88     	 ldrh r3,[r3]
 1574 01b8 DAB2     	 uxtb r2,r3
 1575 01ba 274B     	 ldr r3,.L52+12
 1576 01bc DA70     	 strb r2,[r3,#3]
 112:../communications.h **** 	 txData[4] = motors[n->motor_R].ks >> 8;
 1577              	 .loc 5 112 0
 1578 01be 7B68     	 ldr r3,[r7,#4]
 1579 01c0 5B78     	 ldrb r3,[r3,#1]
 1580 01c2 1946     	 mov r1,r3
 1581 01c4 214A     	 ldr r2,.L52
 1582 01c6 2C23     	 movs r3,#44
 1583 01c8 03FB01F3 	 mul r3,r3,r1
 1584 01cc 1344     	 add r3,r3,r2
 1585 01ce 1833     	 adds r3,r3,#24
 1586 01d0 5B88     	 ldrh r3,[r3,#2]
 1587 01d2 1B0A     	 lsrs r3,r3,#8
 1588 01d4 9BB2     	 uxth r3,r3
 1589 01d6 DAB2     	 uxtb r2,r3
 1590 01d8 1F4B     	 ldr r3,.L52+12
 1591 01da 1A71     	 strb r2,[r3,#4]
 113:../communications.h **** 	 txData[5] = motors[n->motor_R].ks;
 1592              	 .loc 5 113 0
 1593 01dc 7B68     	 ldr r3,[r7,#4]
 1594 01de 5B78     	 ldrb r3,[r3,#1]
 1595 01e0 1946     	 mov r1,r3
 1596 01e2 1A4A     	 ldr r2,.L52
 1597 01e4 2C23     	 movs r3,#44
 1598 01e6 03FB01F3 	 mul r3,r3,r1
 1599 01ea 1344     	 add r3,r3,r2
 1600 01ec 1833     	 adds r3,r3,#24
 1601 01ee 5B88     	 ldrh r3,[r3,#2]
 1602 01f0 DAB2     	 uxtb r2,r3
 1603 01f2 194B     	 ldr r3,.L52+12
 1604 01f4 5A71     	 strb r2,[r3,#5]
 114:../communications.h **** 	 txData[6] = motors[n->motor_R].kd >>8;
 1605              	 .loc 5 114 0
 1606 01f6 7B68     	 ldr r3,[r7,#4]
 1607 01f8 5B78     	 ldrb r3,[r3,#1]
 1608 01fa 1946     	 mov r1,r3
 1609 01fc 134A     	 ldr r2,.L52
 1610 01fe 2C23     	 movs r3,#44
 1611 0200 03FB01F3 	 mul r3,r3,r1
 1612 0204 1344     	 add r3,r3,r2
 1613 0206 1833     	 adds r3,r3,#24
 1614 0208 9B88     	 ldrh r3,[r3,#4]
 1615 020a 1B0A     	 lsrs r3,r3,#8
 1616 020c 9BB2     	 uxth r3,r3
 1617 020e DAB2     	 uxtb r2,r3
 1618 0210 114B     	 ldr r3,.L52+12
 1619 0212 9A71     	 strb r2,[r3,#6]
 115:../communications.h **** 	 txData[7] = motors[n->motor_R].kd;
 1620              	 .loc 5 115 0
 1621 0214 7B68     	 ldr r3,[r7,#4]
 1622 0216 5B78     	 ldrb r3,[r3,#1]
 1623 0218 1946     	 mov r1,r3
 1624 021a 0C4A     	 ldr r2,.L52
 1625 021c 2C23     	 movs r3,#44
 1626 021e 03FB01F3 	 mul r3,r3,r1
 1627 0222 1344     	 add r3,r3,r2
 1628 0224 1833     	 adds r3,r3,#24
 1629 0226 9B88     	 ldrh r3,[r3,#4]
 1630 0228 DAB2     	 uxtb r2,r3
 1631 022a 0B4B     	 ldr r3,.L52+12
 1632 022c DA71     	 strb r2,[r3,#7]
 116:../communications.h **** 	 txData[8] = EOF;
 1633              	 .loc 5 116 0
 1634 022e 0A4B     	 ldr r3,.L52+12
 1635 0230 DD22     	 movs r2,#221
 1636 0232 1A72     	 strb r2,[r3,#8]
 117:../communications.h **** 	 Send(9);
 1637              	 .loc 5 117 0
 1638 0234 0920     	 movs r0,#9
 1639 0236 FFF7FEFF 	 bl Send
 118:../communications.h **** 	 delay(response_delay);
 1640              	 .loc 5 118 0
 1641 023a 084B     	 ldr r3,.L52+16
 1642 023c 1B88     	 ldrh r3,[r3]
 1643 023e 1846     	 mov r0,r3
 1644 0240 FFF7FEFF 	 bl delay
 119:../communications.h **** }
 1645              	 .loc 5 119 0
 1646 0244 0837     	 adds r7,r7,#8
 1647              	.LCFI79:
 1648              	 .cfi_def_cfa_offset 8
 1649 0246 BD46     	 mov sp,r7
 1650              	.LCFI80:
 1651              	 .cfi_def_cfa_register 13
 1652              	 
 1653 0248 80BD     	 pop {r7,pc}
 1654              	.L53:
 1655 024a 00BF     	 .align 2
 1656              	.L52:
 1657 024c 00000000 	 .word motors
 1658 0250 00FEFF46 	 .word 1191181824
 1659 0254 00000000 	 .word pi
 1660 0258 00000000 	 .word txData
 1661 025c 00000000 	 .word response_delay
 1662              	 .cfi_endproc
 1663              	.LFE330:
 1665              	 .section .text.Send,"ax",%progbits
 1666              	 .align 2
 1667              	 .global Send
 1668              	 .thumb
 1669              	 .thumb_func
 1671              	Send:
 1672              	.LFB331:
 120:../communications.h **** void Send(uint8_t size )	// Send (n) bytes of data via half-duplex uart
 121:../communications.h **** {
 1673              	 .loc 5 121 0
 1674              	 .cfi_startproc
 1675              	 
 1676              	 
 1677 0000 80B5     	 push {r7,lr}
 1678              	.LCFI81:
 1679              	 .cfi_def_cfa_offset 8
 1680              	 .cfi_offset 7,-8
 1681              	 .cfi_offset 14,-4
 1682 0002 82B0     	 sub sp,sp,#8
 1683              	.LCFI82:
 1684              	 .cfi_def_cfa_offset 16
 1685 0004 00AF     	 add r7,sp,#0
 1686              	.LCFI83:
 1687              	 .cfi_def_cfa_register 7
 1688 0006 0346     	 mov r3,r0
 1689 0008 FB71     	 strb r3,[r7,#7]
 122:../communications.h **** 
 123:../communications.h **** 	UART_Transmit(&RS, txData, size);
 1690              	 .loc 5 123 0
 1691 000a FB79     	 ldrb r3,[r7,#7]
 1692 000c 0948     	 ldr r0,.L56
 1693 000e 0A49     	 ldr r1,.L56+4
 1694 0010 1A46     	 mov r2,r3
 1695 0012 FFF7FEFF 	 bl UART_Transmit
 124:../communications.h **** 	while(UART_IsTxBusy(&RS));
 1696              	 .loc 5 124 0
 1697 0016 00BF     	 nop
 1698              	.L55:
 1699              	 .loc 5 124 0 is_stmt 0 discriminator 1
 1700 0018 0648     	 ldr r0,.L56
 1701 001a FFF7FEFF 	 bl UART_IsTxBusy
 1702 001e 0346     	 mov r3,r0
 1703 0020 002B     	 cmp r3,#0
 1704 0022 F9D1     	 bne .L55
 125:../communications.h **** 	UART_Receive(&RS, &rxByte, 1);
 1705              	 .loc 5 125 0 is_stmt 1
 1706 0024 0348     	 ldr r0,.L56
 1707 0026 0549     	 ldr r1,.L56+8
 1708 0028 0122     	 movs r2,#1
 1709 002a FFF7FEFF 	 bl UART_Receive
 126:../communications.h **** }
 1710              	 .loc 5 126 0
 1711 002e 0837     	 adds r7,r7,#8
 1712              	.LCFI84:
 1713              	 .cfi_def_cfa_offset 8
 1714 0030 BD46     	 mov sp,r7
 1715              	.LCFI85:
 1716              	 .cfi_def_cfa_register 13
 1717              	 
 1718 0032 80BD     	 pop {r7,pc}
 1719              	.L57:
 1720              	 .align 2
 1721              	.L56:
 1722 0034 00000000 	 .word RS
 1723 0038 00000000 	 .word txData
 1724 003c 00000000 	 .word rxByte
 1725              	 .cfi_endproc
 1726              	.LFE331:
 1728              	 .section .text.motors_go,"ax",%progbits
 1729              	 .align 2
 1730              	 .global motors_go
 1731              	 .thumb
 1732              	 .thumb_func
 1734              	motors_go:
 1735              	.LFB332:
 127:../communications.h **** uint8_t motors_go()			//go no go sequence for all motor drivers; 1 if all are go
 128:../communications.h **** {
 1736              	 .loc 5 128 0
 1737              	 .cfi_startproc
 1738              	 
 1739              	 
 1740 0000 80B5     	 push {r7,lr}
 1741              	.LCFI86:
 1742              	 .cfi_def_cfa_offset 8
 1743              	 .cfi_offset 7,-8
 1744              	 .cfi_offset 14,-4
 1745 0002 82B0     	 sub sp,sp,#8
 1746              	.LCFI87:
 1747              	 .cfi_def_cfa_offset 16
 1748 0004 00AF     	 add r7,sp,#0
 1749              	.LCFI88:
 1750              	 .cfi_def_cfa_register 7
 129:../communications.h **** 	uint8_t all_go = 0;
 1751              	 .loc 5 129 0
 1752 0006 0023     	 movs r3,#0
 1753 0008 FB71     	 strb r3,[r7,#7]
 130:../communications.h **** 	while(all_go == 0)
 1754              	 .loc 5 130 0
 1755 000a 1CE0     	 b .L59
 1756              	.L63:
 131:../communications.h **** 	{
 132:../communications.h **** 		XMC_Check();
 1757              	 .loc 5 132 0
 1758 000c FFF7FEFF 	 bl XMC_Check
 1759              	.LBB8:
 133:../communications.h **** 		for(uint8_t i = 0; i < 8; i++)
 1760              	 .loc 5 133 0
 1761 0010 0023     	 movs r3,#0
 1762 0012 BB71     	 strb r3,[r7,#6]
 1763 0014 14E0     	 b .L60
 1764              	.L62:
 134:../communications.h **** 			if(motors[i].is_go != 1)
 1765              	 .loc 5 134 0
 1766 0016 BB79     	 ldrb r3,[r7,#6]
 1767 0018 0F4A     	 ldr r2,.L65
 1768 001a 2C21     	 movs r1,#44
 1769 001c 01FB03F3 	 mul r3,r1,r3
 1770 0020 1344     	 add r3,r3,r2
 1771 0022 5B78     	 ldrb r3,[r3,#1]
 1772 0024 012B     	 cmp r3,#1
 1773 0026 06D0     	 beq .L61
 135:../communications.h **** 			{
 136:../communications.h **** 				all_go = 0;
 1774              	 .loc 5 136 0
 1775 0028 0023     	 movs r3,#0
 1776 002a FB71     	 strb r3,[r7,#7]
 137:../communications.h **** 				XMC_Init(i);
 1777              	 .loc 5 137 0
 1778 002c BB79     	 ldrb r3,[r7,#6]
 1779 002e 1846     	 mov r0,r3
 1780 0030 FFF7FEFF 	 bl XMC_Init
 138:../communications.h **** 				break;
 1781              	 .loc 5 138 0
 1782 0034 07E0     	 b .L59
 1783              	.L61:
 139:../communications.h **** 			}
 140:../communications.h **** 			else
 141:../communications.h **** 				all_go = 1;
 1784              	 .loc 5 141 0 discriminator 2
 1785 0036 0123     	 movs r3,#1
 1786 0038 FB71     	 strb r3,[r7,#7]
 133:../communications.h **** 			if(motors[i].is_go != 1)
 1787              	 .loc 5 133 0 discriminator 2
 1788 003a BB79     	 ldrb r3,[r7,#6]
 1789 003c 0133     	 adds r3,r3,#1
 1790 003e BB71     	 strb r3,[r7,#6]
 1791              	.L60:
 133:../communications.h **** 			if(motors[i].is_go != 1)
 1792              	 .loc 5 133 0 is_stmt 0 discriminator 1
 1793 0040 BB79     	 ldrb r3,[r7,#6]
 1794 0042 072B     	 cmp r3,#7
 1795 0044 E7D9     	 bls .L62
 1796              	.L59:
 1797              	.LBE8:
 130:../communications.h **** 	{
 1798              	 .loc 5 130 0 is_stmt 1
 1799 0046 FB79     	 ldrb r3,[r7,#7]
 1800 0048 002B     	 cmp r3,#0
 1801 004a DFD0     	 beq .L63
 142:../communications.h **** 	}
 143:../communications.h **** 	return 1;
 1802              	 .loc 5 143 0
 1803 004c 0123     	 movs r3,#1
 144:../communications.h **** }
 1804              	 .loc 5 144 0
 1805 004e 1846     	 mov r0,r3
 1806 0050 0837     	 adds r7,r7,#8
 1807              	.LCFI89:
 1808              	 .cfi_def_cfa_offset 8
 1809 0052 BD46     	 mov sp,r7
 1810              	.LCFI90:
 1811              	 .cfi_def_cfa_register 13
 1812              	 
 1813 0054 80BD     	 pop {r7,pc}
 1814              	.L66:
 1815 0056 00BF     	 .align 2
 1816              	.L65:
 1817 0058 00000000 	 .word motors
 1818              	 .cfi_endproc
 1819              	.LFE332:
 1821              	 .section .text.Ik,"ax",%progbits
 1822              	 .align 2
 1823              	 .global Ik
 1824              	 .thumb
 1825              	 .thumb_func
 1827              	Ik:
 1828              	.LFB333:
 1829              	 .file 6 "../kinematics.h"
   1:../kinematics.h **** /*
   2:../kinematics.h ****  * kinematics.h
   3:../kinematics.h ****  *
   4:../kinematics.h ****  *  Created on: 11 Jan 2018
   5:../kinematics.h ****  *      Author: Mafish
   6:../kinematics.h ****  */
   7:../kinematics.h **** 
   8:../kinematics.h **** #define ZERO 1e-2
   9:../kinematics.h **** #define SMALL 1
  10:../kinematics.h **** #define isZero(A) ( (A < ZERO) && (A > -ZERO) )
  11:../kinematics.h **** #define isSmall(A) ( (A < SMALL) && (A > -SMALL) )
  12:../kinematics.h **** #define isSame(A, B) ( ((A-B) < ZERO) && ((A-B) > -ZERO) )
  13:../kinematics.h **** #define isSimilar(A, B) ( ((A-B) < SMALL) && ((A-B) > -SMALL) )
  14:../kinematics.h **** 
  15:../kinematics.h **** void Ik(struct Leg *n);		//Inverse kinematics
  16:../kinematics.h **** void Fk(struct Leg *n);	//Forward kinematics
  17:../kinematics.h **** void Update(struct Leg *n);	//Update floating numbers from raw data from motor drivers
  18:../kinematics.h **** void Trajectory(struct Leg *n);		//calculate trajectory for selected leg
  19:../kinematics.h **** 
  20:../kinematics.h **** void Ik(struct Leg *n)		//Inverse kinematics for (Leg)
  21:../kinematics.h **** {
 1830              	 .loc 6 21 0
 1831              	 .cfi_startproc
 1832              	 
 1833              	 
 1834 0000 80B5     	 push {r7,lr}
 1835              	.LCFI91:
 1836              	 .cfi_def_cfa_offset 8
 1837              	 .cfi_offset 7,-8
 1838              	 .cfi_offset 14,-4
 1839 0002 8AB0     	 sub sp,sp,#40
 1840              	.LCFI92:
 1841              	 .cfi_def_cfa_offset 48
 1842 0004 00AF     	 add r7,sp,#0
 1843              	.LCFI93:
 1844              	 .cfi_def_cfa_register 7
 1845 0006 7860     	 str r0,[r7,#4]
  22:../kinematics.h **** 	float x = n->foot.x;
 1846              	 .loc 6 22 0
 1847 0008 7B68     	 ldr r3,[r7,#4]
 1848 000a 5B68     	 ldr r3,[r3,#4]
 1849 000c 7B62     	 str r3,[r7,#36]
  23:../kinematics.h **** 	float y = n->foot.y;
 1850              	 .loc 6 23 0
 1851 000e 7B68     	 ldr r3,[r7,#4]
 1852 0010 9B68     	 ldr r3,[r3,#8]
 1853 0012 3B62     	 str r3,[r7,#32]
  24:../kinematics.h **** 	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 1854              	 .loc 6 24 0
 1855 0014 764B     	 ldr r3,.L68
 1856 0016 D3ED007A 	 flds s15,[r3]
 1857 001a B0EE007A 	 fconsts s14,#0
 1858 001e 87EE877A 	 fdivs s14,s15,s14
 1859 0022 D7ED097A 	 flds s15,[r7,#36]
 1860 0026 37EE677A 	 fsubs s14,s14,s15
 1861 002a 714B     	 ldr r3,.L68
 1862 002c D3ED007A 	 flds s15,[r3]
 1863 0030 F0EE006A 	 fconsts s13,#0
 1864 0034 C7EEA66A 	 fdivs s13,s15,s13
 1865 0038 D7ED097A 	 flds s15,[r7,#36]
 1866 003c 76EEE77A 	 fsubs s15,s13,s15
 1867 0040 27EE277A 	 fmuls s14,s14,s15
 1868 0044 D7ED086A 	 flds s13,[r7,#32]
 1869 0048 D7ED087A 	 flds s15,[r7,#32]
 1870 004c 66EEA77A 	 fmuls s15,s13,s15
 1871 0050 77EE277A 	 fadds s15,s14,s15
 1872 0054 17EE900A 	 fmrs r0,s15
 1873 0058 FFF7FEFF 	 bl sqrtf
 1874 005c F861     	 str r0,[r7,#28]
  25:../kinematics.h **** 	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 1875              	 .loc 6 25 0
 1876 005e 644B     	 ldr r3,.L68
 1877 0060 D3ED007A 	 flds s15,[r3]
 1878 0064 B0EE007A 	 fconsts s14,#0
 1879 0068 87EE877A 	 fdivs s14,s15,s14
 1880 006c D7ED097A 	 flds s15,[r7,#36]
 1881 0070 37EE277A 	 fadds s14,s14,s15
 1882 0074 5E4B     	 ldr r3,.L68
 1883 0076 D3ED007A 	 flds s15,[r3]
 1884 007a F0EE006A 	 fconsts s13,#0
 1885 007e C7EEA66A 	 fdivs s13,s15,s13
 1886 0082 D7ED097A 	 flds s15,[r7,#36]
 1887 0086 76EEA77A 	 fadds s15,s13,s15
 1888 008a 27EE277A 	 fmuls s14,s14,s15
 1889 008e D7ED086A 	 flds s13,[r7,#32]
 1890 0092 D7ED087A 	 flds s15,[r7,#32]
 1891 0096 66EEA77A 	 fmuls s15,s13,s15
 1892 009a 77EE277A 	 fadds s15,s14,s15
 1893 009e 17EE900A 	 fmrs r0,s15
 1894 00a2 FFF7FEFF 	 bl sqrtf
 1895 00a6 B861     	 str r0,[r7,#24]
  26:../kinematics.h **** 	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 1896              	 .loc 6 26 0
 1897 00a8 524B     	 ldr r3,.L68+4
 1898 00aa 93ED007A 	 flds s14,[r3]
 1899 00ae 514B     	 ldr r3,.L68+4
 1900 00b0 D3ED007A 	 flds s15,[r3]
 1901 00b4 27EE277A 	 fmuls s14,s14,s15
 1902 00b8 D7ED076A 	 flds s13,[r7,#28]
 1903 00bc D7ED077A 	 flds s15,[r7,#28]
 1904 00c0 66EEA77A 	 fmuls s15,s13,s15
 1905 00c4 37EE277A 	 fadds s14,s14,s15
 1906 00c8 4B4B     	 ldr r3,.L68+8
 1907 00ca D3ED006A 	 flds s13,[r3]
 1908 00ce 4A4B     	 ldr r3,.L68+8
 1909 00d0 D3ED007A 	 flds s15,[r3]
 1910 00d4 66EEA77A 	 fmuls s15,s13,s15
 1911 00d8 37EE677A 	 fsubs s14,s14,s15
 1912 00dc 454B     	 ldr r3,.L68+4
 1913 00de D3ED007A 	 flds s15,[r3]
 1914 00e2 77EEA76A 	 fadds s13,s15,s15
 1915 00e6 D7ED077A 	 flds s15,[r7,#28]
 1916 00ea 66EEA77A 	 fmuls s15,s13,s15
 1917 00ee C7EE277A 	 fdivs s15,s14,s15
 1918 00f2 C7ED057A 	 fsts s15,[r7,#20]
  27:../kinematics.h **** 	fi1 = acosf(fi1);
 1919              	 .loc 6 27 0
 1920 00f6 7869     	 ldr r0,[r7,#20]
 1921 00f8 FFF7FEFF 	 bl acosf
 1922 00fc 7861     	 str r0,[r7,#20]
  28:../kinematics.h **** 	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 1923              	 .loc 6 28 0
 1924 00fe 3D4B     	 ldr r3,.L68+4
 1925 0100 93ED007A 	 flds s14,[r3]
 1926 0104 3B4B     	 ldr r3,.L68+4
 1927 0106 D3ED007A 	 flds s15,[r3]
 1928 010a 27EE277A 	 fmuls s14,s14,s15
 1929 010e D7ED066A 	 flds s13,[r7,#24]
 1930 0112 D7ED067A 	 flds s15,[r7,#24]
 1931 0116 66EEA77A 	 fmuls s15,s13,s15
 1932 011a 37EE277A 	 fadds s14,s14,s15
 1933 011e 364B     	 ldr r3,.L68+8
 1934 0120 D3ED006A 	 flds s13,[r3]
 1935 0124 344B     	 ldr r3,.L68+8
 1936 0126 D3ED007A 	 flds s15,[r3]
 1937 012a 66EEA77A 	 fmuls s15,s13,s15
 1938 012e 37EE677A 	 fsubs s14,s14,s15
 1939 0132 304B     	 ldr r3,.L68+4
 1940 0134 D3ED007A 	 flds s15,[r3]
 1941 0138 77EEA76A 	 fadds s13,s15,s15
 1942 013c D7ED067A 	 flds s15,[r7,#24]
 1943 0140 66EEA77A 	 fmuls s15,s13,s15
 1944 0144 C7EE277A 	 fdivs s15,s14,s15
 1945 0148 C7ED047A 	 fsts s15,[r7,#16]
  29:../kinematics.h **** 	fi2 = acosf(fi2);
 1946              	 .loc 6 29 0
 1947 014c 3869     	 ldr r0,[r7,#16]
 1948 014e FFF7FEFF 	 bl acosf
 1949 0152 3861     	 str r0,[r7,#16]
  30:../kinematics.h **** 	float psi1 = asinf(((d/2)-x)/La);
 1950              	 .loc 6 30 0
 1951 0154 264B     	 ldr r3,.L68
 1952 0156 D3ED007A 	 flds s15,[r3]
 1953 015a B0EE007A 	 fconsts s14,#0
 1954 015e 87EE877A 	 fdivs s14,s15,s14
 1955 0162 D7ED097A 	 flds s15,[r7,#36]
 1956 0166 37EE677A 	 fsubs s14,s14,s15
 1957 016a D7ED077A 	 flds s15,[r7,#28]
 1958 016e C7EE277A 	 fdivs s15,s14,s15
 1959 0172 17EE900A 	 fmrs r0,s15
 1960 0176 FFF7FEFF 	 bl asinf
 1961 017a F860     	 str r0,[r7,#12]
  31:../kinematics.h **** 	float psi2 = asinf(((d/2)+x)/Lb);
 1962              	 .loc 6 31 0
 1963 017c 1C4B     	 ldr r3,.L68
 1964 017e D3ED007A 	 flds s15,[r3]
 1965 0182 B0EE007A 	 fconsts s14,#0
 1966 0186 87EE877A 	 fdivs s14,s15,s14
 1967 018a D7ED097A 	 flds s15,[r7,#36]
 1968 018e 37EE277A 	 fadds s14,s14,s15
 1969 0192 D7ED067A 	 flds s15,[r7,#24]
 1970 0196 C7EE277A 	 fdivs s15,s14,s15
 1971 019a 17EE900A 	 fmrs r0,s15
 1972 019e FFF7FEFF 	 bl asinf
 1973 01a2 B860     	 str r0,[r7,#8]
  32:../kinematics.h **** 
  33:../kinematics.h **** 	motors[n->motor_L].teta = fi1 - psi1;
 1974              	 .loc 6 33 0
 1975 01a4 7B68     	 ldr r3,[r7,#4]
 1976 01a6 1B78     	 ldrb r3,[r3]
 1977 01a8 1946     	 mov r1,r3
 1978 01aa 97ED057A 	 flds s14,[r7,#20]
 1979 01ae D7ED037A 	 flds s15,[r7,#12]
 1980 01b2 77EE677A 	 fsubs s15,s14,s15
 1981 01b6 114A     	 ldr r2,.L68+12
 1982 01b8 2C23     	 movs r3,#44
 1983 01ba 03FB01F3 	 mul r3,r3,r1
 1984 01be 1344     	 add r3,r3,r2
 1985 01c0 2833     	 adds r3,r3,#40
 1986 01c2 C3ED007A 	 fsts s15,[r3]
  34:../kinematics.h **** 	motors[n->motor_R].teta = fi2 - psi2;
 1987              	 .loc 6 34 0
 1988 01c6 7B68     	 ldr r3,[r7,#4]
 1989 01c8 5B78     	 ldrb r3,[r3,#1]
 1990 01ca 1946     	 mov r1,r3
 1991 01cc 97ED047A 	 flds s14,[r7,#16]
 1992 01d0 D7ED027A 	 flds s15,[r7,#8]
 1993 01d4 77EE677A 	 fsubs s15,s14,s15
 1994 01d8 084A     	 ldr r2,.L68+12
 1995 01da 2C23     	 movs r3,#44
 1996 01dc 03FB01F3 	 mul r3,r3,r1
 1997 01e0 1344     	 add r3,r3,r2
 1998 01e2 2833     	 adds r3,r3,#40
 1999 01e4 C3ED007A 	 fsts s15,[r3]
  35:../kinematics.h **** }
 2000              	 .loc 6 35 0
 2001 01e8 2837     	 adds r7,r7,#40
 2002              	.LCFI94:
 2003              	 .cfi_def_cfa_offset 8
 2004 01ea BD46     	 mov sp,r7
 2005              	.LCFI95:
 2006              	 .cfi_def_cfa_register 13
 2007              	 
 2008 01ec 80BD     	 pop {r7,pc}
 2009              	.L69:
 2010 01ee 00BF     	 .align 2
 2011              	.L68:
 2012 01f0 00000000 	 .word d
 2013 01f4 00000000 	 .word l1
 2014 01f8 00000000 	 .word l2
 2015 01fc 00000000 	 .word motors
 2016              	 .cfi_endproc
 2017              	.LFE333:
 2019              	 .section .text.Fk,"ax",%progbits
 2020              	 .align 2
 2021              	 .global Fk
 2022              	 .thumb
 2023              	 .thumb_func
 2025              	Fk:
 2026              	.LFB334:
  36:../kinematics.h **** void Fk(struct Leg *n)		//Forward kinematics for (Leg)
  37:../kinematics.h **** {
 2027              	 .loc 6 37 0
 2028              	 .cfi_startproc
 2029              	 
 2030              	 
 2031 0000 80B5     	 push {r7,lr}
 2032              	.LCFI96:
 2033              	 .cfi_def_cfa_offset 8
 2034              	 .cfi_offset 7,-8
 2035              	 .cfi_offset 14,-4
 2036 0002 2DED028B 	 fstmfdd sp!,{d8}
 2037              	.LCFI97:
 2038              	 .cfi_def_cfa_offset 16
 2039              	 .cfi_offset 80,-16
 2040              	 .cfi_offset 81,-12
 2041 0006 94B0     	 sub sp,sp,#80
 2042              	.LCFI98:
 2043              	 .cfi_def_cfa_offset 96
 2044 0008 00AF     	 add r7,sp,#0
 2045              	.LCFI99:
 2046              	 .cfi_def_cfa_register 7
 2047 000a 7860     	 str r0,[r7,#4]
  38:../kinematics.h **** 	float a = d+l1*(sinf(motors[n->motor_L].ang_abs_rad)+sinf(motors[n->motor_R].ang_abs_rad));
 2048              	 .loc 6 38 0
 2049 000c 7B68     	 ldr r3,[r7,#4]
 2050 000e 1B78     	 ldrb r3,[r3]
 2051 0010 1946     	 mov r1,r3
 2052 0012 D34A     	 ldr r2,.L73
 2053 0014 2C23     	 movs r3,#44
 2054 0016 03FB01F3 	 mul r3,r3,r1
 2055 001a 1344     	 add r3,r3,r2
 2056 001c 1033     	 adds r3,r3,#16
 2057 001e 5B68     	 ldr r3,[r3,#4]
 2058 0020 1846     	 mov r0,r3
 2059 0022 FFF7FEFF 	 bl sinf
 2060 0026 08EE100A 	 fmsr s16,r0
 2061 002a 7B68     	 ldr r3,[r7,#4]
 2062 002c 5B78     	 ldrb r3,[r3,#1]
 2063 002e 1946     	 mov r1,r3
 2064 0030 CB4A     	 ldr r2,.L73
 2065 0032 2C23     	 movs r3,#44
 2066 0034 03FB01F3 	 mul r3,r3,r1
 2067 0038 1344     	 add r3,r3,r2
 2068 003a 1033     	 adds r3,r3,#16
 2069 003c 5B68     	 ldr r3,[r3,#4]
 2070 003e 1846     	 mov r0,r3
 2071 0040 FFF7FEFF 	 bl sinf
 2072 0044 07EE900A 	 fmsr s15,r0
 2073 0048 38EE277A 	 fadds s14,s16,s15
 2074 004c C54B     	 ldr r3,.L73+4
 2075 004e D3ED007A 	 flds s15,[r3]
 2076 0052 27EE277A 	 fmuls s14,s14,s15
 2077 0056 C44B     	 ldr r3,.L73+8
 2078 0058 D3ED007A 	 flds s15,[r3]
 2079 005c 77EE277A 	 fadds s15,s14,s15
 2080 0060 C7ED127A 	 fsts s15,[r7,#72]
  39:../kinematics.h **** 	float b = l1*(cosf(motors[n->motor_R].ang_abs_rad)-cosf(motors[n->motor_L].ang_abs_rad));
 2081              	 .loc 6 39 0
 2082 0064 7B68     	 ldr r3,[r7,#4]
 2083 0066 5B78     	 ldrb r3,[r3,#1]
 2084 0068 1946     	 mov r1,r3
 2085 006a BD4A     	 ldr r2,.L73
 2086 006c 2C23     	 movs r3,#44
 2087 006e 03FB01F3 	 mul r3,r3,r1
 2088 0072 1344     	 add r3,r3,r2
 2089 0074 1033     	 adds r3,r3,#16
 2090 0076 5B68     	 ldr r3,[r3,#4]
 2091 0078 1846     	 mov r0,r3
 2092 007a FFF7FEFF 	 bl cosf
 2093 007e 08EE100A 	 fmsr s16,r0
 2094 0082 7B68     	 ldr r3,[r7,#4]
 2095 0084 1B78     	 ldrb r3,[r3]
 2096 0086 1946     	 mov r1,r3
 2097 0088 B54A     	 ldr r2,.L73
 2098 008a 2C23     	 movs r3,#44
 2099 008c 03FB01F3 	 mul r3,r3,r1
 2100 0090 1344     	 add r3,r3,r2
 2101 0092 1033     	 adds r3,r3,#16
 2102 0094 5B68     	 ldr r3,[r3,#4]
 2103 0096 1846     	 mov r0,r3
 2104 0098 FFF7FEFF 	 bl cosf
 2105 009c 07EE900A 	 fmsr s15,r0
 2106 00a0 38EE677A 	 fsubs s14,s16,s15
 2107 00a4 AF4B     	 ldr r3,.L73+4
 2108 00a6 D3ED007A 	 flds s15,[r3]
 2109 00aa 67EE277A 	 fmuls s15,s14,s15
 2110 00ae C7ED117A 	 fsts s15,[r7,#68]
  40:../kinematics.h **** 	float p = sqrtf(a*a+b*b);
 2111              	 .loc 6 40 0
 2112 00b2 97ED127A 	 flds s14,[r7,#72]
 2113 00b6 D7ED127A 	 flds s15,[r7,#72]
 2114 00ba 27EE277A 	 fmuls s14,s14,s15
 2115 00be D7ED116A 	 flds s13,[r7,#68]
 2116 00c2 D7ED117A 	 flds s15,[r7,#68]
 2117 00c6 66EEA77A 	 fmuls s15,s13,s15
 2118 00ca 77EE277A 	 fadds s15,s14,s15
 2119 00ce 17EE900A 	 fmrs r0,s15
 2120 00d2 FFF7FEFF 	 bl sqrtf
 2121 00d6 3864     	 str r0,[r7,#64]
  41:../kinematics.h **** 	float fi = atan2f(b,a);
 2122              	 .loc 6 41 0
 2123 00d8 786C     	 ldr r0,[r7,#68]
 2124 00da B96C     	 ldr r1,[r7,#72]
 2125 00dc FFF7FEFF 	 bl atan2f
 2126 00e0 F863     	 str r0,[r7,#60]
  42:../kinematics.h **** 	float theta = asinf(p/(2*l2));
 2127              	 .loc 6 42 0
 2128 00e2 A24B     	 ldr r3,.L73+12
 2129 00e4 D3ED007A 	 flds s15,[r3]
 2130 00e8 77EEA77A 	 fadds s15,s15,s15
 2131 00ec 97ED107A 	 flds s14,[r7,#64]
 2132 00f0 C7EE277A 	 fdivs s15,s14,s15
 2133 00f4 17EE900A 	 fmrs r0,s15
 2134 00f8 FFF7FEFF 	 bl asinf
 2135 00fc B863     	 str r0,[r7,#56]
  43:../kinematics.h **** 	float gama = (pi/2)-theta;
 2136              	 .loc 6 43 0
 2137 00fe 9C4B     	 ldr r3,.L73+16
 2138 0100 D3ED007A 	 flds s15,[r3]
 2139 0104 B0EE007A 	 fconsts s14,#0
 2140 0108 87EE877A 	 fdivs s14,s15,s14
 2141 010c D7ED0E7A 	 flds s15,[r7,#56]
 2142 0110 77EE677A 	 fsubs s15,s14,s15
 2143 0114 C7ED0D7A 	 fsts s15,[r7,#52]
  44:../kinematics.h **** 	float psi = gama+fi;
 2144              	 .loc 6 44 0
 2145 0118 97ED0D7A 	 flds s14,[r7,#52]
 2146 011c D7ED0F7A 	 flds s15,[r7,#60]
 2147 0120 77EE277A 	 fadds s15,s14,s15
 2148 0124 C7ED0C7A 	 fsts s15,[r7,#48]
  45:../kinematics.h **** 
  46:../kinematics.h **** 	n->real_foot.x = -(d/2) - l1*sinf(motors[n->motor_L].ang_abs_rad) + l2*cosf(psi);	//Forward kinema
 2149              	 .loc 6 46 0
 2150 0128 8F4B     	 ldr r3,.L73+8
 2151 012a D3ED007A 	 flds s15,[r3]
 2152 012e B0EE007A 	 fconsts s14,#0
 2153 0132 C7EE877A 	 fdivs s15,s15,s14
 2154 0136 B1EE678A 	 fnegs s16,s15
 2155 013a 7B68     	 ldr r3,[r7,#4]
 2156 013c 1B78     	 ldrb r3,[r3]
 2157 013e 1946     	 mov r1,r3
 2158 0140 874A     	 ldr r2,.L73
 2159 0142 2C23     	 movs r3,#44
 2160 0144 03FB01F3 	 mul r3,r3,r1
 2161 0148 1344     	 add r3,r3,r2
 2162 014a 1033     	 adds r3,r3,#16
 2163 014c 5B68     	 ldr r3,[r3,#4]
 2164 014e 1846     	 mov r0,r3
 2165 0150 FFF7FEFF 	 bl sinf
 2166 0154 07EE100A 	 fmsr s14,r0
 2167 0158 824B     	 ldr r3,.L73+4
 2168 015a D3ED007A 	 flds s15,[r3]
 2169 015e 67EE277A 	 fmuls s15,s14,s15
 2170 0162 38EE678A 	 fsubs s16,s16,s15
 2171 0166 386B     	 ldr r0,[r7,#48]
 2172 0168 FFF7FEFF 	 bl cosf
 2173 016c 07EE100A 	 fmsr s14,r0
 2174 0170 7E4B     	 ldr r3,.L73+12
 2175 0172 D3ED007A 	 flds s15,[r3]
 2176 0176 67EE277A 	 fmuls s15,s14,s15
 2177 017a 78EE277A 	 fadds s15,s16,s15
 2178 017e 7B68     	 ldr r3,[r7,#4]
 2179 0180 C3ED037A 	 fsts s15,[r3,#12]
  47:../kinematics.h **** 	n->real_foot.y = l1*cosf(motors[n->motor_L].ang_abs_rad) + l2*sinf(psi);
 2180              	 .loc 6 47 0
 2181 0184 7B68     	 ldr r3,[r7,#4]
 2182 0186 1B78     	 ldrb r3,[r3]
 2183 0188 1946     	 mov r1,r3
 2184 018a 754A     	 ldr r2,.L73
 2185 018c 2C23     	 movs r3,#44
 2186 018e 03FB01F3 	 mul r3,r3,r1
 2187 0192 1344     	 add r3,r3,r2
 2188 0194 1033     	 adds r3,r3,#16
 2189 0196 5B68     	 ldr r3,[r3,#4]
 2190 0198 1846     	 mov r0,r3
 2191 019a FFF7FEFF 	 bl cosf
 2192 019e 07EE100A 	 fmsr s14,r0
 2193 01a2 704B     	 ldr r3,.L73+4
 2194 01a4 D3ED007A 	 flds s15,[r3]
 2195 01a8 27EE278A 	 fmuls s16,s14,s15
 2196 01ac 386B     	 ldr r0,[r7,#48]
 2197 01ae FFF7FEFF 	 bl sinf
 2198 01b2 07EE100A 	 fmsr s14,r0
 2199 01b6 6D4B     	 ldr r3,.L73+12
 2200 01b8 D3ED007A 	 flds s15,[r3]
 2201 01bc 67EE277A 	 fmuls s15,s14,s15
 2202 01c0 78EE277A 	 fadds s15,s16,s15
 2203 01c4 7B68     	 ldr r3,[r7,#4]
 2204 01c6 C3ED047A 	 fsts s15,[r3,#16]
  48:../kinematics.h **** 
  49:../kinematics.h **** 	float A = a*cosf(motors[n->motor_L].ang_abs_rad)+b*sinf(motors[n->motor_L].ang_abs_rad);
 2205              	 .loc 6 49 0
 2206 01ca 7B68     	 ldr r3,[r7,#4]
 2207 01cc 1B78     	 ldrb r3,[r3]
 2208 01ce 1946     	 mov r1,r3
 2209 01d0 634A     	 ldr r2,.L73
 2210 01d2 2C23     	 movs r3,#44
 2211 01d4 03FB01F3 	 mul r3,r3,r1
 2212 01d8 1344     	 add r3,r3,r2
 2213 01da 1033     	 adds r3,r3,#16
 2214 01dc 5B68     	 ldr r3,[r3,#4]
 2215 01de 1846     	 mov r0,r3
 2216 01e0 FFF7FEFF 	 bl cosf
 2217 01e4 07EE100A 	 fmsr s14,r0
 2218 01e8 D7ED127A 	 flds s15,[r7,#72]
 2219 01ec 27EE278A 	 fmuls s16,s14,s15
 2220 01f0 7B68     	 ldr r3,[r7,#4]
 2221 01f2 1B78     	 ldrb r3,[r3]
 2222 01f4 1946     	 mov r1,r3
 2223 01f6 5A4A     	 ldr r2,.L73
 2224 01f8 2C23     	 movs r3,#44
 2225 01fa 03FB01F3 	 mul r3,r3,r1
 2226 01fe 1344     	 add r3,r3,r2
 2227 0200 1033     	 adds r3,r3,#16
 2228 0202 5B68     	 ldr r3,[r3,#4]
 2229 0204 1846     	 mov r0,r3
 2230 0206 FFF7FEFF 	 bl sinf
 2231 020a 07EE100A 	 fmsr s14,r0
 2232 020e D7ED117A 	 flds s15,[r7,#68]
 2233 0212 67EE277A 	 fmuls s15,s14,s15
 2234 0216 78EE277A 	 fadds s15,s16,s15
 2235 021a C7ED0B7A 	 fsts s15,[r7,#44]
  50:../kinematics.h **** 	float B = sqrtf((a*a+b*b)*(4*l2*l2-p*p));
 2236              	 .loc 6 50 0
 2237 021e 97ED127A 	 flds s14,[r7,#72]
 2238 0222 D7ED127A 	 flds s15,[r7,#72]
 2239 0226 27EE277A 	 fmuls s14,s14,s15
 2240 022a D7ED116A 	 flds s13,[r7,#68]
 2241 022e D7ED117A 	 flds s15,[r7,#68]
 2242 0232 66EEA77A 	 fmuls s15,s13,s15
 2243 0236 37EE277A 	 fadds s14,s14,s15
 2244 023a 4C4B     	 ldr r3,.L73+12
 2245 023c D3ED007A 	 flds s15,[r3]
 2246 0240 F1EE006A 	 fconsts s13,#16
 2247 0244 67EEA66A 	 fmuls s13,s15,s13
 2248 0248 484B     	 ldr r3,.L73+12
 2249 024a D3ED007A 	 flds s15,[r3]
 2250 024e 66EEA76A 	 fmuls s13,s13,s15
 2251 0252 97ED106A 	 flds s12,[r7,#64]
 2252 0256 D7ED107A 	 flds s15,[r7,#64]
 2253 025a 66EE277A 	 fmuls s15,s12,s15
 2254 025e 76EEE77A 	 fsubs s15,s13,s15
 2255 0262 67EE277A 	 fmuls s15,s14,s15
 2256 0266 17EE900A 	 fmrs r0,s15
 2257 026a FFF7FEFF 	 bl sqrtf
 2258 026e B862     	 str r0,[r7,#40]
  51:../kinematics.h **** 	float C = a*sinf(motors[n->motor_L].ang_abs_rad)-b*cosf(motors[n->motor_L].ang_abs_rad);
 2259              	 .loc 6 51 0
 2260 0270 7B68     	 ldr r3,[r7,#4]
 2261 0272 1B78     	 ldrb r3,[r3]
 2262 0274 1946     	 mov r1,r3
 2263 0276 3A4A     	 ldr r2,.L73
 2264 0278 2C23     	 movs r3,#44
 2265 027a 03FB01F3 	 mul r3,r3,r1
 2266 027e 1344     	 add r3,r3,r2
 2267 0280 1033     	 adds r3,r3,#16
 2268 0282 5B68     	 ldr r3,[r3,#4]
 2269 0284 1846     	 mov r0,r3
 2270 0286 FFF7FEFF 	 bl sinf
 2271 028a 07EE100A 	 fmsr s14,r0
 2272 028e D7ED127A 	 flds s15,[r7,#72]
 2273 0292 27EE278A 	 fmuls s16,s14,s15
 2274 0296 7B68     	 ldr r3,[r7,#4]
 2275 0298 1B78     	 ldrb r3,[r3]
 2276 029a 1946     	 mov r1,r3
 2277 029c 304A     	 ldr r2,.L73
 2278 029e 2C23     	 movs r3,#44
 2279 02a0 03FB01F3 	 mul r3,r3,r1
 2280 02a4 1344     	 add r3,r3,r2
 2281 02a6 1033     	 adds r3,r3,#16
 2282 02a8 5B68     	 ldr r3,[r3,#4]
 2283 02aa 1846     	 mov r0,r3
 2284 02ac FFF7FEFF 	 bl cosf
 2285 02b0 07EE100A 	 fmsr s14,r0
 2286 02b4 D7ED117A 	 flds s15,[r7,#68]
 2287 02b8 67EE277A 	 fmuls s15,s14,s15
 2288 02bc 78EE677A 	 fsubs s15,s16,s15
 2289 02c0 C7ED097A 	 fsts s15,[r7,#36]
  52:../kinematics.h **** 	float D = a*a+b*b;
 2290              	 .loc 6 52 0
 2291 02c4 97ED127A 	 flds s14,[r7,#72]
 2292 02c8 D7ED127A 	 flds s15,[r7,#72]
 2293 02cc 27EE277A 	 fmuls s14,s14,s15
 2294 02d0 D7ED116A 	 flds s13,[r7,#68]
 2295 02d4 D7ED117A 	 flds s15,[r7,#68]
 2296 02d8 66EEA77A 	 fmuls s15,s13,s15
 2297 02dc 77EE277A 	 fadds s15,s14,s15
 2298 02e0 C7ED087A 	 fsts s15,[r7,#32]
  53:../kinematics.h **** 	float E = a*cosf(motors[n->motor_R].ang_abs_rad)-b*sinf(motors[n->motor_R].ang_abs_rad);
 2299              	 .loc 6 53 0
 2300 02e4 7B68     	 ldr r3,[r7,#4]
 2301 02e6 5B78     	 ldrb r3,[r3,#1]
 2302 02e8 1946     	 mov r1,r3
 2303 02ea 1D4A     	 ldr r2,.L73
 2304 02ec 2C23     	 movs r3,#44
 2305 02ee 03FB01F3 	 mul r3,r3,r1
 2306 02f2 1344     	 add r3,r3,r2
 2307 02f4 1033     	 adds r3,r3,#16
 2308 02f6 5B68     	 ldr r3,[r3,#4]
 2309 02f8 1846     	 mov r0,r3
 2310 02fa FFF7FEFF 	 bl cosf
 2311 02fe 07EE100A 	 fmsr s14,r0
 2312 0302 D7ED127A 	 flds s15,[r7,#72]
 2313 0306 27EE278A 	 fmuls s16,s14,s15
 2314 030a 7B68     	 ldr r3,[r7,#4]
 2315 030c 5B78     	 ldrb r3,[r3,#1]
 2316 030e 1946     	 mov r1,r3
 2317 0310 134A     	 ldr r2,.L73
 2318 0312 2C23     	 movs r3,#44
 2319 0314 03FB01F3 	 mul r3,r3,r1
 2320 0318 1344     	 add r3,r3,r2
 2321 031a 1033     	 adds r3,r3,#16
 2322 031c 5B68     	 ldr r3,[r3,#4]
 2323 031e 1846     	 mov r0,r3
 2324 0320 FFF7FEFF 	 bl sinf
 2325 0324 07EE100A 	 fmsr s14,r0
 2326 0328 D7ED117A 	 flds s15,[r7,#68]
 2327 032c 67EE277A 	 fmuls s15,s14,s15
 2328 0330 78EE677A 	 fsubs s15,s16,s15
 2329 0334 C7ED077A 	 fsts s15,[r7,#28]
  54:../kinematics.h **** 	float F = a*sinf(motors[n->motor_R].ang_abs_rad)+b*cosf(motors[n->motor_R].ang_abs_rad);
 2330              	 .loc 6 54 0
 2331 0338 7B68     	 ldr r3,[r7,#4]
 2332 033a 5B78     	 ldrb r3,[r3,#1]
 2333 033c 1946     	 mov r1,r3
 2334 033e 084A     	 ldr r2,.L73
 2335 0340 2C23     	 movs r3,#44
 2336 0342 03FB01F3 	 mul r3,r3,r1
 2337 0346 1344     	 add r3,r3,r2
 2338 0348 1033     	 adds r3,r3,#16
 2339 034a 5B68     	 ldr r3,[r3,#4]
 2340 034c 1846     	 mov r0,r3
 2341 034e FFF7FEFF 	 bl sinf
 2342 0352 07EE100A 	 fmsr s14,r0
 2343 0356 D7ED127A 	 flds s15,[r7,#72]
 2344 035a 27EE278A 	 fmuls s16,s14,s15
 2345 035e 09E0     	 b .L74
 2346              	.L75:
 2347              	 .align 2
 2348              	.L73:
 2349 0360 00000000 	 .word motors
 2350 0364 00000000 	 .word l1
 2351 0368 00000000 	 .word d
 2352 036c 00000000 	 .word l2
 2353 0370 00000000 	 .word pi
 2354              	.L74:
 2355 0374 7B68     	 ldr r3,[r7,#4]
 2356 0376 5B78     	 ldrb r3,[r3,#1]
 2357 0378 1946     	 mov r1,r3
 2358 037a BC4A     	 ldr r2,.L76
 2359 037c 2C23     	 movs r3,#44
 2360 037e 03FB01F3 	 mul r3,r3,r1
 2361 0382 1344     	 add r3,r3,r2
 2362 0384 1033     	 adds r3,r3,#16
 2363 0386 5B68     	 ldr r3,[r3,#4]
 2364 0388 1846     	 mov r0,r3
 2365 038a FFF7FEFF 	 bl cosf
 2366 038e 07EE100A 	 fmsr s14,r0
 2367 0392 D7ED117A 	 flds s15,[r7,#68]
 2368 0396 67EE277A 	 fmuls s15,s14,s15
 2369 039a 78EE277A 	 fadds s15,s16,s15
 2370 039e C7ED067A 	 fsts s15,[r7,#24]
  55:../kinematics.h ****   	n->J[0][0] = -l1*l2*sinf(psi)*(-(A/B)+(C/D))-l1*cosf(motors[n->motor_L].ang_abs_rad);
 2371              	 .loc 6 55 0
 2372 03a2 B34B     	 ldr r3,.L76+4
 2373 03a4 D3ED007A 	 flds s15,[r3]
 2374 03a8 B1EE677A 	 fnegs s14,s15
 2375 03ac B14B     	 ldr r3,.L76+8
 2376 03ae D3ED007A 	 flds s15,[r3]
 2377 03b2 27EE278A 	 fmuls s16,s14,s15
 2378 03b6 386B     	 ldr r0,[r7,#48]
 2379 03b8 FFF7FEFF 	 bl sinf
 2380 03bc 07EE900A 	 fmsr s15,r0
 2381 03c0 28EE277A 	 fmuls s14,s16,s15
 2382 03c4 D7ED096A 	 flds s13,[r7,#36]
 2383 03c8 D7ED087A 	 flds s15,[r7,#32]
 2384 03cc C6EEA76A 	 fdivs s13,s13,s15
 2385 03d0 97ED0B6A 	 flds s12,[r7,#44]
 2386 03d4 D7ED0A7A 	 flds s15,[r7,#40]
 2387 03d8 C6EE277A 	 fdivs s15,s12,s15
 2388 03dc 76EEE77A 	 fsubs s15,s13,s15
 2389 03e0 27EE278A 	 fmuls s16,s14,s15
 2390 03e4 7B68     	 ldr r3,[r7,#4]
 2391 03e6 1B78     	 ldrb r3,[r3]
 2392 03e8 1946     	 mov r1,r3
 2393 03ea A04A     	 ldr r2,.L76
 2394 03ec 2C23     	 movs r3,#44
 2395 03ee 03FB01F3 	 mul r3,r3,r1
 2396 03f2 1344     	 add r3,r3,r2
 2397 03f4 1033     	 adds r3,r3,#16
 2398 03f6 5B68     	 ldr r3,[r3,#4]
 2399 03f8 1846     	 mov r0,r3
 2400 03fa FFF7FEFF 	 bl cosf
 2401 03fe 07EE100A 	 fmsr s14,r0
 2402 0402 9B4B     	 ldr r3,.L76+4
 2403 0404 D3ED007A 	 flds s15,[r3]
 2404 0408 67EE277A 	 fmuls s15,s14,s15
 2405 040c 78EE677A 	 fsubs s15,s16,s15
 2406 0410 7B68     	 ldr r3,[r7,#4]
 2407 0412 C3ED127A 	 fsts s15,[r3,#72]
  56:../kinematics.h ****   	n->J[0][1] = -l1*cosf(motors[n->motor_L].ang_abs_rad)+l1*l2*cosf(psi)*(-(A/B)+(C/D));
 2408              	 .loc 6 56 0
 2409 0416 964B     	 ldr r3,.L76+4
 2410 0418 D3ED007A 	 flds s15,[r3]
 2411 041c B1EE678A 	 fnegs s16,s15
 2412 0420 7B68     	 ldr r3,[r7,#4]
 2413 0422 1B78     	 ldrb r3,[r3]
 2414 0424 1946     	 mov r1,r3
 2415 0426 914A     	 ldr r2,.L76
 2416 0428 2C23     	 movs r3,#44
 2417 042a 03FB01F3 	 mul r3,r3,r1
 2418 042e 1344     	 add r3,r3,r2
 2419 0430 1033     	 adds r3,r3,#16
 2420 0432 5B68     	 ldr r3,[r3,#4]
 2421 0434 1846     	 mov r0,r3
 2422 0436 FFF7FEFF 	 bl cosf
 2423 043a 07EE900A 	 fmsr s15,r0
 2424 043e 28EE278A 	 fmuls s16,s16,s15
 2425 0442 8B4B     	 ldr r3,.L76+4
 2426 0444 93ED007A 	 flds s14,[r3]
 2427 0448 8A4B     	 ldr r3,.L76+8
 2428 044a D3ED007A 	 flds s15,[r3]
 2429 044e 67EE278A 	 fmuls s17,s14,s15
 2430 0452 386B     	 ldr r0,[r7,#48]
 2431 0454 FFF7FEFF 	 bl cosf
 2432 0458 07EE900A 	 fmsr s15,r0
 2433 045c 28EEA77A 	 fmuls s14,s17,s15
 2434 0460 D7ED096A 	 flds s13,[r7,#36]
 2435 0464 D7ED087A 	 flds s15,[r7,#32]
 2436 0468 C6EEA76A 	 fdivs s13,s13,s15
 2437 046c 97ED0B6A 	 flds s12,[r7,#44]
 2438 0470 D7ED0A7A 	 flds s15,[r7,#40]
 2439 0474 C6EE277A 	 fdivs s15,s12,s15
 2440 0478 76EEE77A 	 fsubs s15,s13,s15
 2441 047c 67EE277A 	 fmuls s15,s14,s15
 2442 0480 78EE277A 	 fadds s15,s16,s15
 2443 0484 7B68     	 ldr r3,[r7,#4]
 2444 0486 C3ED137A 	 fsts s15,[r3,#76]
  57:../kinematics.h ****   	n->J[1][0] = -l1*l2*sinf(psi)*(-(E/B)+(F/D));
 2445              	 .loc 6 57 0
 2446 048a 794B     	 ldr r3,.L76+4
 2447 048c D3ED007A 	 flds s15,[r3]
 2448 0490 B1EE677A 	 fnegs s14,s15
 2449 0494 774B     	 ldr r3,.L76+8
 2450 0496 D3ED007A 	 flds s15,[r3]
 2451 049a 27EE278A 	 fmuls s16,s14,s15
 2452 049e 386B     	 ldr r0,[r7,#48]
 2453 04a0 FFF7FEFF 	 bl sinf
 2454 04a4 07EE900A 	 fmsr s15,r0
 2455 04a8 28EE277A 	 fmuls s14,s16,s15
 2456 04ac D7ED066A 	 flds s13,[r7,#24]
 2457 04b0 D7ED087A 	 flds s15,[r7,#32]
 2458 04b4 C6EEA76A 	 fdivs s13,s13,s15
 2459 04b8 97ED076A 	 flds s12,[r7,#28]
 2460 04bc D7ED0A7A 	 flds s15,[r7,#40]
 2461 04c0 C6EE277A 	 fdivs s15,s12,s15
 2462 04c4 76EEE77A 	 fsubs s15,s13,s15
 2463 04c8 67EE277A 	 fmuls s15,s14,s15
 2464 04cc 7B68     	 ldr r3,[r7,#4]
 2465 04ce C3ED147A 	 fsts s15,[r3,#80]
  58:../kinematics.h ****   	n->J[1][1] = l1*l2*sinf(psi)*(-(E/B)+(F/D));
 2466              	 .loc 6 58 0
 2467 04d2 674B     	 ldr r3,.L76+4
 2468 04d4 93ED007A 	 flds s14,[r3]
 2469 04d8 664B     	 ldr r3,.L76+8
 2470 04da D3ED007A 	 flds s15,[r3]
 2471 04de 27EE278A 	 fmuls s16,s14,s15
 2472 04e2 386B     	 ldr r0,[r7,#48]
 2473 04e4 FFF7FEFF 	 bl sinf
 2474 04e8 07EE900A 	 fmsr s15,r0
 2475 04ec 28EE277A 	 fmuls s14,s16,s15
 2476 04f0 D7ED066A 	 flds s13,[r7,#24]
 2477 04f4 D7ED087A 	 flds s15,[r7,#32]
 2478 04f8 C6EEA76A 	 fdivs s13,s13,s15
 2479 04fc 97ED076A 	 flds s12,[r7,#28]
 2480 0500 D7ED0A7A 	 flds s15,[r7,#40]
 2481 0504 C6EE277A 	 fdivs s15,s12,s15
 2482 0508 76EEE77A 	 fsubs s15,s13,s15
 2483 050c 67EE277A 	 fmuls s15,s14,s15
 2484 0510 7B68     	 ldr r3,[r7,#4]
 2485 0512 C3ED157A 	 fsts s15,[r3,#84]
  59:../kinematics.h **** 
  60:../kinematics.h ****   	float mianownik = n->J[0][0]*n->J[1][1] - n->J[0][1]*n->J[1][0];
 2486              	 .loc 6 60 0
 2487 0516 7B68     	 ldr r3,[r7,#4]
 2488 0518 93ED127A 	 flds s14,[r3,#72]
 2489 051c 7B68     	 ldr r3,[r7,#4]
 2490 051e D3ED157A 	 flds s15,[r3,#84]
 2491 0522 27EE277A 	 fmuls s14,s14,s15
 2492 0526 7B68     	 ldr r3,[r7,#4]
 2493 0528 D3ED136A 	 flds s13,[r3,#76]
 2494 052c 7B68     	 ldr r3,[r7,#4]
 2495 052e D3ED147A 	 flds s15,[r3,#80]
 2496 0532 66EEA77A 	 fmuls s15,s13,s15
 2497 0536 77EE677A 	 fsubs s15,s14,s15
 2498 053a C7ED057A 	 fsts s15,[r7,#20]
  61:../kinematics.h ****   	float H = n->J[1][1]*motors[n->motor_L].torque - n->J[0][1]*motors[n->motor_R].torque;
 2499              	 .loc 6 61 0
 2500 053e 7B68     	 ldr r3,[r7,#4]
 2501 0540 93ED157A 	 flds s14,[r3,#84]
 2502 0544 7B68     	 ldr r3,[r7,#4]
 2503 0546 1B78     	 ldrb r3,[r3]
 2504 0548 1946     	 mov r1,r3
 2505 054a 484A     	 ldr r2,.L76
 2506 054c 2C23     	 movs r3,#44
 2507 054e 03FB01F3 	 mul r3,r3,r1
 2508 0552 1344     	 add r3,r3,r2
 2509 0554 2033     	 adds r3,r3,#32
 2510 0556 D3ED007A 	 flds s15,[r3]
 2511 055a 27EE277A 	 fmuls s14,s14,s15
 2512 055e 7B68     	 ldr r3,[r7,#4]
 2513 0560 D3ED136A 	 flds s13,[r3,#76]
 2514 0564 7B68     	 ldr r3,[r7,#4]
 2515 0566 5B78     	 ldrb r3,[r3,#1]
 2516 0568 1946     	 mov r1,r3
 2517 056a 404A     	 ldr r2,.L76
 2518 056c 2C23     	 movs r3,#44
 2519 056e 03FB01F3 	 mul r3,r3,r1
 2520 0572 1344     	 add r3,r3,r2
 2521 0574 2033     	 adds r3,r3,#32
 2522 0576 D3ED007A 	 flds s15,[r3]
 2523 057a 66EEA77A 	 fmuls s15,s13,s15
 2524 057e 77EE677A 	 fsubs s15,s14,s15
 2525 0582 C7ED047A 	 fsts s15,[r7,#16]
  62:../kinematics.h ****   	float I = n->J[0][0] *motors[n->motor_R].torque - n->J[1][0] * motors[n->motor_L].torque;
 2526              	 .loc 6 62 0
 2527 0586 7B68     	 ldr r3,[r7,#4]
 2528 0588 93ED127A 	 flds s14,[r3,#72]
 2529 058c 7B68     	 ldr r3,[r7,#4]
 2530 058e 5B78     	 ldrb r3,[r3,#1]
 2531 0590 1946     	 mov r1,r3
 2532 0592 364A     	 ldr r2,.L76
 2533 0594 2C23     	 movs r3,#44
 2534 0596 03FB01F3 	 mul r3,r3,r1
 2535 059a 1344     	 add r3,r3,r2
 2536 059c 2033     	 adds r3,r3,#32
 2537 059e D3ED007A 	 flds s15,[r3]
 2538 05a2 27EE277A 	 fmuls s14,s14,s15
 2539 05a6 7B68     	 ldr r3,[r7,#4]
 2540 05a8 D3ED146A 	 flds s13,[r3,#80]
 2541 05ac 7B68     	 ldr r3,[r7,#4]
 2542 05ae 1B78     	 ldrb r3,[r3]
 2543 05b0 1946     	 mov r1,r3
 2544 05b2 2E4A     	 ldr r2,.L76
 2545 05b4 2C23     	 movs r3,#44
 2546 05b6 03FB01F3 	 mul r3,r3,r1
 2547 05ba 1344     	 add r3,r3,r2
 2548 05bc 2033     	 adds r3,r3,#32
 2549 05be D3ED007A 	 flds s15,[r3]
 2550 05c2 66EEA77A 	 fmuls s15,s13,s15
 2551 05c6 77EE677A 	 fsubs s15,s14,s15
 2552 05ca C7ED037A 	 fsts s15,[r7,#12]
  63:../kinematics.h **** 
  64:../kinematics.h **** 
  65:../kinematics.h ****   	n->real_speed.x = n->J[0][0] * motors[n->motor_L].predkosc_silnika + n->J[0][1] * motors[n->moto
 2553              	 .loc 6 65 0
 2554 05ce 7B68     	 ldr r3,[r7,#4]
 2555 05d0 93ED127A 	 flds s14,[r3,#72]
 2556 05d4 7B68     	 ldr r3,[r7,#4]
 2557 05d6 1B78     	 ldrb r3,[r3]
 2558 05d8 1946     	 mov r1,r3
 2559 05da 244A     	 ldr r2,.L76
 2560 05dc 2C23     	 movs r3,#44
 2561 05de 03FB01F3 	 mul r3,r3,r1
 2562 05e2 1344     	 add r3,r3,r2
 2563 05e4 1033     	 adds r3,r3,#16
 2564 05e6 D3ED007A 	 flds s15,[r3]
 2565 05ea 27EE277A 	 fmuls s14,s14,s15
 2566 05ee 7B68     	 ldr r3,[r7,#4]
 2567 05f0 D3ED136A 	 flds s13,[r3,#76]
 2568 05f4 7B68     	 ldr r3,[r7,#4]
 2569 05f6 5B78     	 ldrb r3,[r3,#1]
 2570 05f8 1946     	 mov r1,r3
 2571 05fa 1C4A     	 ldr r2,.L76
 2572 05fc 2C23     	 movs r3,#44
 2573 05fe 03FB01F3 	 mul r3,r3,r1
 2574 0602 1344     	 add r3,r3,r2
 2575 0604 1033     	 adds r3,r3,#16
 2576 0606 D3ED007A 	 flds s15,[r3]
 2577 060a 66EEA77A 	 fmuls s15,s13,s15
 2578 060e 77EE277A 	 fadds s15,s14,s15
 2579 0612 7B68     	 ldr r3,[r7,#4]
 2580 0614 C3ED057A 	 fsts s15,[r3,#20]
  66:../kinematics.h ****   	n->real_speed.y = n-> J[1][0] * motors[n->motor_L].predkosc_silnika + n->J[1][1] * motors[n->mot
 2581              	 .loc 6 66 0
 2582 0618 7B68     	 ldr r3,[r7,#4]
 2583 061a 93ED147A 	 flds s14,[r3,#80]
 2584 061e 7B68     	 ldr r3,[r7,#4]
 2585 0620 1B78     	 ldrb r3,[r3]
 2586 0622 1946     	 mov r1,r3
 2587 0624 114A     	 ldr r2,.L76
 2588 0626 2C23     	 movs r3,#44
 2589 0628 03FB01F3 	 mul r3,r3,r1
 2590 062c 1344     	 add r3,r3,r2
 2591 062e 1033     	 adds r3,r3,#16
 2592 0630 D3ED007A 	 flds s15,[r3]
 2593 0634 27EE277A 	 fmuls s14,s14,s15
 2594 0638 7B68     	 ldr r3,[r7,#4]
 2595 063a D3ED156A 	 flds s13,[r3,#84]
 2596 063e 7B68     	 ldr r3,[r7,#4]
 2597 0640 5B78     	 ldrb r3,[r3,#1]
 2598 0642 1946     	 mov r1,r3
 2599 0644 094A     	 ldr r2,.L76
 2600 0646 2C23     	 movs r3,#44
 2601 0648 03FB01F3 	 mul r3,r3,r1
 2602 064c 1344     	 add r3,r3,r2
 2603 064e 1033     	 adds r3,r3,#16
 2604 0650 D3ED007A 	 flds s15,[r3]
 2605 0654 66EEA77A 	 fmuls s15,s13,s15
 2606 0658 77EE277A 	 fadds s15,s14,s15
 2607 065c 7B68     	 ldr r3,[r7,#4]
 2608 065e C3ED067A 	 fsts s15,[r3,#24]
 2609              	.LBB9:
  67:../kinematics.h **** 
  68:../kinematics.h ****   	for(uint8_t i = 4; i >0; i--)								//moving eFy_buffer to make space for new value
 2610              	 .loc 6 68 0
 2611 0662 0423     	 movs r3,#4
 2612 0664 87F84F30 	 strb r3,[r7,#79]
 2613 0668 1AE0     	 b .L71
 2614              	.L77:
 2615 066a 00BF     	 .align 2
 2616              	.L76:
 2617 066c 00000000 	 .word motors
 2618 0670 00000000 	 .word l1
 2619 0674 00000000 	 .word l2
 2620              	.L72:
  69:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 2621              	 .loc 6 69 0 discriminator 3
 2622 0678 97F84F30 	 ldrb r3,[r7,#79]
 2623 067c 97F84F20 	 ldrb r2,[r7,#79]
 2624 0680 013A     	 subs r2,r2,#1
 2625 0682 7968     	 ldr r1,[r7,#4]
 2626 0684 0832     	 adds r2,r2,#8
 2627 0686 9200     	 lsls r2,r2,#2
 2628 0688 0A44     	 add r2,r2,r1
 2629 068a 5268     	 ldr r2,[r2,#4]
 2630 068c 7968     	 ldr r1,[r7,#4]
 2631 068e 0833     	 adds r3,r3,#8
 2632 0690 9B00     	 lsls r3,r3,#2
 2633 0692 0B44     	 add r3,r3,r1
 2634 0694 5A60     	 str r2,[r3,#4]
  68:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 2635              	 .loc 6 68 0 discriminator 3
 2636 0696 97F84F30 	 ldrb r3,[r7,#79]
 2637 069a 013B     	 subs r3,r3,#1
 2638 069c 87F84F30 	 strb r3,[r7,#79]
 2639              	.L71:
  68:../kinematics.h ****   		n->eFY_buffer[i] = n->eFY_buffer[i-1];
 2640              	 .loc 6 68 0 is_stmt 0 discriminator 1
 2641 06a0 97F84F30 	 ldrb r3,[r7,#79]
 2642 06a4 002B     	 cmp r3,#0
 2643 06a6 E7D1     	 bne .L72
 2644              	.LBE9:
  70:../kinematics.h **** 
  71:../kinematics.h ****   	n->eF.x = H/(mianownik*5);				//mnozenie *5 poniewaz tak wyszlo z pomiarów nie wiadomo czemu al
 2645              	 .loc 6 71 0 is_stmt 1
 2646 06a8 D7ED057A 	 flds s15,[r7,#20]
 2647 06ac B1EE047A 	 fconsts s14,#20
 2648 06b0 67EE877A 	 fmuls s15,s15,s14
 2649 06b4 97ED047A 	 flds s14,[r7,#16]
 2650 06b8 C7EE277A 	 fdivs s15,s14,s15
 2651 06bc 7B68     	 ldr r3,[r7,#4]
 2652 06be C3ED077A 	 fsts s15,[r3,#28]
  72:../kinematics.h **** 
  73:../kinematics.h ****   	n->eF.y = I/mianownik;
 2653              	 .loc 6 73 0
 2654 06c2 97ED037A 	 flds s14,[r7,#12]
 2655 06c6 D7ED057A 	 flds s15,[r7,#20]
 2656 06ca C7EE277A 	 fdivs s15,s14,s15
 2657 06ce 7B68     	 ldr r3,[r7,#4]
 2658 06d0 C3ED087A 	 fsts s15,[r3,#32]
  74:../kinematics.h **** 
  75:../kinematics.h ****   	n->eFY_buffer[0] = n->eF.y;							//filling buffer with newest data
 2659              	 .loc 6 75 0
 2660 06d4 7B68     	 ldr r3,[r7,#4]
 2661 06d6 1A6A     	 ldr r2,[r3,#32]
 2662 06d8 7B68     	 ldr r3,[r7,#4]
 2663 06da 5A62     	 str r2,[r3,#36]
  76:../kinematics.h **** }
 2664              	 .loc 6 76 0
 2665 06dc 5037     	 adds r7,r7,#80
 2666              	.LCFI100:
 2667              	 .cfi_def_cfa_offset 16
 2668 06de BD46     	 mov sp,r7
 2669              	.LCFI101:
 2670              	 .cfi_def_cfa_register 13
 2671              	 
 2672 06e0 BDEC028B 	 fldmfdd sp!,{d8}
 2673              	.LCFI102:
 2674              	 .cfi_restore 80
 2675              	 .cfi_restore 81
 2676              	 .cfi_def_cfa_offset 8
 2677 06e4 80BD     	 pop {r7,pc}
 2678              	 .cfi_endproc
 2679              	.LFE334:
 2681 06e6 00BF     	 .section .text.Update,"ax",%progbits
 2682              	 .align 2
 2683              	 .global Update
 2684              	 .thumb
 2685              	 .thumb_func
 2687              	Update:
 2688              	.LFB335:
  77:../kinematics.h **** void Update(struct Leg *n)		//Update floating numbers from raw data from motor drivers
  78:../kinematics.h **** {
 2689              	 .loc 6 78 0
 2690              	 .cfi_startproc
 2691              	 
 2692              	 
 2693              	 
 2694 0000 80B4     	 push {r7}
 2695              	.LCFI103:
 2696              	 .cfi_def_cfa_offset 4
 2697              	 .cfi_offset 7,-4
 2698 0002 85B0     	 sub sp,sp,#20
 2699              	.LCFI104:
 2700              	 .cfi_def_cfa_offset 24
 2701 0004 00AF     	 add r7,sp,#0
 2702              	.LCFI105:
 2703              	 .cfi_def_cfa_register 7
 2704 0006 7860     	 str r0,[r7,#4]
 2705              	.LBB10:
  79:../kinematics.h **** 	for(uint8_t i = 0; i < 8; i++)
 2706              	 .loc 6 79 0
 2707 0008 0023     	 movs r3,#0
 2708 000a FB73     	 strb r3,[r7,#15]
 2709 000c C8E0     	 b .L79
 2710              	.L80:
  80:../kinematics.h **** 	{
  81:../kinematics.h **** 		motors[i].ang_abs_poprzedni = motors[i].ang_abs_rad;
 2711              	 .loc 6 81 0 discriminator 3
 2712 000e FB7B     	 ldrb r3,[r7,#15]
 2713 0010 FA7B     	 ldrb r2,[r7,#15]
 2714 0012 6849     	 ldr r1,.L81
 2715 0014 2C20     	 movs r0,#44
 2716 0016 00FB02F2 	 mul r2,r0,r2
 2717 001a 0A44     	 add r2,r2,r1
 2718 001c 1032     	 adds r2,r2,#16
 2719 001e 5268     	 ldr r2,[r2,#4]
 2720 0020 6449     	 ldr r1,.L81
 2721 0022 2C20     	 movs r0,#44
 2722 0024 00FB03F3 	 mul r3,r0,r3
 2723 0028 0B44     	 add r3,r3,r1
 2724 002a 0833     	 adds r3,r3,#8
 2725 002c 5A60     	 str r2,[r3,#4]
  82:../kinematics.h **** 		motors[i].ang_abs_poprzedni = motors[i].ang_abs_rad;
 2726              	 .loc 6 82 0 discriminator 3
 2727 002e FB7B     	 ldrb r3,[r7,#15]
 2728 0030 FA7B     	 ldrb r2,[r7,#15]
 2729 0032 6049     	 ldr r1,.L81
 2730 0034 2C20     	 movs r0,#44
 2731 0036 00FB02F2 	 mul r2,r0,r2
 2732 003a 0A44     	 add r2,r2,r1
 2733 003c 1032     	 adds r2,r2,#16
 2734 003e 5268     	 ldr r2,[r2,#4]
 2735 0040 5C49     	 ldr r1,.L81
 2736 0042 2C20     	 movs r0,#44
 2737 0044 00FB03F3 	 mul r3,r0,r3
 2738 0048 0B44     	 add r3,r3,r1
 2739 004a 0833     	 adds r3,r3,#8
 2740 004c 5A60     	 str r2,[r3,#4]
  83:../kinematics.h **** 		motors[i].ang_abs_rad = (float)motors[i].ang_abs * pi / 32767.0f;;
 2741              	 .loc 6 83 0 discriminator 3
 2742 004e FB7B     	 ldrb r3,[r7,#15]
 2743 0050 FA7B     	 ldrb r2,[r7,#15]
 2744 0052 5849     	 ldr r1,.L81
 2745 0054 2C20     	 movs r0,#44
 2746 0056 00FB02F2 	 mul r2,r0,r2
 2747 005a 0A44     	 add r2,r2,r1
 2748 005c 0832     	 adds r2,r2,#8
 2749 005e 1268     	 ldr r2,[r2]
 2750 0060 07EE902A 	 fmsr s15,r2
 2751 0064 B8EEE77A 	 fsitos s14,s15
 2752 0068 534A     	 ldr r2,.L81+4
 2753 006a D2ED007A 	 flds s15,[r2]
 2754 006e 67EE277A 	 fmuls s15,s14,s15
 2755 0072 9FED527A 	 flds s14,.L81+8
 2756 0076 C7EE877A 	 fdivs s15,s15,s14
 2757 007a 4E4A     	 ldr r2,.L81
 2758 007c 2C21     	 movs r1,#44
 2759 007e 01FB03F3 	 mul r3,r1,r3
 2760 0082 1344     	 add r3,r3,r2
 2761 0084 1033     	 adds r3,r3,#16
 2762 0086 C3ED017A 	 fsts s15,[r3,#4]
  84:../kinematics.h **** 		motors[i].ang_abs_rad = (float)motors[i].ang_abs  * pi / 32767.0f;;
 2763              	 .loc 6 84 0 discriminator 3
 2764 008a FB7B     	 ldrb r3,[r7,#15]
 2765 008c FA7B     	 ldrb r2,[r7,#15]
 2766 008e 4949     	 ldr r1,.L81
 2767 0090 2C20     	 movs r0,#44
 2768 0092 00FB02F2 	 mul r2,r0,r2
 2769 0096 0A44     	 add r2,r2,r1
 2770 0098 0832     	 adds r2,r2,#8
 2771 009a 1268     	 ldr r2,[r2]
 2772 009c 07EE902A 	 fmsr s15,r2
 2773 00a0 B8EEE77A 	 fsitos s14,s15
 2774 00a4 444A     	 ldr r2,.L81+4
 2775 00a6 D2ED007A 	 flds s15,[r2]
 2776 00aa 67EE277A 	 fmuls s15,s14,s15
 2777 00ae 9FED437A 	 flds s14,.L81+8
 2778 00b2 C7EE877A 	 fdivs s15,s15,s14
 2779 00b6 3F4A     	 ldr r2,.L81
 2780 00b8 2C21     	 movs r1,#44
 2781 00ba 01FB03F3 	 mul r3,r1,r3
 2782 00be 1344     	 add r3,r3,r2
 2783 00c0 1033     	 adds r3,r3,#16
 2784 00c2 C3ED017A 	 fsts s15,[r3,#4]
  85:../kinematics.h **** 		motors[i].predkosc_silnika =(motors[i].predkosc_silnika * 0.4f) + ((motors[i].ang_abs_rad - motor
 2785              	 .loc 6 85 0 discriminator 3
 2786 00c6 FB7B     	 ldrb r3,[r7,#15]
 2787 00c8 FA7B     	 ldrb r2,[r7,#15]
 2788 00ca 3A49     	 ldr r1,.L81
 2789 00cc 2C20     	 movs r0,#44
 2790 00ce 00FB02F2 	 mul r2,r0,r2
 2791 00d2 0A44     	 add r2,r2,r1
 2792 00d4 1032     	 adds r2,r2,#16
 2793 00d6 D2ED007A 	 flds s15,[r2]
 2794 00da 9FED397A 	 flds s14,.L81+12
 2795 00de 27EE877A 	 fmuls s14,s15,s14
 2796 00e2 FA7B     	 ldrb r2,[r7,#15]
 2797 00e4 3349     	 ldr r1,.L81
 2798 00e6 2C20     	 movs r0,#44
 2799 00e8 00FB02F2 	 mul r2,r0,r2
 2800 00ec 0A44     	 add r2,r2,r1
 2801 00ee 1032     	 adds r2,r2,#16
 2802 00f0 D2ED016A 	 flds s13,[r2,#4]
 2803 00f4 FA7B     	 ldrb r2,[r7,#15]
 2804 00f6 2F49     	 ldr r1,.L81
 2805 00f8 2C20     	 movs r0,#44
 2806 00fa 00FB02F2 	 mul r2,r0,r2
 2807 00fe 0A44     	 add r2,r2,r1
 2808 0100 0832     	 adds r2,r2,#8
 2809 0102 D2ED017A 	 flds s15,[r2,#4]
 2810 0106 76EEE76A 	 fsubs s13,s13,s15
 2811 010a 2E4A     	 ldr r2,.L81+16
 2812 010c D2ED007A 	 flds s15,[r2]
 2813 0110 C6EEA77A 	 fdivs s15,s13,s15
 2814 0114 DFED2C6A 	 flds s13,.L81+20
 2815 0118 67EEA67A 	 fmuls s15,s15,s13
 2816 011c 77EE277A 	 fadds s15,s14,s15
 2817 0120 244A     	 ldr r2,.L81
 2818 0122 2C21     	 movs r1,#44
 2819 0124 01FB03F3 	 mul r3,r1,r3
 2820 0128 1344     	 add r3,r3,r2
 2821 012a 1033     	 adds r3,r3,#16
 2822 012c C3ED007A 	 fsts s15,[r3]
  86:../kinematics.h **** 		motors[i].predkosc_silnika =(motors[i].predkosc_silnika * 0.4f) + ((motors[i].ang_abs_rad - motor
 2823              	 .loc 6 86 0 discriminator 3
 2824 0130 FB7B     	 ldrb r3,[r7,#15]
 2825 0132 FA7B     	 ldrb r2,[r7,#15]
 2826 0134 1F49     	 ldr r1,.L81
 2827 0136 2C20     	 movs r0,#44
 2828 0138 00FB02F2 	 mul r2,r0,r2
 2829 013c 0A44     	 add r2,r2,r1
 2830 013e 1032     	 adds r2,r2,#16
 2831 0140 D2ED007A 	 flds s15,[r2]
 2832 0144 9FED1E7A 	 flds s14,.L81+12
 2833 0148 27EE877A 	 fmuls s14,s15,s14
 2834 014c FA7B     	 ldrb r2,[r7,#15]
 2835 014e 1949     	 ldr r1,.L81
 2836 0150 2C20     	 movs r0,#44
 2837 0152 00FB02F2 	 mul r2,r0,r2
 2838 0156 0A44     	 add r2,r2,r1
 2839 0158 1032     	 adds r2,r2,#16
 2840 015a D2ED016A 	 flds s13,[r2,#4]
 2841 015e FA7B     	 ldrb r2,[r7,#15]
 2842 0160 1449     	 ldr r1,.L81
 2843 0162 2C20     	 movs r0,#44
 2844 0164 00FB02F2 	 mul r2,r0,r2
 2845 0168 0A44     	 add r2,r2,r1
 2846 016a 0832     	 adds r2,r2,#8
 2847 016c D2ED017A 	 flds s15,[r2,#4]
 2848 0170 76EEE76A 	 fsubs s13,s13,s15
 2849 0174 134A     	 ldr r2,.L81+16
 2850 0176 D2ED007A 	 flds s15,[r2]
 2851 017a C6EEA77A 	 fdivs s15,s13,s15
 2852 017e DFED126A 	 flds s13,.L81+20
 2853 0182 67EEA67A 	 fmuls s15,s15,s13
 2854 0186 77EE277A 	 fadds s15,s14,s15
 2855 018a 0A4A     	 ldr r2,.L81
 2856 018c 2C21     	 movs r1,#44
 2857 018e 01FB03F3 	 mul r3,r1,r3
 2858 0192 1344     	 add r3,r3,r2
 2859 0194 1033     	 adds r3,r3,#16
 2860 0196 C3ED007A 	 fsts s15,[r3]
  79:../kinematics.h **** 	{
 2861              	 .loc 6 79 0 discriminator 3
 2862 019a FB7B     	 ldrb r3,[r7,#15]
 2863 019c 0133     	 adds r3,r3,#1
 2864 019e FB73     	 strb r3,[r7,#15]
 2865              	.L79:
  79:../kinematics.h **** 	{
 2866              	 .loc 6 79 0 is_stmt 0 discriminator 1
 2867 01a0 FB7B     	 ldrb r3,[r7,#15]
 2868 01a2 072B     	 cmp r3,#7
 2869 01a4 7FF633AF 	 bls .L80
 2870              	.LBE10:
  87:../kinematics.h **** 	}
  88:../kinematics.h **** }
 2871              	 .loc 6 88 0 is_stmt 1
 2872 01a8 1437     	 adds r7,r7,#20
 2873              	.LCFI106:
 2874              	 .cfi_def_cfa_offset 4
 2875 01aa BD46     	 mov sp,r7
 2876              	.LCFI107:
 2877              	 .cfi_def_cfa_register 13
 2878              	 
 2879 01ac 5DF8047B 	 ldr r7,[sp],#4
 2880              	.LCFI108:
 2881              	 .cfi_restore 7
 2882              	 .cfi_def_cfa_offset 0
 2883 01b0 7047     	 bx lr
 2884              	.L82:
 2885 01b2 00BF     	 .align 2
 2886              	.L81:
 2887 01b4 00000000 	 .word motors
 2888 01b8 00000000 	 .word pi
 2889 01bc 00FEFF46 	 .word 1191181824
 2890 01c0 CDCCCC3E 	 .word 1053609165
 2891 01c4 00000000 	 .word dt
 2892 01c8 9A99193F 	 .word 1058642330
 2893              	 .cfi_endproc
 2894              	.LFE335:
 2896              	 .section .text.Trajectory,"ax",%progbits
 2897              	 .align 2
 2898              	 .global Trajectory
 2899              	 .thumb
 2900              	 .thumb_func
 2902              	Trajectory:
 2903              	.LFB336:
  89:../kinematics.h **** void Trajectory(struct Leg *n)		//calculate trajectory for selected leg
  90:../kinematics.h **** {
 2904              	 .loc 6 90 0
 2905              	 .cfi_startproc
 2906              	 
 2907              	 
 2908 0000 80B5     	 push {r7,lr}
 2909              	.LCFI109:
 2910              	 .cfi_def_cfa_offset 8
 2911              	 .cfi_offset 7,-8
 2912              	 .cfi_offset 14,-4
 2913 0002 82B0     	 sub sp,sp,#8
 2914              	.LCFI110:
 2915              	 .cfi_def_cfa_offset 16
 2916 0004 00AF     	 add r7,sp,#0
 2917              	.LCFI111:
 2918              	 .cfi_def_cfa_register 7
 2919 0006 7860     	 str r0,[r7,#4]
  91:../kinematics.h **** 	//circle
  92:../kinematics.h **** 	n->foot.x = sinf(t) * 80.0f;
 2920              	 .loc 6 92 0
 2921 0008 114B     	 ldr r3,.L84
 2922 000a 1B68     	 ldr r3,[r3]
 2923 000c 1846     	 mov r0,r3
 2924 000e FFF7FEFF 	 bl sinf
 2925 0012 07EE100A 	 fmsr s14,r0
 2926 0016 DFED0F7A 	 flds s15,.L84+4
 2927 001a 67EE277A 	 fmuls s15,s14,s15
 2928 001e 7B68     	 ldr r3,[r7,#4]
 2929 0020 C3ED017A 	 fsts s15,[r3,#4]
  93:../kinematics.h **** 	n->foot.y =180.0f + cosf(t) * 80.0f;
 2930              	 .loc 6 93 0
 2931 0024 0A4B     	 ldr r3,.L84
 2932 0026 1B68     	 ldr r3,[r3]
 2933 0028 1846     	 mov r0,r3
 2934 002a FFF7FEFF 	 bl cosf
 2935 002e 07EE100A 	 fmsr s14,r0
 2936 0032 DFED087A 	 flds s15,.L84+4
 2937 0036 67EE277A 	 fmuls s15,s14,s15
 2938 003a 9FED077A 	 flds s14,.L84+8
 2939 003e 77EE877A 	 fadds s15,s15,s14
 2940 0042 7B68     	 ldr r3,[r7,#4]
 2941 0044 C3ED027A 	 fsts s15,[r3,#8]
  94:../kinematics.h **** }
 2942              	 .loc 6 94 0
 2943 0048 0837     	 adds r7,r7,#8
 2944              	.LCFI112:
 2945              	 .cfi_def_cfa_offset 8
 2946 004a BD46     	 mov sp,r7
 2947              	.LCFI113:
 2948              	 .cfi_def_cfa_register 13
 2949              	 
 2950 004c 80BD     	 pop {r7,pc}
 2951              	.L85:
 2952 004e 00BF     	 .align 2
 2953              	.L84:
 2954 0050 00000000 	 .word t
 2955 0054 0000A042 	 .word 1117782016
 2956 0058 00003443 	 .word 1127481344
 2957              	 .cfi_endproc
 2958              	.LFE336:
 2960              	 .section .text.Smooth,"ax",%progbits
 2961              	 .align 2
 2962              	 .global Smooth
 2963              	 .thumb
 2964              	 .thumb_func
 2966              	Smooth:
 2967              	.LFB337:
  95:../kinematics.h **** uint8_t Smooth(struct Leg *n, struct vec2 target)		//Smooth motion of the foot to desired position;
  96:../kinematics.h **** {
 2968              	 .loc 6 96 0
 2969              	 .cfi_startproc
 2970              	 
 2971              	 
 2972 0000 80B5     	 push {r7,lr}
 2973              	.LCFI114:
 2974              	 .cfi_def_cfa_offset 8
 2975              	 .cfi_offset 7,-8
 2976              	 .cfi_offset 14,-4
 2977 0002 8AB0     	 sub sp,sp,#40
 2978              	.LCFI115:
 2979              	 .cfi_def_cfa_offset 48
 2980 0004 00AF     	 add r7,sp,#0
 2981              	.LCFI116:
 2982              	 .cfi_def_cfa_register 7
 2983 0006 F860     	 str r0,[r7,#12]
 2984 0008 3B1D     	 adds r3,r7,#4
 2985 000a 83E80600 	 stmia r3,{r1,r2}
  97:../kinematics.h **** 	float steps = 0;
 2986              	 .loc 6 97 0
 2987 000e 4FF00003 	 mov r3,#0
 2988 0012 FB61     	 str r3,[r7,#28]
  98:../kinematics.h **** 	struct vec2 direction;
  99:../kinematics.h **** 	Fk(n);
 2989              	 .loc 6 99 0
 2990 0014 F868     	 ldr r0,[r7,#12]
 2991 0016 FFF7FEFF 	 bl Fk
 100:../kinematics.h **** 	direction.x = n->real_foot.x - target.x;
 2992              	 .loc 6 100 0
 2993 001a FB68     	 ldr r3,[r7,#12]
 2994 001c 93ED037A 	 flds s14,[r3,#12]
 2995 0020 D7ED017A 	 flds s15,[r7,#4]
 2996 0024 77EE677A 	 fsubs s15,s14,s15
 2997 0028 C7ED057A 	 fsts s15,[r7,#20]
 101:../kinematics.h **** 	direction.y = n->real_foot.y - target.y;
 2998              	 .loc 6 101 0
 2999 002c FB68     	 ldr r3,[r7,#12]
 3000 002e 93ED047A 	 flds s14,[r3,#16]
 3001 0032 D7ED027A 	 flds s15,[r7,#8]
 3002 0036 77EE677A 	 fsubs s15,s14,s15
 3003 003a C7ED067A 	 fsts s15,[r7,#24]
 102:../kinematics.h **** 	float distance = sqrtf(direction.x*direction.x + direction.y * direction.y);
 3004              	 .loc 6 102 0
 3005 003e 97ED057A 	 flds s14,[r7,#20]
 3006 0042 D7ED057A 	 flds s15,[r7,#20]
 3007 0046 27EE277A 	 fmuls s14,s14,s15
 3008 004a D7ED066A 	 flds s13,[r7,#24]
 3009 004e D7ED067A 	 flds s15,[r7,#24]
 3010 0052 66EEA77A 	 fmuls s15,s13,s15
 3011 0056 77EE277A 	 fadds s15,s14,s15
 3012 005a 17EE900A 	 fmrs r0,s15
 3013 005e FFF7FEFF 	 bl sqrtf
 3014 0062 7862     	 str r0,[r7,#36]
 103:../kinematics.h **** 	steps = distance;
 3015              	 .loc 6 103 0
 3016 0064 7B6A     	 ldr r3,[r7,#36]
 3017 0066 FB61     	 str r3,[r7,#28]
 3018              	.LBB11:
 104:../kinematics.h **** 	for(uint8_t i = 0; i < steps + 5; i++)
 3019              	 .loc 6 104 0
 3020 0068 0023     	 movs r3,#0
 3021 006a 87F82330 	 strb r3,[r7,#35]
 3022 006e 9CE0     	 b .L87
 3023              	.L94:
 105:../kinematics.h **** 	{
 106:../kinematics.h **** 		n->foot.x = n->real_foot.x - (direction.x * distance / (1.05f*steps));
 3024              	 .loc 6 106 0
 3025 0070 FB68     	 ldr r3,[r7,#12]
 3026 0072 93ED037A 	 flds s14,[r3,#12]
 3027 0076 D7ED056A 	 flds s13,[r7,#20]
 3028 007a D7ED097A 	 flds s15,[r7,#36]
 3029 007e 66EEA76A 	 fmuls s13,s13,s15
 3030 0082 D7ED077A 	 flds s15,[r7,#28]
 3031 0086 9FED546A 	 flds s12,.L100
 3032 008a 67EE867A 	 fmuls s15,s15,s12
 3033 008e C6EEA77A 	 fdivs s15,s13,s15
 3034 0092 77EE677A 	 fsubs s15,s14,s15
 3035 0096 FB68     	 ldr r3,[r7,#12]
 3036 0098 C3ED017A 	 fsts s15,[r3,#4]
 107:../kinematics.h **** 		n->foot.y = n->real_foot.y - (direction.y * distance / (1.05f*steps));
 3037              	 .loc 6 107 0
 3038 009c FB68     	 ldr r3,[r7,#12]
 3039 009e 93ED047A 	 flds s14,[r3,#16]
 3040 00a2 D7ED066A 	 flds s13,[r7,#24]
 3041 00a6 D7ED097A 	 flds s15,[r7,#36]
 3042 00aa 66EEA76A 	 fmuls s13,s13,s15
 3043 00ae D7ED077A 	 flds s15,[r7,#28]
 3044 00b2 9FED496A 	 flds s12,.L100
 3045 00b6 67EE867A 	 fmuls s15,s15,s12
 3046 00ba C6EEA77A 	 fdivs s15,s13,s15
 3047 00be 77EE677A 	 fsubs s15,s14,s15
 3048 00c2 FB68     	 ldr r3,[r7,#12]
 3049 00c4 C3ED027A 	 fsts s15,[r3,#8]
 108:../kinematics.h **** 		Ik(n);
 3050              	 .loc 6 108 0
 3051 00c8 F868     	 ldr r0,[r7,#12]
 3052 00ca FFF7FEFF 	 bl Ik
 109:../kinematics.h **** 		Send_Leg(n);
 3053              	 .loc 6 109 0
 3054 00ce F868     	 ldr r0,[r7,#12]
 3055 00d0 FFF7FEFF 	 bl Send_Leg
 110:../kinematics.h **** 		delay(10000);
 3056              	 .loc 6 110 0
 3057 00d4 42F21070 	 movw r0,#10000
 3058 00d8 FFF7FEFF 	 bl delay
 111:../kinematics.h **** 		if(isSimilar(n->real_foot.x, target.x) && isSimilar(n->real_foot.y, target.y))
 3059              	 .loc 6 111 0
 3060 00dc FB68     	 ldr r3,[r7,#12]
 3061 00de 93ED037A 	 flds s14,[r3,#12]
 3062 00e2 D7ED017A 	 flds s15,[r7,#4]
 3063 00e6 77EE677A 	 fsubs s15,s14,s15
 3064 00ea B7EE007A 	 fconsts s14,#112
 3065 00ee F4EEC77A 	 fcmpes s15,s14
 3066 00f2 F1EE10FA 	 fmstat
 3067 00f6 2BD5     	 bpl .L88
 3068              	 .loc 6 111 0 is_stmt 0 discriminator 1
 3069 00f8 FB68     	 ldr r3,[r7,#12]
 3070 00fa 93ED037A 	 flds s14,[r3,#12]
 3071 00fe D7ED017A 	 flds s15,[r7,#4]
 3072 0102 77EE677A 	 fsubs s15,s14,s15
 3073 0106 BFEE007A 	 fconsts s14,#240
 3074 010a F4EEC77A 	 fcmpes s15,s14
 3075 010e F1EE10FA 	 fmstat
 3076 0112 1DDD     	 ble .L88
 3077              	 .loc 6 111 0 discriminator 2
 3078 0114 FB68     	 ldr r3,[r7,#12]
 3079 0116 93ED047A 	 flds s14,[r3,#16]
 3080 011a D7ED027A 	 flds s15,[r7,#8]
 3081 011e 77EE677A 	 fsubs s15,s14,s15
 3082 0122 B7EE007A 	 fconsts s14,#112
 3083 0126 F4EEC77A 	 fcmpes s15,s14
 3084 012a F1EE10FA 	 fmstat
 3085 012e 0FD5     	 bpl .L88
 3086              	 .loc 6 111 0 discriminator 3
 3087 0130 FB68     	 ldr r3,[r7,#12]
 3088 0132 93ED047A 	 flds s14,[r3,#16]
 3089 0136 D7ED027A 	 flds s15,[r7,#8]
 3090 013a 77EE677A 	 fsubs s15,s14,s15
 3091 013e BFEE007A 	 fconsts s14,#240
 3092 0142 F4EEC77A 	 fcmpes s15,s14
 3093 0146 F1EE10FA 	 fmstat
 3094 014a 01DD     	 ble .L88
 112:../kinematics.h **** 			return 1;
 3095              	 .loc 6 112 0 is_stmt 1
 3096 014c 0123     	 movs r3,#1
 3097 014e 3FE0     	 b .L95
 3098              	.L88:
 113:../kinematics.h **** 		Fk(n);
 3099              	 .loc 6 113 0 discriminator 2
 3100 0150 F868     	 ldr r0,[r7,#12]
 3101 0152 FFF7FEFF 	 bl Fk
 114:../kinematics.h **** 		direction.x = n->real_foot.x - target.x;
 3102              	 .loc 6 114 0 discriminator 2
 3103 0156 FB68     	 ldr r3,[r7,#12]
 3104 0158 93ED037A 	 flds s14,[r3,#12]
 3105 015c D7ED017A 	 flds s15,[r7,#4]
 3106 0160 77EE677A 	 fsubs s15,s14,s15
 3107 0164 C7ED057A 	 fsts s15,[r7,#20]
 115:../kinematics.h **** 		direction.y = n->real_foot.y - target.y;
 3108              	 .loc 6 115 0 discriminator 2
 3109 0168 FB68     	 ldr r3,[r7,#12]
 3110 016a 93ED047A 	 flds s14,[r3,#16]
 3111 016e D7ED027A 	 flds s15,[r7,#8]
 3112 0172 77EE677A 	 fsubs s15,s14,s15
 3113 0176 C7ED067A 	 fsts s15,[r7,#24]
 116:../kinematics.h **** 		distance = sqrtf(direction.x*direction.x + direction.y * direction.y);
 3114              	 .loc 6 116 0 discriminator 2
 3115 017a 97ED057A 	 flds s14,[r7,#20]
 3116 017e D7ED057A 	 flds s15,[r7,#20]
 3117 0182 27EE277A 	 fmuls s14,s14,s15
 3118 0186 D7ED066A 	 flds s13,[r7,#24]
 3119 018a D7ED067A 	 flds s15,[r7,#24]
 3120 018e 66EEA77A 	 fmuls s15,s13,s15
 3121 0192 77EE277A 	 fadds s15,s14,s15
 3122 0196 17EE900A 	 fmrs r0,s15
 3123 019a FFF7FEFF 	 bl sqrtf
 3124 019e 7862     	 str r0,[r7,#36]
 104:../kinematics.h **** 	{
 3125              	 .loc 6 104 0 discriminator 2
 3126 01a0 97F82330 	 ldrb r3,[r7,#35]
 3127 01a4 0133     	 adds r3,r3,#1
 3128 01a6 87F82330 	 strb r3,[r7,#35]
 3129              	.L87:
 104:../kinematics.h **** 	{
 3130              	 .loc 6 104 0 is_stmt 0 discriminator 1
 3131 01aa 97F82330 	 ldrb r3,[r7,#35]
 3132 01ae 07EE903A 	 fmsr s15,r3
 3133 01b2 B8EEE77A 	 fsitos s14,s15
 3134 01b6 D7ED077A 	 flds s15,[r7,#28]
 3135 01ba F1EE046A 	 fconsts s13,#20
 3136 01be 77EEA67A 	 fadds s15,s15,s13
 3137 01c2 B4EEE77A 	 fcmpes s14,s15
 3138 01c6 F1EE10FA 	 fmstat
 3139 01ca 3FF551AF 	 bmi .L94
 3140              	.LBE11:
 117:../kinematics.h **** 	}
 118:../kinematics.h **** 	return 0;
 3141              	 .loc 6 118 0 is_stmt 1
 3142 01ce 0023     	 movs r3,#0
 3143              	.L95:
 119:../kinematics.h **** }
 3144              	 .loc 6 119 0 discriminator 1
 3145 01d0 1846     	 mov r0,r3
 3146 01d2 2837     	 adds r7,r7,#40
 3147              	.LCFI117:
 3148              	 .cfi_def_cfa_offset 8
 3149 01d4 BD46     	 mov sp,r7
 3150              	.LCFI118:
 3151              	 .cfi_def_cfa_register 13
 3152              	 
 3153 01d6 80BD     	 pop {r7,pc}
 3154              	.L101:
 3155              	 .align 2
 3156              	.L100:
 3157 01d8 6666863F 	 .word 1065772646
 3158              	 .cfi_endproc
 3159              	.LFE337:
 3161              	 .section .text.CPG,"ax",%progbits
 3162              	 .align 2
 3163              	 .global CPG
 3164              	 .thumb
 3165              	 .thumb_func
 3167              	CPG:
 3168              	.LFB338:
 120:../kinematics.h **** void CPG()
 121:../kinematics.h **** {
 3169              	 .loc 6 121 0
 3170              	 .cfi_startproc
 3171              	 
 3172              	 
 3173 0000 80B5     	 push {r7,lr}
 3174              	.LCFI119:
 3175              	 .cfi_def_cfa_offset 8
 3176              	 .cfi_offset 7,-8
 3177              	 .cfi_offset 14,-4
 3178 0002 2DED028B 	 fstmfdd sp!,{d8}
 3179              	.LCFI120:
 3180              	 .cfi_def_cfa_offset 16
 3181              	 .cfi_offset 80,-16
 3182              	 .cfi_offset 81,-12
 3183 0006 86B0     	 sub sp,sp,#24
 3184              	.LCFI121:
 3185              	 .cfi_def_cfa_offset 40
 3186 0008 00AF     	 add r7,sp,#0
 3187              	.LCFI122:
 3188              	 .cfi_def_cfa_register 7
 122:../kinematics.h **** 	float dx = (dt*lkroku)/3; //jednostkowe przemieszczenie po x
 3189              	 .loc 6 122 0
 3190 000a C54B     	 ldr r3,.L132
 3191 000c 93ED007A 	 flds s14,[r3]
 3192 0010 C44B     	 ldr r3,.L132+4
 3193 0012 D3ED007A 	 flds s15,[r3]
 3194 0016 67EE277A 	 fmuls s15,s14,s15
 3195 001a B0EE087A 	 fconsts s14,#8
 3196 001e C7EE877A 	 fdivs s15,s15,s14
 3197 0022 C7ED037A 	 fsts s15,[r7,#12]
 123:../kinematics.h **** 	float predkosc = dx/czas_petli; //[mm/s], tylko do podgl¹du wartosci
 3198              	 .loc 6 123 0
 3199 0026 C04B     	 ldr r3,.L132+8
 3200 0028 D3ED007A 	 flds s15,[r3]
 3201 002c 97ED037A 	 flds s14,[r7,#12]
 3202 0030 C7EE277A 	 fdivs s15,s14,s15
 3203 0034 C7ED027A 	 fsts s15,[r7,#8]
 124:../kinematics.h **** 	//inicjalizacja poczatkowych pozycji nog
 125:../kinematics.h **** 	//noga 1
 126:../kinematics.h **** 	Legs[0].foot.x = lkroku/6;
 3204              	 .loc 6 126 0
 3205 0038 BA4B     	 ldr r3,.L132+4
 3206 003a D3ED007A 	 flds s15,[r3]
 3207 003e B1EE087A 	 fconsts s14,#24
 3208 0042 C7EE877A 	 fdivs s15,s15,s14
 3209 0046 B94B     	 ldr r3,.L132+12
 3210 0048 C3ED017A 	 fsts s15,[r3,#4]
 127:../kinematics.h **** 	Legs[0].foot.y = h_korpus;
 3211              	 .loc 6 127 0
 3212 004c B84B     	 ldr r3,.L132+16
 3213 004e 1B68     	 ldr r3,[r3]
 3214 0050 B64A     	 ldr r2,.L132+12
 3215 0052 9360     	 str r3,[r2,#8]
 128:../kinematics.h **** 	//noga 2
 129:../kinematics.h **** 	Legs[1].foot.x = -lkroku/2;
 3216              	 .loc 6 129 0
 3217 0054 B34B     	 ldr r3,.L132+4
 3218 0056 D3ED007A 	 flds s15,[r3]
 3219 005a F1EE677A 	 fnegs s15,s15
 3220 005e B0EE007A 	 fconsts s14,#0
 3221 0062 C7EE877A 	 fdivs s15,s15,s14
 3222 0066 B14B     	 ldr r3,.L132+12
 3223 0068 C3ED177A 	 fsts s15,[r3,#92]
 130:../kinematics.h **** 	Legs[1].foot.y = h_korpus;
 3224              	 .loc 6 130 0
 3225 006c B04B     	 ldr r3,.L132+16
 3226 006e 1B68     	 ldr r3,[r3]
 3227 0070 AE4A     	 ldr r2,.L132+12
 3228 0072 1366     	 str r3,[r2,#96]
 131:../kinematics.h **** 	//noga 3
 132:../kinematics.h **** 	Legs[2].foot.x = lkroku/6;
 3229              	 .loc 6 132 0
 3230 0074 AB4B     	 ldr r3,.L132+4
 3231 0076 D3ED007A 	 flds s15,[r3]
 3232 007a B1EE087A 	 fconsts s14,#24
 3233 007e C7EE877A 	 fdivs s15,s15,s14
 3234 0082 AA4B     	 ldr r3,.L132+12
 3235 0084 C3ED2D7A 	 fsts s15,[r3,#180]
 133:../kinematics.h **** 	Legs[2].foot.y = h_korpus;
 3236              	 .loc 6 133 0
 3237 0088 A94B     	 ldr r3,.L132+16
 3238 008a 1B68     	 ldr r3,[r3]
 3239 008c A74A     	 ldr r2,.L132+12
 3240 008e C2F8B830 	 str r3,[r2,#184]
 134:../kinematics.h **** 	//noga 4
 135:../kinematics.h **** 	Legs[3].foot.x= -lkroku/2;
 3241              	 .loc 6 135 0
 3242 0092 A44B     	 ldr r3,.L132+4
 3243 0094 D3ED007A 	 flds s15,[r3]
 3244 0098 F1EE677A 	 fnegs s15,s15
 3245 009c B0EE007A 	 fconsts s14,#0
 3246 00a0 C7EE877A 	 fdivs s15,s15,s14
 3247 00a4 A14B     	 ldr r3,.L132+12
 3248 00a6 C3ED437A 	 fsts s15,[r3,#268]
 136:../kinematics.h **** 	Legs[3].foot.y = h_korpus;
 3249              	 .loc 6 136 0
 3250 00aa A14B     	 ldr r3,.L132+16
 3251 00ac 1B68     	 ldr r3,[r3]
 3252 00ae 9F4A     	 ldr r2,.L132+12
 3253 00b0 C2F81031 	 str r3,[r2,#272]
 137:../kinematics.h **** 	uint32_t czas = 5000;
 3254              	 .loc 6 137 0
 3255 00b4 41F28833 	 movw r3,#5000
 3256 00b8 7B60     	 str r3,[r7,#4]
 138:../kinematics.h **** 	float ugiecie = hkroku / 4;
 3257              	 .loc 6 138 0
 3258 00ba 9E4B     	 ldr r3,.L132+20
 3259 00bc D3ED007A 	 flds s15,[r3]
 3260 00c0 B1EE007A 	 fconsts s14,#16
 3261 00c4 C7EE877A 	 fdivs s15,s15,s14
 3262 00c8 C7ED007A 	 fsts s15,[r7]
 3263              	.L127:
 139:../kinematics.h **** 	while(1)
 140:../kinematics.h **** 	{
 141:../kinematics.h **** 	if (faza == 1)
 3264              	 .loc 6 141 0
 3265 00cc 9A4B     	 ldr r3,.L132+24
 3266 00ce 1B78     	 ldrb r3,[r3]
 3267 00d0 012B     	 cmp r3,#1
 3268 00d2 40F0B180 	 bne .L103
 142:../kinematics.h **** 		  				{
 143:../kinematics.h **** 		  					Legs[0].foot.x -= dx;
 3269              	 .loc 6 143 0
 3270 00d6 954B     	 ldr r3,.L132+12
 3271 00d8 93ED017A 	 flds s14,[r3,#4]
 3272 00dc D7ED037A 	 flds s15,[r7,#12]
 3273 00e0 77EE677A 	 fsubs s15,s14,s15
 3274 00e4 914B     	 ldr r3,.L132+12
 3275 00e6 C3ED017A 	 fsts s15,[r3,#4]
 144:../kinematics.h **** 		  					Legs[0].foot.y = h_korpus;
 3276              	 .loc 6 144 0
 3277 00ea 914B     	 ldr r3,.L132+16
 3278 00ec 1B68     	 ldr r3,[r3]
 3279 00ee 8F4A     	 ldr r2,.L132+12
 3280 00f0 9360     	 str r3,[r2,#8]
 145:../kinematics.h **** 		  					Legs[1].foot.x = lkroku * sinf(t - (pi/2));
 3281              	 .loc 6 145 0
 3282 00f2 924B     	 ldr r3,.L132+28
 3283 00f4 93ED007A 	 flds s14,[r3]
 3284 00f8 914B     	 ldr r3,.L132+32
 3285 00fa D3ED007A 	 flds s15,[r3]
 3286 00fe F0EE006A 	 fconsts s13,#0
 3287 0102 C7EEA67A 	 fdivs s15,s15,s13
 3288 0106 77EE677A 	 fsubs s15,s14,s15
 3289 010a 17EE900A 	 fmrs r0,s15
 3290 010e FFF7FEFF 	 bl sinf
 3291 0112 07EE100A 	 fmsr s14,r0
 3292 0116 834B     	 ldr r3,.L132+4
 3293 0118 D3ED007A 	 flds s15,[r3]
 3294 011c 67EE277A 	 fmuls s15,s14,s15
 3295 0120 824B     	 ldr r3,.L132+12
 3296 0122 C3ED177A 	 fsts s15,[r3,#92]
 146:../kinematics.h **** 		  					Legs[1].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
 3297              	 .loc 6 146 0
 3298 0126 854B     	 ldr r3,.L132+28
 3299 0128 93ED007A 	 flds s14,[r3]
 3300 012c 844B     	 ldr r3,.L132+32
 3301 012e D3ED007A 	 flds s15,[r3]
 3302 0132 F0EE006A 	 fconsts s13,#0
 3303 0136 C7EEA67A 	 fdivs s15,s15,s13
 3304 013a 77EE677A 	 fsubs s15,s14,s15
 3305 013e 17EE900A 	 fmrs r0,s15
 3306 0142 FFF7FEFF 	 bl cosf
 3307 0146 07EE100A 	 fmsr s14,r0
 3308 014a 7A4B     	 ldr r3,.L132+20
 3309 014c D3ED007A 	 flds s15,[r3]
 3310 0150 27EE277A 	 fmuls s14,s14,s15
 3311 0154 764B     	 ldr r3,.L132+16
 3312 0156 D3ED007A 	 flds s15,[r3]
 3313 015a 77EE277A 	 fadds s15,s14,s15
 3314 015e 734B     	 ldr r3,.L132+12
 3315 0160 C3ED187A 	 fsts s15,[r3,#96]
 147:../kinematics.h **** 		  					Legs[2].foot.x += dx;
 3316              	 .loc 6 147 0
 3317 0164 714B     	 ldr r3,.L132+12
 3318 0166 93ED2D7A 	 flds s14,[r3,#180]
 3319 016a D7ED037A 	 flds s15,[r7,#12]
 3320 016e 77EE277A 	 fadds s15,s14,s15
 3321 0172 6E4B     	 ldr r3,.L132+12
 3322 0174 C3ED2D7A 	 fsts s15,[r3,#180]
 148:../kinematics.h **** 		  					Legs[2].foot.y = h_korpus - ugiecie;
 3323              	 .loc 6 148 0
 3324 0178 6D4B     	 ldr r3,.L132+16
 3325 017a 93ED007A 	 flds s14,[r3]
 3326 017e D7ED007A 	 flds s15,[r7]
 3327 0182 77EE677A 	 fsubs s15,s14,s15
 3328 0186 694B     	 ldr r3,.L132+12
 3329 0188 C3ED2E7A 	 fsts s15,[r3,#184]
 149:../kinematics.h **** 		  					Legs[3].foot.x += dx;
 3330              	 .loc 6 149 0
 3331 018c 674B     	 ldr r3,.L132+12
 3332 018e 93ED437A 	 flds s14,[r3,#268]
 3333 0192 D7ED037A 	 flds s15,[r7,#12]
 3334 0196 77EE277A 	 fadds s15,s14,s15
 3335 019a 644B     	 ldr r3,.L132+12
 3336 019c C3ED437A 	 fsts s15,[r3,#268]
 150:../kinematics.h **** 		  					Legs[3].foot.y = h_korpus;
 3337              	 .loc 6 150 0
 3338 01a0 634B     	 ldr r3,.L132+16
 3339 01a2 1B68     	 ldr r3,[r3]
 3340 01a4 614A     	 ldr r2,.L132+12
 3341 01a6 C2F81031 	 str r3,[r2,#272]
 3342              	.LBB12:
 151:../kinematics.h **** 
 152:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3343              	 .loc 6 152 0
 3344 01aa 0023     	 movs r3,#0
 3345 01ac FB75     	 strb r3,[r7,#23]
 3346 01ae 0BE0     	 b .L104
 3347              	.L105:
 153:../kinematics.h **** 		  						Ik(&Legs[i]);
 3348              	 .loc 6 153 0 discriminator 3
 3349 01b0 FB7D     	 ldrb r3,[r7,#23]
 3350 01b2 5822     	 movs r2,#88
 3351 01b4 02FB03F3 	 mul r3,r2,r3
 3352 01b8 5C4A     	 ldr r2,.L132+12
 3353 01ba 1344     	 add r3,r3,r2
 3354 01bc 1846     	 mov r0,r3
 3355 01be FFF7FEFF 	 bl Ik
 152:../kinematics.h **** 		  						Ik(&Legs[i]);
 3356              	 .loc 6 152 0 discriminator 3
 3357 01c2 FB7D     	 ldrb r3,[r7,#23]
 3358 01c4 0133     	 adds r3,r3,#1
 3359 01c6 FB75     	 strb r3,[r7,#23]
 3360              	.L104:
 152:../kinematics.h **** 		  						Ik(&Legs[i]);
 3361              	 .loc 6 152 0 is_stmt 0 discriminator 1
 3362 01c8 FB7D     	 ldrb r3,[r7,#23]
 3363 01ca 032B     	 cmp r3,#3
 3364 01cc F0D9     	 bls .L105
 3365              	.LBE12:
 3366              	.LBB13:
 154:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3367              	 .loc 6 154 0 is_stmt 1
 3368 01ce 0023     	 movs r3,#0
 3369 01d0 BB75     	 strb r3,[r7,#22]
 3370 01d2 0BE0     	 b .L106
 3371              	.L107:
 155:../kinematics.h **** 		  						Send_Leg(&Legs[i]);
 3372              	 .loc 6 155 0 discriminator 3
 3373 01d4 BB7D     	 ldrb r3,[r7,#22]
 3374 01d6 5822     	 movs r2,#88
 3375 01d8 02FB03F3 	 mul r3,r2,r3
 3376 01dc 534A     	 ldr r2,.L132+12
 3377 01de 1344     	 add r3,r3,r2
 3378 01e0 1846     	 mov r0,r3
 3379 01e2 FFF7FEFF 	 bl Send_Leg
 154:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3380              	 .loc 6 154 0 discriminator 3
 3381 01e6 BB7D     	 ldrb r3,[r7,#22]
 3382 01e8 0133     	 adds r3,r3,#1
 3383 01ea BB75     	 strb r3,[r7,#22]
 3384              	.L106:
 154:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3385              	 .loc 6 154 0 is_stmt 0 discriminator 1
 3386 01ec BB7D     	 ldrb r3,[r7,#22]
 3387 01ee 032B     	 cmp r3,#3
 3388 01f0 F0D9     	 bls .L107
 3389              	.LBE13:
 156:../kinematics.h **** 		  					t += dt; //iteracja zmiennej w sin/cos
 3390              	 .loc 6 156 0 is_stmt 1
 3391 01f2 524B     	 ldr r3,.L132+28
 3392 01f4 93ED007A 	 flds s14,[r3]
 3393 01f8 494B     	 ldr r3,.L132
 3394 01fa D3ED007A 	 flds s15,[r3]
 3395 01fe 77EE277A 	 fadds s15,s14,s15
 3396 0202 4E4B     	 ldr r3,.L132+28
 3397 0204 C3ED007A 	 fsts s15,[r3]
 157:../kinematics.h **** 
 158:../kinematics.h **** 		  					delay(czas);
 3398              	 .loc 6 158 0
 3399 0208 7868     	 ldr r0,[r7,#4]
 3400 020a FFF7FEFF 	 bl delay
 159:../kinematics.h **** 		  					if(t>=pi)
 3401              	 .loc 6 159 0
 3402 020e 4B4B     	 ldr r3,.L132+28
 3403 0210 93ED007A 	 flds s14,[r3]
 3404 0214 4A4B     	 ldr r3,.L132+32
 3405 0216 D3ED007A 	 flds s15,[r3]
 3406 021a B4EEE77A 	 fcmpes s14,s15
 3407 021e F1EE10FA 	 fmstat
 3408 0222 09DB     	 blt .L103
 160:../kinematics.h **** 		  					{
 161:../kinematics.h **** 		  						faza += 1; //iteracja fazy
 3409              	 .loc 6 161 0
 3410 0224 444B     	 ldr r3,.L132+24
 3411 0226 1B78     	 ldrb r3,[r3]
 3412 0228 0133     	 adds r3,r3,#1
 3413 022a DAB2     	 uxtb r2,r3
 3414 022c 424B     	 ldr r3,.L132+24
 3415 022e 1A70     	 strb r2,[r3]
 162:../kinematics.h **** 		  						t = 0; //zerowanie iteratora
 3416              	 .loc 6 162 0
 3417 0230 424B     	 ldr r3,.L132+28
 3418 0232 4FF00002 	 mov r2,#0
 3419 0236 1A60     	 str r2,[r3]
 3420              	.L103:
 163:../kinematics.h **** 		  					}
 164:../kinematics.h **** 		  			}
 165:../kinematics.h **** 		  		if (faza == 2)
 3421              	 .loc 6 165 0
 3422 0238 3F4B     	 ldr r3,.L132+24
 3423 023a 1B78     	 ldrb r3,[r3]
 3424 023c 022B     	 cmp r3,#2
 3425 023e 40F0C580 	 bne .L109
 166:../kinematics.h **** 		  		  		{
 167:../kinematics.h **** 
 168:../kinematics.h **** 		  		  			Legs[0].foot.x -= dx;
 3426              	 .loc 6 168 0
 3427 0242 3A4B     	 ldr r3,.L132+12
 3428 0244 93ED017A 	 flds s14,[r3,#4]
 3429 0248 D7ED037A 	 flds s15,[r7,#12]
 3430 024c 77EE677A 	 fsubs s15,s14,s15
 3431 0250 364B     	 ldr r3,.L132+12
 3432 0252 C3ED017A 	 fsts s15,[r3,#4]
 169:../kinematics.h **** 		  		  			Legs[0].foot.y = h_korpus;
 3433              	 .loc 6 169 0
 3434 0256 364B     	 ldr r3,.L132+16
 3435 0258 1B68     	 ldr r3,[r3]
 3436 025a 344A     	 ldr r2,.L132+12
 3437 025c 9360     	 str r3,[r2,#8]
 170:../kinematics.h **** 		  		  			Legs[1].foot.x -= dx;
 3438              	 .loc 6 170 0
 3439 025e 334B     	 ldr r3,.L132+12
 3440 0260 93ED177A 	 flds s14,[r3,#92]
 3441 0264 D7ED037A 	 flds s15,[r7,#12]
 3442 0268 77EE677A 	 fsubs s15,s14,s15
 3443 026c 2F4B     	 ldr r3,.L132+12
 3444 026e C3ED177A 	 fsts s15,[r3,#92]
 171:../kinematics.h **** 		  		  			Legs[1].foot.y = h_korpus - ugiecie;
 3445              	 .loc 6 171 0
 3446 0272 2F4B     	 ldr r3,.L132+16
 3447 0274 93ED007A 	 flds s14,[r3]
 3448 0278 D7ED007A 	 flds s15,[r7]
 3449 027c 77EE677A 	 fsubs s15,s14,s15
 3450 0280 2A4B     	 ldr r3,.L132+12
 3451 0282 C3ED187A 	 fsts s15,[r3,#96]
 172:../kinematics.h **** 		  		  			Legs[2].foot.x = -lkroku * sinf(t - (pi/2));
 3452              	 .loc 6 172 0
 3453 0286 274B     	 ldr r3,.L132+4
 3454 0288 D3ED007A 	 flds s15,[r3]
 3455 028c B1EE678A 	 fnegs s16,s15
 3456 0290 2A4B     	 ldr r3,.L132+28
 3457 0292 93ED007A 	 flds s14,[r3]
 3458 0296 2A4B     	 ldr r3,.L132+32
 3459 0298 D3ED007A 	 flds s15,[r3]
 3460 029c F0EE006A 	 fconsts s13,#0
 3461 02a0 C7EEA67A 	 fdivs s15,s15,s13
 3462 02a4 77EE677A 	 fsubs s15,s14,s15
 3463 02a8 17EE900A 	 fmrs r0,s15
 3464 02ac FFF7FEFF 	 bl sinf
 3465 02b0 07EE900A 	 fmsr s15,r0
 3466 02b4 68EE277A 	 fmuls s15,s16,s15
 3467 02b8 1C4B     	 ldr r3,.L132+12
 3468 02ba C3ED2D7A 	 fsts s15,[r3,#180]
 173:../kinematics.h **** 		  		  			Legs[2].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
 3469              	 .loc 6 173 0
 3470 02be 1F4B     	 ldr r3,.L132+28
 3471 02c0 93ED007A 	 flds s14,[r3]
 3472 02c4 1E4B     	 ldr r3,.L132+32
 3473 02c6 D3ED007A 	 flds s15,[r3]
 3474 02ca F0EE006A 	 fconsts s13,#0
 3475 02ce C7EEA67A 	 fdivs s15,s15,s13
 3476 02d2 77EE677A 	 fsubs s15,s14,s15
 3477 02d6 17EE900A 	 fmrs r0,s15
 3478 02da FFF7FEFF 	 bl cosf
 3479 02de 07EE100A 	 fmsr s14,r0
 3480 02e2 144B     	 ldr r3,.L132+20
 3481 02e4 D3ED007A 	 flds s15,[r3]
 3482 02e8 27EE277A 	 fmuls s14,s14,s15
 3483 02ec 104B     	 ldr r3,.L132+16
 3484 02ee D3ED007A 	 flds s15,[r3]
 3485 02f2 77EE277A 	 fadds s15,s14,s15
 3486 02f6 0D4B     	 ldr r3,.L132+12
 3487 02f8 C3ED2E7A 	 fsts s15,[r3,#184]
 174:../kinematics.h **** 		  		  			Legs[3].foot.x += dx;
 3488              	 .loc 6 174 0
 3489 02fc 0B4B     	 ldr r3,.L132+12
 3490 02fe 93ED437A 	 flds s14,[r3,#268]
 3491 0302 D7ED037A 	 flds s15,[r7,#12]
 3492 0306 77EE277A 	 fadds s15,s14,s15
 3493 030a 084B     	 ldr r3,.L132+12
 3494 030c C3ED437A 	 fsts s15,[r3,#268]
 175:../kinematics.h **** 		  		  			Legs[3].foot.y = h_korpus;
 3495              	 .loc 6 175 0
 3496 0310 074B     	 ldr r3,.L132+16
 3497 0312 1B68     	 ldr r3,[r3]
 3498 0314 054A     	 ldr r2,.L132+12
 3499 0316 C2F81031 	 str r3,[r2,#272]
 3500              	.LBB14:
 176:../kinematics.h **** 
 177:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3501              	 .loc 6 177 0
 3502 031a 0023     	 movs r3,#0
 3503 031c 7B75     	 strb r3,[r7,#21]
 3504 031e 1DE0     	 b .L110
 3505              	.L133:
 3506              	 .align 2
 3507              	.L132:
 3508 0320 00000000 	 .word dt
 3509 0324 00000000 	 .word lkroku
 3510 0328 00000000 	 .word czas_petli
 3511 032c 00000000 	 .word Legs
 3512 0330 00000000 	 .word h_korpus
 3513 0334 00000000 	 .word hkroku
 3514 0338 00000000 	 .word faza
 3515 033c 00000000 	 .word t
 3516 0340 00000000 	 .word pi
 3517              	.L111:
 178:../kinematics.h **** 		  						Ik(&Legs[i]);
 3518              	 .loc 6 178 0 discriminator 3
 3519 0344 7B7D     	 ldrb r3,[r7,#21]
 3520 0346 5822     	 movs r2,#88
 3521 0348 02FB03F3 	 mul r3,r2,r3
 3522 034c BD4A     	 ldr r2,.L134
 3523 034e 1344     	 add r3,r3,r2
 3524 0350 1846     	 mov r0,r3
 3525 0352 FFF7FEFF 	 bl Ik
 177:../kinematics.h **** 		  						Ik(&Legs[i]);
 3526              	 .loc 6 177 0 discriminator 3
 3527 0356 7B7D     	 ldrb r3,[r7,#21]
 3528 0358 0133     	 adds r3,r3,#1
 3529 035a 7B75     	 strb r3,[r7,#21]
 3530              	.L110:
 177:../kinematics.h **** 		  						Ik(&Legs[i]);
 3531              	 .loc 6 177 0 is_stmt 0 discriminator 1
 3532 035c 7B7D     	 ldrb r3,[r7,#21]
 3533 035e 032B     	 cmp r3,#3
 3534 0360 F0D9     	 bls .L111
 3535              	.LBE14:
 3536              	.LBB15:
 179:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3537              	 .loc 6 179 0 is_stmt 1
 3538 0362 0023     	 movs r3,#0
 3539 0364 3B75     	 strb r3,[r7,#20]
 3540 0366 0BE0     	 b .L112
 3541              	.L113:
 180:../kinematics.h **** 		  						Send_Leg(&Legs[i]);
 3542              	 .loc 6 180 0 discriminator 3
 3543 0368 3B7D     	 ldrb r3,[r7,#20]
 3544 036a 5822     	 movs r2,#88
 3545 036c 02FB03F3 	 mul r3,r2,r3
 3546 0370 B44A     	 ldr r2,.L134
 3547 0372 1344     	 add r3,r3,r2
 3548 0374 1846     	 mov r0,r3
 3549 0376 FFF7FEFF 	 bl Send_Leg
 179:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3550              	 .loc 6 179 0 discriminator 3
 3551 037a 3B7D     	 ldrb r3,[r7,#20]
 3552 037c 0133     	 adds r3,r3,#1
 3553 037e 3B75     	 strb r3,[r7,#20]
 3554              	.L112:
 179:../kinematics.h **** 		  					for(uint8_t i = 0; i < 4;i++)
 3555              	 .loc 6 179 0 is_stmt 0 discriminator 1
 3556 0380 3B7D     	 ldrb r3,[r7,#20]
 3557 0382 032B     	 cmp r3,#3
 3558 0384 F0D9     	 bls .L113
 3559              	.LBE15:
 181:../kinematics.h **** 		  					t += dt; //iteracja zmiennej w sin/cos
 3560              	 .loc 6 181 0 is_stmt 1
 3561 0386 B04B     	 ldr r3,.L134+4
 3562 0388 93ED007A 	 flds s14,[r3]
 3563 038c AF4B     	 ldr r3,.L134+8
 3564 038e D3ED007A 	 flds s15,[r3]
 3565 0392 77EE277A 	 fadds s15,s14,s15
 3566 0396 AC4B     	 ldr r3,.L134+4
 3567 0398 C3ED007A 	 fsts s15,[r3]
 182:../kinematics.h **** 
 183:../kinematics.h **** 		  					delay(czas);
 3568              	 .loc 6 183 0
 3569 039c 7868     	 ldr r0,[r7,#4]
 3570 039e FFF7FEFF 	 bl delay
 184:../kinematics.h **** 		  		  			if(t>=pi)
 3571              	 .loc 6 184 0
 3572 03a2 A94B     	 ldr r3,.L134+4
 3573 03a4 93ED007A 	 flds s14,[r3]
 3574 03a8 A94B     	 ldr r3,.L134+12
 3575 03aa D3ED007A 	 flds s15,[r3]
 3576 03ae B4EEE77A 	 fcmpes s14,s15
 3577 03b2 F1EE10FA 	 fmstat
 3578 03b6 09DB     	 blt .L109
 185:../kinematics.h **** 		  		  			{
 186:../kinematics.h **** 		  		  				faza += 1; //iteracja fazy
 3579              	 .loc 6 186 0
 3580 03b8 A64B     	 ldr r3,.L134+16
 3581 03ba 1B78     	 ldrb r3,[r3]
 3582 03bc 0133     	 adds r3,r3,#1
 3583 03be DAB2     	 uxtb r2,r3
 3584 03c0 A44B     	 ldr r3,.L134+16
 3585 03c2 1A70     	 strb r2,[r3]
 187:../kinematics.h **** 		  		  			  	t = 0; //zerowanie iteratora
 3586              	 .loc 6 187 0
 3587 03c4 A04B     	 ldr r3,.L134+4
 3588 03c6 4FF00002 	 mov r2,#0
 3589 03ca 1A60     	 str r2,[r3]
 3590              	.L109:
 188:../kinematics.h **** 		  		  			}
 189:../kinematics.h **** 
 190:../kinematics.h **** 		  		  		}
 191:../kinematics.h **** 		  		if (faza == 3)
 3591              	 .loc 6 191 0
 3592 03cc A14B     	 ldr r3,.L134+16
 3593 03ce 1B78     	 ldrb r3,[r3]
 3594 03d0 032B     	 cmp r3,#3
 3595 03d2 40F0B180 	 bne .L115
 192:../kinematics.h **** 		  			  	{
 193:../kinematics.h **** 
 194:../kinematics.h **** 		  			  		 Legs[0].foot.x = +lkroku * sinf(t - (pi/2));;
 3596              	 .loc 6 194 0
 3597 03d6 9C4B     	 ldr r3,.L134+4
 3598 03d8 93ED007A 	 flds s14,[r3]
 3599 03dc 9C4B     	 ldr r3,.L134+12
 3600 03de D3ED007A 	 flds s15,[r3]
 3601 03e2 F0EE006A 	 fconsts s13,#0
 3602 03e6 C7EEA67A 	 fdivs s15,s15,s13
 3603 03ea 77EE677A 	 fsubs s15,s14,s15
 3604 03ee 17EE900A 	 fmrs r0,s15
 3605 03f2 FFF7FEFF 	 bl sinf
 3606 03f6 07EE100A 	 fmsr s14,r0
 3607 03fa 974B     	 ldr r3,.L134+20
 3608 03fc D3ED007A 	 flds s15,[r3]
 3609 0400 67EE277A 	 fmuls s15,s14,s15
 3610 0404 8F4B     	 ldr r3,.L134
 3611 0406 C3ED017A 	 fsts s15,[r3,#4]
 195:../kinematics.h **** 		  			  		 Legs[0].foot.y =  h_korpus + hkroku * cosf(t - (pi/2));
 3612              	 .loc 6 195 0
 3613 040a 8F4B     	 ldr r3,.L134+4
 3614 040c 93ED007A 	 flds s14,[r3]
 3615 0410 8F4B     	 ldr r3,.L134+12
 3616 0412 D3ED007A 	 flds s15,[r3]
 3617 0416 F0EE006A 	 fconsts s13,#0
 3618 041a C7EEA67A 	 fdivs s15,s15,s13
 3619 041e 77EE677A 	 fsubs s15,s14,s15
 3620 0422 17EE900A 	 fmrs r0,s15
 3621 0426 FFF7FEFF 	 bl cosf
 3622 042a 07EE100A 	 fmsr s14,r0
 3623 042e 8B4B     	 ldr r3,.L134+24
 3624 0430 D3ED007A 	 flds s15,[r3]
 3625 0434 27EE277A 	 fmuls s14,s14,s15
 3626 0438 894B     	 ldr r3,.L134+28
 3627 043a D3ED007A 	 flds s15,[r3]
 3628 043e 77EE277A 	 fadds s15,s14,s15
 3629 0442 804B     	 ldr r3,.L134
 3630 0444 C3ED027A 	 fsts s15,[r3,#8]
 196:../kinematics.h **** 		  			  		 Legs[1].foot.x -= dx;
 3631              	 .loc 6 196 0
 3632 0448 7E4B     	 ldr r3,.L134
 3633 044a 93ED177A 	 flds s14,[r3,#92]
 3634 044e D7ED037A 	 flds s15,[r7,#12]
 3635 0452 77EE677A 	 fsubs s15,s14,s15
 3636 0456 7B4B     	 ldr r3,.L134
 3637 0458 C3ED177A 	 fsts s15,[r3,#92]
 197:../kinematics.h **** 		  			  		 Legs[1].foot.y = h_korpus;
 3638              	 .loc 6 197 0
 3639 045c 804B     	 ldr r3,.L134+28
 3640 045e 1B68     	 ldr r3,[r3]
 3641 0460 784A     	 ldr r2,.L134
 3642 0462 1366     	 str r3,[r2,#96]
 198:../kinematics.h **** 		  			  		 Legs[2].foot.x += dx;
 3643              	 .loc 6 198 0
 3644 0464 774B     	 ldr r3,.L134
 3645 0466 93ED2D7A 	 flds s14,[r3,#180]
 3646 046a D7ED037A 	 flds s15,[r7,#12]
 3647 046e 77EE277A 	 fadds s15,s14,s15
 3648 0472 744B     	 ldr r3,.L134
 3649 0474 C3ED2D7A 	 fsts s15,[r3,#180]
 199:../kinematics.h **** 		  			  		 Legs[2].foot.y = h_korpus;
 3650              	 .loc 6 199 0
 3651 0478 794B     	 ldr r3,.L134+28
 3652 047a 1B68     	 ldr r3,[r3]
 3653 047c 714A     	 ldr r2,.L134
 3654 047e C2F8B830 	 str r3,[r2,#184]
 200:../kinematics.h **** 		  			  		 Legs[3].foot.x += dx;
 3655              	 .loc 6 200 0
 3656 0482 704B     	 ldr r3,.L134
 3657 0484 93ED437A 	 flds s14,[r3,#268]
 3658 0488 D7ED037A 	 flds s15,[r7,#12]
 3659 048c 77EE277A 	 fadds s15,s14,s15
 3660 0490 6C4B     	 ldr r3,.L134
 3661 0492 C3ED437A 	 fsts s15,[r3,#268]
 201:../kinematics.h **** 		  			  		 Legs[3].foot.y = h_korpus - ugiecie;
 3662              	 .loc 6 201 0
 3663 0496 724B     	 ldr r3,.L134+28
 3664 0498 93ED007A 	 flds s14,[r3]
 3665 049c D7ED007A 	 flds s15,[r7]
 3666 04a0 77EE677A 	 fsubs s15,s14,s15
 3667 04a4 674B     	 ldr r3,.L134
 3668 04a6 C3ED447A 	 fsts s15,[r3,#272]
 3669              	.LBB16:
 202:../kinematics.h **** 
 203:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3670              	 .loc 6 203 0
 3671 04aa 0023     	 movs r3,#0
 3672 04ac FB74     	 strb r3,[r7,#19]
 3673 04ae 0BE0     	 b .L116
 3674              	.L117:
 204:../kinematics.h **** 			  						Ik(&Legs[i]);
 3675              	 .loc 6 204 0 discriminator 3
 3676 04b0 FB7C     	 ldrb r3,[r7,#19]
 3677 04b2 5822     	 movs r2,#88
 3678 04b4 02FB03F3 	 mul r3,r2,r3
 3679 04b8 624A     	 ldr r2,.L134
 3680 04ba 1344     	 add r3,r3,r2
 3681 04bc 1846     	 mov r0,r3
 3682 04be FFF7FEFF 	 bl Ik
 203:../kinematics.h **** 			  						Ik(&Legs[i]);
 3683              	 .loc 6 203 0 discriminator 3
 3684 04c2 FB7C     	 ldrb r3,[r7,#19]
 3685 04c4 0133     	 adds r3,r3,#1
 3686 04c6 FB74     	 strb r3,[r7,#19]
 3687              	.L116:
 203:../kinematics.h **** 			  						Ik(&Legs[i]);
 3688              	 .loc 6 203 0 is_stmt 0 discriminator 1
 3689 04c8 FB7C     	 ldrb r3,[r7,#19]
 3690 04ca 032B     	 cmp r3,#3
 3691 04cc F0D9     	 bls .L117
 3692              	.LBE16:
 3693              	.LBB17:
 205:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3694              	 .loc 6 205 0 is_stmt 1
 3695 04ce 0023     	 movs r3,#0
 3696 04d0 BB74     	 strb r3,[r7,#18]
 3697 04d2 0BE0     	 b .L118
 3698              	.L119:
 206:../kinematics.h **** 			  						Send_Leg(&Legs[i]);
 3699              	 .loc 6 206 0 discriminator 3
 3700 04d4 BB7C     	 ldrb r3,[r7,#18]
 3701 04d6 5822     	 movs r2,#88
 3702 04d8 02FB03F3 	 mul r3,r2,r3
 3703 04dc 594A     	 ldr r2,.L134
 3704 04de 1344     	 add r3,r3,r2
 3705 04e0 1846     	 mov r0,r3
 3706 04e2 FFF7FEFF 	 bl Send_Leg
 205:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3707              	 .loc 6 205 0 discriminator 3
 3708 04e6 BB7C     	 ldrb r3,[r7,#18]
 3709 04e8 0133     	 adds r3,r3,#1
 3710 04ea BB74     	 strb r3,[r7,#18]
 3711              	.L118:
 205:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3712              	 .loc 6 205 0 is_stmt 0 discriminator 1
 3713 04ec BB7C     	 ldrb r3,[r7,#18]
 3714 04ee 032B     	 cmp r3,#3
 3715 04f0 F0D9     	 bls .L119
 3716              	.LBE17:
 207:../kinematics.h **** 			  					t += dt; //iteracja zmiennej w sin/cos
 3717              	 .loc 6 207 0 is_stmt 1
 3718 04f2 554B     	 ldr r3,.L134+4
 3719 04f4 93ED007A 	 flds s14,[r3]
 3720 04f8 544B     	 ldr r3,.L134+8
 3721 04fa D3ED007A 	 flds s15,[r3]
 3722 04fe 77EE277A 	 fadds s15,s14,s15
 3723 0502 514B     	 ldr r3,.L134+4
 3724 0504 C3ED007A 	 fsts s15,[r3]
 208:../kinematics.h **** 
 209:../kinematics.h **** 			  					delay(czas);
 3725              	 .loc 6 209 0
 3726 0508 7868     	 ldr r0,[r7,#4]
 3727 050a FFF7FEFF 	 bl delay
 210:../kinematics.h **** 		  			  		 if(t>=pi)
 3728              	 .loc 6 210 0
 3729 050e 4E4B     	 ldr r3,.L134+4
 3730 0510 93ED007A 	 flds s14,[r3]
 3731 0514 4E4B     	 ldr r3,.L134+12
 3732 0516 D3ED007A 	 flds s15,[r3]
 3733 051a B4EEE77A 	 fcmpes s14,s15
 3734 051e F1EE10FA 	 fmstat
 3735 0522 09DB     	 blt .L115
 211:../kinematics.h **** 		  			  		 {
 212:../kinematics.h **** 		  			  			 faza += 1; //iteracja fazy
 3736              	 .loc 6 212 0
 3737 0524 4B4B     	 ldr r3,.L134+16
 3738 0526 1B78     	 ldrb r3,[r3]
 3739 0528 0133     	 adds r3,r3,#1
 3740 052a DAB2     	 uxtb r2,r3
 3741 052c 494B     	 ldr r3,.L134+16
 3742 052e 1A70     	 strb r2,[r3]
 213:../kinematics.h **** 		  			  			 t = 0; //zerowanie iteratora
 3743              	 .loc 6 213 0
 3744 0530 454B     	 ldr r3,.L134+4
 3745 0532 4FF00002 	 mov r2,#0
 3746 0536 1A60     	 str r2,[r3]
 3747              	.L115:
 214:../kinematics.h **** 		  			  		 }
 215:../kinematics.h **** 
 216:../kinematics.h **** 		  			  	}
 217:../kinematics.h **** 		  		if (faza == 4)
 3748              	 .loc 6 217 0
 3749 0538 464B     	 ldr r3,.L134+16
 3750 053a 1B78     	 ldrb r3,[r3]
 3751 053c 042B     	 cmp r3,#4
 3752 053e 40F0C080 	 bne .L121
 218:../kinematics.h **** 		  			  	 {
 219:../kinematics.h **** 
 220:../kinematics.h **** 		  					 Legs[0].foot.x -= dx;
 3753              	 .loc 6 220 0
 3754 0542 404B     	 ldr r3,.L134
 3755 0544 93ED017A 	 flds s14,[r3,#4]
 3756 0548 D7ED037A 	 flds s15,[r7,#12]
 3757 054c 77EE677A 	 fsubs s15,s14,s15
 3758 0550 3C4B     	 ldr r3,.L134
 3759 0552 C3ED017A 	 fsts s15,[r3,#4]
 221:../kinematics.h **** 		  			  		 Legs[0].foot.y = h_korpus - ugiecie;
 3760              	 .loc 6 221 0
 3761 0556 424B     	 ldr r3,.L134+28
 3762 0558 93ED007A 	 flds s14,[r3]
 3763 055c D7ED007A 	 flds s15,[r7]
 3764 0560 77EE677A 	 fsubs s15,s14,s15
 3765 0564 374B     	 ldr r3,.L134
 3766 0566 C3ED027A 	 fsts s15,[r3,#8]
 222:../kinematics.h **** 		  			  		 Legs[1].foot.x -= dx;
 3767              	 .loc 6 222 0
 3768 056a 364B     	 ldr r3,.L134
 3769 056c 93ED177A 	 flds s14,[r3,#92]
 3770 0570 D7ED037A 	 flds s15,[r7,#12]
 3771 0574 77EE677A 	 fsubs s15,s14,s15
 3772 0578 324B     	 ldr r3,.L134
 3773 057a C3ED177A 	 fsts s15,[r3,#92]
 223:../kinematics.h **** 		  			  		 Legs[1].foot.y = h_korpus;
 3774              	 .loc 6 223 0
 3775 057e 384B     	 ldr r3,.L134+28
 3776 0580 1B68     	 ldr r3,[r3]
 3777 0582 304A     	 ldr r2,.L134
 3778 0584 1366     	 str r3,[r2,#96]
 224:../kinematics.h **** 		  			  		 Legs[2].foot.x += dx;
 3779              	 .loc 6 224 0
 3780 0586 2F4B     	 ldr r3,.L134
 3781 0588 93ED2D7A 	 flds s14,[r3,#180]
 3782 058c D7ED037A 	 flds s15,[r7,#12]
 3783 0590 77EE277A 	 fadds s15,s14,s15
 3784 0594 2B4B     	 ldr r3,.L134
 3785 0596 C3ED2D7A 	 fsts s15,[r3,#180]
 225:../kinematics.h **** 		  			  		 Legs[2].foot.y = h_korpus;
 3786              	 .loc 6 225 0
 3787 059a 314B     	 ldr r3,.L134+28
 3788 059c 1B68     	 ldr r3,[r3]
 3789 059e 294A     	 ldr r2,.L134
 3790 05a0 C2F8B830 	 str r3,[r2,#184]
 226:../kinematics.h **** 		  			  		 Legs[3].foot.x = -lkroku * sinf(t - (pi/2));
 3791              	 .loc 6 226 0
 3792 05a4 2C4B     	 ldr r3,.L134+20
 3793 05a6 D3ED007A 	 flds s15,[r3]
 3794 05aa B1EE678A 	 fnegs s16,s15
 3795 05ae 264B     	 ldr r3,.L134+4
 3796 05b0 93ED007A 	 flds s14,[r3]
 3797 05b4 264B     	 ldr r3,.L134+12
 3798 05b6 D3ED007A 	 flds s15,[r3]
 3799 05ba F0EE006A 	 fconsts s13,#0
 3800 05be C7EEA67A 	 fdivs s15,s15,s13
 3801 05c2 77EE677A 	 fsubs s15,s14,s15
 3802 05c6 17EE900A 	 fmrs r0,s15
 3803 05ca FFF7FEFF 	 bl sinf
 3804 05ce 07EE900A 	 fmsr s15,r0
 3805 05d2 68EE277A 	 fmuls s15,s16,s15
 3806 05d6 1B4B     	 ldr r3,.L134
 3807 05d8 C3ED437A 	 fsts s15,[r3,#268]
 227:../kinematics.h **** 		  			  		 Legs[3].foot.y = h_korpus + hkroku * cosf(t - (pi/2));
 3808              	 .loc 6 227 0
 3809 05dc 1A4B     	 ldr r3,.L134+4
 3810 05de 93ED007A 	 flds s14,[r3]
 3811 05e2 1B4B     	 ldr r3,.L134+12
 3812 05e4 D3ED007A 	 flds s15,[r3]
 3813 05e8 F0EE006A 	 fconsts s13,#0
 3814 05ec C7EEA67A 	 fdivs s15,s15,s13
 3815 05f0 77EE677A 	 fsubs s15,s14,s15
 3816 05f4 17EE900A 	 fmrs r0,s15
 3817 05f8 FFF7FEFF 	 bl cosf
 3818 05fc 07EE100A 	 fmsr s14,r0
 3819 0600 164B     	 ldr r3,.L134+24
 3820 0602 D3ED007A 	 flds s15,[r3]
 3821 0606 27EE277A 	 fmuls s14,s14,s15
 3822 060a 154B     	 ldr r3,.L134+28
 3823 060c D3ED007A 	 flds s15,[r3]
 3824 0610 77EE277A 	 fadds s15,s14,s15
 3825 0614 0B4B     	 ldr r3,.L134
 3826 0616 C3ED447A 	 fsts s15,[r3,#272]
 3827              	.LBB18:
 228:../kinematics.h **** 
 229:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3828              	 .loc 6 229 0
 3829 061a 0023     	 movs r3,#0
 3830 061c 7B74     	 strb r3,[r7,#17]
 3831 061e 0BE0     	 b .L122
 3832              	.L123:
 230:../kinematics.h **** 			  						Ik(&Legs[i]);
 3833              	 .loc 6 230 0 discriminator 3
 3834 0620 7B7C     	 ldrb r3,[r7,#17]
 3835 0622 5822     	 movs r2,#88
 3836 0624 02FB03F3 	 mul r3,r2,r3
 3837 0628 064A     	 ldr r2,.L134
 3838 062a 1344     	 add r3,r3,r2
 3839 062c 1846     	 mov r0,r3
 3840 062e FFF7FEFF 	 bl Ik
 229:../kinematics.h **** 			  						Ik(&Legs[i]);
 3841              	 .loc 6 229 0 discriminator 3
 3842 0632 7B7C     	 ldrb r3,[r7,#17]
 3843 0634 0133     	 adds r3,r3,#1
 3844 0636 7B74     	 strb r3,[r7,#17]
 3845              	.L122:
 229:../kinematics.h **** 			  						Ik(&Legs[i]);
 3846              	 .loc 6 229 0 is_stmt 0 discriminator 1
 3847 0638 7B7C     	 ldrb r3,[r7,#17]
 3848 063a 032B     	 cmp r3,#3
 3849 063c F0D9     	 bls .L123
 3850              	.LBE18:
 3851              	.LBB19:
 231:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3852              	 .loc 6 231 0 is_stmt 1
 3853 063e 0023     	 movs r3,#0
 3854 0640 3B74     	 strb r3,[r7,#16]
 3855 0642 1BE0     	 b .L124
 3856              	.L135:
 3857              	 .align 2
 3858              	.L134:
 3859 0644 00000000 	 .word Legs
 3860 0648 00000000 	 .word t
 3861 064c 00000000 	 .word dt
 3862 0650 00000000 	 .word pi
 3863 0654 00000000 	 .word faza
 3864 0658 00000000 	 .word lkroku
 3865 065c 00000000 	 .word hkroku
 3866 0660 00000000 	 .word h_korpus
 3867              	.L125:
 232:../kinematics.h **** 			  						Send_Leg(&Legs[i]);
 3868              	 .loc 6 232 0 discriminator 3
 3869 0664 3B7C     	 ldrb r3,[r7,#16]
 3870 0666 5822     	 movs r2,#88
 3871 0668 02FB03F3 	 mul r3,r2,r3
 3872 066c 154A     	 ldr r2,.L136
 3873 066e 1344     	 add r3,r3,r2
 3874 0670 1846     	 mov r0,r3
 3875 0672 FFF7FEFF 	 bl Send_Leg
 231:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3876              	 .loc 6 231 0 discriminator 3
 3877 0676 3B7C     	 ldrb r3,[r7,#16]
 3878 0678 0133     	 adds r3,r3,#1
 3879 067a 3B74     	 strb r3,[r7,#16]
 3880              	.L124:
 231:../kinematics.h **** 			  					for(uint8_t i = 0; i < 4;i++)
 3881              	 .loc 6 231 0 is_stmt 0 discriminator 1
 3882 067c 3B7C     	 ldrb r3,[r7,#16]
 3883 067e 032B     	 cmp r3,#3
 3884 0680 F0D9     	 bls .L125
 3885              	.LBE19:
 233:../kinematics.h **** 			  					t += dt; //iteracja zmiennej w sin/cos
 3886              	 .loc 6 233 0 is_stmt 1
 3887 0682 114B     	 ldr r3,.L136+4
 3888 0684 93ED007A 	 flds s14,[r3]
 3889 0688 104B     	 ldr r3,.L136+8
 3890 068a D3ED007A 	 flds s15,[r3]
 3891 068e 77EE277A 	 fadds s15,s14,s15
 3892 0692 0D4B     	 ldr r3,.L136+4
 3893 0694 C3ED007A 	 fsts s15,[r3]
 234:../kinematics.h **** 
 235:../kinematics.h **** 			  					delay(czas);
 3894              	 .loc 6 235 0
 3895 0698 7868     	 ldr r0,[r7,#4]
 3896 069a FFF7FEFF 	 bl delay
 236:../kinematics.h **** 		  			  		 if(t>=pi)
 3897              	 .loc 6 236 0
 3898 069e 0A4B     	 ldr r3,.L136+4
 3899 06a0 93ED007A 	 flds s14,[r3]
 3900 06a4 0A4B     	 ldr r3,.L136+12
 3901 06a6 D3ED007A 	 flds s15,[r3]
 3902 06aa B4EEE77A 	 fcmpes s14,s15
 3903 06ae F1EE10FA 	 fmstat
 3904 06b2 06DB     	 blt .L121
 237:../kinematics.h **** 		  			  		 {
 238:../kinematics.h **** 		  			  			 faza = 1; //iteracja fazy
 3905              	 .loc 6 238 0
 3906 06b4 074B     	 ldr r3,.L136+16
 3907 06b6 0122     	 movs r2,#1
 3908 06b8 1A70     	 strb r2,[r3]
 239:../kinematics.h **** 		  			  			 t = 0; //zerowanie iteratora
 3909              	 .loc 6 239 0
 3910 06ba 034B     	 ldr r3,.L136+4
 3911 06bc 4FF00002 	 mov r2,#0
 3912 06c0 1A60     	 str r2,[r3]
 3913              	.L121:
 240:../kinematics.h **** 		  			  		 }
 241:../kinematics.h **** 
 242:../kinematics.h **** 		  			  	 }
 243:../kinematics.h **** 	}
 3914              	 .loc 6 243 0
 3915 06c2 03E5     	 b .L127
 3916              	.L137:
 3917              	 .align 2
 3918              	.L136:
 3919 06c4 00000000 	 .word Legs
 3920 06c8 00000000 	 .word t
 3921 06cc 00000000 	 .word dt
 3922 06d0 00000000 	 .word pi
 3923 06d4 00000000 	 .word faza
 3924              	 .cfi_endproc
 3925              	.LFE338:
 3927              	 .section .text.main,"ax",%progbits
 3928              	 .align 2
 3929              	 .global main
 3930              	 .thumb
 3931              	 .thumb_func
 3933              	main:
 3934              	.LFB339:
 3935              	 .file 7 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** #include <DAVE.h>
   3:../main.c     **** #include <math.h>
   4:../main.c     **** #include "variables.h"
   5:../main.c     **** #include "communications.h"
   6:../main.c     **** #include "kinematics.h"
   7:../main.c     **** 
   8:../main.c     **** //#include "dynamics.h"
   9:../main.c     **** 
  10:../main.c     **** int main(void)
  11:../main.c     **** {
 3936              	 .loc 7 11 0
 3937              	 .cfi_startproc
 3938              	 
 3939              	 
 3940 0000 80B5     	 push {r7,lr}
 3941              	.LCFI123:
 3942              	 .cfi_def_cfa_offset 8
 3943              	 .cfi_offset 7,-8
 3944              	 .cfi_offset 14,-4
 3945 0002 82B0     	 sub sp,sp,#8
 3946              	.LCFI124:
 3947              	 .cfi_def_cfa_offset 16
 3948 0004 00AF     	 add r7,sp,#0
 3949              	.LCFI125:
 3950              	 .cfi_def_cfa_register 7
  12:../main.c     ****   DAVE_STATUS_t status;
  13:../main.c     ****   status = DAVE_Init();
 3951              	 .loc 7 13 0
 3952 0006 FFF7FEFF 	 bl DAVE_Init
 3953 000a 0346     	 mov r3,r0
 3954 000c 7B71     	 strb r3,[r7,#5]
  14:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 3955              	 .loc 7 14 0
 3956 000e 06E0     	 b .L139
 3957              	.L140:
  15:../main.c     ****   {
  16:../main.c     **** 	  delay(50000);
 3958              	 .loc 7 16 0
 3959 0010 4CF25030 	 movw r0,#50000
 3960 0014 FFF7FEFF 	 bl delay
  17:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
 3961              	 .loc 7 17 0
 3962 0018 2F48     	 ldr r0,.L148
 3963 001a FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 3964              	.L139:
  14:../main.c     ****   while(status == DAVE_STATUS_FAILURE )
 3965              	 .loc 7 14 0
 3966 001e 7B79     	 ldrb r3,[r7,#5]
 3967 0020 012B     	 cmp r3,#1
 3968 0022 F5D0     	 beq .L140
  18:../main.c     ****   }
  19:../main.c     **** 
  20:../main.c     ****   //#####################
  21:../main.c     ****   PWM_CCU4_Init(&PWM_CCU4_0);
 3969              	 .loc 7 21 0
 3970 0024 2D48     	 ldr r0,.L148+4
 3971 0026 FFF7FEFF 	 bl PWM_CCU4_Init
  22:../main.c     ****   PWM_CCU4_Start(&PWM_CCU4_0);
 3972              	 .loc 7 22 0
 3973 002a 2C48     	 ldr r0,.L148+4
 3974 002c FFF7FEFF 	 bl PWM_CCU4_Start
  23:../main.c     ****   PWM_CCU4_SetDutyCycle(&PWM_CCU4_0, 1500);
 3975              	 .loc 7 23 0
 3976 0030 2A48     	 ldr r0,.L148+4
 3977 0032 40F2DC51 	 movw r1,#1500
 3978 0036 FFF7FEFF 	 bl PWM_CCU4_SetDutyCycle
  24:../main.c     **** 
  25:../main.c     ****   delay(250000);
 3979              	 .loc 7 25 0
 3980 003a 2948     	 ldr r0,.L148+8
 3981 003c FFF7FEFF 	 bl delay
  26:../main.c     ****   Init();
 3982              	 .loc 7 26 0
 3983 0040 FFF7FEFF 	 bl Init
  27:../main.c     **** 
  28:../main.c     **** 
  29:../main.c     ****   while(init == 0)							//wait for input from PC
 3984              	 .loc 7 29 0
 3985 0044 05E0     	 b .L141
 3986              	.L142:
  30:../main.c     ****   {
  31:../main.c     **** 	  delay(500000);
 3987              	 .loc 7 31 0
 3988 0046 2748     	 ldr r0,.L148+12
 3989 0048 FFF7FEFF 	 bl delay
  32:../main.c     **** 	   DIGITAL_IO_ToggleOutput(&LED1);
 3990              	 .loc 7 32 0
 3991 004c 2248     	 ldr r0,.L148
 3992 004e FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 3993              	.L141:
  29:../main.c     ****   {
 3994              	 .loc 7 29 0
 3995 0052 254B     	 ldr r3,.L148+16
 3996 0054 1B78     	 ldrb r3,[r3]
 3997 0056 002B     	 cmp r3,#0
 3998 0058 F5D0     	 beq .L142
  33:../main.c     ****   }
  34:../main.c     **** 
  35:../main.c     ****   XMC_Init(10);
 3999              	 .loc 7 35 0
 4000 005a 0A20     	 movs r0,#10
 4001 005c FFF7FEFF 	 bl XMC_Init
 4002              	.L147:
  36:../main.c     **** 
  37:../main.c     ****   //motors_go();
  38:../main.c     **** 
  39:../main.c     ****   while(1)
  40:../main.c     ****   {
  41:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 4003              	 .loc 7 41 0
 4004 0060 1D48     	 ldr r0,.L148
 4005 0062 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
 4006              	.LBB20:
  42:../main.c     **** 	  for(uint8_t i = 1; i < 8;i++)
 4007              	 .loc 7 42 0
 4008 0066 0123     	 movs r3,#1
 4009 0068 FB71     	 strb r3,[r7,#7]
 4010 006a 18E0     	 b .L143
 4011              	.L144:
  43:../main.c     **** 	  {
  44:../main.c     **** 		  motors[i].ks = motors[0].ks;
 4012              	 .loc 7 44 0 discriminator 3
 4013 006c FB79     	 ldrb r3,[r7,#7]
 4014 006e 1F4A     	 ldr r2,.L148+20
 4015 0070 508B     	 ldrh r0,[r2,#26]
 4016 0072 1E4A     	 ldr r2,.L148+20
 4017 0074 2C21     	 movs r1,#44
 4018 0076 01FB03F3 	 mul r3,r1,r3
 4019 007a 1344     	 add r3,r3,r2
 4020 007c 1833     	 adds r3,r3,#24
 4021 007e 0246     	 mov r2,r0
 4022 0080 5A80     	 strh r2,[r3,#2]
  45:../main.c     **** 		  motors[i].kd = motors[0].kd;
 4023              	 .loc 7 45 0 discriminator 3
 4024 0082 FB79     	 ldrb r3,[r7,#7]
 4025 0084 194A     	 ldr r2,.L148+20
 4026 0086 908B     	 ldrh r0,[r2,#28]
 4027 0088 184A     	 ldr r2,.L148+20
 4028 008a 2C21     	 movs r1,#44
 4029 008c 01FB03F3 	 mul r3,r1,r3
 4030 0090 1344     	 add r3,r3,r2
 4031 0092 1833     	 adds r3,r3,#24
 4032 0094 0246     	 mov r2,r0
 4033 0096 9A80     	 strh r2,[r3,#4]
  42:../main.c     **** 	  for(uint8_t i = 1; i < 8;i++)
 4034              	 .loc 7 42 0 discriminator 3
 4035 0098 FB79     	 ldrb r3,[r7,#7]
 4036 009a 0133     	 adds r3,r3,#1
 4037 009c FB71     	 strb r3,[r7,#7]
 4038              	.L143:
  42:../main.c     **** 	  for(uint8_t i = 1; i < 8;i++)
 4039              	 .loc 7 42 0 is_stmt 0 discriminator 1
 4040 009e FB79     	 ldrb r3,[r7,#7]
 4041 00a0 072B     	 cmp r3,#7
 4042 00a2 E3D9     	 bls .L144
 4043              	.LBE20:
  46:../main.c     **** 	  }
  47:../main.c     **** 	  CPG();
 4044              	 .loc 7 47 0 is_stmt 1
 4045 00a4 FFF7FEFF 	 bl CPG
 4046              	.LBB21:
  48:../main.c     **** 	  for(uint8_t i =0; i < 4; i++)
 4047              	 .loc 7 48 0
 4048 00a8 0023     	 movs r3,#0
 4049 00aa BB71     	 strb r3,[r7,#6]
 4050 00ac 02E0     	 b .L145
 4051              	.L146:
 4052              	 .loc 7 48 0 is_stmt 0 discriminator 3
 4053 00ae BB79     	 ldrb r3,[r7,#6]
 4054 00b0 0133     	 adds r3,r3,#1
 4055 00b2 BB71     	 strb r3,[r7,#6]
 4056              	.L145:
 4057              	 .loc 7 48 0 discriminator 1
 4058 00b4 BB79     	 ldrb r3,[r7,#6]
 4059 00b6 032B     	 cmp r3,#3
 4060 00b8 F9D9     	 bls .L146
 4061              	.LBE21:
  49:../main.c     **** 	  {
  50:../main.c     **** 		  /*Legs[i].foot.y = Legs[0].foot.y;
  51:../main.c     **** 		  if( i == 2 || i == 3)
  52:../main.c     **** 			  Legs[i].foot.x = -Legs[0].foot.x;
  53:../main.c     **** 		  else
  54:../main.c     **** 			  Legs[i].foot.x = Legs[0].foot.x;
  55:../main.c     **** 		  Ik(&Legs[i]);
  56:../main.c     **** 		  Update(&Legs[i]);
  57:../main.c     **** 		  Send_Leg(&Legs[i]);
  58:../main.c     **** 		  delay(3000);
  59:../main.c     **** 		  */
  60:../main.c     **** 
  61:../main.c     **** 	  }
  62:../main.c     **** 
  63:../main.c     **** 	// stanowisko.torque[0] = TorqueFromInet(stanowisko.i_net[0]);
  64:../main.c     **** 	// stanowisko.torque[1] = TorqueFromInet(stanowisko.i_net[1]);
  65:../main.c     **** 	// t = Z_score_filter(stanowisko.eFY_buffer) * 25;
  66:../main.c     **** 	 //Reibert_Hopper(&stanowisko);
  67:../main.c     **** 	 //Fk(&stanowisko);
  68:../main.c     **** 	  t+= dt;
 4062              	 .loc 7 68 0 is_stmt 1
 4063 00ba 0D4B     	 ldr r3,.L148+24
 4064 00bc 93ED007A 	 flds s14,[r3]
 4065 00c0 0C4B     	 ldr r3,.L148+28
 4066 00c2 D3ED007A 	 flds s15,[r3]
 4067 00c6 77EE277A 	 fadds s15,s14,s15
 4068 00ca 094B     	 ldr r3,.L148+24
 4069 00cc C3ED007A 	 fsts s15,[r3]
  69:../main.c     **** 
  70:../main.c     **** 	  DIGITAL_IO_ToggleOutput(&LED1);
 4070              	 .loc 7 70 0
 4071 00d0 0148     	 ldr r0,.L148
 4072 00d2 FFF7FEFF 	 bl DIGITAL_IO_ToggleOutput
  71:../main.c     **** 
  72:../main.c     ****   }
 4073              	 .loc 7 72 0
 4074 00d6 C3E7     	 b .L147
 4075              	.L149:
 4076              	 .align 2
 4077              	.L148:
 4078 00d8 00000000 	 .word LED1
 4079 00dc 00000000 	 .word PWM_CCU4_0
 4080 00e0 90D00300 	 .word 250000
 4081 00e4 20A10700 	 .word 500000
 4082 00e8 00000000 	 .word init
 4083 00ec 00000000 	 .word motors
 4084 00f0 00000000 	 .word t
 4085 00f4 00000000 	 .word dt
 4086              	 .cfi_endproc
 4087              	.LFE339:
 4089              	 .text
 4090              	.Letext0:
 4091              	 .file 8 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4092              	 .file 9 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4093              	 .file 10 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 4094              	 .file 11 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
 4095              	 .file 12 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc4_gpio.h"
 4096              	 .file 13 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_usic.h"
 4097              	 .file 14 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_uart.h"
 4098              	 .file 15 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
 4099              	 .file 16 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 4100              	 .file 17 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer.h"
 4101              	 .file 18 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/PWM_CCU4/pwm_ccu4.h"
 4102              	 .file 19 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DAVE.h"
 4103              	 .file 20 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Include/core_cm4.h"
 4104              	 .file 21 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 4105              	 .file 22 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 4106              	 .file 23 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/TIMER/timer_extern.h"
 4107              	 .file 24 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/PWM_CCU4/pwm_ccu4_extern.h"
 4108              	 .file 25 "C:/Users/Mafish/Documents/GitHub/MAB_Controller/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_ToggleOutput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_ToggleOutput:00000000 XMC_GPIO_ToggleOutput
    {standard input}:162    .text.UART_IsTxBusy:00000000 $t
    {standard input}:166    .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:208    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:212    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:252    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:256    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:295    .text.DIGITAL_IO_ToggleOutput:00000000 $t
    {standard input}:299    .text.DIGITAL_IO_ToggleOutput:00000000 DIGITAL_IO_ToggleOutput
    {standard input}:342    .data.pi:00000000 pi
    {standard input}:339    .data.pi:00000000 $d
    {standard input}:349    .data.l1:00000000 l1
    {standard input}:346    .data.l1:00000000 $d
    {standard input}:356    .data.l2:00000000 l2
    {standard input}:353    .data.l2:00000000 $d
    {standard input}:363    .data.d:00000000 d
    {standard input}:360    .data.d:00000000 $d
    {standard input}:370    .bss.t:00000000 t
    {standard input}:367    .bss.t:00000000 $d
    {standard input}:377    .data.dt:00000000 dt
    {standard input}:374    .data.dt:00000000 $d
    {standard input}:384    .data.lkroku:00000000 lkroku
    {standard input}:381    .data.lkroku:00000000 $d
    {standard input}:391    .data.hkroku:00000000 hkroku
    {standard input}:388    .data.hkroku:00000000 $d
    {standard input}:398    .data.h_korpus:00000000 h_korpus
    {standard input}:395    .data.h_korpus:00000000 $d
    {standard input}:404    .data.faza:00000000 faza
    {standard input}:411    .data.czas_petli:00000000 czas_petli
    {standard input}:408    .data.czas_petli:00000000 $d
    {standard input}:418    .bss.predkosc:00000000 predkosc
    {standard input}:415    .bss.predkosc:00000000 $d
    {standard input}:425    .bss.dx:00000000 dx
    {standard input}:422    .bss.dx:00000000 $d
                            *COM*:0000000a rxData
                            *COM*:0000000a txData
    {standard input}:433    .data.adress:00000000 adress
    {standard input}:439    .bss.rxByte:00000000 rxByte
    {standard input}:440    .bss.rxByte:00000000 $d
    {standard input}:445    .bss.iterator_wiadomosci:00000000 iterator_wiadomosci
    {standard input}:446    .bss.iterator_wiadomosci:00000000 $d
    {standard input}:452    .data.response_delay:00000000 response_delay
    {standard input}:449    .data.response_delay:00000000 $d
    {standard input}:458    .data.is_delay:00000000 is_delay
    {standard input}:464    .bss.init:00000000 init
    {standard input}:465    .bss.init:00000000 $d
                            *COM*:00000160 motors
                            *COM*:00000160 Legs
    {standard input}:469    .text.delay:00000000 $t
    {standard input}:474    .text.delay:00000000 delay
    {standard input}:532    .text.delay:0000003c $d
    {standard input}:538    .text.Init:00000000 $t
    {standard input}:543    .text.Init:00000000 Init
    {standard input}:825    .text.Init:000001f0 $d
    {standard input}:833    .text.CCU40_2_IRQHandler:00000000 $t
    {standard input}:838    .text.CCU40_2_IRQHandler:00000000 CCU40_2_IRQHandler
    {standard input}:869    .text.CCU40_2_IRQHandler:00000014 $d
    {standard input}:874    .text.XMC_Init:00000000 $t
    {standard input}:879    .text.XMC_Init:00000000 XMC_Init
    {standard input}:1671   .text.Send:00000000 Send
    {standard input}:981    .text.XMC_Init:0000007c $d
    {standard input}:987    .text.XMC_Check:00000000 $t
    {standard input}:992    .text.XMC_Check:00000000 XMC_Check
    {standard input}:1065   .text.XMC_Check:00000050 $d
    {standard input}:1072   .text.eorx:00000000 $t
    {standard input}:1077   .text.eorx:00000000 eorx
    {standard input}:1207   .text.Message_interpreter:00000000 Message_interpreter
    {standard input}:1161   .text.eorx:00000070 $d
    {standard input}:1169   .text.eotx:00000000 $t
    {standard input}:1174   .text.eotx:00000000 eotx
    {standard input}:1202   .text.Message_interpreter:00000000 $t
    {standard input}:1343   .text.Message_interpreter:000000cc $d
    {standard input}:1350   .text.Send_Leg:00000000 $t
    {standard input}:1355   .text.Send_Leg:00000000 Send_Leg
    {standard input}:1657   .text.Send_Leg:0000024c $d
    {standard input}:1666   .text.Send:00000000 $t
    {standard input}:1722   .text.Send:00000034 $d
    {standard input}:1729   .text.motors_go:00000000 $t
    {standard input}:1734   .text.motors_go:00000000 motors_go
    {standard input}:1817   .text.motors_go:00000058 $d
    {standard input}:1822   .text.Ik:00000000 $t
    {standard input}:1827   .text.Ik:00000000 Ik
    {standard input}:2012   .text.Ik:000001f0 $d
    {standard input}:2020   .text.Fk:00000000 $t
    {standard input}:2025   .text.Fk:00000000 Fk
    {standard input}:2349   .text.Fk:00000360 $d
    {standard input}:2355   .text.Fk:00000374 $t
    {standard input}:2617   .text.Fk:0000066c $d
    {standard input}:2622   .text.Fk:00000678 $t
    {standard input}:2682   .text.Update:00000000 $t
    {standard input}:2687   .text.Update:00000000 Update
    {standard input}:2887   .text.Update:000001b4 $d
    {standard input}:2897   .text.Trajectory:00000000 $t
    {standard input}:2902   .text.Trajectory:00000000 Trajectory
    {standard input}:2954   .text.Trajectory:00000050 $d
    {standard input}:2961   .text.Smooth:00000000 $t
    {standard input}:2966   .text.Smooth:00000000 Smooth
    {standard input}:3157   .text.Smooth:000001d8 $d
    {standard input}:3162   .text.CPG:00000000 $t
    {standard input}:3167   .text.CPG:00000000 CPG
    {standard input}:3508   .text.CPG:00000320 $d
    {standard input}:3519   .text.CPG:00000344 $t
    {standard input}:3859   .text.CPG:00000644 $d
    {standard input}:3869   .text.CPG:00000664 $t
    {standard input}:3919   .text.CPG:000006c4 $d
    {standard input}:3928   .text.main:00000000 $t
    {standard input}:3933   .text.main:00000000 main
    {standard input}:4078   .text.main:000000d8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIMER_SetTimeInterval
TIMER_Start
TIMER_Stop
DELAY
LED1
UART_Receive
RS
UART_Transmit
sqrtf
acosf
asinf
sinf
cosf
atan2f
DAVE_Init
PWM_CCU4_Init
PWM_CCU4_Start
PWM_CCU4_SetDutyCycle
PWM_CCU4_0
