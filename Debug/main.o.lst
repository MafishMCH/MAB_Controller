   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB164:
  26              	 .file 1 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE164:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB165:
 262:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE165:
 114 0022 00BF     	 .section .text.UART_IsTxBusy,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	UART_IsTxBusy:
 120              	.LFB267:
 121              	 .file 2 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART/uart.h"
   1:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
   2:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @date 2015-12-17
   4:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
   5:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
   8:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * UART v4.1.10 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  12:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  15:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  18:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  21:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  24:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  27:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  35:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  39:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  42:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  45:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  48:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  51:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  56:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  59:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcond
  60:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
  61:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
  62:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
  63:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  64:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * HEADER FILES
  65:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  66:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifndef UART_H
  67:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #define UART_H
  68:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
  69:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #include <xmc_scu.h>
  70:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #include <xmc_gpio.h>
  71:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #include <xmc_uart.h>
  72:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
  73:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  74:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****        (XMC_LIB_MINOR_VERSION >= 1U) && \
  75:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****        (XMC_LIB_PATCH_VERSION >= 10U)))
  76:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  77:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
  78:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
  79:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #include <DAVE_common.h>
  80:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  81:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  82:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #include "../GLOBAL_DMA/global_dma.h"
  83:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
  84:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
  85:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  86:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * MACROS
  87:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  88:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /*
  89:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  90:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  91:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
  92:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  93:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * ENUMS
  94:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  95:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
  96:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
  97:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @{
  98:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
  99:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 100:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 101:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 102:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 103:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 104:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 105:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 106:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 107:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 108:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 109:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 110:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 111:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 112:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 113:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 114:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 115:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 116:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 117:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                    return this status.*/
 118:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 119:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 120:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 121:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 122:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 123:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 124:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 125:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 126:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 127:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 128:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 129:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 130:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 131:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 132:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 133:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 134:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 135:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 136:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 137:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 138:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 139:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 140:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 141:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 142:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 143:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 144:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 145:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 146:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 147:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 148:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 149:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 150:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 151:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 152:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 153:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 154:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 155:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @}
 156:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 157:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 158:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 159:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 160:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 161:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 162:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 163:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 164:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 165:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 166:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 167:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 168:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 169:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 170:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 171:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @{
 172:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 173:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 174:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 175:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 176:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 177:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 178:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 179:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 180:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 181:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 182:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 183:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 184:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 185:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 186:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 187:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 188:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 189:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 190:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 191:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 192:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 193:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 194:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 195:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 196:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 197:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 198:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 199:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 200:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 201:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 202:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 203:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 204:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 205:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 206:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 207:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 208:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 209:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 210:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 211:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 212:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 213:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 214:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 215:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 216:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 217:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 218:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 219:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 220:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 221:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 222:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 223:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 224:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 225:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 226:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 227:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 228:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 229:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 230:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 231:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 232:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 233:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 234:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 235:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 236:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 237:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 238:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 239:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 240:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 241:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 242:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 243:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 244:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 245:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 246:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 247:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 248:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 249:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 250:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 251:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 252:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 253:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 254:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 255:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 256:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 257:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 258:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 259:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 260:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 261:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 262:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 263:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 264:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 265:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** typedef struct UART
 266:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 267:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 268:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 269:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 270:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 271:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** } UART_t;
 272:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 273:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 274:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @}
 275:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 276:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 277:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 278:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * API Prototypes
 279:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 280:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 281:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 282:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** extern "C" {
 283:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 284:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 285:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 286:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @{
 287:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 288:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 289:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 290:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 291:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 292:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 293:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 294:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Description:
 295:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 296:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>
 297:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 298:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 299:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 300:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 301:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 302:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 303:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 304:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 305:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 306:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 307:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 308:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 309:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 310:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 311:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 312:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 313:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 314:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 315:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 316:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 317:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 318:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 319:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 320:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 322:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 323:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  @endcode
 324:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 325:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 326:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 327:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 328:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 329:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * in UI.
 330:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 331:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 332:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 333:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 334:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 335:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 336:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 337:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 338:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 339:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 340:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * flags and service request values.
 341:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <BR>
 342:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 343:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 344:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 345:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 346:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 347:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 348:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 349:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 350:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 351:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 352:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 353:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 354:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         while(1U)
 355:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 356:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 357:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 358:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 359:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 360:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 361:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 362:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 363:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 364:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 366:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 367:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  @endcode
 368:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 369:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 370:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 371:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 372:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 373:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 374:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 375:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 376:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 377:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 378:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 379:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 380:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 381:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 382:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 383:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 384:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 385:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 386:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 387:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 388:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 389:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 390:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 391:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 392:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 393:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 394:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 395:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 396:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 397:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 398:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed.
 399:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 400:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 401:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 402:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <br>
 403:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 404:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 405:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 406:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 407:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 408:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 409:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 410:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 411:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed.
 412:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 413:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 414:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 415:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <br>
 416:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 417:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 418:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 419:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 420:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 421:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 422:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 423:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 424:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 425:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 426:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 427:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 428:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 429:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 430:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 431:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 432:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 433:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 434:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 435:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 436:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 437:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 438:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 439:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 440:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 441:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 442:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1)
 443:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 444:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 445:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 446:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 447:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 448:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 449:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 450:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 451:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 452:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 453:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 454:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 455:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 456:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 457:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 458:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 460:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 461:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  @endcode
 462:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 463:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 464:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 465:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 466:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 467:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 468:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 469:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 470:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 471:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 472:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 473:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 474:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 475:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 476:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 477:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 478:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 479:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 480:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * request is registered.
 481:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 482:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 483:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 484:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 485:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 486:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 487:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 488:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 489:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 490:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 491:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 492:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 493:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 494:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 495:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 496:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 497:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 498:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 499:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 500:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 501:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 502:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 503:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 504:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 505:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 506:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 507:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 508:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 509:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 510:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 511:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 512:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 513:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 514:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 515:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 516:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 517:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 518:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 519:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 520:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 521:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 522:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 523:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 524:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 525:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 526:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 527:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 528:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 529:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 530:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 531:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 532:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 533:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 534:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 535:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 536:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1)
 537:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 538:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 539:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 540:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 541:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 542:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 543:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 544:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 545:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 546:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 548:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 549:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
 550:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 551:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 552:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 553:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 554:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 555:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 556:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 557:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 558:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 559:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 560:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 561:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 562:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 563:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 564:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 565:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 566:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 567:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 568:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 569:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 570:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 571:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 572:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 573:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 574:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 575:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 576:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 577:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 578:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 579:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 580:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 581:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 582:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 583:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //String1
 584:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 585:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //String2
 586:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 587:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 588:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 589:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 590:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 591:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 592:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 593:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 594:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 595:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 596:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 597:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 598:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 599:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 600:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 601:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 602:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 603:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 604:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 605:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1)
 606:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 607:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 608:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 609:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 610:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 611:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 612:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 613:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 614:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 615:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 617:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 618:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
 619:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 620:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 621:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 622:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 623:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 624:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 625:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 626:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 627:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 628:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 629:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 630:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 631:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 632:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 633:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 634:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 635:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 636:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 637:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 638:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 639:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 640:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 641:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 642:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 643:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 644:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 645:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 646:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 647:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 648:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 649:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 650:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 651:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 652:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 653:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 654:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 655:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 656:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 657:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 658:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 659:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 660:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 661:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 662:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 663:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 664:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 665:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 666:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 667:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 668:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 669:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 670:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 671:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 672:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 673:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 674:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 675:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 676:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 677:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 678:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 679:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 680:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 681:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 682:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 683:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 684:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 685:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 686:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 688:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 689:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
 690:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 691:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 692:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 693:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 694:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 695:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 696:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 697:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 698:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 699:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 700:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 701:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 702:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 703:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 704:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 705:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 706:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 707:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 708:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 709:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 710:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 711:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 712:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 713:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 714:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 715:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 716:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 717:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 718:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 719:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed.
 720:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 721:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 722:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 723:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 724:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 725:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 726:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 727:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 728:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 729:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 730:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 731:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 732:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 733:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 734:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 735:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 736:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 737:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 738:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 739:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 740:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 741:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1)
 742:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 743:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 744:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 745:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 746:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 747:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 748:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 749:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 750:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 751:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 752:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 753:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 754:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 755:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 756:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 757:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 758:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 759:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 760:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 761:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 762:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 763:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 764:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 766:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 767:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  @endcode
 768:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 769:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 770:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 771:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 772:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 773:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 774:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 775:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 776:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 777:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 778:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 779:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 780:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 781:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 782:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 783:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 784:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 785:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 786:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 787:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 788:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * request is registered.
 789:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 790:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 791:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 792:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 793:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 794:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 795:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 796:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 797:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 798:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 799:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 800:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 801:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 802:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 803:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 804:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 805:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 806:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 807:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 808:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 809:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 810:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 811:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 812:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 813:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 814:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 815:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 816:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 817:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 818:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 819:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 820:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 821:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 822:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 823:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 824:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 825:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 826:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 827:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 828:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 829:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 830:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 831:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 832:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 833:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 834:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 835:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 836:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 837:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 838:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 839:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 840:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 842:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 843:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
 844:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 845:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 846:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 847:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 848:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 849:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 850:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 851:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 852:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 853:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 854:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 855:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 856:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 857:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 858:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 859:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 860:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 861:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 862:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 863:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 864:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 865:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 866:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * request is registered.
 867:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 868:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 869:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 870:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 871:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed.
 872:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 873:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 874:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 875:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 876:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 877:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 878:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 879:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 880:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 881:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 882:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 883:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 884:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 885:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 886:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 887:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 888:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 889:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 890:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 891:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 892:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 893:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 894:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 895:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 896:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 897:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 898:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 899:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 900:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 901:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 902:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 903:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 904:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 905:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 906:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 907:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 908:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 909:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 910:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 911:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 912:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 913:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 915:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 916:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
 917:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 918:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 919:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 920:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 921:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 922:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 923:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 924:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 925:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 926:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 927:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 928:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 929:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 930:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 931:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 932:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 933:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 934:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 935:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 936:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 937:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 938:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 939:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 940:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 942:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 943:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 944:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 945:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * function will be executed.
 946:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 947:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 948:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 949:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 950:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 951:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
 952:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
 953:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 954:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 955:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 956:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 957:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
 958:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 959:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 960:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
 961:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
 962:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 963:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 964:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 965:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 966:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 967:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 968:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1)
 969:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
 970:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 971:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 972:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
 973:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 974:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 975:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           {
 976:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           }
 977:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 978:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 979:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
 980:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
 981:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 982:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
 983:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
 984:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 985:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
 986:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
 987:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
 988:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
 990:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
 991:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  @endcode
 992:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
 993:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
 994:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 995:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** #endif
 996:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
 997:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
 998:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
 999:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1000:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1001:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1002:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1003:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1004:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1005:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1006:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1007:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1009:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1010:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1011:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <BR>
1012:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1013:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1014:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1015:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1016:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1017:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>      //Declarations from DAVE Code Generation (includes SFR declaration)
1018:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1019:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //Precondition:
1020:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1021:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //Description:
1022:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1023:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1024:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1025:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1026:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1027:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1028:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1029:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1030:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1031:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1032:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1033:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
1034:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1035:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1036:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1037:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1038:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1039:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1040:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1041:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1042:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1043:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1044:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1045:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1046:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1047:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1048:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   while(1U)
1049:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1050:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1051:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1052:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1053:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1054:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1055:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1056:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1057:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
1058:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1059:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1060:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
1061:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1062:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1063:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1064:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1065:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1066:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1067:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1068:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1069:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1070:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1071:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
1072:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1073:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1074:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1075:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1076:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1077:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1078:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1079:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
1080:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       else
1081:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
1082:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1083:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
1084:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1085:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1086:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1087:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1088:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1089:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1090:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1091:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1092:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1093:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * */
1094:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1095:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1096:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1097:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1098:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1099:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1100:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1101:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1102:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1103:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1104:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1105:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1106:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1107:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1108:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1109:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1110:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1111:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1112:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1113:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1114:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1115:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1116:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Description:
1117:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1118:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1119:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1120:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1121:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1122:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1123:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1124:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1125:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1126:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1127:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1128:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1129:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1130:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1131:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1132:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1133:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1134:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1135:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1136:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1137:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1138:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1139:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1140:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1141:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1142:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1143:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1144:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1145:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1146:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1147:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1149:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1150:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1151:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1152:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1153:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1154:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1155:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1156:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1157:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1158:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1159:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1160:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1161:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1162:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1163:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1164:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1165:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1166:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1167:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1168:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1169:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1170:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1171:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1172:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1173:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1174:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1175:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1176:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1177:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1178:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
1179:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1180:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1181:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1182:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1183:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1184:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1185:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1186:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1187:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1188:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1189:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1190:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1191:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1192:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1193:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1194:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1195:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1196:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1197:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1198:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1199:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1200:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1201:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1202:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1203:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1204:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1205:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        index = 0;
1206:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1207:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1208:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1209:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1210:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1211:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *          index++;
1212:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1213:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *          {
1214:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *            break;
1215:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *          }
1216:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1217:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1218:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1219:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1220:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        index = 0;
1221:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1222:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1223:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1224:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1225:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1226:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1227:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1228:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1229:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1230:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1231:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1232:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1233:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1234:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1235:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1236:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1237:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1238:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1240:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1241:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1242:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1243:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1244:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1245:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1246:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1247:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1248:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1249:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1250:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1251:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1252:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1253:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1254:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1255:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return None\n
1256:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1257:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1258:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1259:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1260:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1261:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1262:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1263:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1264:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1265:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1266:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1267:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1268:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Precondition:
1269:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1270:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
1271:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1272:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1273:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1274:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1275:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1276:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1277:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1278:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1279:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1280:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1281:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1282:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1283:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1284:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1285:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1286:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1287:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1288:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1289:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1290:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1291:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1292:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1293:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1294:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1295:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1296:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1297:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1298:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1299:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1301:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1302:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1303:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1304:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1305:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1306:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1307:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1308:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1309:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1310:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1311:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1312:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1313:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1314:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1315:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1316:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1317:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1318:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return None\n
1319:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1320:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1321:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1322:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1323:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1324:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1325:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1326:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1327:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1328:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR decla
1329:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1330:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Precondition:
1331:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1332:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1333:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1334:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //
1335:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Description:
1336:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1337:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1338:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1339:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
1340:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1341:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1342:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1343:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1344:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1345:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1346:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1347:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1348:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1349:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1350:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1351:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1352:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1353:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1354:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1355:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1356:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   while(1U)
1357:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1358:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1359:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1360:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1361:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1362:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1363:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1364:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1365:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1366:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1367:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1368:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1369:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1370:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1371:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1372:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1373:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1374:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1375:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1376:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1377:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1378:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1379:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1380:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1381:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1382:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return None
1383:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1384:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1385:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1386:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1387:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1388:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1389:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declara
1390:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1391:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Precondition:
1392:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1393:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1394:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * //
1395:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1396:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1397:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1398:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1399:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
1400:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1401:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1402:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1403:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1404:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1405:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1406:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1407:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1408:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1409:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1410:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1411:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1412:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1413:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1414:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1415:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1416:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   while(1U)
1417:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1418:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1419:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1420:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1421:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1422:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1423:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1424:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1425:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1426:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1427:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1428:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1429:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1430:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1431:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1432:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1433:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1434:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1435:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1436:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1437:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1438:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1439:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1440:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1441:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1442:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1443:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1444:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1445:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1446:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1448:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1449:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1450:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1451:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1452:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1453:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1454:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  // Precondition:
1455:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1456:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Description:
1457:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1458:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1459:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1460:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
1461:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1462:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1463:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1464:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1465:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1466:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1467:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1468:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1469:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1470:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1471:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1472:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1473:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1474:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1475:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1476:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1477:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1478:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1479:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1480:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1481:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1483:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1484:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   while(1U)
1485:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1486:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1487:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1488:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1489:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1490:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1491:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1492:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1493:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1494:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1495:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1496:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1497:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1498:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1499:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1500:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1501:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1502:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1503:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1504:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1506:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1507:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1508:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1509:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1510:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1511:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1512:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  // Precondition:
1513:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1514:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //
1515:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  // Description:
1516:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1517:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1518:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1519:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1520:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
1521:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1522:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1523:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1524:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1525:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1526:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1527:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1528:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1529:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1530:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1531:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1532:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1533:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1534:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1535:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1536:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1537:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1538:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1539:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1540:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1541:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1542:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1543:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1544:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1545:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1546:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1547:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   while(1U)
1548:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1549:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1550:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1551:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1552:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1553:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1554:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1555:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1556:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1557:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1558:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1559:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1560:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1561:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1562:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1563:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1564:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1565:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1566:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1567:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1568:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return None\n
1569:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1570:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1571:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1572:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1573:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1574:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1575:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1576:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1577:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1578:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1579:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Precondition:
1580:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1581:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1582:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1583:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1584:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
1585:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1586:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1587:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1588:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1589:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1590:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1591:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1592:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1593:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1594:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1595:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1596:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1597:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1598:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1599:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1600:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1601:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1602:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       index++;
1603:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1604:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1605:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1606:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1607:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1608:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1609:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1610:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1612:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1613:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1614:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1615:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1616:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  {
1617:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1618:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *    {
1619:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1620:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1621:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      index++;
1622:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *    }
1623:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1624:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1625:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1626:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1627:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1628:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1629:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1630:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1631:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1632:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1633:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1634:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1635:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1636:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1637:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1638:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1639:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1640:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1641:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return None\n
1642:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1643:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1644:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1645:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1646:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1647:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1648:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1649:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1650:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1651:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1652:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Precondition:
1653:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1654:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1655:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1656:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1657:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
1658:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1659:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1660:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1661:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1662:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1663:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1664:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1665:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1666:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1667:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1668:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1669:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1670:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1671:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1672:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1673:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1674:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1675:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1676:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1677:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1678:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1679:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1680:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1681:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1682:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1683:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1685:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1686:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1687:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1688:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1689:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  {
1690:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1691:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *    {
1692:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1693:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1694:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      index++;
1695:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *    }
1696:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1697:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1698:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1699:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1700:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1701:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1702:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1703:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1704:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1705:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1706:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1707:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1708:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1709:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1710:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1711:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1712:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1713:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1714:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1715:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1716:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1718:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1719:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1720:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1721:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the status.
1722:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1723:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1724:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1725:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1726:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1727:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1728:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1729:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1730:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1731:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1732:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1733:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1734:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1735:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1736:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1737:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1738:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1739:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1U)
1740:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
1741:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1742:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1743:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
1744:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1745:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Read received data
1746:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1747:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1748:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1749:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1750:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1751:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
1752:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
1753:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1754:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1755:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1756:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1757:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1758:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1759:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1760:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1762:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1763:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1764:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1765:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1766:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1767:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1768:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1769:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1770:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1771:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1772:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1773:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1774:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1775:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1776:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1777:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1778:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1779:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1780:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1781:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1782:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1783:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return    None
1784:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1785:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1787:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1788:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1789:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * masked.
1790:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1791:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1792:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1793:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1794:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1795:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1796:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1797:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1798:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1799:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1800:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1801:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1802:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1803:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1804:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1805:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1806:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1807:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1808:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1809:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1810:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1811:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1812:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1813:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1814:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1815:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1816:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1817:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1818:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1819:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1820:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1821:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1822:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1824:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1825:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1826:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1827:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1828:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1829:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1830:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1831:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1832:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1833:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1834:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1835:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1836:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1837:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1838:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1839:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1840:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1841:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1842:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1843:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1844:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1845:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1846:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1847:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return    None
1848:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1849:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1850:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1851:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1852:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1853:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the function.
1854:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1855:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1856:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1857:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1858:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1859:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1860:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
1861:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1862:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1863:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1864:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1865:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1866:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1867:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1868:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1869:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1870:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1871:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1U)
1872:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
1873:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1874:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1875:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
1876:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1877:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1878:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1879:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1880:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1881:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1882:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index++;
1883:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1884:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
1885:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
1886:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1887:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
1888:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1889:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1890:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
1891:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1892:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1893:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
1895:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
1896:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1897:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1898:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  */
1899:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1900:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1901:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1902:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1903:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1904:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1905:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1906:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1907:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1908:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1909:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1910:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1911:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1912:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1913:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1914:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1915:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1916:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1917:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1918:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1919:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1920:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1921:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1922:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <BR>
1923:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1924:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
1925:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
1926:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
1927:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1928:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1929:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1930:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1931:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
1932:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
1933:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1934:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1935:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1936:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1937:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1938:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1939:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1940:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1941:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1942:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1943:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1944:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
1945:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
1946:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1947:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1948:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1949:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1950:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1951:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
1952:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1953:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1954:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           {
1955:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1956:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1957:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             {
1958:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             }
1959:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1960:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1961:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           }
1962:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
1963:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1964:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1965:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   else
1966:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
1967:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1968:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1969:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
1970:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
1971:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
1972:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
1973:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1974:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   return 1U;
1975:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
1976:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
1977:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1978:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * */
1979:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1980:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
1981:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
1982:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1983:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
1984:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
1985:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
1986:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1987:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1988:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1989:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1990:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1991:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1992:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return None
1993:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
1994:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1995:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
1996:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1997:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
1998:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <BR>
1999:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2000:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
2001:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
2002:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2003:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Precondition:
2004:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2005:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Description:
2006:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2007:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * int main(void)
2008:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * {
2009:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2010:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2011:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2012:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2013:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2014:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2015:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
2016:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
2017:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
2018:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2019:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2020:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2021:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        {
2022:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Read the received data
2023:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2024:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2025:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2026:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2027:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2028:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2029:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *        }
2030:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
2031:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
2032:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   else
2033:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
2034:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2035:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2036:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     while(1U)
2037:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
2038:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
2039:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   }
2040:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2041:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   return 1U;
2042:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * }
2043:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
2044:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2045:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * */
2046:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2047:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
2048:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2049:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
2050:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
2051:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** 
2052:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** /**
2053:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmission is in progress.
2054:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2055:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
2056:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @return bool: Status of data transmission.\n
2057:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *               <b>Range:</b> true - if transmission is ongoing.\n
2058:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *                             false- if transmission is not active.\n
2059:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2060:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Indicates if the communication channel is busy in transmitting data provided using UART_Transmit
2062:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * UART_StartTransmitDMA API.
2063:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * <BR>
2064:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2065:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * Example Usage:
2066:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @code
2067:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * #include <DAVE.h>
2068:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
2069:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
2070:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Description:
2071:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
2072:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
2073:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
2074:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2075:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   int main(void)
2076:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *   {
2077:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
2078:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //String1
2079:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
2080:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //String2
2081:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
2082:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2083:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
2084:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
2085:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
2086:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
2087:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
2088:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     //When the first string is being transmitted,
2089:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       if(UART_IsTxBusy(&UART_0))
2090:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
2091:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
2092:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
2093:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         {
2094:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
2095:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
2096:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
2097:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *           while(UART_IsTxBusy(&UART_0));
2098:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *         }
2099:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
2100:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       while(1)
2101:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       {
2102:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *       }
2103:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
2104:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     else
2105:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     {
2106:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
2107:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      while(1U)
2108:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      {
2109:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      }
2110:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *     }
2111:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *      return 1U;
2112:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *  }
2113:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * @endcode
2114:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  *
2115:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****  * */
2116:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTxBusy(const UART_t *const handle)
2117:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** {
 122              	 .loc 2 2117 0
 123              	 .cfi_startproc
 124              	 
 125              	 
 126              	 
 127 0000 80B4     	 push {r7}
 128              	.LCFI12:
 129              	 .cfi_def_cfa_offset 4
 130              	 .cfi_offset 7,-4
 131 0002 83B0     	 sub sp,sp,#12
 132              	.LCFI13:
 133              	 .cfi_def_cfa_offset 16
 134 0004 00AF     	 add r7,sp,#0
 135              	.LCFI14:
 136              	 .cfi_def_cfa_register 7
 137 0006 7860     	 str r0,[r7,#4]
2118:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL))
2119:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h ****   return (handle->runtime->tx_busy);
 138              	 .loc 2 2119 0
 139 0008 7B68     	 ldr r3,[r7,#4]
 140 000a 9B68     	 ldr r3,[r3,#8]
 141 000c 1B7E     	 ldrb r3,[r3,#24]
 142 000e DBB2     	 uxtb r3,r3
2120:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART\uart.h **** }
 143              	 .loc 2 2120 0
 144 0010 1846     	 mov r0,r3
 145 0012 0C37     	 adds r7,r7,#12
 146              	.LCFI15:
 147              	 .cfi_def_cfa_offset 4
 148 0014 BD46     	 mov sp,r7
 149              	.LCFI16:
 150              	 .cfi_def_cfa_register 13
 151              	 
 152 0016 5DF8047B 	 ldr r7,[sp],#4
 153              	.LCFI17:
 154              	 .cfi_restore 7
 155              	 .cfi_def_cfa_offset 0
 156 001a 7047     	 bx lr
 157              	 .cfi_endproc
 158              	.LFE267:
 160              	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 161              	 .align 2
 162              	 .thumb
 163              	 .thumb_func
 165              	DIGITAL_IO_SetOutputHigh:
 166              	.LFB269:
 167              	 .file 3 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 168              	 .loc 3 269 0
 169              	 .cfi_startproc
 170              	 
 171              	 
 172 0000 80B5     	 push {r7,lr}
 173              	.LCFI18:
 174              	 .cfi_def_cfa_offset 8
 175              	 .cfi_offset 7,-8
 176              	 .cfi_offset 14,-4
 177 0002 82B0     	 sub sp,sp,#8
 178              	.LCFI19:
 179              	 .cfi_def_cfa_offset 16
 180 0004 00AF     	 add r7,sp,#0
 181              	.LCFI20:
 182              	 .cfi_def_cfa_register 7
 183 0006 7860     	 str r0,[r7,#4]
 270:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 184              	 .loc 3 271 0
 185 0008 7B68     	 ldr r3,[r7,#4]
 186 000a 1A68     	 ldr r2,[r3]
 187 000c 7B68     	 ldr r3,[r7,#4]
 188 000e 1B7C     	 ldrb r3,[r3,#16]
 189 0010 1046     	 mov r0,r2
 190 0012 1946     	 mov r1,r3
 191 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 192              	 .loc 3 272 0
 193 0018 0837     	 adds r7,r7,#8
 194              	.LCFI21:
 195              	 .cfi_def_cfa_offset 8
 196 001a BD46     	 mov sp,r7
 197              	.LCFI22:
 198              	 .cfi_def_cfa_register 13
 199              	 
 200 001c 80BD     	 pop {r7,pc}
 201              	 .cfi_endproc
 202              	.LFE269:
 204 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 205              	 .align 2
 206              	 .thumb
 207              	 .thumb_func
 209              	DIGITAL_IO_SetOutputLow:
 210              	.LFB270:
 273:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 211              	 .loc 3 316 0
 212              	 .cfi_startproc
 213              	 
 214              	 
 215 0000 80B5     	 push {r7,lr}
 216              	.LCFI23:
 217              	 .cfi_def_cfa_offset 8
 218              	 .cfi_offset 7,-8
 219              	 .cfi_offset 14,-4
 220 0002 82B0     	 sub sp,sp,#8
 221              	.LCFI24:
 222              	 .cfi_def_cfa_offset 16
 223 0004 00AF     	 add r7,sp,#0
 224              	.LCFI25:
 225              	 .cfi_def_cfa_register 7
 226 0006 7860     	 str r0,[r7,#4]
 317:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 227              	 .loc 3 318 0
 228 0008 7B68     	 ldr r3,[r7,#4]
 229 000a 1A68     	 ldr r2,[r3]
 230 000c 7B68     	 ldr r3,[r7,#4]
 231 000e 1B7C     	 ldrb r3,[r3,#16]
 232 0010 1046     	 mov r0,r2
 233 0012 1946     	 mov r1,r3
 234 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 235              	 .loc 3 319 0
 236 0018 0837     	 adds r7,r7,#8
 237              	.LCFI26:
 238              	 .cfi_def_cfa_offset 8
 239 001a BD46     	 mov sp,r7
 240              	.LCFI27:
 241              	 .cfi_def_cfa_register 13
 242              	 
 243 001c 80BD     	 pop {r7,pc}
 244              	 .cfi_endproc
 245              	.LFE270:
 247              	 .global pi
 248 001e 00BF     	 .section .data.pi,"aw",%progbits
 249              	 .align 2
 252              	pi:
 253 0000 D00F4940 	 .word 1078530000
 254              	 .global l1
 255              	 .section .data.l1,"aw",%progbits
 256              	 .align 2
 259              	l1:
 260 0000 0000C842 	 .word 1120403456
 261              	 .global l2
 262              	 .section .data.l2,"aw",%progbits
 263              	 .align 2
 266              	l2:
 267 0000 00004843 	 .word 1128792064
 268              	 .global d
 269              	 .section .data.d,"aw",%progbits
 270              	 .align 2
 273              	d:
 274 0000 0000B242 	 .word 1118961664
 275              	 .global t
 276              	 .section .bss.t,"aw",%nobits
 277              	 .align 2
 280              	t:
 281 0000 00000000 	 .space 4
 282              	 .global dt
 283              	 .section .data.dt,"aw",%progbits
 284              	 .align 2
 287              	dt:
 288 0000 0AD7A33C 	 .word 1017370378
 289              	 .comm rxData,10,4
 290              	 .comm txData,10,4
 291              	 .global adress
 292              	 .section .data.adress,"aw",%progbits
 295              	adress:
 296 0000 EE       	 .byte -18
 297              	 .global rxByte
 298              	 .section .bss.rxByte,"aw",%nobits
 301              	rxByte:
 302 0000 00       	 .space 1
 303              	 .global iterator_wiadomosci
 304              	 .section .bss.iterator_wiadomosci,"aw",%nobits
 307              	iterator_wiadomosci:
 308 0000 00       	 .space 1
 309              	 .global is_delay
 310              	 .section .data.is_delay,"aw",%progbits
 313              	is_delay:
 314 0000 01       	 .byte 1
 315              	 .comm stanowisko,92,4
 316              	 .section .text.wyslij,"ax",%progbits
 317              	 .align 2
 318              	 .global wyslij
 319              	 .thumb
 320              	 .thumb_func
 322              	wyslij:
 323              	.LFB360:
 324              	 .file 4 "../variables.h"
   1:../variables.h **** #define SOF 0xCC
   2:../variables.h **** #define EOF 0xDD
   3:../variables.h **** #define INIT 0xA1
   4:../variables.h **** #define CHECK 0xA3
   5:../variables.h **** // kinematyka
   6:../variables.h **** float pi = 3.14159f;
   7:../variables.h **** float l1 =100;
   8:../variables.h **** float l2 =200;
   9:../variables.h **** float d =89;
  10:../variables.h **** float t = 0.0f;
  11:../variables.h **** float dt = 0.02;
  12:../variables.h **** 
  13:../variables.h **** 
  14:../variables.h **** 
  15:../variables.h **** //komunikacja
  16:../variables.h **** uint8_t rxData[10];
  17:../variables.h **** uint8_t txData[10];
  18:../variables.h **** uint8_t adress =0xEE;
  19:../variables.h **** uint8_t rxByte = 0;
  20:../variables.h **** uint8_t iterator_wiadomosci = 0;
  21:../variables.h **** 
  22:../variables.h **** uint8_t is_delay = 1;
  23:../variables.h **** 
  24:../variables.h **** struct vec2
  25:../variables.h **** {
  26:../variables.h **** 	float x;
  27:../variables.h **** 	float y;
  28:../variables.h **** };
  29:../variables.h **** struct vec3
  30:../variables.h **** {
  31:../variables.h **** 	float x;
  32:../variables.h **** 	float y;
  33:../variables.h **** 	float z;
  34:../variables.h **** };
  35:../variables.h **** struct Noga
  36:../variables.h **** {
  37:../variables.h **** 	uint8_t silnik_numer[2];
  38:../variables.h **** 	uint8_t silnik_start[2];
  39:../variables.h **** 	uint8_t adresy[2];
  40:../variables.h **** 	int16_t i_net[2];
  41:../variables.h **** 	int32_t kat_abs[2];
  42:../variables.h **** 	float kat_abs_poprzedni[2];
  43:../variables.h **** 	float predkosc_silnika[2];
  44:../variables.h **** 	int16_t ks;
  45:../variables.h **** 	int16_t kd;
  46:../variables.h **** 	int16_t dzielnik;
  47:../variables.h **** 	int16_t Iq_zadane[2];
  48:../variables.h **** 	int32_t teta_int[2];
  49:../variables.h **** 	int16_t poz_zad[2];
  50:../variables.h **** 	struct vec2 stopa;
  51:../variables.h **** 	float teta[2];
  52:../variables.h **** 	float r;
  53:../variables.h **** 	float r_poprzednie;
  54:../variables.h **** 	float kat_abs_rad[2];
  55:../variables.h **** };
  56:../variables.h **** struct Noga stanowisko;
  57:../variables.h **** 
  58:../variables.h **** void wyslij(uint8_t size )
  59:../variables.h **** {
 325              	 .loc 4 59 0
 326              	 .cfi_startproc
 327              	 
 328              	 
 329 0000 80B5     	 push {r7,lr}
 330              	.LCFI28:
 331              	 .cfi_def_cfa_offset 8
 332              	 .cfi_offset 7,-8
 333              	 .cfi_offset 14,-4
 334 0002 82B0     	 sub sp,sp,#8
 335              	.LCFI29:
 336              	 .cfi_def_cfa_offset 16
 337 0004 00AF     	 add r7,sp,#0
 338              	.LCFI30:
 339              	 .cfi_def_cfa_register 7
 340 0006 0346     	 mov r3,r0
 341 0008 FB71     	 strb r3,[r7,#7]
  60:../variables.h **** 	UART_Transmit(&RS, txData, size);
 342              	 .loc 4 60 0
 343 000a FB79     	 ldrb r3,[r7,#7]
 344 000c 0948     	 ldr r0,.L9
 345 000e 0A49     	 ldr r1,.L9+4
 346 0010 1A46     	 mov r2,r3
 347 0012 FFF7FEFF 	 bl UART_Transmit
  61:../variables.h **** 	while(UART_IsTxBusy(&RS));
 348              	 .loc 4 61 0
 349 0016 00BF     	 nop
 350              	.L8:
 351              	 .loc 4 61 0 is_stmt 0 discriminator 1
 352 0018 0648     	 ldr r0,.L9
 353 001a FFF7FEFF 	 bl UART_IsTxBusy
 354 001e 0346     	 mov r3,r0
 355 0020 002B     	 cmp r3,#0
 356 0022 F9D1     	 bne .L8
  62:../variables.h **** 	UART_Receive(&RS, &rxByte, 1);
 357              	 .loc 4 62 0 is_stmt 1
 358 0024 0348     	 ldr r0,.L9
 359 0026 0549     	 ldr r1,.L9+8
 360 0028 0122     	 movs r2,#1
 361 002a FFF7FEFF 	 bl UART_Receive
  63:../variables.h **** 
  64:../variables.h **** }
 362              	 .loc 4 64 0
 363 002e 0837     	 adds r7,r7,#8
 364              	.LCFI31:
 365              	 .cfi_def_cfa_offset 8
 366 0030 BD46     	 mov sp,r7
 367              	.LCFI32:
 368              	 .cfi_def_cfa_register 13
 369              	 
 370 0032 80BD     	 pop {r7,pc}
 371              	.L10:
 372              	 .align 2
 373              	.L9:
 374 0034 00000000 	 .word RS
 375 0038 00000000 	 .word txData
 376 003c 00000000 	 .word rxByte
 377              	 .cfi_endproc
 378              	.LFE360:
 380              	 .section .text.delay,"ax",%progbits
 381              	 .align 2
 382              	 .global delay
 383              	 .thumb
 384              	 .thumb_func
 386              	delay:
 387              	.LFB361:
  65:../variables.h **** void delay(uint32_t us)
  66:../variables.h **** {
 388              	 .loc 4 66 0
 389              	 .cfi_startproc
 390              	 
 391              	 
 392 0000 80B5     	 push {r7,lr}
 393              	.LCFI33:
 394              	 .cfi_def_cfa_offset 8
 395              	 .cfi_offset 7,-8
 396              	 .cfi_offset 14,-4
 397 0002 82B0     	 sub sp,sp,#8
 398              	.LCFI34:
 399              	 .cfi_def_cfa_offset 16
 400 0004 00AF     	 add r7,sp,#0
 401              	.LCFI35:
 402              	 .cfi_def_cfa_register 7
 403 0006 7860     	 str r0,[r7,#4]
  67:../variables.h **** 	us *= 100;
 404              	 .loc 4 67 0
 405 0008 7B68     	 ldr r3,[r7,#4]
 406 000a 6422     	 movs r2,#100
 407 000c 02FB03F3 	 mul r3,r2,r3
 408 0010 7B60     	 str r3,[r7,#4]
  68:../variables.h **** 	is_delay = 1;
 409              	 .loc 4 68 0
 410 0012 0A4B     	 ldr r3,.L13
 411 0014 0122     	 movs r2,#1
 412 0016 1A70     	 strb r2,[r3]
  69:../variables.h **** 	TIMER_SetTimeInterval(&DELAY, us);
 413              	 .loc 4 69 0
 414 0018 0948     	 ldr r0,.L13+4
 415 001a 7968     	 ldr r1,[r7,#4]
 416 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
  70:../variables.h **** 	TIMER_Start(&DELAY);
 417              	 .loc 4 70 0
 418 0020 0748     	 ldr r0,.L13+4
 419 0022 FFF7FEFF 	 bl TIMER_Start
  71:../variables.h **** 	while(is_delay);
 420              	 .loc 4 71 0
 421 0026 00BF     	 nop
 422              	.L12:
 423              	 .loc 4 71 0 is_stmt 0 discriminator 1
 424 0028 044B     	 ldr r3,.L13
 425 002a 1B78     	 ldrb r3,[r3]
 426 002c 002B     	 cmp r3,#0
 427 002e FBD1     	 bne .L12
  72:../variables.h **** 	TIMER_Stop(&DELAY);
 428              	 .loc 4 72 0 is_stmt 1
 429 0030 0348     	 ldr r0,.L13+4
 430 0032 FFF7FEFF 	 bl TIMER_Stop
  73:../variables.h **** }
 431              	 .loc 4 73 0
 432 0036 0837     	 adds r7,r7,#8
 433              	.LCFI36:
 434              	 .cfi_def_cfa_offset 8
 435 0038 BD46     	 mov sp,r7
 436              	.LCFI37:
 437              	 .cfi_def_cfa_register 13
 438              	 
 439 003a 80BD     	 pop {r7,pc}
 440              	.L14:
 441              	 .align 2
 442              	.L13:
 443 003c 00000000 	 .word is_delay
 444 0040 00000000 	 .word DELAY
 445              	 .cfi_endproc
 446              	.LFE361:
 448              	 .section .text.wyslij_noga,"ax",%progbits
 449              	 .align 2
 450              	 .global wyslij_noga
 451              	 .thumb
 452              	 .thumb_func
 454              	wyslij_noga:
 455              	.LFB362:
  74:../variables.h **** void wyslij_noga(struct Noga n)
  75:../variables.h **** {
 456              	 .loc 4 75 0
 457              	 .cfi_startproc
 458              	 
 459              	 
 460 0000 84B0     	 sub sp,sp,#16
 461              	.LCFI38:
 462              	 .cfi_def_cfa_offset 16
 463 0002 80B5     	 push {r7,lr}
 464              	.LCFI39:
 465              	 .cfi_def_cfa_offset 24
 466              	 .cfi_offset 7,-24
 467              	 .cfi_offset 14,-20
 468 0004 00AF     	 add r7,sp,#0
 469              	.LCFI40:
 470              	 .cfi_def_cfa_register 7
 471 0006 07F1080E 	 add lr,r7,#8
 472 000a 8EE80F00 	 stmia lr,{r0,r1,r2,r3}
  76:../variables.h **** 	  txData[1] = n.adresy[0];
 473              	 .loc 4 76 0
 474 000e 3A7B     	 ldrb r2,[r7,#12]
 475 0010 1A4B     	 ldr r3,.L16
 476 0012 5A70     	 strb r2,[r3,#1]
  77:../variables.h **** 	  txData[2] = n.poz_zad[0] >> 8;
 477              	 .loc 4 77 0
 478 0014 B7F84030 	 ldrh r3,[r7,#64]
 479 0018 1BB2     	 sxth r3,r3
 480 001a 1B12     	 asrs r3,r3,#8
 481 001c 9BB2     	 uxth r3,r3
 482 001e DAB2     	 uxtb r2,r3
 483 0020 164B     	 ldr r3,.L16
 484 0022 9A70     	 strb r2,[r3,#2]
  78:../variables.h **** 	  txData[3] = n.poz_zad[0];
 485              	 .loc 4 78 0
 486 0024 B7F84030 	 ldrh r3,[r7,#64]
 487 0028 DAB2     	 uxtb r2,r3
 488 002a 144B     	 ldr r3,.L16
 489 002c DA70     	 strb r2,[r3,#3]
  79:../variables.h **** 	  txData[4] = EOF;
 490              	 .loc 4 79 0
 491 002e 134B     	 ldr r3,.L16
 492 0030 DD22     	 movs r2,#221
 493 0032 1A71     	 strb r2,[r3,#4]
  80:../variables.h **** 	  wyslij(5);
 494              	 .loc 4 80 0
 495 0034 0520     	 movs r0,#5
 496 0036 FFF7FEFF 	 bl wyslij
  81:../variables.h **** 	  delay(500);
 497              	 .loc 4 81 0
 498 003a 4FF4FA70 	 mov r0,#500
 499 003e FFF7FEFF 	 bl delay
  82:../variables.h **** 	  txData[1] = n.adresy[1];
 500              	 .loc 4 82 0
 501 0042 7A7B     	 ldrb r2,[r7,#13]
 502 0044 0D4B     	 ldr r3,.L16
 503 0046 5A70     	 strb r2,[r3,#1]
  83:../variables.h **** 	  txData[2] = n.poz_zad[1] >> 8;
 504              	 .loc 4 83 0
 505 0048 B7F84230 	 ldrh r3,[r7,#66]
 506 004c 1BB2     	 sxth r3,r3
 507 004e 1B12     	 asrs r3,r3,#8
 508 0050 9BB2     	 uxth r3,r3
 509 0052 DAB2     	 uxtb r2,r3
 510 0054 094B     	 ldr r3,.L16
 511 0056 9A70     	 strb r2,[r3,#2]
  84:../variables.h **** 	  txData[3] = n.poz_zad[1];
 512              	 .loc 4 84 0
 513 0058 B7F84230 	 ldrh r3,[r7,#66]
 514 005c DAB2     	 uxtb r2,r3
 515 005e 074B     	 ldr r3,.L16
 516 0060 DA70     	 strb r2,[r3,#3]
  85:../variables.h **** 	  wyslij(5);
 517              	 .loc 4 85 0
 518 0062 0520     	 movs r0,#5
 519 0064 FFF7FEFF 	 bl wyslij
  86:../variables.h **** 	  delay(500);
 520              	 .loc 4 86 0
 521 0068 4FF4FA70 	 mov r0,#500
 522 006c FFF7FEFF 	 bl delay
  87:../variables.h **** }
 523              	 .loc 4 87 0
 524 0070 BD46     	 mov sp,r7
 525              	.LCFI41:
 526              	 .cfi_def_cfa_register 13
 527              	 
 528 0072 BDE88040 	 pop {r7,lr}
 529              	.LCFI42:
 530              	 .cfi_restore 14
 531              	 .cfi_restore 7
 532              	 .cfi_def_cfa_offset 16
 533 0076 04B0     	 add sp,sp,#16
 534              	.LCFI43:
 535              	 .cfi_def_cfa_offset 0
 536 0078 7047     	 bx lr
 537              	.L17:
 538 007a 00BF     	 .align 2
 539              	.L16:
 540 007c 00000000 	 .word txData
 541              	 .cfi_endproc
 542              	.LFE362:
 544              	 .section .text.Ik,"ax",%progbits
 545              	 .align 2
 546              	 .global Ik
 547              	 .thumb
 548              	 .thumb_func
 550              	Ik:
 551              	.LFB363:
  88:../variables.h **** void Ik(struct Noga *n)
  89:../variables.h **** {
 552              	 .loc 4 89 0
 553              	 .cfi_startproc
 554              	 
 555              	 
 556 0000 80B5     	 push {r7,lr}
 557              	.LCFI44:
 558              	 .cfi_def_cfa_offset 8
 559              	 .cfi_offset 7,-8
 560              	 .cfi_offset 14,-4
 561 0002 8AB0     	 sub sp,sp,#40
 562              	.LCFI45:
 563              	 .cfi_def_cfa_offset 48
 564 0004 00AF     	 add r7,sp,#0
 565              	.LCFI46:
 566              	 .cfi_def_cfa_register 7
 567 0006 7860     	 str r0,[r7,#4]
  90:../variables.h **** 	float x = n->stopa.x;
 568              	 .loc 4 90 0
 569 0008 7B68     	 ldr r3,[r7,#4]
 570 000a DB6B     	 ldr r3,[r3,#60]
 571 000c 7B62     	 str r3,[r7,#36]
  91:../variables.h **** 	float y = n->stopa.y;
 572              	 .loc 4 91 0
 573 000e 7B68     	 ldr r3,[r7,#4]
 574 0010 1B6C     	 ldr r3,[r3,#64]
 575 0012 3B62     	 str r3,[r7,#32]
  92:../variables.h **** 	float La = sqrtf(((d/2)-x)*((d/2)-x)+y*y);
 576              	 .loc 4 92 0
 577 0014 6E4B     	 ldr r3,.L19
 578 0016 D3ED007A 	 flds s15,[r3]
 579 001a B0EE007A 	 fconsts s14,#0
 580 001e 87EE877A 	 fdivs s14,s15,s14
 581 0022 D7ED097A 	 flds s15,[r7,#36]
 582 0026 37EE677A 	 fsubs s14,s14,s15
 583 002a 694B     	 ldr r3,.L19
 584 002c D3ED007A 	 flds s15,[r3]
 585 0030 F0EE006A 	 fconsts s13,#0
 586 0034 C7EEA66A 	 fdivs s13,s15,s13
 587 0038 D7ED097A 	 flds s15,[r7,#36]
 588 003c 76EEE77A 	 fsubs s15,s13,s15
 589 0040 27EE277A 	 fmuls s14,s14,s15
 590 0044 D7ED086A 	 flds s13,[r7,#32]
 591 0048 D7ED087A 	 flds s15,[r7,#32]
 592 004c 66EEA77A 	 fmuls s15,s13,s15
 593 0050 77EE277A 	 fadds s15,s14,s15
 594 0054 17EE900A 	 fmrs r0,s15
 595 0058 FFF7FEFF 	 bl sqrtf
 596 005c F861     	 str r0,[r7,#28]
  93:../variables.h **** 	float Lb = sqrtf(((d/2)+x)*((d/2)+x)+y*y);
 597              	 .loc 4 93 0
 598 005e 5C4B     	 ldr r3,.L19
 599 0060 D3ED007A 	 flds s15,[r3]
 600 0064 B0EE007A 	 fconsts s14,#0
 601 0068 87EE877A 	 fdivs s14,s15,s14
 602 006c D7ED097A 	 flds s15,[r7,#36]
 603 0070 37EE277A 	 fadds s14,s14,s15
 604 0074 564B     	 ldr r3,.L19
 605 0076 D3ED007A 	 flds s15,[r3]
 606 007a F0EE006A 	 fconsts s13,#0
 607 007e C7EEA66A 	 fdivs s13,s15,s13
 608 0082 D7ED097A 	 flds s15,[r7,#36]
 609 0086 76EEA77A 	 fadds s15,s13,s15
 610 008a 27EE277A 	 fmuls s14,s14,s15
 611 008e D7ED086A 	 flds s13,[r7,#32]
 612 0092 D7ED087A 	 flds s15,[r7,#32]
 613 0096 66EEA77A 	 fmuls s15,s13,s15
 614 009a 77EE277A 	 fadds s15,s14,s15
 615 009e 17EE900A 	 fmrs r0,s15
 616 00a2 FFF7FEFF 	 bl sqrtf
 617 00a6 B861     	 str r0,[r7,#24]
  94:../variables.h **** 	float fi1 = (l1*l1+La*La-l2*l2)/(2*l1*La);
 618              	 .loc 4 94 0
 619 00a8 4A4B     	 ldr r3,.L19+4
 620 00aa 93ED007A 	 flds s14,[r3]
 621 00ae 494B     	 ldr r3,.L19+4
 622 00b0 D3ED007A 	 flds s15,[r3]
 623 00b4 27EE277A 	 fmuls s14,s14,s15
 624 00b8 D7ED076A 	 flds s13,[r7,#28]
 625 00bc D7ED077A 	 flds s15,[r7,#28]
 626 00c0 66EEA77A 	 fmuls s15,s13,s15
 627 00c4 37EE277A 	 fadds s14,s14,s15
 628 00c8 434B     	 ldr r3,.L19+8
 629 00ca D3ED006A 	 flds s13,[r3]
 630 00ce 424B     	 ldr r3,.L19+8
 631 00d0 D3ED007A 	 flds s15,[r3]
 632 00d4 66EEA77A 	 fmuls s15,s13,s15
 633 00d8 37EE677A 	 fsubs s14,s14,s15
 634 00dc 3D4B     	 ldr r3,.L19+4
 635 00de D3ED007A 	 flds s15,[r3]
 636 00e2 77EEA76A 	 fadds s13,s15,s15
 637 00e6 D7ED077A 	 flds s15,[r7,#28]
 638 00ea 66EEA77A 	 fmuls s15,s13,s15
 639 00ee C7EE277A 	 fdivs s15,s14,s15
 640 00f2 C7ED057A 	 fsts s15,[r7,#20]
  95:../variables.h **** 	fi1 = acosf(fi1);
 641              	 .loc 4 95 0
 642 00f6 7869     	 ldr r0,[r7,#20]
 643 00f8 FFF7FEFF 	 bl acosf
 644 00fc 7861     	 str r0,[r7,#20]
  96:../variables.h **** 	float fi2 = (l1*l1+Lb*Lb-l2*l2)/(2*l1*Lb);
 645              	 .loc 4 96 0
 646 00fe 354B     	 ldr r3,.L19+4
 647 0100 93ED007A 	 flds s14,[r3]
 648 0104 334B     	 ldr r3,.L19+4
 649 0106 D3ED007A 	 flds s15,[r3]
 650 010a 27EE277A 	 fmuls s14,s14,s15
 651 010e D7ED066A 	 flds s13,[r7,#24]
 652 0112 D7ED067A 	 flds s15,[r7,#24]
 653 0116 66EEA77A 	 fmuls s15,s13,s15
 654 011a 37EE277A 	 fadds s14,s14,s15
 655 011e 2E4B     	 ldr r3,.L19+8
 656 0120 D3ED006A 	 flds s13,[r3]
 657 0124 2C4B     	 ldr r3,.L19+8
 658 0126 D3ED007A 	 flds s15,[r3]
 659 012a 66EEA77A 	 fmuls s15,s13,s15
 660 012e 37EE677A 	 fsubs s14,s14,s15
 661 0132 284B     	 ldr r3,.L19+4
 662 0134 D3ED007A 	 flds s15,[r3]
 663 0138 77EEA76A 	 fadds s13,s15,s15
 664 013c D7ED067A 	 flds s15,[r7,#24]
 665 0140 66EEA77A 	 fmuls s15,s13,s15
 666 0144 C7EE277A 	 fdivs s15,s14,s15
 667 0148 C7ED047A 	 fsts s15,[r7,#16]
  97:../variables.h **** 	fi2 = acosf(fi2);
 668              	 .loc 4 97 0
 669 014c 3869     	 ldr r0,[r7,#16]
 670 014e FFF7FEFF 	 bl acosf
 671 0152 3861     	 str r0,[r7,#16]
  98:../variables.h **** 	float psi1 = asinf(((d/2)-x)/La);
 672              	 .loc 4 98 0
 673 0154 1E4B     	 ldr r3,.L19
 674 0156 D3ED007A 	 flds s15,[r3]
 675 015a B0EE007A 	 fconsts s14,#0
 676 015e 87EE877A 	 fdivs s14,s15,s14
 677 0162 D7ED097A 	 flds s15,[r7,#36]
 678 0166 37EE677A 	 fsubs s14,s14,s15
 679 016a D7ED077A 	 flds s15,[r7,#28]
 680 016e C7EE277A 	 fdivs s15,s14,s15
 681 0172 17EE900A 	 fmrs r0,s15
 682 0176 FFF7FEFF 	 bl asinf
 683 017a F860     	 str r0,[r7,#12]
  99:../variables.h **** 	float psi2 = asinf(((d/2)+x)/Lb);
 684              	 .loc 4 99 0
 685 017c 144B     	 ldr r3,.L19
 686 017e D3ED007A 	 flds s15,[r3]
 687 0182 B0EE007A 	 fconsts s14,#0
 688 0186 87EE877A 	 fdivs s14,s15,s14
 689 018a D7ED097A 	 flds s15,[r7,#36]
 690 018e 37EE277A 	 fadds s14,s14,s15
 691 0192 D7ED067A 	 flds s15,[r7,#24]
 692 0196 C7EE277A 	 fdivs s15,s14,s15
 693 019a 17EE900A 	 fmrs r0,s15
 694 019e FFF7FEFF 	 bl asinf
 695 01a2 B860     	 str r0,[r7,#8]
 100:../variables.h **** 
 101:../variables.h **** 	n->teta[0] = fi1 - psi1;
 696              	 .loc 4 101 0
 697 01a4 97ED057A 	 flds s14,[r7,#20]
 698 01a8 D7ED037A 	 flds s15,[r7,#12]
 699 01ac 77EE677A 	 fsubs s15,s14,s15
 700 01b0 7B68     	 ldr r3,[r7,#4]
 701 01b2 C3ED117A 	 fsts s15,[r3,#68]
 102:../variables.h **** 	n->teta[1] = fi2 - psi2;
 702              	 .loc 4 102 0
 703 01b6 97ED047A 	 flds s14,[r7,#16]
 704 01ba D7ED027A 	 flds s15,[r7,#8]
 705 01be 77EE677A 	 fsubs s15,s14,s15
 706 01c2 7B68     	 ldr r3,[r7,#4]
 707 01c4 C3ED127A 	 fsts s15,[r3,#72]
 103:../variables.h **** }
 708              	 .loc 4 103 0
 709 01c8 2837     	 adds r7,r7,#40
 710              	.LCFI47:
 711              	 .cfi_def_cfa_offset 8
 712 01ca BD46     	 mov sp,r7
 713              	.LCFI48:
 714              	 .cfi_def_cfa_register 13
 715              	 
 716 01cc 80BD     	 pop {r7,pc}
 717              	.L20:
 718 01ce 00BF     	 .align 2
 719              	.L19:
 720 01d0 00000000 	 .word d
 721 01d4 00000000 	 .word l1
 722 01d8 00000000 	 .word l2
 723              	 .cfi_endproc
 724              	.LFE363:
 726              	 .section .text.update,"ax",%progbits
 727              	 .align 2
 728              	 .global update
 729              	 .thumb
 730              	 .thumb_func
 732              	update:
 733              	.LFB364:
 104:../variables.h **** void update()
 105:../variables.h **** {
 734              	 .loc 4 105 0
 735              	 .cfi_startproc
 736              	 
 737              	 
 738 0000 80B5     	 push {r7,lr}
 739              	.LCFI49:
 740              	 .cfi_def_cfa_offset 8
 741              	 .cfi_offset 7,-8
 742              	 .cfi_offset 14,-4
 743 0002 00AF     	 add r7,sp,#0
 744              	.LCFI50:
 745              	 .cfi_def_cfa_register 7
 106:../variables.h **** 	stanowisko.kat_abs_poprzedni[0] = stanowisko.kat_abs_rad[0];
 746              	 .loc 4 106 0
 747 0004 3A4B     	 ldr r3,.L22
 748 0006 5B6D     	 ldr r3,[r3,#84]
 749 0008 394A     	 ldr r2,.L22
 750 000a 5361     	 str r3,[r2,#20]
 107:../variables.h **** 	stanowisko.kat_abs_poprzedni[1] = stanowisko.kat_abs_rad[1];
 751              	 .loc 4 107 0
 752 000c 384B     	 ldr r3,.L22
 753 000e 9B6D     	 ldr r3,[r3,#88]
 754 0010 374A     	 ldr r2,.L22
 755 0012 9361     	 str r3,[r2,#24]
 108:../variables.h **** 	stanowisko.kat_abs_rad[0] = (float)stanowisko.kat_abs[0] * pi / 32767.0f;;
 756              	 .loc 4 108 0
 757 0014 364B     	 ldr r3,.L22
 758 0016 DB68     	 ldr r3,[r3,#12]
 759 0018 07EE903A 	 fmsr s15,r3
 760 001c B8EEE77A 	 fsitos s14,s15
 761 0020 344B     	 ldr r3,.L22+4
 762 0022 D3ED007A 	 flds s15,[r3]
 763 0026 67EE277A 	 fmuls s15,s14,s15
 764 002a 9FED337A 	 flds s14,.L22+8
 765 002e C7EE877A 	 fdivs s15,s15,s14
 766 0032 2F4B     	 ldr r3,.L22
 767 0034 C3ED157A 	 fsts s15,[r3,#84]
 109:../variables.h **** 	stanowisko.kat_abs_rad[1] = (float)stanowisko.kat_abs[1]  * pi / 32767.0f;;
 768              	 .loc 4 109 0
 769 0038 2D4B     	 ldr r3,.L22
 770 003a 1B69     	 ldr r3,[r3,#16]
 771 003c 07EE903A 	 fmsr s15,r3
 772 0040 B8EEE77A 	 fsitos s14,s15
 773 0044 2B4B     	 ldr r3,.L22+4
 774 0046 D3ED007A 	 flds s15,[r3]
 775 004a 67EE277A 	 fmuls s15,s14,s15
 776 004e 9FED2A7A 	 flds s14,.L22+8
 777 0052 C7EE877A 	 fdivs s15,s15,s14
 778 0056 264B     	 ldr r3,.L22
 779 0058 C3ED167A 	 fsts s15,[r3,#88]
 110:../variables.h **** 	stanowisko.predkosc_silnika[0] =(stanowisko.predkosc_silnika[0] * 0.4f) + ((stanowisko.kat_abs_rad
 780              	 .loc 4 110 0
 781 005c 244B     	 ldr r3,.L22
 782 005e D3ED077A 	 flds s15,[r3,#28]
 783 0062 9FED267A 	 flds s14,.L22+12
 784 0066 27EE877A 	 fmuls s14,s15,s14
 785 006a 214B     	 ldr r3,.L22
 786 006c D3ED156A 	 flds s13,[r3,#84]
 787 0070 1F4B     	 ldr r3,.L22
 788 0072 D3ED057A 	 flds s15,[r3,#20]
 789 0076 76EEE76A 	 fsubs s13,s13,s15
 790 007a 214B     	 ldr r3,.L22+16
 791 007c D3ED007A 	 flds s15,[r3]
 792 0080 C6EEA77A 	 fdivs s15,s13,s15
 793 0084 DFED1F6A 	 flds s13,.L22+20
 794 0088 67EEA67A 	 fmuls s15,s15,s13
 795 008c 77EE277A 	 fadds s15,s14,s15
 796 0090 174B     	 ldr r3,.L22
 797 0092 C3ED077A 	 fsts s15,[r3,#28]
 111:../variables.h **** 	stanowisko.predkosc_silnika[1] =(stanowisko.predkosc_silnika[0] * 0.4f) + ((stanowisko.kat_abs_rad
 798              	 .loc 4 111 0
 799 0096 164B     	 ldr r3,.L22
 800 0098 D3ED077A 	 flds s15,[r3,#28]
 801 009c 9FED177A 	 flds s14,.L22+12
 802 00a0 27EE877A 	 fmuls s14,s15,s14
 803 00a4 124B     	 ldr r3,.L22
 804 00a6 D3ED166A 	 flds s13,[r3,#88]
 805 00aa 114B     	 ldr r3,.L22
 806 00ac D3ED067A 	 flds s15,[r3,#24]
 807 00b0 76EEE76A 	 fsubs s13,s13,s15
 808 00b4 124B     	 ldr r3,.L22+16
 809 00b6 D3ED007A 	 flds s15,[r3]
 810 00ba C6EEA77A 	 fdivs s15,s13,s15
 811 00be DFED116A 	 flds s13,.L22+20
 812 00c2 67EEA67A 	 fmuls s15,s15,s13
 813 00c6 77EE277A 	 fadds s15,s14,s15
 814 00ca 094B     	 ldr r3,.L22
 815 00cc C3ED087A 	 fsts s15,[r3,#32]
 112:../variables.h **** 	t+= dt;
 816              	 .loc 4 112 0
 817 00d0 0D4B     	 ldr r3,.L22+24
 818 00d2 93ED007A 	 flds s14,[r3]
 819 00d6 0A4B     	 ldr r3,.L22+16
 820 00d8 D3ED007A 	 flds s15,[r3]
 821 00dc 77EE277A 	 fadds s15,s14,s15
 822 00e0 094B     	 ldr r3,.L22+24
 823 00e2 C3ED007A 	 fsts s15,[r3]
 113:../variables.h **** 	Ik(&stanowisko);
 824              	 .loc 4 113 0
 825 00e6 0248     	 ldr r0,.L22
 826 00e8 FFF7FEFF 	 bl Ik
 114:../variables.h **** }
 827              	 .loc 4 114 0
 828 00ec 80BD     	 pop {r7,pc}
 829              	.L23:
 830 00ee 00BF     	 .align 2
 831              	.L22:
 832 00f0 00000000 	 .word stanowisko
 833 00f4 00000000 	 .word pi
 834 00f8 00FEFF46 	 .word 1191181824
 835 00fc CDCCCC3E 	 .word 1053609165
 836 0100 00000000 	 .word dt
 837 0104 9A99193F 	 .word 1058642330
 838 0108 00000000 	 .word t
 839              	 .cfi_endproc
 840              	.LFE364:
 842              	 .section .text.FK_Circle,"ax",%progbits
 843              	 .align 2
 844              	 .global FK_Circle
 845              	 .thumb
 846              	 .thumb_func
 848              	FK_Circle:
 849              	.LFB365:
 115:../variables.h **** void FK_Circle()
 116:../variables.h **** {
 850              	 .loc 4 116 0
 851              	 .cfi_startproc
 852              	 
 853              	 
 854 0000 80B5     	 push {r7,lr}
 855              	.LCFI51:
 856              	 .cfi_def_cfa_offset 8
 857              	 .cfi_offset 7,-8
 858              	 .cfi_offset 14,-4
 859 0002 00AF     	 add r7,sp,#0
 860              	.LCFI52:
 861              	 .cfi_def_cfa_register 7
 117:../variables.h **** 	//stanowisko.stopa.x =cosf(t) * 80;
 118:../variables.h **** 	stanowisko.stopa.y =210 + sinf(t) * 55;
 862              	 .loc 4 118 0
 863 0004 094B     	 ldr r3,.L25
 864 0006 1B68     	 ldr r3,[r3]
 865 0008 1846     	 mov r0,r3
 866 000a FFF7FEFF 	 bl sinf
 867 000e 07EE100A 	 fmsr s14,r0
 868 0012 DFED077A 	 flds s15,.L25+4
 869 0016 67EE277A 	 fmuls s15,s14,s15
 870 001a 9FED067A 	 flds s14,.L25+8
 871 001e 77EE877A 	 fadds s15,s15,s14
 872 0022 054B     	 ldr r3,.L25+12
 873 0024 C3ED107A 	 fsts s15,[r3,#64]
 119:../variables.h **** 
 120:../variables.h **** }
 874              	 .loc 4 120 0
 875 0028 80BD     	 pop {r7,pc}
 876              	.L26:
 877 002a 00BF     	 .align 2
 878              	.L25:
 879 002c 00000000 	 .word t
 880 0030 00005C42 	 .word 1113325568
 881 0034 00005243 	 .word 1129447424
 882 0038 00000000 	 .word stanowisko
 883              	 .cfi_endproc
 884              	.LFE365:
 886              	 .section .text.Spring,"ax",%progbits
 887              	 .align 2
 888              	 .global Spring
 889              	 .thumb
 890              	 .thumb_func
 892              	Spring:
 893              	.LFB366:
 121:../variables.h **** void Spring()
 122:../variables.h **** {
 894              	 .loc 4 122 0
 895              	 .cfi_startproc
 896              	 
 897              	 
 898 0000 90B5     	 push {r4,r7,lr}
 899              	.LCFI53:
 900              	 .cfi_def_cfa_offset 12
 901              	 .cfi_offset 4,-12
 902              	 .cfi_offset 7,-8
 903              	 .cfi_offset 14,-4
 904 0002 97B0     	 sub sp,sp,#92
 905              	.LCFI54:
 906              	 .cfi_def_cfa_offset 104
 907 0004 14AF     	 add r7,sp,#80
 908              	.LCFI55:
 909              	 .cfi_def_cfa 7,24
 123:../variables.h **** 	stanowisko.poz_zad[0] = stanowisko.teta[0] * INT16_MAX / pi;
 910              	 .loc 4 123 0
 911 0006 1C4B     	 ldr r3,.L28
 912 0008 D3ED117A 	 flds s15,[r3,#68]
 913 000c 9FED1B7A 	 flds s14,.L28+4
 914 0010 27EE877A 	 fmuls s14,s15,s14
 915 0014 1A4B     	 ldr r3,.L28+8
 916 0016 D3ED007A 	 flds s15,[r3]
 917 001a C7EE277A 	 fdivs s15,s14,s15
 918 001e FDEEE77A 	 ftosizs s15,s15
 919 0022 C7ED017A 	 fsts s15,[r7,#4]
 920 0026 BB88     	 ldrh r3,[r7,#4]
 921 0028 9AB2     	 uxth r2,r3
 922 002a 134B     	 ldr r3,.L28
 923 002c 1A87     	 strh r2,[r3,#56]
 124:../variables.h **** 	stanowisko.poz_zad[1] = stanowisko.teta[1] * INT16_MAX / pi;
 924              	 .loc 4 124 0
 925 002e 124B     	 ldr r3,.L28
 926 0030 D3ED127A 	 flds s15,[r3,#72]
 927 0034 9FED117A 	 flds s14,.L28+4
 928 0038 27EE877A 	 fmuls s14,s15,s14
 929 003c 104B     	 ldr r3,.L28+8
 930 003e D3ED007A 	 flds s15,[r3]
 931 0042 C7EE277A 	 fdivs s15,s14,s15
 932 0046 FDEEE77A 	 ftosizs s15,s15
 933 004a C7ED017A 	 fsts s15,[r7,#4]
 934 004e BB88     	 ldrh r3,[r7,#4]
 935 0050 9AB2     	 uxth r2,r3
 936 0052 094B     	 ldr r3,.L28
 937 0054 5A87     	 strh r2,[r3,#58]
 125:../variables.h **** 
 126:../variables.h **** 	wyslij_noga(stanowisko);
 938              	 .loc 4 126 0
 939 0056 084C     	 ldr r4,.L28
 940 0058 6946     	 mov r1,sp
 941 005a 04F11003 	 add r3,r4,#16
 942 005e 4C22     	 movs r2,#76
 943 0060 0846     	 mov r0,r1
 944 0062 1946     	 mov r1,r3
 945 0064 FFF7FEFF 	 bl memcpy
 946 0068 94E80F00 	 ldmia r4,{r0,r1,r2,r3}
 947 006c FFF7FEFF 	 bl wyslij_noga
 127:../variables.h **** }
 948              	 .loc 4 127 0
 949 0070 0C37     	 adds r7,r7,#12
 950              	.LCFI56:
 951              	 .cfi_def_cfa_offset 12
 952 0072 BD46     	 mov sp,r7
 953              	.LCFI57:
 954              	 .cfi_def_cfa_register 13
 955              	 
 956 0074 90BD     	 pop {r4,r7,pc}
 957              	.L29:
 958 0076 00BF     	 .align 2
 959              	.L28:
 960 0078 00000000 	 .word stanowisko
 961 007c 00FEFF46 	 .word 1191181824
 962 0080 00000000 	 .word pi
 963              	 .cfi_endproc
 964              	.LFE366:
 966              	 .section .text.Init,"ax",%progbits
 967              	 .align 2
 968              	 .global Init
 969              	 .thumb
 970              	 .thumb_func
 972              	Init:
 973              	.LFB367:
 128:../variables.h **** void Init()
 129:../variables.h **** {
 974              	 .loc 4 129 0
 975              	 .cfi_startproc
 976              	 
 977              	 
 978 0000 80B5     	 push {r7,lr}
 979              	.LCFI58:
 980              	 .cfi_def_cfa_offset 8
 981              	 .cfi_offset 7,-8
 982              	 .cfi_offset 14,-4
 983 0002 82B0     	 sub sp,sp,#8
 984              	.LCFI59:
 985              	 .cfi_def_cfa_offset 16
 986 0004 00AF     	 add r7,sp,#0
 987              	.LCFI60:
 988              	 .cfi_def_cfa_register 7
 130:../variables.h **** 	txData[0] = SOF;
 989              	 .loc 4 130 0
 990 0006 2B4B     	 ldr r3,.L33
 991 0008 CC22     	 movs r2,#204
 992 000a 1A70     	 strb r2,[r3]
 131:../variables.h **** 	stanowisko.adresy[0] = 0x10;
 993              	 .loc 4 131 0
 994 000c 2A4B     	 ldr r3,.L33+4
 995 000e 1022     	 movs r2,#16
 996 0010 1A71     	 strb r2,[r3,#4]
 132:../variables.h **** 	stanowisko.adresy[1] = 0x11;
 997              	 .loc 4 132 0
 998 0012 294B     	 ldr r3,.L33+4
 999 0014 1122     	 movs r2,#17
 1000 0016 5A71     	 strb r2,[r3,#5]
 1001              	.LBB2:
 133:../variables.h **** 	for(uint8_t i = 0 ; i < 2; i++)
 1002              	 .loc 4 133 0
 1003 0018 0023     	 movs r3,#0
 1004 001a FB71     	 strb r3,[r7,#7]
 1005 001c 2FE0     	 b .L31
 1006              	.L32:
 134:../variables.h **** 	{
 135:../variables.h **** 		stanowisko.i_net[i] = 0;
 1007              	 .loc 4 135 0 discriminator 3
 1008 001e FB79     	 ldrb r3,[r7,#7]
 1009 0020 254A     	 ldr r2,.L33+4
 1010 0022 5B00     	 lsls r3,r3,#1
 1011 0024 1344     	 add r3,r3,r2
 1012 0026 0022     	 movs r2,#0
 1013 0028 DA80     	 strh r2,[r3,#6]
 136:../variables.h **** 		stanowisko.kat_abs[i] = 0;
 1014              	 .loc 4 136 0 discriminator 3
 1015 002a FB79     	 ldrb r3,[r7,#7]
 1016 002c 224A     	 ldr r2,.L33+4
 1017 002e 0233     	 adds r3,r3,#2
 1018 0030 9B00     	 lsls r3,r3,#2
 1019 0032 1344     	 add r3,r3,r2
 1020 0034 0022     	 movs r2,#0
 1021 0036 5A60     	 str r2,[r3,#4]
 137:../variables.h **** 		stanowisko.kat_abs_poprzedni[i] = 0;
 1022              	 .loc 4 137 0 discriminator 3
 1023 0038 FB79     	 ldrb r3,[r7,#7]
 1024 003a 1F4A     	 ldr r2,.L33+4
 1025 003c 0433     	 adds r3,r3,#4
 1026 003e 9B00     	 lsls r3,r3,#2
 1027 0040 1344     	 add r3,r3,r2
 1028 0042 4FF00002 	 mov r2,#0
 1029 0046 5A60     	 str r2,[r3,#4]
 138:../variables.h **** 		stanowisko.predkosc_silnika[i] = 0;
 1030              	 .loc 4 138 0 discriminator 3
 1031 0048 FB79     	 ldrb r3,[r7,#7]
 1032 004a 1B4A     	 ldr r2,.L33+4
 1033 004c 0633     	 adds r3,r3,#6
 1034 004e 9B00     	 lsls r3,r3,#2
 1035 0050 1344     	 add r3,r3,r2
 1036 0052 4FF00002 	 mov r2,#0
 1037 0056 5A60     	 str r2,[r3,#4]
 139:../variables.h **** 		stanowisko.silnik_start[i]  =0;
 1038              	 .loc 4 139 0 discriminator 3
 1039 0058 FB79     	 ldrb r3,[r7,#7]
 1040 005a 174A     	 ldr r2,.L33+4
 1041 005c 1344     	 add r3,r3,r2
 1042 005e 0022     	 movs r2,#0
 1043 0060 9A70     	 strb r2,[r3,#2]
 140:../variables.h **** 		stanowisko.silnik_numer[i] = 0;
 1044              	 .loc 4 140 0 discriminator 3
 1045 0062 FB79     	 ldrb r3,[r7,#7]
 1046 0064 144A     	 ldr r2,.L33+4
 1047 0066 0021     	 movs r1,#0
 1048 0068 D154     	 strb r1,[r2,r3]
 141:../variables.h **** 		stanowisko.Iq_zadane[i] = 0;
 1049              	 .loc 4 141 0 discriminator 3
 1050 006a FB79     	 ldrb r3,[r7,#7]
 1051 006c 124A     	 ldr r2,.L33+4
 1052 006e 1433     	 adds r3,r3,#20
 1053 0070 5B00     	 lsls r3,r3,#1
 1054 0072 1344     	 add r3,r3,r2
 1055 0074 0022     	 movs r2,#0
 1056 0076 5A80     	 strh r2,[r3,#2]
 133:../variables.h **** 	{
 1057              	 .loc 4 133 0 discriminator 3
 1058 0078 FB79     	 ldrb r3,[r7,#7]
 1059 007a 0133     	 adds r3,r3,#1
 1060 007c FB71     	 strb r3,[r7,#7]
 1061              	.L31:
 133:../variables.h **** 	{
 1062              	 .loc 4 133 0 is_stmt 0 discriminator 1
 1063 007e FB79     	 ldrb r3,[r7,#7]
 1064 0080 012B     	 cmp r3,#1
 1065 0082 CCD9     	 bls .L32
 1066              	.LBE2:
 142:../variables.h **** 	}
 143:../variables.h **** 	stanowisko.ks = 5050;
 1067              	 .loc 4 143 0 is_stmt 1
 1068 0084 0C4B     	 ldr r3,.L33+4
 1069 0086 41F2BA32 	 movw r2,#5050
 1070 008a 9A84     	 strh r2,[r3,#36]
 144:../variables.h **** 	stanowisko.kd = 8;
 1071              	 .loc 4 144 0
 1072 008c 0A4B     	 ldr r3,.L33+4
 1073 008e 0822     	 movs r2,#8
 1074 0090 DA84     	 strh r2,[r3,#38]
 145:../variables.h **** 	stanowisko.dzielnik = 100;
 1075              	 .loc 4 145 0
 1076 0092 094B     	 ldr r3,.L33+4
 1077 0094 6422     	 movs r2,#100
 1078 0096 1A85     	 strh r2,[r3,#40]
 146:../variables.h **** 	stanowisko.stopa.x = 0;
 1079              	 .loc 4 146 0
 1080 0098 074B     	 ldr r3,.L33+4
 1081 009a 4FF00002 	 mov r2,#0
 1082 009e DA63     	 str r2,[r3,#60]
 147:../variables.h **** 	stanowisko.stopa.y = 200;
 1083              	 .loc 4 147 0
 1084 00a0 054B     	 ldr r3,.L33+4
 1085 00a2 064A     	 ldr r2,.L33+8
 1086 00a4 1A64     	 str r2,[r3,#64]
 148:../variables.h **** 	Ik(&stanowisko);
 1087              	 .loc 4 148 0
 1088 00a6 0448     	 ldr r0,.L33+4
 1089 00a8 FFF7FEFF 	 bl Ik
 149:../variables.h **** }
 1090              	 .loc 4 149 0
 1091 00ac 0837     	 adds r7,r7,#8
 1092              	.LCFI61:
 1093              	 .cfi_def_cfa_offset 8
 1094 00ae BD46     	 mov sp,r7
 1095              	.LCFI62:
 1096              	 .cfi_def_cfa_register 13
 1097              	 
 1098 00b0 80BD     	 pop {r7,pc}
 1099              	.L34:
 1100 00b2 00BF     	 .align 2
 1101              	.L33:
 1102 00b4 00000000 	 .word txData
 1103 00b8 00000000 	 .word stanowisko
 1104 00bc 00004843 	 .word 1128792064
 1105              	 .cfi_endproc
 1106              	.LFE367:
 1108              	 .section .text.Raibert_Hopper,"ax",%progbits
 1109              	 .align 2
 1110              	 .global Raibert_Hopper
 1111              	 .thumb
 1112              	 .thumb_func
 1114              	Raibert_Hopper:
 1115              	.LFB368:
 150:../variables.h **** void Raibert_Hopper(struct Noga n)
 151:../variables.h **** {
 1116              	 .loc 4 151 0
 1117              	 .cfi_startproc
 1118              	 
 1119              	 
 1120 0000 84B0     	 sub sp,sp,#16
 1121              	.LCFI63:
 1122              	 .cfi_def_cfa_offset 16
 1123 0002 80B5     	 push {r7,lr}
 1124              	.LCFI64:
 1125              	 .cfi_def_cfa_offset 24
 1126              	 .cfi_offset 7,-24
 1127              	 .cfi_offset 14,-20
 1128 0004 00AF     	 add r7,sp,#0
 1129              	.LCFI65:
 1130              	 .cfi_def_cfa_register 7
 1131 0006 07F1080E 	 add lr,r7,#8
 1132 000a 8EE80F00 	 stmia lr,{r0,r1,r2,r3}
 152:../variables.h **** 	n.r_poprzednie = n.r;
 1133              	 .loc 4 152 0
 1134 000e 7B6D     	 ldr r3,[r7,#84]
 1135 0010 BB65     	 str r3,[r7,#88]
 153:../variables.h **** 	n.r = n.stopa.x * n.stopa.x + n.stopa.y * n.stopa.y;
 1136              	 .loc 4 153 0
 1137 0012 97ED117A 	 flds s14,[r7,#68]
 1138 0016 D7ED117A 	 flds s15,[r7,#68]
 1139 001a 27EE277A 	 fmuls s14,s14,s15
 1140 001e D7ED126A 	 flds s13,[r7,#72]
 1141 0022 D7ED127A 	 flds s15,[r7,#72]
 1142 0026 66EEA77A 	 fmuls s15,s13,s15
 1143 002a 77EE277A 	 fadds s15,s14,s15
 1144 002e C7ED157A 	 fsts s15,[r7,#84]
 154:../variables.h **** 	n.r = sqrtf(n.r);
 1145              	 .loc 4 154 0
 1146 0032 7B6D     	 ldr r3,[r7,#84]
 1147 0034 1846     	 mov r0,r3
 1148 0036 FFF7FEFF 	 bl sqrtf
 1149 003a 0346     	 mov r3,r0
 1150 003c 7B65     	 str r3,[r7,#84]
 155:../variables.h **** }
 1151              	 .loc 4 155 0
 1152 003e BD46     	 mov sp,r7
 1153              	.LCFI66:
 1154              	 .cfi_def_cfa_register 13
 1155              	 
 1156 0040 BDE88040 	 pop {r7,lr}
 1157              	.LCFI67:
 1158              	 .cfi_restore 14
 1159              	 .cfi_restore 7
 1160              	 .cfi_def_cfa_offset 16
 1161 0044 04B0     	 add sp,sp,#16
 1162              	.LCFI68:
 1163              	 .cfi_def_cfa_offset 0
 1164 0046 7047     	 bx lr
 1165              	 .cfi_endproc
 1166              	.LFE368:
 1168              	 .global __aeabi_f2d
 1169              	 .global __aeabi_dmul
 1170              	 .global __aeabi_dsub
 1171              	 .global __aeabi_dadd
 1172              	 .global __aeabi_d2f
 1173              	 .section .text.Fk,"ax",%progbits
 1174              	 .align 2
 1175              	 .global Fk
 1176              	 .thumb
 1177              	 .thumb_func
 1179              	Fk:
 1180              	.LFB369:
 156:../variables.h **** void Fk(struct Noga n)
 157:../variables.h **** {
 1181              	 .loc 4 157 0
 1182              	 .cfi_startproc
 1183              	 
 1184              	 
 1185 0000 84B0     	 sub sp,sp,#16
 1186              	.LCFI69:
 1187              	 .cfi_def_cfa_offset 16
 1188 0002 2DE9B043 	 push {r4,r5,r7,r8,r9,lr}
 1189              	.LCFI70:
 1190              	 .cfi_def_cfa_offset 40
 1191              	 .cfi_offset 4,-40
 1192              	 .cfi_offset 5,-36
 1193              	 .cfi_offset 7,-32
 1194              	 .cfi_offset 8,-28
 1195              	 .cfi_offset 9,-24
 1196              	 .cfi_offset 14,-20
 1197 0006 2DED028B 	 fstmfdd sp!,{d8}
 1198              	.LCFI71:
 1199              	 .cfi_def_cfa_offset 48
 1200              	 .cfi_offset 80,-48
 1201              	 .cfi_offset 81,-44
 1202 000a 8AB0     	 sub sp,sp,#40
 1203              	.LCFI72:
 1204              	 .cfi_def_cfa_offset 88
 1205 000c 00AF     	 add r7,sp,#0
 1206              	.LCFI73:
 1207              	 .cfi_def_cfa_register 7
 1208 000e 07F14804 	 add r4,r7,#72
 1209 0012 84E80F00 	 stmia r4,{r0,r1,r2,r3}
 158:../variables.h **** 	float a = d + l1*(sinf(n.teta[1]) + sinf(n.teta[0])) ;
 1210              	 .loc 4 158 0
 1211 0016 D7F89030 	 ldr r3,[r7,#144]
 1212 001a 1846     	 mov r0,r3
 1213 001c FFF7FEFF 	 bl sinf
 1214 0020 08EE100A 	 fmsr s16,r0
 1215 0024 D7F88C30 	 ldr r3,[r7,#140]
 1216 0028 1846     	 mov r0,r3
 1217 002a FFF7FEFF 	 bl sinf
 1218 002e 07EE900A 	 fmsr s15,r0
 1219 0032 38EE277A 	 fadds s14,s16,s15
 1220 0036 6A4B     	 ldr r3,.L37
 1221 0038 D3ED007A 	 flds s15,[r3]
 1222 003c 27EE277A 	 fmuls s14,s14,s15
 1223 0040 684B     	 ldr r3,.L37+4
 1224 0042 D3ED007A 	 flds s15,[r3]
 1225 0046 77EE277A 	 fadds s15,s14,s15
 1226 004a C7ED097A 	 fsts s15,[r7,#36]
 159:../variables.h **** 	float b = l1 * (cosf(n.teta[1]) - cosf(n.teta[0]));
 1227              	 .loc 4 159 0
 1228 004e D7F89030 	 ldr r3,[r7,#144]
 1229 0052 1846     	 mov r0,r3
 1230 0054 FFF7FEFF 	 bl cosf
 1231 0058 08EE100A 	 fmsr s16,r0
 1232 005c D7F88C30 	 ldr r3,[r7,#140]
 1233 0060 1846     	 mov r0,r3
 1234 0062 FFF7FEFF 	 bl cosf
 1235 0066 07EE900A 	 fmsr s15,r0
 1236 006a 38EE677A 	 fsubs s14,s16,s15
 1237 006e 5C4B     	 ldr r3,.L37
 1238 0070 D3ED007A 	 flds s15,[r3]
 1239 0074 67EE277A 	 fmuls s15,s14,s15
 1240 0078 C7ED087A 	 fsts s15,[r7,#32]
 160:../variables.h **** 	float p = sqrtf(a*a + b*b);
 1241              	 .loc 4 160 0
 1242 007c 97ED097A 	 flds s14,[r7,#36]
 1243 0080 D7ED097A 	 flds s15,[r7,#36]
 1244 0084 27EE277A 	 fmuls s14,s14,s15
 1245 0088 D7ED086A 	 flds s13,[r7,#32]
 1246 008c D7ED087A 	 flds s15,[r7,#32]
 1247 0090 66EEA77A 	 fmuls s15,s13,s15
 1248 0094 77EE277A 	 fadds s15,s14,s15
 1249 0098 17EE900A 	 fmrs r0,s15
 1250 009c FFF7FEFF 	 bl sqrtf
 1251 00a0 F861     	 str r0,[r7,#28]
 161:../variables.h **** 	float fi = atan2f(b,a);
 1252              	 .loc 4 161 0
 1253 00a2 386A     	 ldr r0,[r7,#32]
 1254 00a4 796A     	 ldr r1,[r7,#36]
 1255 00a6 FFF7FEFF 	 bl atan2f
 1256 00aa B861     	 str r0,[r7,#24]
 162:../variables.h **** 	float theta = asinf(p / 2*l2);
 1257              	 .loc 4 162 0
 1258 00ac D7ED077A 	 flds s15,[r7,#28]
 1259 00b0 B0EE007A 	 fconsts s14,#0
 1260 00b4 87EE877A 	 fdivs s14,s15,s14
 1261 00b8 4B4B     	 ldr r3,.L37+8
 1262 00ba D3ED007A 	 flds s15,[r3]
 1263 00be 67EE277A 	 fmuls s15,s14,s15
 1264 00c2 17EE900A 	 fmrs r0,s15
 1265 00c6 FFF7FEFF 	 bl asinf
 1266 00ca 7861     	 str r0,[r7,#20]
 163:../variables.h **** 	float gamma = pi / 2 - theta;
 1267              	 .loc 4 163 0
 1268 00cc 474B     	 ldr r3,.L37+12
 1269 00ce D3ED007A 	 flds s15,[r3]
 1270 00d2 B0EE007A 	 fconsts s14,#0
 1271 00d6 87EE877A 	 fdivs s14,s15,s14
 1272 00da D7ED057A 	 flds s15,[r7,#20]
 1273 00de 77EE677A 	 fsubs s15,s14,s15
 1274 00e2 C7ED047A 	 fsts s15,[r7,#16]
 164:../variables.h **** 	float psi = gamma + fi;
 1275              	 .loc 4 164 0
 1276 00e6 97ED047A 	 flds s14,[r7,#16]
 1277 00ea D7ED067A 	 flds s15,[r7,#24]
 1278 00ee 77EE277A 	 fadds s15,s14,s15
 1279 00f2 C7ED037A 	 fsts s15,[r7,#12]
 165:../variables.h **** 	struct vec2 xy;
 166:../variables.h **** 	xy.x = d/2 - l1*sin(n.teta[0]) + l2*cosf(psi);
 1280              	 .loc 4 166 0
 1281 00f6 3B4B     	 ldr r3,.L37+4
 1282 00f8 D3ED007A 	 flds s15,[r3]
 1283 00fc B0EE007A 	 fconsts s14,#0
 1284 0100 C7EE877A 	 fdivs s15,s15,s14
 1285 0104 17EE900A 	 fmrs r0,s15
 1286 0108 FFF7FEFF 	 bl __aeabi_f2d
 1287 010c 0446     	 mov r4,r0
 1288 010e 0D46     	 mov r5,r1
 1289 0110 334B     	 ldr r3,.L37
 1290 0112 1B68     	 ldr r3,[r3]
 1291 0114 1846     	 mov r0,r3
 1292 0116 FFF7FEFF 	 bl __aeabi_f2d
 1293 011a 8046     	 mov r8,r0
 1294 011c 8946     	 mov r9,r1
 1295 011e D7F88C30 	 ldr r3,[r7,#140]
 1296 0122 1846     	 mov r0,r3
 1297 0124 FFF7FEFF 	 bl __aeabi_f2d
 1298 0128 0246     	 mov r2,r0
 1299 012a 0B46     	 mov r3,r1
 1300 012c 1046     	 mov r0,r2
 1301 012e 1946     	 mov r1,r3
 1302 0130 FFF7FEFF 	 bl sin
 1303 0134 0246     	 mov r2,r0
 1304 0136 0B46     	 mov r3,r1
 1305 0138 4046     	 mov r0,r8
 1306 013a 4946     	 mov r1,r9
 1307 013c FFF7FEFF 	 bl __aeabi_dmul
 1308 0140 0246     	 mov r2,r0
 1309 0142 0B46     	 mov r3,r1
 1310 0144 2046     	 mov r0,r4
 1311 0146 2946     	 mov r1,r5
 1312 0148 FFF7FEFF 	 bl __aeabi_dsub
 1313 014c 0246     	 mov r2,r0
 1314 014e 0B46     	 mov r3,r1
 1315 0150 1446     	 mov r4,r2
 1316 0152 1D46     	 mov r5,r3
 1317 0154 F868     	 ldr r0,[r7,#12]
 1318 0156 FFF7FEFF 	 bl cosf
 1319 015a 07EE100A 	 fmsr s14,r0
 1320 015e 224B     	 ldr r3,.L37+8
 1321 0160 D3ED007A 	 flds s15,[r3]
 1322 0164 67EE277A 	 fmuls s15,s14,s15
 1323 0168 17EE900A 	 fmrs r0,s15
 1324 016c FFF7FEFF 	 bl __aeabi_f2d
 1325 0170 0246     	 mov r2,r0
 1326 0172 0B46     	 mov r3,r1
 1327 0174 2046     	 mov r0,r4
 1328 0176 2946     	 mov r1,r5
 1329 0178 FFF7FEFF 	 bl __aeabi_dadd
 1330 017c 0246     	 mov r2,r0
 1331 017e 0B46     	 mov r3,r1
 1332 0180 1046     	 mov r0,r2
 1333 0182 1946     	 mov r1,r3
 1334 0184 FFF7FEFF 	 bl __aeabi_d2f
 1335 0188 0346     	 mov r3,r0
 1336 018a 7B60     	 str r3,[r7,#4]
 167:../variables.h **** 	xy.y = l1*cosf(n.teta[0]) + l2* cosf(psi);
 1337              	 .loc 4 167 0
 1338 018c D7F88C30 	 ldr r3,[r7,#140]
 1339 0190 1846     	 mov r0,r3
 1340 0192 FFF7FEFF 	 bl cosf
 1341 0196 07EE100A 	 fmsr s14,r0
 1342 019a 114B     	 ldr r3,.L37
 1343 019c D3ED007A 	 flds s15,[r3]
 1344 01a0 27EE278A 	 fmuls s16,s14,s15
 1345 01a4 F868     	 ldr r0,[r7,#12]
 1346 01a6 FFF7FEFF 	 bl cosf
 1347 01aa 07EE100A 	 fmsr s14,r0
 1348 01ae 0E4B     	 ldr r3,.L37+8
 1349 01b0 D3ED007A 	 flds s15,[r3]
 1350 01b4 67EE277A 	 fmuls s15,s14,s15
 1351 01b8 78EE277A 	 fadds s15,s16,s15
 1352 01bc C7ED027A 	 fsts s15,[r7,#8]
 168:../variables.h **** 	stanowisko.stopa = xy;
 1353              	 .loc 4 168 0
 1354 01c0 0B4B     	 ldr r3,.L37+16
 1355 01c2 3C33     	 adds r3,r3,#60
 1356 01c4 3A1D     	 adds r2,r7,#4
 1357 01c6 92E80300 	 ldmia r2,{r0,r1}
 1358 01ca 83E80300 	 stmia r3,{r0,r1}
 169:../variables.h **** }
 1359              	 .loc 4 169 0
 1360 01ce 2837     	 adds r7,r7,#40
 1361              	.LCFI74:
 1362              	 .cfi_def_cfa_offset 48
 1363 01d0 BD46     	 mov sp,r7
 1364              	.LCFI75:
 1365              	 .cfi_def_cfa_register 13
 1366              	 
 1367 01d2 BDEC028B 	 fldmfdd sp!,{d8}
 1368              	.LCFI76:
 1369              	 .cfi_restore 80
 1370              	 .cfi_restore 81
 1371              	 .cfi_def_cfa_offset 40
 1372 01d6 BDE8B043 	 pop {r4,r5,r7,r8,r9,lr}
 1373              	.LCFI77:
 1374              	 .cfi_restore 14
 1375              	 .cfi_restore 9
 1376              	 .cfi_restore 8
 1377              	 .cfi_restore 7
 1378              	 .cfi_restore 5
 1379              	 .cfi_restore 4
 1380              	 .cfi_def_cfa_offset 16
 1381 01da 04B0     	 add sp,sp,#16
 1382              	.LCFI78:
 1383              	 .cfi_def_cfa_offset 0
 1384 01dc 7047     	 bx lr
 1385              	.L38:
 1386 01de 00BF     	 .align 2
 1387              	.L37:
 1388 01e0 00000000 	 .word l1
 1389 01e4 00000000 	 .word d
 1390 01e8 00000000 	 .word l2
 1391 01ec 00000000 	 .word pi
 1392 01f0 00000000 	 .word stanowisko
 1393              	 .cfi_endproc
 1394              	.LFE369:
 1396              	 .section .text.Trajektoria,"ax",%progbits
 1397              	 .align 2
 1398              	 .global Trajektoria
 1399              	 .thumb
 1400              	 .thumb_func
 1402              	Trajektoria:
 1403              	.LFB370:
 170:../variables.h **** 
 171:../variables.h **** void Trajektoria()
 172:../variables.h **** {
 1404              	 .loc 4 172 0
 1405              	 .cfi_startproc
 1406              	 
 1407              	 
 1408              	 
 1409 0000 80B4     	 push {r7}
 1410              	.LCFI79:
 1411              	 .cfi_def_cfa_offset 4
 1412              	 .cfi_offset 7,-4
 1413 0002 00AF     	 add r7,sp,#0
 1414              	.LCFI80:
 1415              	 .cfi_def_cfa_register 7
 173:../variables.h **** 	//x = 30*cosf(t);
 174:../variables.h **** 	//y = 130 - 30*sinf(t);
 175:../variables.h **** }
 1416              	 .loc 4 175 0
 1417 0004 BD46     	 mov sp,r7
 1418              	.LCFI81:
 1419              	 .cfi_def_cfa_register 13
 1420              	 
 1421 0006 5DF8047B 	 ldr r7,[sp],#4
 1422              	.LCFI82:
 1423              	 .cfi_restore 7
 1424              	 .cfi_def_cfa_offset 0
 1425 000a 7047     	 bx lr
 1426              	 .cfi_endproc
 1427              	.LFE370:
 1429              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1430              	 .align 2
 1431              	 .global CCU43_1_IRQHandler
 1432              	 .thumb
 1433              	 .thumb_func
 1435              	CCU43_1_IRQHandler:
 1436              	.LFB371:
 176:../variables.h **** 
 177:../variables.h **** void TIMER_IRQ()
 178:../variables.h **** {
 1437              	 .loc 4 178 0
 1438              	 .cfi_startproc
 1439              	 
 1440              	 
 1441              	 
 1442 0000 80B4     	 push {r7}
 1443              	.LCFI83:
 1444              	 .cfi_def_cfa_offset 4
 1445              	 .cfi_offset 7,-4
 1446 0002 00AF     	 add r7,sp,#0
 1447              	.LCFI84:
 1448              	 .cfi_def_cfa_register 7
 179:../variables.h **** 	is_delay = 0;
 1449              	 .loc 4 179 0
 1450 0004 034B     	 ldr r3,.L41
 1451 0006 0022     	 movs r2,#0
 1452 0008 1A70     	 strb r2,[r3]
 180:../variables.h **** }
 1453              	 .loc 4 180 0
 1454 000a BD46     	 mov sp,r7
 1455              	.LCFI85:
 1456              	 .cfi_def_cfa_register 13
 1457              	 
 1458 000c 5DF8047B 	 ldr r7,[sp],#4
 1459              	.LCFI86:
 1460              	 .cfi_restore 7
 1461              	 .cfi_def_cfa_offset 0
 1462 0010 7047     	 bx lr
 1463              	.L42:
 1464 0012 00BF     	 .align 2
 1465              	.L41:
 1466 0014 00000000 	 .word is_delay
 1467              	 .cfi_endproc
 1468              	.LFE371:
 1470              	 .global init
 1471              	 .section .bss.init,"aw",%nobits
 1472              	 .align 2
 1475              	init:
 1476 0000 00000000 	 .space 4
 1477              	 .global skokz
 1478              	 .section .bss.skokz,"aw",%nobits
 1479              	 .align 1
 1482              	skokz:
 1483 0000 0000     	 .space 2
 1484              	 .section .text.skok,"ax",%progbits
 1485              	 .align 2
 1486              	 .global skok
 1487              	 .thumb
 1488              	 .thumb_func
 1490              	skok:
 1491              	.LFB372:
 1492              	 .file 5 "../main.c"
   1:../main.c     **** 
   2:../main.c     **** #include <DAVE.h>
   3:../main.c     **** #include <math.h>
   4:../main.c     **** #include "variables.h"
   5:../main.c     **** 
   6:../main.c     **** int XMC_Init();
   7:../main.c     **** void XMC_Check();
   8:../main.c     **** void wyslij(uint8_t);
   9:../main.c     **** void wyslij_noga(struct Noga);
  10:../main.c     **** void interpreter_wiadomosci();
  11:../main.c     **** void SYS1(void);
  12:../main.c     **** int init = 0;
  13:../main.c     **** uint16_t  skokz = 0;
  14:../main.c     **** void skok()
  15:../main.c     **** {
 1493              	 .loc 5 15 0
 1494              	 .cfi_startproc
 1495              	 
 1496              	 
 1497              	 
 1498 0000 80B4     	 push {r7}
 1499              	.LCFI87:
 1500              	 .cfi_def_cfa_offset 4
 1501              	 .cfi_offset 7,-4
 1502 0002 00AF     	 add r7,sp,#0
 1503              	.LCFI88:
 1504              	 .cfi_def_cfa_register 7
  16:../main.c     **** 	  if(skokz > 1)
 1505              	 .loc 5 16 0
 1506 0004 074B     	 ldr r3,.L46
 1507 0006 1B88     	 ldrh r3,[r3]
 1508 0008 012B     	 cmp r3,#1
 1509 000a 03D9     	 bls .L44
  17:../main.c     **** 		  stanowisko.stopa.y= 250;
 1510              	 .loc 5 17 0
 1511 000c 064B     	 ldr r3,.L46+4
 1512 000e 074A     	 ldr r2,.L46+8
 1513 0010 1A64     	 str r2,[r3,#64]
 1514 0012 02E0     	 b .L43
 1515              	.L44:
  18:../main.c     **** 	  else
  19:../main.c     **** 		  stanowisko.stopa.y =110;
 1516              	 .loc 5 19 0
 1517 0014 044B     	 ldr r3,.L46+4
 1518 0016 064A     	 ldr r2,.L46+12
 1519 0018 1A64     	 str r2,[r3,#64]
 1520              	.L43:
  20:../main.c     **** }
 1521              	 .loc 5 20 0
 1522 001a BD46     	 mov sp,r7
 1523              	.LCFI89:
 1524              	 .cfi_def_cfa_register 13
 1525              	 
 1526 001c 5DF8047B 	 ldr r7,[sp],#4
 1527              	.LCFI90:
 1528              	 .cfi_restore 7
 1529              	 .cfi_def_cfa_offset 0
 1530 0020 7047     	 bx lr
 1531              	.L47:
 1532 0022 00BF     	 .align 2
 1533              	.L46:
 1534 0024 00000000 	 .word skokz
 1535 0028 00000000 	 .word stanowisko
 1536 002c 00007A43 	 .word 1132068864
 1537 0030 0000DC42 	 .word 1121714176
 1538              	 .cfi_endproc
 1539              	.LFE372:
 1541              	 .section .text.main,"ax",%progbits
 1542              	 .align 2
 1543              	 .global main
 1544              	 .thumb
 1545              	 .thumb_func
 1547              	main:
 1548              	.LFB373:
  21:../main.c     **** int main(void)
  22:../main.c     **** {
 1549              	 .loc 5 22 0
 1550              	 .cfi_startproc
 1551              	 
 1552              	 
 1553 0000 80B5     	 push {r7,lr}
 1554              	.LCFI91:
 1555              	 .cfi_def_cfa_offset 8
 1556              	 .cfi_offset 7,-8
 1557              	 .cfi_offset 14,-4
 1558 0002 82B0     	 sub sp,sp,#8
 1559              	.LCFI92:
 1560              	 .cfi_def_cfa_offset 16
 1561 0004 00AF     	 add r7,sp,#0
 1562              	.LCFI93:
 1563              	 .cfi_def_cfa_register 7
  23:../main.c     ****   DAVE_STATUS_t status;
  24:../main.c     ****   status = DAVE_Init();
 1564              	 .loc 5 24 0
 1565 0006 FFF7FEFF 	 bl DAVE_Init
 1566 000a 0346     	 mov r3,r0
 1567 000c FB71     	 strb r3,[r7,#7]
  25:../main.c     ****  while(init == 0);
 1568              	 .loc 5 25 0
 1569 000e 00BF     	 nop
 1570              	.L49:
 1571              	 .loc 5 25 0 is_stmt 0 discriminator 1
 1572 0010 0D4B     	 ldr r3,.L51
 1573 0012 1B68     	 ldr r3,[r3]
 1574 0014 002B     	 cmp r3,#0
 1575 0016 FBD0     	 beq .L49
  26:../main.c     ****   Init();
 1576              	 .loc 5 26 0 is_stmt 1
 1577 0018 FFF7FEFF 	 bl Init
  27:../main.c     ****   delay(2500);
 1578              	 .loc 5 27 0
 1579 001c 40F6C410 	 movw r0,#2500
 1580 0020 FFF7FEFF 	 bl delay
  28:../main.c     ****   XMC_Check();
 1581              	 .loc 5 28 0
 1582 0024 FFF7FEFF 	 bl XMC_Check
  29:../main.c     ****   XMC_Init();
 1583              	 .loc 5 29 0
 1584 0028 FFF7FEFF 	 bl XMC_Init
  30:../main.c     ****   XMC_Check();
 1585              	 .loc 5 30 0
 1586 002c FFF7FEFF 	 bl XMC_Check
 1587              	.L50:
  31:../main.c     **** 
  32:../main.c     **** 
  33:../main.c     ****   while(1)
  34:../main.c     ****   {
  35:../main.c     **** 
  36:../main.c     **** 	  FK_Circle();
 1588              	 .loc 5 36 0 discriminator 1
 1589 0030 FFF7FEFF 	 bl FK_Circle
  37:../main.c     **** 	  //skok();
  38:../main.c     **** 	  update();
 1590              	 .loc 5 38 0 discriminator 1
 1591 0034 FFF7FEFF 	 bl update
  39:../main.c     **** 	  Spring();
 1592              	 .loc 5 39 0 discriminator 1
 1593 0038 FFF7FEFF 	 bl Spring
  40:../main.c     **** 	  delay(2000);
 1594              	 .loc 5 40 0 discriminator 1
 1595 003c 4FF4FA60 	 mov r0,#2000
 1596 0040 FFF7FEFF 	 bl delay
  41:../main.c     **** 
  42:../main.c     ****   }
 1597              	 .loc 5 42 0 discriminator 1
 1598 0044 F4E7     	 b .L50
 1599              	.L52:
 1600 0046 00BF     	 .align 2
 1601              	.L51:
 1602 0048 00000000 	 .word init
 1603              	 .cfi_endproc
 1604              	.LFE373:
 1606              	 .section .text.XMC_Init,"ax",%progbits
 1607              	 .align 2
 1608              	 .global XMC_Init
 1609              	 .thumb
 1610              	 .thumb_func
 1612              	XMC_Init:
 1613              	.LFB374:
  43:../main.c     **** }
  44:../main.c     **** 
  45:../main.c     **** int XMC_Init()
  46:../main.c     **** {
 1614              	 .loc 5 46 0
 1615              	 .cfi_startproc
 1616              	 
 1617              	 
 1618 0000 80B5     	 push {r7,lr}
 1619              	.LCFI94:
 1620              	 .cfi_def_cfa_offset 8
 1621              	 .cfi_offset 7,-8
 1622              	 .cfi_offset 14,-4
 1623 0002 82B0     	 sub sp,sp,#8
 1624              	.LCFI95:
 1625              	 .cfi_def_cfa_offset 16
 1626 0004 00AF     	 add r7,sp,#0
 1627              	.LCFI96:
 1628              	 .cfi_def_cfa_register 7
  47:../main.c     **** 	init = 1;
 1629              	 .loc 5 47 0
 1630 0006 114B     	 ldr r3,.L57
 1631 0008 0122     	 movs r2,#1
 1632 000a 1A60     	 str r2,[r3]
 1633              	.LBB3:
  48:../main.c     **** 	for(uint8_t i = 0; i < 8; i++)
 1634              	 .loc 5 48 0
 1635 000c 0023     	 movs r3,#0
 1636 000e FB71     	 strb r3,[r7,#7]
 1637 0010 14E0     	 b .L54
 1638              	.L55:
  49:../main.c     **** 	{
  50:../main.c     **** 		txData[1] = 0x10 + i;
 1639              	 .loc 5 50 0 discriminator 3
 1640 0012 FB79     	 ldrb r3,[r7,#7]
 1641 0014 1033     	 adds r3,r3,#16
 1642 0016 DAB2     	 uxtb r2,r3
 1643 0018 0D4B     	 ldr r3,.L57+4
 1644 001a 5A70     	 strb r2,[r3,#1]
  51:../main.c     **** 		txData[2] = 0xA1;
 1645              	 .loc 5 51 0 discriminator 3
 1646 001c 0C4B     	 ldr r3,.L57+4
 1647 001e A122     	 movs r2,#161
 1648 0020 9A70     	 strb r2,[r3,#2]
  52:../main.c     **** 		txData[3] = EOF;
 1649              	 .loc 5 52 0 discriminator 3
 1650 0022 0B4B     	 ldr r3,.L57+4
 1651 0024 DD22     	 movs r2,#221
 1652 0026 DA70     	 strb r2,[r3,#3]
  53:../main.c     **** 		wyslij(4);
 1653              	 .loc 5 53 0 discriminator 3
 1654 0028 0420     	 movs r0,#4
 1655 002a FFF7FEFF 	 bl wyslij
  54:../main.c     **** 		delay(300);
 1656              	 .loc 5 54 0 discriminator 3
 1657 002e 4FF49670 	 mov r0,#300
 1658 0032 FFF7FEFF 	 bl delay
  48:../main.c     **** 	{
 1659              	 .loc 5 48 0 discriminator 3
 1660 0036 FB79     	 ldrb r3,[r7,#7]
 1661 0038 0133     	 adds r3,r3,#1
 1662 003a FB71     	 strb r3,[r7,#7]
 1663              	.L54:
  48:../main.c     **** 	{
 1664              	 .loc 5 48 0 is_stmt 0 discriminator 1
 1665 003c FB79     	 ldrb r3,[r7,#7]
 1666 003e 072B     	 cmp r3,#7
 1667 0040 E7D9     	 bls .L55
 1668              	.LBE3:
  55:../main.c     **** 	}
  56:../main.c     **** 	return 0;
 1669              	 .loc 5 56 0 is_stmt 1
 1670 0042 0023     	 movs r3,#0
  57:../main.c     **** }
 1671              	 .loc 5 57 0
 1672 0044 1846     	 mov r0,r3
 1673 0046 0837     	 adds r7,r7,#8
 1674              	.LCFI97:
 1675              	 .cfi_def_cfa_offset 8
 1676 0048 BD46     	 mov sp,r7
 1677              	.LCFI98:
 1678              	 .cfi_def_cfa_register 13
 1679              	 
 1680 004a 80BD     	 pop {r7,pc}
 1681              	.L58:
 1682              	 .align 2
 1683              	.L57:
 1684 004c 00000000 	 .word init
 1685 0050 00000000 	 .word txData
 1686              	 .cfi_endproc
 1687              	.LFE374:
 1689              	 .section .text.XMC_Check,"ax",%progbits
 1690              	 .align 2
 1691              	 .global XMC_Check
 1692              	 .thumb
 1693              	 .thumb_func
 1695              	XMC_Check:
 1696              	.LFB375:
  58:../main.c     **** void XMC_Check()
  59:../main.c     **** {
 1697              	 .loc 5 59 0
 1698              	 .cfi_startproc
 1699              	 
 1700              	 
 1701 0000 80B5     	 push {r7,lr}
 1702              	.LCFI99:
 1703              	 .cfi_def_cfa_offset 8
 1704              	 .cfi_offset 7,-8
 1705              	 .cfi_offset 14,-4
 1706 0002 82B0     	 sub sp,sp,#8
 1707              	.LCFI100:
 1708              	 .cfi_def_cfa_offset 16
 1709 0004 00AF     	 add r7,sp,#0
 1710              	.LCFI101:
 1711              	 .cfi_def_cfa_register 7
 1712              	.LBB4:
  60:../main.c     **** 	for(uint8_t i = 0; i < 8; i++)
 1713              	 .loc 5 60 0
 1714 0006 0023     	 movs r3,#0
 1715 0008 FB71     	 strb r3,[r7,#7]
 1716 000a 1AE0     	 b .L60
 1717              	.L61:
  61:../main.c     **** 	{
  62:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&LED1);
 1718              	 .loc 5 62 0 discriminator 3
 1719 000c 1048     	 ldr r0,.L62
 1720 000e FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
  63:../main.c     **** 		txData[1] = 0x10 + i;
 1721              	 .loc 5 63 0 discriminator 3
 1722 0012 FB79     	 ldrb r3,[r7,#7]
 1723 0014 1033     	 adds r3,r3,#16
 1724 0016 DAB2     	 uxtb r2,r3
 1725 0018 0E4B     	 ldr r3,.L62+4
 1726 001a 5A70     	 strb r2,[r3,#1]
  64:../main.c     **** 		txData[2] = 0xA3;
 1727              	 .loc 5 64 0 discriminator 3
 1728 001c 0D4B     	 ldr r3,.L62+4
 1729 001e A322     	 movs r2,#163
 1730 0020 9A70     	 strb r2,[r3,#2]
  65:../main.c     **** 		txData[3] = EOF;
 1731              	 .loc 5 65 0 discriminator 3
 1732 0022 0C4B     	 ldr r3,.L62+4
 1733 0024 DD22     	 movs r2,#221
 1734 0026 DA70     	 strb r2,[r3,#3]
  66:../main.c     **** 		wyslij(4);
 1735              	 .loc 5 66 0 discriminator 3
 1736 0028 0420     	 movs r0,#4
 1737 002a FFF7FEFF 	 bl wyslij
  67:../main.c     **** 		delay(300);
 1738              	 .loc 5 67 0 discriminator 3
 1739 002e 4FF49670 	 mov r0,#300
 1740 0032 FFF7FEFF 	 bl delay
  68:../main.c     **** 		DIGITAL_IO_SetOutputLow((&LED1));
 1741              	 .loc 5 68 0 discriminator 3
 1742 0036 0648     	 ldr r0,.L62
 1743 0038 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
  60:../main.c     **** 	{
 1744              	 .loc 5 60 0 discriminator 3
 1745 003c FB79     	 ldrb r3,[r7,#7]
 1746 003e 0133     	 adds r3,r3,#1
 1747 0040 FB71     	 strb r3,[r7,#7]
 1748              	.L60:
  60:../main.c     **** 	{
 1749              	 .loc 5 60 0 is_stmt 0 discriminator 1
 1750 0042 FB79     	 ldrb r3,[r7,#7]
 1751 0044 072B     	 cmp r3,#7
 1752 0046 E1D9     	 bls .L61
 1753              	.LBE4:
  69:../main.c     **** 	}
  70:../main.c     **** }
 1754              	 .loc 5 70 0 is_stmt 1
 1755 0048 0837     	 adds r7,r7,#8
 1756              	.LCFI102:
 1757              	 .cfi_def_cfa_offset 8
 1758 004a BD46     	 mov sp,r7
 1759              	.LCFI103:
 1760              	 .cfi_def_cfa_register 13
 1761              	 
 1762 004c 80BD     	 pop {r7,pc}
 1763              	.L63:
 1764 004e 00BF     	 .align 2
 1765              	.L62:
 1766 0050 00000000 	 .word LED1
 1767 0054 00000000 	 .word txData
 1768              	 .cfi_endproc
 1769              	.LFE375:
 1771              	 .section .text.eorx,"ax",%progbits
 1772              	 .align 2
 1773              	 .global eorx
 1774              	 .thumb
 1775              	 .thumb_func
 1777              	eorx:
 1778              	.LFB376:
  71:../main.c     **** void eorx()
  72:../main.c     **** {
 1779              	 .loc 5 72 0
 1780              	 .cfi_startproc
 1781              	 
 1782              	 
 1783 0000 80B5     	 push {r7,lr}
 1784              	.LCFI104:
 1785              	 .cfi_def_cfa_offset 8
 1786              	 .cfi_offset 7,-8
 1787              	 .cfi_offset 14,-4
 1788 0002 00AF     	 add r7,sp,#0
 1789              	.LCFI105:
 1790              	 .cfi_def_cfa_register 7
  73:../main.c     **** 
  74:../main.c     **** 	if(rxByte == SOF)
 1791              	 .loc 5 74 0
 1792 0004 1A4B     	 ldr r3,.L68
 1793 0006 1B78     	 ldrb r3,[r3]
 1794 0008 CC2B     	 cmp r3,#204
 1795 000a 07D1     	 bne .L65
  75:../main.c     **** 	{
  76:../main.c     **** 		rxData[0] = rxByte;
 1796              	 .loc 5 76 0
 1797 000c 184B     	 ldr r3,.L68
 1798 000e 1A78     	 ldrb r2,[r3]
 1799 0010 184B     	 ldr r3,.L68+4
 1800 0012 1A70     	 strb r2,[r3]
  77:../main.c     **** 		iterator_wiadomosci = 1;
 1801              	 .loc 5 77 0
 1802 0014 184B     	 ldr r3,.L68+8
 1803 0016 0122     	 movs r2,#1
 1804 0018 1A70     	 strb r2,[r3]
 1805 001a 23E0     	 b .L66
 1806              	.L65:
  78:../main.c     **** 	}
  79:../main.c     **** 	else if (rxByte == EOF)
 1807              	 .loc 5 79 0
 1808 001c 144B     	 ldr r3,.L68
 1809 001e 1B78     	 ldrb r3,[r3]
 1810 0020 DD2B     	 cmp r3,#221
 1811 0022 0ED1     	 bne .L67
  80:../main.c     **** 	{
  81:../main.c     **** 		rxData[iterator_wiadomosci +1] = EOF;
 1812              	 .loc 5 81 0
 1813 0024 144B     	 ldr r3,.L68+8
 1814 0026 1B78     	 ldrb r3,[r3]
 1815 0028 0133     	 adds r3,r3,#1
 1816 002a 124A     	 ldr r2,.L68+4
 1817 002c DD21     	 movs r1,#221
 1818 002e D154     	 strb r1,[r2,r3]
  82:../main.c     **** 		iterator_wiadomosci++;
 1819              	 .loc 5 82 0
 1820 0030 114B     	 ldr r3,.L68+8
 1821 0032 1B78     	 ldrb r3,[r3]
 1822 0034 0133     	 adds r3,r3,#1
 1823 0036 DAB2     	 uxtb r2,r3
 1824 0038 0F4B     	 ldr r3,.L68+8
 1825 003a 1A70     	 strb r2,[r3]
  83:../main.c     **** 		interpreter_wiadomosci();
 1826              	 .loc 5 83 0
 1827 003c FFF7FEFF 	 bl interpreter_wiadomosci
 1828 0040 10E0     	 b .L66
 1829              	.L67:
  84:../main.c     **** 	}
  85:../main.c     **** 	else if ( iterator_wiadomosci < 9)
 1830              	 .loc 5 85 0
 1831 0042 0D4B     	 ldr r3,.L68+8
 1832 0044 1B78     	 ldrb r3,[r3]
 1833 0046 082B     	 cmp r3,#8
 1834 0048 0CD8     	 bhi .L66
  86:../main.c     **** 	{
  87:../main.c     **** 		rxData[iterator_wiadomosci] =rxByte;
 1835              	 .loc 5 87 0
 1836 004a 0B4B     	 ldr r3,.L68+8
 1837 004c 1B78     	 ldrb r3,[r3]
 1838 004e 1A46     	 mov r2,r3
 1839 0050 074B     	 ldr r3,.L68
 1840 0052 1978     	 ldrb r1,[r3]
 1841 0054 074B     	 ldr r3,.L68+4
 1842 0056 9954     	 strb r1,[r3,r2]
  88:../main.c     **** 		iterator_wiadomosci++;
 1843              	 .loc 5 88 0
 1844 0058 074B     	 ldr r3,.L68+8
 1845 005a 1B78     	 ldrb r3,[r3]
 1846 005c 0133     	 adds r3,r3,#1
 1847 005e DAB2     	 uxtb r2,r3
 1848 0060 054B     	 ldr r3,.L68+8
 1849 0062 1A70     	 strb r2,[r3]
 1850              	.L66:
  89:../main.c     **** 	}
  90:../main.c     **** 	UART_Receive(&RS, &rxByte,1);
 1851              	 .loc 5 90 0
 1852 0064 0548     	 ldr r0,.L68+12
 1853 0066 0249     	 ldr r1,.L68
 1854 0068 0122     	 movs r2,#1
 1855 006a FFF7FEFF 	 bl UART_Receive
  91:../main.c     **** }
 1856              	 .loc 5 91 0
 1857 006e 80BD     	 pop {r7,pc}
 1858              	.L69:
 1859              	 .align 2
 1860              	.L68:
 1861 0070 00000000 	 .word rxByte
 1862 0074 00000000 	 .word rxData
 1863 0078 00000000 	 .word iterator_wiadomosci
 1864 007c 00000000 	 .word RS
 1865              	 .cfi_endproc
 1866              	.LFE376:
 1868              	 .section .text.eotx,"ax",%progbits
 1869              	 .align 2
 1870              	 .global eotx
 1871              	 .thumb
 1872              	 .thumb_func
 1874              	eotx:
 1875              	.LFB377:
  92:../main.c     **** void eotx()
  93:../main.c     **** {
 1876              	 .loc 5 93 0
 1877              	 .cfi_startproc
 1878              	 
 1879              	 
 1880              	 
 1881 0000 80B4     	 push {r7}
 1882              	.LCFI106:
 1883              	 .cfi_def_cfa_offset 4
 1884              	 .cfi_offset 7,-4
 1885 0002 00AF     	 add r7,sp,#0
 1886              	.LCFI107:
 1887              	 .cfi_def_cfa_register 7
  94:../main.c     **** 
  95:../main.c     **** }
 1888              	 .loc 5 95 0
 1889 0004 BD46     	 mov sp,r7
 1890              	.LCFI108:
 1891              	 .cfi_def_cfa_register 13
 1892              	 
 1893 0006 5DF8047B 	 ldr r7,[sp],#4
 1894              	.LCFI109:
 1895              	 .cfi_restore 7
 1896              	 .cfi_def_cfa_offset 0
 1897 000a 7047     	 bx lr
 1898              	 .cfi_endproc
 1899              	.LFE377:
 1901              	 .section .text.interpreter_wiadomosci,"ax",%progbits
 1902              	 .align 2
 1903              	 .global interpreter_wiadomosci
 1904              	 .thumb
 1905              	 .thumb_func
 1907              	interpreter_wiadomosci:
 1908              	.LFB378:
  96:../main.c     **** void interpreter_wiadomosci()
  97:../main.c     **** {
 1909              	 .loc 5 97 0
 1910              	 .cfi_startproc
 1911              	 
 1912              	 
 1913              	 
 1914 0000 80B4     	 push {r7}
 1915              	.LCFI110:
 1916              	 .cfi_def_cfa_offset 4
 1917              	 .cfi_offset 7,-4
 1918 0002 83B0     	 sub sp,sp,#12
 1919              	.LCFI111:
 1920              	 .cfi_def_cfa_offset 16
 1921 0004 00AF     	 add r7,sp,#0
 1922              	.LCFI112:
 1923              	 .cfi_def_cfa_register 7
  98:../main.c     **** 
  99:../main.c     **** 	if(rxData[0] == SOF && rxData[1] == adress)
 1924              	 .loc 5 99 0
 1925 0006 294B     	 ldr r3,.L75
 1926 0008 1B78     	 ldrb r3,[r3]
 1927 000a CC2B     	 cmp r3,#204
 1928 000c 49D1     	 bne .L71
 1929              	 .loc 5 99 0 is_stmt 0 discriminator 1
 1930 000e 274B     	 ldr r3,.L75
 1931 0010 5A78     	 ldrb r2,[r3,#1]
 1932 0012 274B     	 ldr r3,.L75+4
 1933 0014 1B78     	 ldrb r3,[r3]
 1934 0016 9A42     	 cmp r2,r3
 1935 0018 43D1     	 bne .L71
 1936              	.LBB5:
 100:../main.c     **** 	{
 101:../main.c     **** 		uint8_t numer_silnika;
 102:../main.c     **** 		numer_silnika = rxData[2] - 0x10;
 1937              	 .loc 5 102 0 is_stmt 1
 1938 001a 244B     	 ldr r3,.L75
 1939 001c 9B78     	 ldrb r3,[r3,#2]
 1940 001e 103B     	 subs r3,r3,#16
 1941 0020 FB71     	 strb r3,[r7,#7]
 103:../main.c     **** 		if(rxData[3] == INIT)
 1942              	 .loc 5 103 0
 1943 0022 224B     	 ldr r3,.L75
 1944 0024 DB78     	 ldrb r3,[r3,#3]
 1945 0026 A12B     	 cmp r3,#161
 1946 0028 07D1     	 bne .L73
 104:../main.c     **** 			stanowisko.silnik_start[numer_silnika] = rxData[4];
 1947              	 .loc 5 104 0
 1948 002a FB79     	 ldrb r3,[r7,#7]
 1949 002c 1F4A     	 ldr r2,.L75
 1950 002e 1179     	 ldrb r1,[r2,#4]
 1951 0030 204A     	 ldr r2,.L75+8
 1952 0032 1344     	 add r3,r3,r2
 1953 0034 0A46     	 mov r2,r1
 1954 0036 9A70     	 strb r2,[r3,#2]
 1955 0038 33E0     	 b .L71
 1956              	.L73:
 105:../main.c     **** 		else if(rxData[3] == CHECK)
 1957              	 .loc 5 105 0
 1958 003a 1C4B     	 ldr r3,.L75
 1959 003c DB78     	 ldrb r3,[r3,#3]
 1960 003e A32B     	 cmp r3,#163
 1961 0040 0CD1     	 bne .L74
 106:../main.c     **** 		{
 107:../main.c     **** 			stanowisko.silnik_start[numer_silnika] = rxData[4];
 1962              	 .loc 5 107 0
 1963 0042 FB79     	 ldrb r3,[r7,#7]
 1964 0044 194A     	 ldr r2,.L75
 1965 0046 1179     	 ldrb r1,[r2,#4]
 1966 0048 1A4A     	 ldr r2,.L75+8
 1967 004a 1344     	 add r3,r3,r2
 1968 004c 0A46     	 mov r2,r1
 1969 004e 9A70     	 strb r2,[r3,#2]
 108:../main.c     **** 			stanowisko.silnik_numer[numer_silnika] = rxData[5];
 1970              	 .loc 5 108 0
 1971 0050 FB79     	 ldrb r3,[r7,#7]
 1972 0052 164A     	 ldr r2,.L75
 1973 0054 5179     	 ldrb r1,[r2,#5]
 1974 0056 174A     	 ldr r2,.L75+8
 1975 0058 D154     	 strb r1,[r2,r3]
 1976 005a 22E0     	 b .L71
 1977              	.L74:
 109:../main.c     **** 		}
 110:../main.c     **** 		else
 111:../main.c     **** 		{
 112:../main.c     **** 			stanowisko.i_net[numer_silnika] =rxData[3] << 8 | rxData[4];
 1978              	 .loc 5 112 0
 1979 005c FB79     	 ldrb r3,[r7,#7]
 1980 005e 134A     	 ldr r2,.L75
 1981 0060 D278     	 ldrb r2,[r2,#3]
 1982 0062 1202     	 lsls r2,r2,#8
 1983 0064 91B2     	 uxth r1,r2
 1984 0066 114A     	 ldr r2,.L75
 1985 0068 1279     	 ldrb r2,[r2,#4]
 1986 006a 92B2     	 uxth r2,r2
 1987 006c 0A43     	 orrs r2,r2,r1
 1988 006e 91B2     	 uxth r1,r2
 1989 0070 104A     	 ldr r2,.L75+8
 1990 0072 5B00     	 lsls r3,r3,#1
 1991 0074 1344     	 add r3,r3,r2
 1992 0076 0A46     	 mov r2,r1
 1993 0078 DA80     	 strh r2,[r3,#6]
 113:../main.c     **** 			stanowisko.kat_abs[numer_silnika] = rxData[5] << 24 | rxData[6] << 16 | rxData[7] << 8 | rxData[
 1994              	 .loc 5 113 0
 1995 007a FB79     	 ldrb r3,[r7,#7]
 1996 007c 0B4A     	 ldr r2,.L75
 1997 007e 5279     	 ldrb r2,[r2,#5]
 1998 0080 1106     	 lsls r1,r2,#24
 1999 0082 0A4A     	 ldr r2,.L75
 2000 0084 9279     	 ldrb r2,[r2,#6]
 2001 0086 1204     	 lsls r2,r2,#16
 2002 0088 1143     	 orrs r1,r1,r2
 2003 008a 084A     	 ldr r2,.L75
 2004 008c D279     	 ldrb r2,[r2,#7]
 2005 008e 1202     	 lsls r2,r2,#8
 2006 0090 0A43     	 orrs r2,r2,r1
 2007 0092 0649     	 ldr r1,.L75
 2008 0094 097A     	 ldrb r1,[r1,#8]
 2009 0096 0A43     	 orrs r2,r2,r1
 2010 0098 0649     	 ldr r1,.L75+8
 2011 009a 0233     	 adds r3,r3,#2
 2012 009c 9B00     	 lsls r3,r3,#2
 2013 009e 0B44     	 add r3,r3,r1
 2014 00a0 5A60     	 str r2,[r3,#4]
 2015              	.L71:
 2016              	.LBE5:
 114:../main.c     **** 		}
 115:../main.c     **** 	}
 116:../main.c     **** 
 117:../main.c     **** }
 2017              	 .loc 5 117 0
 2018 00a2 0C37     	 adds r7,r7,#12
 2019              	.LCFI113:
 2020              	 .cfi_def_cfa_offset 4
 2021 00a4 BD46     	 mov sp,r7
 2022              	.LCFI114:
 2023              	 .cfi_def_cfa_register 13
 2024              	 
 2025 00a6 5DF8047B 	 ldr r7,[sp],#4
 2026              	.LCFI115:
 2027              	 .cfi_restore 7
 2028              	 .cfi_def_cfa_offset 0
 2029 00aa 7047     	 bx lr
 2030              	.L76:
 2031              	 .align 2
 2032              	.L75:
 2033 00ac 00000000 	 .word rxData
 2034 00b0 00000000 	 .word adress
 2035 00b4 00000000 	 .word stanowisko
 2036              	 .cfi_endproc
 2037              	.LFE378:
 2039              	 .text
 2040              	.Letext0:
 2041              	 .file 6 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2042              	 .file 7 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2043              	 .file 8 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2044              	 .file 9 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc/xmc4_scu.h"
 2045              	 .file 10 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc/xmc4_gpio.h"
 2046              	 .file 11 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc/xmc_usic.h"
 2047              	 .file 12 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc/xmc_uart.h"
 2048              	 .file 13 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/XMCLib/inc/xmc_ccu4.h"
 2049              	 .file 14 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 2050              	 .file 15 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/TIMER/timer.h"
 2051              	 .file 16 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DAVE.h"
 2052              	 .file 17 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/CMSIS/Include/core_cm4.h"
 2053              	 .file 18 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 2054              	 .file 19 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 2055              	 .file 20 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/TIMER/timer_extern.h"
 2056              	 .file 21 "C:/Users/Mafish/Documents/XMCDev/MAB_Komputer/Dave/Generated/UART/uart_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.UART_IsTxBusy:00000000 $t
    {standard input}:119    .text.UART_IsTxBusy:00000000 UART_IsTxBusy
    {standard input}:161    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:165    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:205    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:209    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:252    .data.pi:00000000 pi
    {standard input}:249    .data.pi:00000000 $d
    {standard input}:259    .data.l1:00000000 l1
    {standard input}:256    .data.l1:00000000 $d
    {standard input}:266    .data.l2:00000000 l2
    {standard input}:263    .data.l2:00000000 $d
    {standard input}:273    .data.d:00000000 d
    {standard input}:270    .data.d:00000000 $d
    {standard input}:280    .bss.t:00000000 t
    {standard input}:277    .bss.t:00000000 $d
    {standard input}:287    .data.dt:00000000 dt
    {standard input}:284    .data.dt:00000000 $d
                            *COM*:0000000a rxData
                            *COM*:0000000a txData
    {standard input}:295    .data.adress:00000000 adress
    {standard input}:301    .bss.rxByte:00000000 rxByte
    {standard input}:302    .bss.rxByte:00000000 $d
    {standard input}:307    .bss.iterator_wiadomosci:00000000 iterator_wiadomosci
    {standard input}:308    .bss.iterator_wiadomosci:00000000 $d
    {standard input}:313    .data.is_delay:00000000 is_delay
                            *COM*:0000005c stanowisko
    {standard input}:317    .text.wyslij:00000000 $t
    {standard input}:322    .text.wyslij:00000000 wyslij
    {standard input}:374    .text.wyslij:00000034 $d
    {standard input}:381    .text.delay:00000000 $t
    {standard input}:386    .text.delay:00000000 delay
    {standard input}:443    .text.delay:0000003c $d
    {standard input}:449    .text.wyslij_noga:00000000 $t
    {standard input}:454    .text.wyslij_noga:00000000 wyslij_noga
    {standard input}:540    .text.wyslij_noga:0000007c $d
    {standard input}:545    .text.Ik:00000000 $t
    {standard input}:550    .text.Ik:00000000 Ik
    {standard input}:720    .text.Ik:000001d0 $d
    {standard input}:727    .text.update:00000000 $t
    {standard input}:732    .text.update:00000000 update
    {standard input}:832    .text.update:000000f0 $d
    {standard input}:843    .text.FK_Circle:00000000 $t
    {standard input}:848    .text.FK_Circle:00000000 FK_Circle
    {standard input}:879    .text.FK_Circle:0000002c $d
    {standard input}:887    .text.Spring:00000000 $t
    {standard input}:892    .text.Spring:00000000 Spring
    {standard input}:960    .text.Spring:00000078 $d
    {standard input}:967    .text.Init:00000000 $t
    {standard input}:972    .text.Init:00000000 Init
    {standard input}:1102   .text.Init:000000b4 $d
    {standard input}:1109   .text.Raibert_Hopper:00000000 $t
    {standard input}:1114   .text.Raibert_Hopper:00000000 Raibert_Hopper
    {standard input}:1174   .text.Fk:00000000 $t
    {standard input}:1179   .text.Fk:00000000 Fk
    {standard input}:1388   .text.Fk:000001e0 $d
    {standard input}:1397   .text.Trajektoria:00000000 $t
    {standard input}:1402   .text.Trajektoria:00000000 Trajektoria
    {standard input}:1430   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1435   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1466   .text.CCU43_1_IRQHandler:00000014 $d
    {standard input}:1475   .bss.init:00000000 init
    {standard input}:1472   .bss.init:00000000 $d
    {standard input}:1482   .bss.skokz:00000000 skokz
    {standard input}:1479   .bss.skokz:00000000 $d
    {standard input}:1485   .text.skok:00000000 $t
    {standard input}:1490   .text.skok:00000000 skok
    {standard input}:1534   .text.skok:00000024 $d
    {standard input}:1542   .text.main:00000000 $t
    {standard input}:1547   .text.main:00000000 main
    {standard input}:1695   .text.XMC_Check:00000000 XMC_Check
    {standard input}:1612   .text.XMC_Init:00000000 XMC_Init
    {standard input}:1602   .text.main:00000048 $d
    {standard input}:1607   .text.XMC_Init:00000000 $t
    {standard input}:1684   .text.XMC_Init:0000004c $d
    {standard input}:1690   .text.XMC_Check:00000000 $t
    {standard input}:1766   .text.XMC_Check:00000050 $d
    {standard input}:1772   .text.eorx:00000000 $t
    {standard input}:1777   .text.eorx:00000000 eorx
    {standard input}:1907   .text.interpreter_wiadomosci:00000000 interpreter_wiadomosci
    {standard input}:1861   .text.eorx:00000070 $d
    {standard input}:1869   .text.eotx:00000000 $t
    {standard input}:1874   .text.eotx:00000000 eotx
    {standard input}:1902   .text.interpreter_wiadomosci:00000000 $t
    {standard input}:2033   .text.interpreter_wiadomosci:000000ac $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
UART_Transmit
UART_Receive
RS
TIMER_SetTimeInterval
TIMER_Start
TIMER_Stop
DELAY
sqrtf
acosf
asinf
sinf
memcpy
__aeabi_f2d
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_d2f
cosf
atan2f
sin
DAVE_Init
LED1
